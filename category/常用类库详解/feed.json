{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"常用类库详解\" category",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Lombok%E5%B7%A5%E5%85%B7%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Lombok%E5%B7%A5%E5%85%B7%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "title": "Lombok工具库详解",
            "date_published": "2024-01-03T13:13:21.654Z",
            "content_html": "<blockquote>\n<p>Lombok是一款非常实用Java工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>博猪日常最多的也就是CRUD,对于这个网上争议最多的插件来说，网上说的一些争议点没有遇到过，当然归根结底的原因基本上仅仅用到了getter&#x2F;setter方法，同时也让我的对象显得简洁而已，toString和equals没什么用到。<br>另外说一个很重要的原因就是，博猪感觉就是技术是时代的产物，既然存在，那必然也有它存在的道理。所以我并不认为网上说的都对，也不全错，做技术嘛，要有个辩论思维，不要人云亦云嘛。</p>\n<h1 id=\"工作原理\"><a href=\"#工作原理\" class=\"headerlink\" title=\"工作原理\"></a>工作原理</h1><p>Lombok 是一个开源的项目，它提供了一系列的代码生成工具，用于简化 Java 代码的开发。<br>Lombok 的工作原理是通过使用 Java 的反射机制，在编译时生成代码，从而实现自动生成 Setter 和 Getter 方法、toString、equals、hashCode 等方法。<br>具体来说，Lombok 使用了 Java 的注解来标识需要生成的代码，然后在编译时通过反射机制解析这些注解，生成相应的代码。<br>例如，使用 Lombok 的 @Getter 和 @Setter 注解可以生成 Setter 和 Getter 方法，使用 Lombok 的 @ToString 注解可以生成 toString 方法，使用 Lombok 的 @EqualsAndHashCode 注解可以生成 equals 和 hashCode 方法。<br>Lombok 还提供了一些其他的功能，例如生成构造函数、getters 和 setters 的组合、链式设置等。这些功能都可以通过使用 Lombok 的注解来实现。<br>Lombok 的工作原理是基于 Java 的反射机制，在编译时生成代码，从而简化 Java 代码的开发。</p>\n<h1 id=\"Lombok-安装\"><a href=\"#Lombok-安装\" class=\"headerlink\" title=\"Lombok 安装\"></a>Lombok 安装</h1><p>IDEA搜索Lombok插件</p>\n<p class=\"note note-info\">\n<span class=\"label label-primary\"><b>提示</b></span>\n另外需要注意的是，在使用lombok注解的时候记得要导入lombok.jar包到工程，如果使用的是Maven的工程项目的话，要在其pom.xml中添加依赖如下:\n</p>\n\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"Lombok注解说明\"><a href=\"#Lombok注解说明\" class=\"headerlink\" title=\"Lombok注解说明\"></a>Lombok注解说明</h1><ul>\n<li><code>val</code>：用在局部变量前面，相当于将变量声明为final</li>\n<li><code>@NonNull</code>：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出<code>NPE</code>（NullPointerException）</li>\n<li><code>@Cleanup</code>：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成<code>try-finally</code>这样的代码来关闭流</li>\n<li><code>@Getter/@Setter</code>：用在属性上，再也不用自己手写<code>setter</code>和<code>getter</code>方法了，还可以指定访问范围</li>\n<li><code>@ToString</code>：用在类上，可以自动覆写<code>toString</code>方法，当然还可以加其他参数，例如<code>@ToString(exclude=”id”)</code>排除id属性，或者<code>@ToString(callSuper=true, includeFieldNames=true)</code>调用父类的<code>toString</code>方法，包含所有属性</li>\n<li><code>@EqualsAndHashCode</code>：用在类上，自动生成<code>equals</code>方法和<code>hashCode</code>方法</li>\n<li><code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code> and <code>@AllArgsConstructor</code>：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有+ <code>@NonNull属性作为参数的构造函数，如果指定</code>staticName &#x3D; “of”&#96;参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多</li>\n<li><code>@Data</code>：注解在类上，相当于同时使用了<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code>和<code>@RequiredArgsConstrutor</code>这些注解，对于POJO类十分有用</li>\n<li><code>@Value</code>：用在类上，是<code>@Data</code>的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法</li>\n<li><code>@Builder</code>：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用<code>Person.builder().name(&quot;Adam Savage&quot;).city(&quot;San Francisco&quot;).job(&quot;Mythbusters&quot;).job(&quot;Unchained Reaction&quot;).build()</code>;更多说明参考Builder</li>\n<li><code>@SneakyThrows</code>：自动抛受检异常，而无需显式在方法上使用throws语句</li>\n<li><code>@Synchronized</code>：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性<code>$lock</code>或<code>$LOCK</code>，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误</li>\n<li><code>@Getter(lazy=true)</code>：可以替代经典的Double Check Lock样板代码</li>\n<li><code>@Log</code>：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类</li>\n<li><code>@CommonsLog</code> Creates log &#x3D; org.apache.commons.logging.LogFactory.getLog(LogExample.class);</li>\n<li><code>@Log</code> Creates log &#x3D; java.util.logging.Logger.getLogger(LogExample.class.getName());</li>\n<li><code>@Log4j</code> Creates log &#x3D; org.apache.log4j.Logger.getLogger(LogExample.class);</li>\n<li><code>@Log4j2</code> Creates log &#x3D; org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</li>\n<li><code>@Slf4j</code> Creates log &#x3D; org.slf4j.LoggerFactory.getLogger(LogExample.class);</li>\n<li><code>@XSlf4j</code> Creates log &#x3D; org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</li>\n</ul>\n<h1 id=\"Lombok代码示例\"><a href=\"#Lombok代码示例\" class=\"headerlink\" title=\"Lombok代码示例\"></a>Lombok代码示例</h1><h2 id=\"val示例\"><a href=\"#val示例\" class=\"headerlink\" title=\"val示例\"></a>val示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">sets</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;String&gt;();<br>    <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">lists</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>    <span class=\"hljs-type\">val</span> <span class=\"hljs-variable\">maps</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, String&gt;();<br>    <span class=\"hljs-comment\">//=&gt;相当于如下</span><br>    <span class=\"hljs-keyword\">final</span> Set&lt;String&gt; sets2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">final</span> List&lt;String&gt; lists2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">final</span> Map&lt;String, String&gt; maps2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"NonNull示例\"><a href=\"#NonNull示例\" class=\"headerlink\" title=\"@NonNull示例\"></a><code>@NonNull</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">notNullExample</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@NonNull</span> String string)</span> &#123;<br>    string.length();<br>&#125;<br><span class=\"hljs-comment\">//=&gt;相当于</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">notNullExample</span><span class=\"hljs-params\">(String string)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (string != <span class=\"hljs-literal\">null</span>) &#123;<br>        string.length();<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NullPointerException</span>(<span class=\"hljs-string\">&quot;null&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Cleanup示例\"><a href=\"#Cleanup示例\" class=\"headerlink\" title=\"@Cleanup示例\"></a><code>@Cleanup</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-meta\">@Cleanup</span> <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(args[<span class=\"hljs-number\">0</span>]);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class=\"hljs-comment\">//=&gt;相当于</span><br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        inputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(args[<span class=\"hljs-number\">0</span>]);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (inputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Getter-Setter示例\"><a href=\"#Getter-Setter示例\" class=\"headerlink\" title=\"@Getter/@Setter示例\"></a><code>@Getter/@Setter</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Setter(AccessLevel.PUBLIC)</span><br><span class=\"hljs-meta\">@Getter(AccessLevel.PROTECTED)</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br><span class=\"hljs-keyword\">private</span> String shape;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"ToString示例\"><a href=\"#ToString示例\" class=\"headerlink\" title=\"@ToString示例\"></a><code>@ToString</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ToString(exclude = &quot;id&quot;, callSuper = true, includeFieldNames = true)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LombokDemo</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//输出LombokDemo(super=LombokDemo@48524010, name=null, age=0)</span><br>        System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LombokDemo</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"EqualsAndHashCode示例\"><a href=\"#EqualsAndHashCode示例\" class=\"headerlink\" title=\"@EqualsAndHashCode示例\"></a><code>@EqualsAndHashCode</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@EqualsAndHashCode(exclude = &#123;&quot;id&quot;, &quot;shape&quot;&#125;, callSuper = false)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LombokDemo</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-keyword\">private</span> String shape;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor示例\"><a href=\"#NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor示例\" class=\"headerlink\" title=\"@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor示例\"></a><code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code> and <code>@AllArgsConstructor</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@RequiredArgsConstructor(staticName = &quot;of&quot;)</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LombokDemo</span> &#123;<br>    <span class=\"hljs-meta\">@NonNull</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-meta\">@NonNull</span><br>    <span class=\"hljs-keyword\">private</span> String shape;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LombokDemo</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;circle&quot;</span>);<br>        <span class=\"hljs-comment\">//使用静态工厂方法</span><br>        LombokDemo.of(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;circle&quot;</span>);<br>        <span class=\"hljs-comment\">//无参构造</span><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LombokDemo</span>();<br>        <span class=\"hljs-comment\">//包含所有参数</span><br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LombokDemo</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;circle&quot;</span>, <span class=\"hljs-number\">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Data示例\"><a href=\"#Data示例\" class=\"headerlink\" title=\"@Data示例\"></a><code>@Data</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.Data;<br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Menu</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String shopId;<br>    <span class=\"hljs-keyword\">private</span> String skuMenuId;<br>    <span class=\"hljs-keyword\">private</span> String skuName;<br>    <span class=\"hljs-keyword\">private</span> String normalizeSkuName;<br>    <span class=\"hljs-keyword\">private</span> String dishMenuId;<br>    <span class=\"hljs-keyword\">private</span> String dishName;<br>    <span class=\"hljs-keyword\">private</span> String dishNum;<br>    <span class=\"hljs-comment\">//默认阈值</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">thresHold</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//新阈值</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">newThresHold</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>    <span class=\"hljs-comment\">//总得分</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-variable\">totalScore</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Value示例\"><a href=\"#Value示例\" class=\"headerlink\" title=\"@Value示例\"></a><code>@Value</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Value</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">LombokDemo</span> &#123;<br>    <span class=\"hljs-meta\">@NonNull</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-meta\">@NonNull</span><br>    <span class=\"hljs-keyword\">private</span> String shap;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-comment\">//相当于</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> id;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.id;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Builder示例\"><a href=\"#Builder示例\" class=\"headerlink\" title=\"@Builder示例\"></a><code>@Builder</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BuilderExample</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> age;<br>    <span class=\"hljs-meta\">@Singular</span><br>    <span class=\"hljs-keyword\">private</span> Set&lt;String&gt; occupations;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">LombokDemo3</span> <span class=\"hljs-variable\">test</span> <span class=\"hljs-operator\">=</span> LombokDemo3.builder().age(<span class=\"hljs-number\">11</span>).name(<span class=\"hljs-string\">&quot;test&quot;</span>)<br>                .occupation(<span class=\"hljs-string\">&quot;1&quot;</span>)<br>                .occupation(<span class=\"hljs-string\">&quot;2&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>@Singular可以为集合类型的参数或字段生成一种特殊的方法, 它采用修改列表中一个元素而不是整个列表的方式，可以是增加一个元素，也可以是删除一个元素。</p>\n<p>在使用@Singular注释注释一个集合字段（使用@Builder注释类），lombok会将该构建器节点视为一个集合，并生成两个adder方法而不是setter方法。</p>\n<p>生成代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> LombokDemo3.LombokDemo3Builder <span class=\"hljs-title function_\">occupation</span><span class=\"hljs-params\">(String occupation)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.occupations == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-built_in\">this</span>.occupations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>    &#125;<br><br>    <span class=\"hljs-built_in\">this</span>.occupations.add(occupation);<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> LombokDemo3.LombokDemo3Builder <span class=\"hljs-title function_\">occupations</span><span class=\"hljs-params\">(Collection&lt;? extends String&gt; occupations)</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (occupations == <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NullPointerException</span>(<span class=\"hljs-string\">&quot;occupations cannot be null&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.occupations == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-built_in\">this</span>.occupations = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>();<br>        &#125;<br><br>        <span class=\"hljs-built_in\">this</span>.occupations.addAll(occupations);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> LombokDemo3.LombokDemo3Builder <span class=\"hljs-title function_\">clearOccupations</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.occupations != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-built_in\">this</span>.occupations.clear();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Builder-Default\"><a href=\"#Builder-Default\" class=\"headerlink\" title=\"Builder.Default\"></a>Builder.Default</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BuilderDefaultExample</span> &#123;<br><br>    <span class=\"hljs-meta\">@Builder</span>.Default<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">id</span> <span class=\"hljs-operator\">=</span> UUID.randomUUID().toString();<br>    <br>    <span class=\"hljs-keyword\">private</span> String username;<br><br>    <span class=\"hljs-meta\">@Builder</span>.Default<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">insertTime</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"SneakyThrows示例\"><a href=\"#SneakyThrows示例\" class=\"headerlink\" title=\"@SneakyThrows示例\"></a><code>@SneakyThrows</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.SneakyThrows;<br><span class=\"hljs-keyword\">import</span> java.io.FileInputStream;<br><span class=\"hljs-keyword\">import</span> java.io.FileNotFoundException;<br><span class=\"hljs-keyword\">import</span> java.io.InputStream;<br><span class=\"hljs-keyword\">import</span> java.io.UnsupportedEncodingException;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Test</span> &#123;<br>    <span class=\"hljs-meta\">@SneakyThrows()</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-meta\">@SneakyThrows</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnsupportedEncodingException</span>();<br>    &#125;<br>    <span class=\"hljs-comment\">//相当于</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">read</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> FileNotFoundException &#123;<br>        <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">write</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> UnsupportedEncodingException &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UnsupportedEncodingException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Synchronized示例\"><a href=\"#Synchronized示例\" class=\"headerlink\" title=\"@Synchronized示例\"></a><code>@Synchronized</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SynchronizedDemo</span> &#123;<br>    <span class=\"hljs-meta\">@Synchronized</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;world&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-comment\">//相当于</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">$LOCK</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>[<span class=\"hljs-number\">0</span>];<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">hello</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">synchronized</span> ($LOCK) &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;world&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Getter-lazy-true-示例\"><a href=\"#Getter-lazy-true-示例\" class=\"headerlink\" title=\"@Getter(lazy = true)示例\"></a><code>@Getter(lazy = true)</code>示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetterLazyExample</span> &#123;<br>    <span class=\"hljs-meta\">@Getter(lazy = true)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] cached = expensive();<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span>[] expensive() &#123;<br>        <span class=\"hljs-type\">double</span>[] result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[<span class=\"hljs-number\">1000000</span>];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; result.length; i++) &#123;<br>            result[i] = Math.asin(i);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 相当于如下所示: </span><br><br><span class=\"hljs-keyword\">import</span> java.util.concurrent.atomic.AtomicReference;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">GetterLazyExample</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> AtomicReference&lt;java.lang.Object&gt; cached = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AtomicReference</span>&lt;&gt;();<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">double</span>[] getCached() &#123;<br>        java.lang.<span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">value</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.cached.get();<br>        <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">synchronized</span> (<span class=\"hljs-built_in\">this</span>.cached) &#123;<br>                value = <span class=\"hljs-built_in\">this</span>.cached.get();<br>                <span class=\"hljs-keyword\">if</span> (value == <span class=\"hljs-literal\">null</span>) &#123;<br>                    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">double</span>[] actualValue = expensive();<br>                    value = actualValue == <span class=\"hljs-literal\">null</span> ? <span class=\"hljs-built_in\">this</span>.cached : actualValue;<br>                    <span class=\"hljs-built_in\">this</span>.cached.set(value);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-type\">double</span>[]) (value == <span class=\"hljs-built_in\">this</span>.cached ? <span class=\"hljs-literal\">null</span> : value);<br>    &#125;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">double</span>[] expensive() &#123;<br>        <span class=\"hljs-type\">double</span>[] result = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">double</span>[<span class=\"hljs-number\">1000000</span>];<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; result.length; i++) &#123;<br>            result[i] = Math.asin(i);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n\n",
            "tags": [
                "Lombok工具库详解",
                "常用开发库"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/",
            "title": "Spring常用工具类",
            "date_published": "2024-01-03T13:13:21.654Z",
            "content_html": "<blockquote>\n<p>Spring作为常用的开发框架，在Spring框架应用中，排在ApacheCommon，Guava, Huool等通用库后，第二优先级可以考虑使用Spring-core-xxx.jar中的util包。<br>另外对于工具类，要站在高一点的角度知道有哪些，而不是只看到代码… 用的时候具体看下即可)。</p>\n</blockquote>\n<h1 id=\"内置的resouce类型\"><a href=\"#内置的resouce类型\" class=\"headerlink\" title=\"内置的resouce类型\"></a>内置的resouce类型</h1><ul>\n<li>UrlResource</li>\n<li>ClassPathResource</li>\n<li>FileSystemResource</li>\n<li>ServletContextResource</li>\n<li>InputStreamResource</li>\n<li>ByteArrayResource</li>\n<li>EncodedResource 也就是Resource加上encoding, 可以认为是有编码的资源</li>\n<li>VfsResource(在jboss里经常用到, 相应还有 工具类 VfsUtils)</li>\n<li>org.springframework.util.xml.ResourceUtils 用于处理表达资源字符串前缀描述资源的工具. 如: “classpath:”. 有 getURL, getFile, isFileURL, isJarURL, extractJarFileURL</li>\n</ul>\n<h1 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h1><ul>\n<li>org.springframework.core.annotation.AnnotationUtils 处理注解</li>\n<li>org.springframework.core.io.support.PathMatchingResourcePatternResolver 用 于处理 ant 匹配风格,找出所有的资源, 结合上面的resource的概念一起使用,对于遍历文件很有用. 具体请详细查看javadoc</li>\n<li>org.springframework.core.io.support.PropertiesLoaderUtils 加载Properties资源工具类,和Resource结合</li>\n<li>org.springframework.core.BridgeMethodResolver 桥接方法分析器. 关于桥接方法请参考: <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5\">http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5</a></li>\n<li>org.springframework.core.GenericTypeResolver 范型分析器, 在用于对范型方法, 参数分析.</li>\n<li>org.springframework.core.NestedExceptionUtils</li>\n</ul>\n<h2 id=\"xml工具\"><a href=\"#xml工具\" class=\"headerlink\" title=\"# xml工具\"></a><a href=\"#xml%E5%B7%A5%E5%85%B7\">#</a> xml工具</h2><ul>\n<li>org.springframework.util.xml.AbstractStaxContentHandler</li>\n<li>org.springframework.util.xml.AbstractStaxXMLReader</li>\n<li>org.springframework.util.xml.AbstractXMLReader</li>\n<li>org.springframework.util.xml.AbstractXMLStreamReader</li>\n<li>org.springframework.util.xml.DomUtils</li>\n<li>org.springframework.util.xml.SimpleNamespaceContext</li>\n<li>org.springframework.util.xml.SimpleSaxErrorHandler</li>\n<li>org.springframework.util.xml.SimpleTransformErrorListener</li>\n<li>org.springframework.util.xml.StaxUtils</li>\n<li>org.springframework.util.xml.TransformerUtils</li>\n</ul>\n<h2 id=\"其它工具集\"><a href=\"#其它工具集\" class=\"headerlink\" title=\"# 其它工具集\"></a><a href=\"#%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7%E9%9B%86\">#</a> 其它工具集</h2><ul>\n<li>org.springframework.util.AntPathMatcherant风格的处理</li>\n<li>org.springframework.util.AntPathStringMatcher</li>\n<li>org.springframework.util.Assert断言,在我们的参数判断时应该经常用</li>\n<li>org.springframework.util.CachingMapDecorator</li>\n<li>org.springframework.util.ClassUtils用于Class的处理</li>\n<li>org.springframework.util.CollectionUtils用于处理集合的工具</li>\n<li>org.springframework.util.CommonsLogWriter</li>\n<li>org.springframework.util.CompositeIterator</li>\n<li>org.springframework.util.ConcurrencyThrottleSupport</li>\n<li>org.springframework.util.CustomizableThreadCreator</li>\n<li>org.springframework.util.DefaultPropertiesPersister</li>\n<li>org.springframework.util.DigestUtils摘要处理, 这里有用于md5处理信息的</li>\n<li>org.springframework.util.FileCopyUtils文件的拷贝处理, 结合Resource的概念一起来处理, 真的是很方便</li>\n<li>org.springframework.util.FileSystemUtils</li>\n<li>org.springframework.util.LinkedCaseInsensitiveMap key值不区分大小写的LinkedMap</li>\n<li>org.springframework.util.LinkedMultiValueMap一个key可以存放多个值的LinkedMap</li>\n<li>org.springframework.util.Log4jConfigurer一个log4j的启动加载指定配制文件的工具类</li>\n<li>org.springframework.util.NumberUtils处理数字的工具类, 有parseNumber 可以把字符串处理成我们指定的数字格式, 还支持format格式, convertNumberToTargetClass 可以实现Number类型的转化.</li>\n<li>org.springframework.util.ObjectUtils有很多处理null object的方法. 如nullSafeHashCode, nullSafeEquals, isArray, containsElement, addObjectToArray, 等有用的方法</li>\n<li>org.springframework.util.PatternMatchUtilsspring里用于处理简单的匹配. 如 Spring’s typical “xxx”, “xxx” and “xxx” pattern styles</li>\n<li>org.springframework.util.PropertyPlaceholderHelper用于处理占位符的替换</li>\n<li>org.springframework.util.ReflectionUtils反映常用工具方法. 有 findField, setField, getField, findMethod, invokeMethod等有用的方法</li>\n<li>org.springframework.util.SerializationUtils用于java的序列化与反序列化. serialize与deserialize方法</li>\n<li>org.springframework.util.StopWatch一个很好的用于记录执行时间的工具类, 且可以用于任务分阶段的测试时间. 最后支持一个很好看的打印格式. 这个类应该经常用</li>\n<li>org.springframework.util.StringUtils</li>\n<li>org.springframework.util.SystemPropertyUtils</li>\n<li>org.springframework.util.TypeUtils用于类型相容的判断. isAssignable</li>\n<li>org.springframework.util.WeakReferenceMonitor弱引用的监控</li>\n</ul>\n<h2 id=\"和web相关的工具\"><a href=\"#和web相关的工具\" class=\"headerlink\" title=\"# 和web相关的工具\"></a><a href=\"#%E5%92%8Cweb%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B7%A5%E5%85%B7\">#</a> 和web相关的工具</h2><ul>\n<li>org.springframework.web.util.CookieGenerator</li>\n<li>org.springframework.web.util.HtmlCharacterEntityDecoder</li>\n<li>org.springframework.web.util.HtmlCharacterEntityReferences</li>\n<li>org.springframework.web.util.HtmlUtils</li>\n<li>org.springframework.web.util.HttpUrlTemplate<ul>\n<li>这个类用于用字符串模板构建url, 它会自动处理url里的汉字及其它相关的编码. 在读取别人提供的url资源时, 应该经常用</li>\n<li>String url &#x3D; “<a href=\"http://localhost/myapp/%7Bname%7D/%7Bid%7D\">http://localhost/myapp/{name}/{id}</a>“;</li>\n</ul>\n</li>\n<li>org.springframework.web.util.JavaScriptUtils</li>\n<li>org.springframework.web.util.Log4jConfigListener<ul>\n<li>用listener的方式来配制log4j在web环境下的初始化</li>\n</ul>\n</li>\n<li>org.springframework.web.util.UriTemplate</li>\n<li>org.springframework.web.util.UriUtils处理uri里特殊字符的编码</li>\n<li>org.springframework.web.util.WebUtils</li>\n</ul>\n",
            "tags": [
                "常用开发库",
                "工具类",
                "Spring常用工具类"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/%E6%97%A5%E5%BF%97%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/%E6%97%A5%E5%BF%97%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "title": "日志类库详解",
            "date_published": "2024-01-03T13:13:21.654Z",
            "content_html": "<h2 id=\"日志库简介\"><a href=\"#日志库简介\" class=\"headerlink\" title=\"日志库简介\"></a>日志库简介</h2><blockquote>\n<p>我认为全面理解日志库需要从下面三个角度去理解：</p>\n</blockquote>\n<ul>\n<li>最重要的一点是 区分<strong>日志系统</strong>和<strong>日志门面</strong>;</li>\n<li>其次是日志库的使用, 包含配置与API使用；配置侧重于日志系统的配置，API使用侧重于日志门面；</li>\n<li>最后是选型，改造和最佳实践等</li>\n</ul>\n<h1 id=\"日志系统与日志门面的区别\"><a href=\"#日志系统与日志门面的区别\" class=\"headerlink\" title=\"日志系统与日志门面的区别\"></a>日志系统与日志门面的区别</h1><p>日志系统和日志门面是两个不同的概念:</p>\n<ol>\n<li>日志系统(Logging System)是指用于生成和收集日志的整体技术方案和实现,比如 log4j、logback等。它负责日志的生成、收集、存储、查询等完整功能。</li>\n<li>日志门面(Logging Facade)是在日志系统之上,提供一个简单、统一的日志接口,用来屏蔽不同日志系统API的差异。<br>其主要区别是:</li>\n</ol>\n<ul>\n<li>日志系统负责完整的日志功能,而日志门面只是简化和统一接口。</li>\n<li>开发人员面对的是日志门面,而日志系统在后台运行。</li>\n<li>如果更换日志系统,只需要更换门面实现,对使用日志的代码无影响。</li>\n<li>日志门面简化了日志使用,系统可轻松切换日志实现。</li>\n</ul>\n<p>所以日志系统是基础实现,日志门面提供简单统一的封装,作为开发人员的接口。日志门面屏蔽了不同系统的差异,使得切换日志系统对代码无影响。两者在日志功能支撑上的职责不同,日志门面建立在日志系统之上,为其提供友好的高级接口。</p>\n<h1 id=\"日志系统\"><a href=\"#日志系统\" class=\"headerlink\" title=\"日志系统\"></a>日志系统</h1><h2 id=\"JUL-java-util-logging\"><a href=\"#JUL-java-util-logging\" class=\"headerlink\" title=\"JUL(java.util.logging )\"></a>JUL(java.util.logging )</h2><p>JDK1.4 开始，通过 java.util.logging 提供日志功能。虽然是官方自带的log lib，JUL的使用确不广泛。主要原因:</p>\n<ul>\n<li>JUL从JDK1.4 才开始加入(2002年)，当时各种第三方log lib已经被广泛使用了</li>\n<li>JUL早期存在性能问题，到JDK1.5上才有了不错的进步，但现在和Logback&#x2F;Log4j2相比还是有所不如</li>\n<li>JUL的功能不如Logback&#x2F;Log4j2等完善，比如Output Handler就没有Logback&#x2F;Log4j2的丰富，有时候需要自己来继承定制，又比如默认没有从ClassPath里加载配置文件的功能</li>\n</ul>\n<h2 id=\"Log4j\"><a href=\"#Log4j\" class=\"headerlink\" title=\"Log4j\"></a>Log4j</h2><p>Log4j 是 apache 的一个开源项目，创始人 Ceki Gulcu。Log4j 应该说是 Java 领域资格最老，应用最广的日志工具。Log4j 是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制，以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX 系统日志等。</p>\n<p>Log4j 中有三个主要组成部分：</p>\n<ul>\n<li>loggers - 负责捕获记录信息。</li>\n<li>appenders - 负责发布日志信息，以不同的首选目的地。</li>\n<li>layouts - 负责格式化不同风格的日志信息。</li>\n</ul>\n<p>官网地址：<a href=\"http://logging.apache.org/log4j/2.x/\">http://logging.apache.org/log4j/2.x/</a></p>\n<p>Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。</p>\n<h2 id=\"Logback\"><a href=\"#Logback\" class=\"headerlink\" title=\"Logback\"></a>Logback</h2><p>Logback 是由 log4j 创始人 Ceki Gulcu 设计的又一个开源日志组件，是作为 Log4j 的继承者来开发的，提供了性能更好的实现，异步 logger，Filter等更多的特性。</p>\n<p>logback 当前分成三个模块：logback-core、logback-classic 和 logback-access。</p>\n<ul>\n<li>logback-core - 是其它两个模块的基础模块。</li>\n<li>logback-classic - 是 log4j 的一个 改良版本。此外 logback-classic 完整实现 SLF4J API 使你可以很方便地更换成其它日志系统如 log4j 或 JDK14 Logging。</li>\n<li>logback-access - 访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。</li>\n</ul>\n<p>官网地址: <a href=\"http://logback.qos.ch/\">http://logback.qos.ch/</a></p>\n<h2 id=\"Log4j2\"><a href=\"#Log4j2\" class=\"headerlink\" title=\"Log4j2\"></a>Log4j2</h2><p>维护 Log4j 的人为了性能又搞出了 Log4j2。</p>\n<p>Log4j2 和 Log4j1.x 并不兼容，设计上很大程度上模仿了 SLF4J&#x2F;Logback，性能上也获得了很大的提升。</p>\n<p>Log4j2 也做了 Facade&#x2F;Implementation 分离的设计，分成了 log4j-api 和 log4j-core。</p>\n<p>官网地址: <a href=\"http://logging.apache.org/log4j/2.x/\">http://logging.apache.org/log4j/2.x/</a></p>\n<h2 id=\"对比-Log4j-vs-Logback-vs-Log4j2\"><a href=\"#对比-Log4j-vs-Logback-vs-Log4j2\" class=\"headerlink\" title=\"对比(Log4j vs Logback vs Log4j2)\"></a>对比(Log4j vs Logback vs Log4j2)</h2><blockquote>\n<p>从性能上Log4J2要强，但从生态上Logback+SLF4J优先</p>\n</blockquote>\n<h3 id=\"历史漫谈\"><a href=\"#历史漫谈\" class=\"headerlink\" title=\"历史漫谈\"></a>历史漫谈</h3><blockquote>\n<p>logback和log4j2都宣称自己是log4j的后代，一个是出于同一个作者，另一个则是在名字上根正苗红。</p>\n</blockquote>\n<h3 id=\"简单对比\"><a href=\"#简单对比\" class=\"headerlink\" title=\"简单对比\"></a>简单对比</h3><ul>\n<li>log4j2比logback更新<br>  log4j2的GA版在2014年底才推出，比logback晚了好几年，这期间log4j2确实吸收了slf4j和logback的一些优点（比如日志模板），同时应用了不少的新技术</li>\n<li>由于采用了更先进的锁机制和LMAX Disruptor库，log4j2的性能优于logback，特别是在多线程环境下和使用异步日志的环境下</li>\n<li>二者都支持Filter（应该说是log4j2借鉴了logback的Filter），能够实现灵活的日志记录规则（例如仅对一部分用户记录debug级别的日志）</li>\n<li>二者都支持对配置文件的动态更新</li>\n<li>二者都能够适配slf4j，logback与slf4j的适配应该会更好一些，毕竟省掉了一层适配库</li>\n<li>logback能够自动压缩&#x2F;删除旧日志</li>\n<li>logback提供了对日志的HTTP访问功能</li>\n<li>log4j2实现了“无垃圾”和“低垃圾”模式。<br>  简单地说，log4j2在记录日志时，能够重用对象（如String等），尽可能避免实例化新的临时对象，减少因日志记录产生的垃圾对象，减少垃圾回收带来的性能下降</li>\n<li>log4j2和logback各有长处，总体来说，如果对性能要求比较高的话，log4j2相对还是较优的选择。</li>\n</ul>\n<h3 id=\"性能对比\"><a href=\"#性能对比\" class=\"headerlink\" title=\"性能对比\"></a>性能对比</h3><blockquote>\n<p>附上log4j2与logback性能对比的benchmark，这份benchmark是Apache Logging出的，有多大水分不知道，仅供参考</p>\n</blockquote>\n<p><a href=\"https://logging.apache.org/log4j/2.x/performance.html\">官方benchmark</a></p>\n<h1 id=\"日志门面\"><a href=\"#日志门面\" class=\"headerlink\" title=\"日志门面\"></a>日志门面</h1><h2 id=\"common-logging\"><a href=\"#common-logging\" class=\"headerlink\" title=\"common-logging\"></a>common-logging</h2><blockquote>\n<p>common-logging 是 apache 的一个开源项目。也称Jakarta Commons Logging，缩写 JCL。</p>\n</blockquote>\n<p>common-logging 的功能是提供日志功能的 API 接口，本身并不提供日志的具体实现（当然，common-logging 内部有一个 Simple logger 的简单实现，但是功能很弱，直接忽略），而是在运行时动态的绑定日志实现组件来工作（如 log4j、java.util.loggin）。</p>\n<p><a href=\"http://commons.apache.org/proper/commons-logging/\">官网地址</a></p>\n<h2 id=\"slf4j\"><a href=\"#slf4j\" class=\"headerlink\" title=\"slf4j\"></a>slf4j</h2><blockquote>\n<p>全称为 Simple Logging Facade for Java，即 java 简单日志门面。</p>\n</blockquote>\n<p>很不凑巧，作者又是 Ceki Gulcu！这位大神写了 Log4j、Logback 和 slf4j，专注日志组件开发五百年，一直只能超越自己。</p>\n<p>类似于 Common-Logging，slf4j 是对不同日志框架提供的一个 API 封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。但是，slf4j 在编译时静态绑定真正的 Log 库。使用 SLF4J 时，如果你需要使用某一种日志实现，那么你必须选择正确的 SLF4J 的 jar 包的集合（各种桥接包）。</p>\n<p><a href=\"http://www.slf4j.org/\">官网地址</a></p>\n<p>官网各版本桥接包如下：</p>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/07/18/b64bbdd30747ad98.png\"></p>\n<h2 id=\"对比-common-logging-vs-slf4j\"><a href=\"#对比-common-logging-vs-slf4j\" class=\"headerlink\" title=\"对比( common-logging vs slf4j )\"></a>对比( common-logging vs slf4j )</h2><blockquote>\n<p>slf4j 库类似于 Apache Common-Logging。但是，他在编译时静态绑定真正的日志库。这点似乎很麻烦，其实也不过是导入桥接 jar 包而已。</p>\n</blockquote>\n<p>slf4j 一大亮点是提供了更方便的日志记录方式：</p>\n<p>不需要使用logger.isDebugEnabled()来解决日志因为字符拼接产生的性能问题。slf4j 的方式是使用{}作为字符串替换符，形式如下：</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">logger.<span class=\"hljs-keyword\">debug</span>(&quot;id: &#123;&#125;, name: &#123;&#125; &quot;, id, <span class=\"hljs-type\">name</span>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"日志库使用方案\"><a href=\"#日志库使用方案\" class=\"headerlink\" title=\"日志库使用方案\"></a>日志库使用方案</h1><p>使用日志解决方案基本可分为三步：</p>\n<ul>\n<li>引入 jar 包</li>\n<li>配置</li>\n<li>使用 API</li>\n</ul>\n<p>常见的各种日志解决方案的第 2 步和第 3 步基本一样，实施上的差别主要在第 1 步，也就是使用不同的库。</p>\n<h2 id=\"日志库jar包方案\"><a href=\"#日志库jar包方案\" class=\"headerlink\" title=\"日志库jar包方案\"></a>日志库jar包方案</h2><p>这里首选推荐使用 slf4j + logback 的组合。</p>\n<p>如果你习惯了 common-logging，可以选择 common-logging+log4j。</p>\n<p>强烈建议不要直接使用日志实现组件(logback、log4j、java.util.logging)，理由前面也说过，就是无法灵活替换日志库。</p>\n<p>还有一种情况：你的老项目使用了 common-logging，或是直接使用日志实现组件。如果修改老的代码，工作量太大，需要兼容处理。在下文，都将看到各种应对方法。</p>\n<blockquote>\n<p>注： slf4j 不可以桥接到 common-logging，当前项目及使用的相关框架好像没有这种配置形式，当然这也不能代表绝对的关系。</p>\n</blockquote>\n<h3 id=\"slf4j-直接绑定日志组件\"><a href=\"#slf4j-直接绑定日志组件\" class=\"headerlink\" title=\"slf4j 直接绑定日志组件\"></a>slf4j 直接绑定日志组件</h3><h4 id=\"slf4j-logback\"><a href=\"#slf4j-logback\" class=\"headerlink\" title=\"slf4j + logback\"></a>slf4j + logback</h4><p>添加依赖到 pom.xml 中即可。</p>\n<p>logback-classic-1.0.13.jar 会自动将 slf4j-api-1.7.21.jar 和 logback-core-1.0.13.jar 也添加到你的项目中。<br>当然你也可以显式的依赖一下这两个桥接包。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>logback-classic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.0.13<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"slf4j-log4j\"><a href=\"#slf4j-log4j\" class=\"headerlink\" title=\"slf4j + log4j\"></a>slf4j + log4j</h4><p>添加依赖到 pom.xml 中即可。</p>\n<p>slf4j-log4j12-1.7.21.jar 会自动将 slf4j-api-1.7.21.jar 和 log4j-1.2.17.jar 也添加到你的项目中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>slf4j-log4j12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"slf4j-java-util-logging-JUL\"><a href=\"#slf4j-java-util-logging-JUL\" class=\"headerlink\" title=\"slf4j +  java.util.logging(JUL)\"></a>slf4j +  java.util.logging(JUL)</h4><p>添加依赖到 pom.xml 中即可。</p>\n<p>slf4j-jdk14-1.7.21.jar 会自动将 slf4j-api-1.7.21.jar 也添加到你的项目中。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>slf4j-jdk14<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.21<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"slf4j-兼容非-slf4j-日志组件\"><a href=\"#slf4j-兼容非-slf4j-日志组件\" class=\"headerlink\" title=\"slf4j 兼容非 slf4j 日志组件\"></a>slf4j 兼容非 slf4j 日志组件</h3><p>在介绍解决方案前，先提一个概念——桥接</p>\n<h4 id=\"什么是桥接呢\"><a href=\"#什么是桥接呢\" class=\"headerlink\" title=\"什么是桥接呢\"></a>什么是桥接呢</h4><p>假如你正在开发应用程序所调用的组件当中已经使用了 common-logging，这时你需要 jcl-over-slf4j.jar 把日志信息输出重定向到 slf4j-api，slf4j-api 再去调用 slf4j 实际依赖的日志组件。这个过程称为桥接。下图是官方的 slf4j 桥接策略图：<br><img src=\"https://s3.bmp.ovh/imgs/2023/07/18/2cf0a2b4dc6875d5.png\"></p>\n<p>从图中应该可以看出，无论你的老项目中使用的是 common-logging 或是直接使用 log4j、java.util.logging，都可以使用对应的桥接 jar 包来解决兼容问题。</p>\n<h4 id=\"slf4j-兼容-common-logging\"><a href=\"#slf4j-兼容-common-logging\" class=\"headerlink\" title=\"slf4j 兼容 common-logging\"></a>slf4j 兼容 common-logging</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"slf4j-兼容-log4j\"><a href=\"#slf4j-兼容-log4j\" class=\"headerlink\" title=\"slf4j 兼容 log4j\"></a>slf4j 兼容 log4j</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>slf4j 兼容 java.util.logging</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jul-to-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.7.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Spring-Framework-logging-框架演变\"><a href=\"#Spring-Framework-logging-框架演变\" class=\"headerlink\" title=\"Spring Framework logging 框架演变\"></a>Spring Framework logging 框架演变</h4><table>\n<thead>\n<tr>\n<th>版本</th>\n<th>日志门面</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.x ~ 3.x</td>\n<td>Commons Logging</td>\n<td>Log4j</td>\n</tr>\n<tr>\n<td>4.0+</td>\n<td>JCL (Jakarta Commons Logging)</td>\n<td>Log4j —&gt; Log4j2&#x2F;Logback</td>\n</tr>\n</tbody></table>\n<h4 id=\"Spring-Boot-logging-框架演变\"><a href=\"#Spring-Boot-logging-框架演变\" class=\"headerlink\" title=\"Spring Boot logging 框架演变\"></a>Spring Boot logging 框架演变</h4><table>\n<thead>\n<tr>\n<th>版本</th>\n<th>日志门面</th>\n<th>日志实现</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1.x</td>\n<td>JCL</td>\n<td>Logback</td>\n</tr>\n<tr>\n<td>2.x</td>\n<td></td>\n<td>JCL Logback —&gt; Log4j2</td>\n</tr>\n</tbody></table>\n<p>总结一下日志框架演变:</p>\n<ul>\n<li>Spring Framework从早期common-logging + log4j,到JCL桥接日志实现</li>\n<li>Spring Boot直接使用JCL + logback,后支持切换到log4j2</li>\n</ul>\n<h4 id=\"common-logging-绑定日志组件\"><a href=\"#common-logging-绑定日志组件\" class=\"headerlink\" title=\"common-logging 绑定日志组件\"></a>common-logging 绑定日志组件</h4><ul>\n<li>common-logging + log4j</li>\n</ul>\n<p>添加依赖到 pom.xml 中即可。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>commons-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>commons-logging<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.17<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"日志库配置-针对于日志框架\"><a href=\"#日志库配置-针对于日志框架\" class=\"headerlink\" title=\"日志库配置 - 针对于日志框架\"></a>日志库配置 - 针对于日志框架</h2><h3 id=\"log4j2-配置\"><a href=\"#log4j2-配置\" class=\"headerlink\" title=\"log4j2 配置\"></a>log4j2 配置</h3><h4 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span>;<br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Configuration</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Properties</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name1&quot;</span>&gt;</span>value<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">property</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name2&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;value2&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Properties</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;type&quot;</span> <span class=\"hljs-attr\">...</span> /&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appenders</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appender</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;type&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;type&quot;</span> <span class=\"hljs-attr\">...</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appender</span>&gt;</span><br>    ...<br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appenders</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loggers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;name1&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;type&quot;</span> <span class=\"hljs-attr\">...</span> /&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Logger</span>&gt;</span><br>    ...<br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;level&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;name&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Root</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Loggers</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"配置示例\"><a href=\"#配置示例\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Configuration</span> <span class=\"hljs-attr\">status</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">strict</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;XMLConfigTest&quot;</span></span><br><span class=\"hljs-tag\">               <span class=\"hljs-attr\">packages</span>=<span class=\"hljs-string\">&quot;org.apache.logging.log4j.test&quot;</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Properties</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;filename&quot;</span>&gt;</span>target/test.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Property</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Properties</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;ThresholdFilter&quot;</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;trace&quot;</span>/&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appenders</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appender</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;Console&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;PatternLayout&quot;</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%m MDC%X%n&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;MarkerFilter&quot;</span> <span class=\"hljs-attr\">marker</span>=<span class=\"hljs-string\">&quot;FLOW&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;MarkerFilter&quot;</span> <span class=\"hljs-attr\">marker</span>=<span class=\"hljs-string\">&quot;EXCEPTION&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appender</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appender</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;Console&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;FLOW&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;PatternLayout&quot;</span> <span class=\"hljs-attr\">pattern</span>=<span class=\"hljs-string\">&quot;%C&#123;1&#125;.%M %m %ex%n&quot;</span>/&gt;</span><span class=\"hljs-comment\">&lt;!-- class and line number --&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filters</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;MarkerFilter&quot;</span> <span class=\"hljs-attr\">marker</span>=<span class=\"hljs-string\">&quot;FLOW&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;NEUTRAL&quot;</span>/&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;MarkerFilter&quot;</span> <span class=\"hljs-attr\">marker</span>=<span class=\"hljs-string\">&quot;EXCEPTION&quot;</span> <span class=\"hljs-attr\">onMatch</span>=<span class=\"hljs-string\">&quot;ACCEPT&quot;</span> <span class=\"hljs-attr\">onMismatch</span>=<span class=\"hljs-string\">&quot;DENY&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filters</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appender</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Appender</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;File&quot;</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;File&quot;</span> <span class=\"hljs-attr\">fileName</span>=<span class=\"hljs-string\">&quot;$&#123;filename&#125;&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Layout</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;PatternLayout&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Pattern</span>&gt;</span>%d %p %C&#123;1.&#125; [%t] %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Pattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Layout</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appender</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Appenders</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Loggers</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;org.apache.logging.log4j.test1&quot;</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">additivity</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Filter</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;ThreadContextMapFilter&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">KeyValuePair</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;test&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;123&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Filter</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Logger</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;org.apache.logging.log4j.test2&quot;</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;debug&quot;</span> <span class=\"hljs-attr\">additivity</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;File&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Logger</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;trace&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">AppenderRef</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Root</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Loggers</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"logback-配置\"><a href=\"#logback-配置\" class=\"headerlink\" title=\"logback 配置\"></a>logback 配置</h3><h4 id=\"配置示例-1\"><a href=\"#配置示例-1\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-comment\">&lt;!-- logback中一共有5种有效级别，分别是TRACE、DEBUG、INFO、WARN、ERROR，优先级依次从低到高 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span> <span class=\"hljs-attr\">scan</span>=<span class=\"hljs-string\">&quot;true&quot;</span> <span class=\"hljs-attr\">scanPeriod</span>=<span class=\"hljs-string\">&quot;60 seconds&quot;</span> <span class=\"hljs-attr\">debug</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;DIR_NAME&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;spring-helloworld&quot;</span>/&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- 将记录日志打印到控制台 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- RollingFileAppender begin --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;ALL&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/all.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>30MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;ERROR&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>ERROR<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;WARN&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>WARN<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;INFO&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>INFO<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;DEBUG&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/debug.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>DEBUG<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;TRACE&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/trace.%d&#123;yyyy-MM-dd&#125;.log<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span>&gt;</span>TRACE<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">level</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMatch</span>&gt;</span>ACCEPT<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMatch</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">onMismatch</span>&gt;</span>DENY<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">onMismatch</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;SPRING&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">rollingPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/springframework.%d&#123;yyyy-MM-dd&#125;.log<br>      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">fileNamePattern</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxHistory</span>&gt;</span>30<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxHistory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">rollingPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">triggeringPolicy</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">maxFileSize</span>&gt;</span>10MB<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">maxFileSize</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">triggeringPolicy</span>&gt;</span><br> <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">encoder</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">pattern</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">encoder</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- RollingFileAppender end --&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- logger begin --&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- 本项目的日志记录，分级打印 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;com.example.test&quot;</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;TRACE&quot;</span> <span class=\"hljs-attr\">additivity</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;ERROR&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;WARN&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;INFO&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;TRACE&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">logger</span>&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- SPRING框架日志 --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;org.springframework&quot;</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;WARN&quot;</span> <span class=\"hljs-attr\">additivity</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;SPRING&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">logger</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span> <span class=\"hljs-attr\">level</span>=<span class=\"hljs-string\">&quot;TRACE&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;ALL&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- logger end --&gt;</span><br> <br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"log4j-配置\"><a href=\"#log4j-配置\" class=\"headerlink\" title=\"log4j 配置\"></a>log4j 配置</h3><h4 id=\"配置示例-2\"><a href=\"#配置示例-2\" class=\"headerlink\" title=\"配置示例\"></a>配置示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">log4j</span>:configuration <span class=\"hljs-keyword\">SYSTEM</span> <span class=\"hljs-string\">&quot;log4j.dtd&quot;</span>&gt;</span><br> <br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">log4j:configuration</span> <span class=\"hljs-attr\">xmlns:log4j</span>=<span class=\"hljs-string\">&#x27;http://jakarta.apache.org/log4j/&#x27;</span>&gt;</span><br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;ConversionPattern&quot;</span></span><br><span class=\"hljs-tag\">             <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS\\&#125; [%-5p] [%t] %c&#123;36\\&#125;.%M - %m%n&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span><br> <br>    <span class=\"hljs-comment\">&lt;!--过滤器设置输出的级别--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">filter</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.log4j.varia.LevelRangeFilter&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;levelMin&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;debug&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;levelMax&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;fatal&quot;</span>/&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;AcceptOnMatch&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">filter</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br> <br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;ALL&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.log4j.DailyRollingFileAppender&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;File&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;$&#123;user.dir&#125;/logs/spring-common/jcl/all&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;Append&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;true&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 每天重新生成日志文件 --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;DatePattern&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;&#x27;-&#x27;yyyy-MM-dd&#x27;.log&#x27;&quot;</span>/&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- 每小时重新生成日志文件 --&gt;</span><br>    <span class=\"hljs-comment\">&lt;!--&lt;param name=&quot;DatePattern&quot; value=&quot;&#x27;-&#x27;yyyy-MM-dd-HH&#x27;.log&#x27;&quot;/&gt;--&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">layout</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">param</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;ConversionPattern&quot;</span></span><br><span class=\"hljs-tag\">             <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS\\&#125; [%-5p] [%t] %c&#123;36\\&#125;.%M - %m%n&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">layout</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">appender</span>&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">logger</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;com.example.test&quot;</span> <span class=\"hljs-attr\">additivity</span>=<span class=\"hljs-string\">&quot;false&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;error&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;ALL&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">logger</span>&gt;</span><br> <br>  <span class=\"hljs-comment\">&lt;!-- 根logger的设置--&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">root</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">level</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;warn&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">appender-ref</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">&quot;STDOUT&quot;</span>/&gt;</span><br>  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">root</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"日志库API-针对于日志门面\"><a href=\"#日志库API-针对于日志门面\" class=\"headerlink\" title=\"日志库API - 针对于日志门面\"></a>日志库API - 针对于日志门面</h2><h4 id=\"slf4j-用法\"><a href=\"#slf4j-用法\" class=\"headerlink\" title=\"slf4j 用法\"></a>slf4j 用法</h4><p>使用 slf4j 的 API 很简单。使用LoggerFactory初始化一个Logger实例，然后调用 Logger 对应的打印等级函数就行了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.slf4j.Logger;<br><span class=\"hljs-keyword\">import</span> org.slf4j.LoggerFactory;<br> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">App</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(App.class);<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;print log, current level: &#123;&#125;&quot;</span>;<br>        log.trace(msg, <span class=\"hljs-string\">&quot;trace&quot;</span>);<br>        log.debug(msg, <span class=\"hljs-string\">&quot;debug&quot;</span>);<br>        log.info(msg, <span class=\"hljs-string\">&quot;info&quot;</span>);<br>        log.warn(msg, <span class=\"hljs-string\">&quot;warn&quot;</span>);<br>        log.error(msg, <span class=\"hljs-string\">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"common-logging-用法\"><a href=\"#common-logging-用法\" class=\"headerlink\" title=\"common-logging 用法\"></a>common-logging 用法</h4><p>common-logging 用法和 slf4j 几乎一样，但是支持的打印等级多了一个更高级别的：fatal。</p>\n<p>此外，common-logging 不支持{}替换参数，你只能选择拼接字符串这种方式了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> org.apache.commons.logging.Log;<br><span class=\"hljs-keyword\">import</span> org.apache.commons.logging.LogFactory;<br> <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JclTest</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Log</span> <span class=\"hljs-variable\">log</span> <span class=\"hljs-operator\">=</span> LogFactory.getLog(JclTest.class);<br> <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">msg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;print log, current level: &quot;</span>;<br>        log.trace(msg + <span class=\"hljs-string\">&quot;trace&quot;</span>);<br>        log.debug(msg + <span class=\"hljs-string\">&quot;debug&quot;</span>);<br>        log.info(msg + <span class=\"hljs-string\">&quot;info&quot;</span>);<br>        log.warn(msg + <span class=\"hljs-string\">&quot;warn&quot;</span>);<br>        log.error(msg + <span class=\"hljs-string\">&quot;error&quot;</span>);<br>        log.fatal(msg + <span class=\"hljs-string\">&quot;fatal&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"日志库选型与改造\"><a href=\"#日志库选型与改造\" class=\"headerlink\" title=\"日志库选型与改造\"></a>日志库选型与改造</h1><h2 id=\"对Java日志组件选型的建议\"><a href=\"#对Java日志组件选型的建议\" class=\"headerlink\" title=\"对Java日志组件选型的建议\"></a>对Java日志组件选型的建议</h2><p>slf4j已经成为了Java日志组件的明星选手，可以完美替代JCL，使用JCL桥接库也能完美兼容一切使用JCL作为日志门面的类库，现在的新系统已经没有不使用slf4j作为日志API的理由了。</p>\n<p>日志记录服务方面，log4j在功能上输于logback和log4j2，在性能方面log4j2则全面超越log4j和logback。所以新系统应该在logback和log4j2中做出选择，对于性能有很高要求的系统，应优先考虑log4j2。</p>\n<h2 id=\"对日志架构使用比较好的实践\"><a href=\"#对日志架构使用比较好的实践\" class=\"headerlink\" title=\"对日志架构使用比较好的实践\"></a>对日志架构使用比较好的实践</h2><h3 id=\"建议使用Log-Facade，而不是具体Log-Implementation\"><a href=\"#建议使用Log-Facade，而不是具体Log-Implementation\" class=\"headerlink\" title=\"建议使用Log Facade，而不是具体Log Implementation\"></a>建议使用Log Facade，而不是具体Log Implementation</h3><p>正如之前所说的，使用 Log Facade 可以方便的切换具体的日志实现。而且，如果依赖多个项目，使用了不同的Log Facade，还可以方便的通过 Adapter 转接到同一个实现上。如果依赖项目使用了多个不同的日志实现，就麻烦的多了。</p>\n<p>具体来说，现在推荐使用 Log4j-API 或者 SLF4j，不推荐继续使用 JCL。</p>\n<h3 id=\"尽量使用一个-Log-Implementation依赖\"><a href=\"#尽量使用一个-Log-Implementation依赖\" class=\"headerlink\" title=\"尽量使用一个 Log Implementation依赖\"></a>尽量使用一个 Log Implementation依赖</h3><p>毫无疑问，项目中应该只使用一个具体的 Log Implementation，建议使用 Logback 或者Log4j2。如果有依赖的项目中，使用的 Log Facade不支持直接使用当前的 Log Implementation，就添加合适的桥接器依赖。具体的桥接关系可以看上一篇文章的图。</p>\n<h3 id=\"具体的日志实现依赖应该设置为optional和使用runtime-scope\"><a href=\"#具体的日志实现依赖应该设置为optional和使用runtime-scope\" class=\"headerlink\" title=\"具体的日志实现依赖应该设置为optional和使用runtime scope\"></a>具体的日志实现依赖应该设置为optional和使用runtime scope</h3><p>在项目中，Log Implementation的依赖强烈建议设置为runtime scope，并且设置为optional。<br>例如项目中使用了 SLF4J 作为 Log Facade，然后想使用 Log4j2 作为 Implementation，那么使用 maven 添加依赖的时候这样设置:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;log4j.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>runtime<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.logging.log4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-slf4j-impl<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>$&#123;log4j.version&#125;<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>runtime<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>设为optional，依赖不会传递，这样如果你是个lib项目，然后别的项目使用了你这个lib，不会被引入不想要的Log Implementation 依赖；</li>\n<li>Scope设置为runtime，是为了防止开发人员在项目中直接使用Log Implementation中的类，而不适用Log Facade中的类。</li>\n</ul>\n<h3 id=\"如果有必要-排除依赖的第三方库中的Log-Impementation依赖\"><a href=\"#如果有必要-排除依赖的第三方库中的Log-Impementation依赖\" class=\"headerlink\" title=\"如果有必要, 排除依赖的第三方库中的Log Impementation依赖\"></a>如果有必要, 排除依赖的第三方库中的Log Impementation依赖</h3><p>这是很常见的一个问题，第三方库的开发者未必会把具体的日志实现或者桥接器的依赖设置为optional，然后你的项目继承了这些依赖——具体的日志实现未必是你想使用的，比如他依赖了Log4j，你想使用Logback，这时就很尴尬。另外，如果不同的第三方依赖使用了不同的桥接器和Log实现，也极容易形成环。</p>\n<p>这种情况下，推荐的处理方法，是使用exclude来排除所有的这些Log实现和桥接器的依赖，只保留第三方库里面对Log Facade的依赖。</p>\n<p>比如阿里的JStorm就没有很好的处理这个问题，依赖jstorm会引入对Logback和log4j-over-slf4j的依赖，如果你想在自己的项目中使用Log4j或其他Log实现的话，就需要加上excludes:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba.jstorm<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jstorm-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.1.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusions</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>log4j-over-slf4j<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">exclusion</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>ch.qos.logback<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>logback-classic<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusion</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">exclusions</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"避免为不会输出的log付出代价\"><a href=\"#避免为不会输出的log付出代价\" class=\"headerlink\" title=\"避免为不会输出的log付出代价\"></a>避免为不会输出的log付出代价</h3><p>Log库都可以灵活的设置输出界别，所以每一条程序中的log，都是有可能不会被输出的。这时候要注意不要额外的付出代价。</p>\n<p>先看两个有问题的写法：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">logger.<span class=\"hljs-built_in\">debug</span>(<span class=\"hljs-string\">&quot;start process request, url: &quot;</span> + url);<br>logger.<span class=\"hljs-built_in\">debug</span>(<span class=\"hljs-string\">&quot;receive request: &#123;&#125;&quot;</span>, toJson(request));<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>第一条是直接做了字符串拼接，所以即使日志级别高于debug也会做一个字符串连接操作；</li>\n<li>第二条虽然用了SLF4J&#x2F;Log4j2 中的懒求值方式来避免不必要的字符串拼接开销，但是toJson()这个函数却是都会被调用并且开销更大。</li>\n</ul>\n<p>推荐的写法如下:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">logger.debug(<span class=\"hljs-string\">&quot;start process request, url:&#123;&#125;&quot;</span>, url); <span class=\"hljs-comment\">// SLF4J/LOG4J2</span><br>logger.debug(<span class=\"hljs-string\">&quot;receive request: &#123;&#125;&quot;</span>, <span class=\"hljs-literal\">()</span> -&gt; <span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">request</span>)</span>); <span class=\"hljs-comment\">// LOG4J2</span><br>logger.debug(<span class=\"hljs-literal\">()</span> -&gt; <span class=\"hljs-string\">&quot;receive request: &quot;</span> + <span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">request</span>)</span>); <span class=\"hljs-comment\">// LOG4J2</span><br><span class=\"hljs-keyword\">if</span> (logger.is<span class=\"hljs-constructor\">DebugEnabled()</span>) &#123; <span class=\"hljs-comment\">// SLF4J/LOG4J2</span><br>    logger.debug(<span class=\"hljs-string\">&quot;receive request: &quot;</span> + <span class=\"hljs-keyword\">to</span><span class=\"hljs-constructor\">Json(<span class=\"hljs-params\">request</span>)</span>); <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"日志格式中最好不要使用行号，函数名等字段\"><a href=\"#日志格式中最好不要使用行号，函数名等字段\" class=\"headerlink\" title=\"日志格式中最好不要使用行号，函数名等字段\"></a>日志格式中最好不要使用行号，函数名等字段</h3><p>原因是，为了获取语句所在的函数名，或者行号，log库的实现都是获取当前的stacktrace，然后分析取出这些信息，而获取stacktrace的代价是很昂贵的。如果有很多的日志输出，就会占用大量的CPU。在没有特殊需要的情况下，建议不要在日志中输出这些这些字段。</p>\n<p>最后， log中不要输出稀奇古怪的字符！</p>\n<p>部分开发人员为了方便看到自己的log，会在log语句中加上醒目的前缀，比如:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">logger.<span class=\"hljs-built_in\">debug</span>(<span class=\"hljs-string\">&quot;========================start process request=============&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>虽然对于自己来说是方便了，但是如果所有人都这样来做的话，那log输出就没法看了！正确的做法是使用grep 来看只自己关心的日志。</p>\n<h2 id=\"对现有系统日志架构的改造建议\"><a href=\"#对现有系统日志架构的改造建议\" class=\"headerlink\" title=\"对现有系统日志架构的改造建议\"></a>对现有系统日志架构的改造建议</h2><pre><code class=\"hljs\">如果现有系统使用JCL作为日志门面，又确实面临着JCL的ClassLoader机制带来的问题，完全可以引入slf4j并通过桥接库将JCL api输出的日志桥接至slf4j，再通过适配库适配至现有的日志输出服务（如log4j），如下图：\n</code></pre>\n<p><img src=\"https://s3.bmp.ovh/imgs/2023/07/19/fcdaf3e6c0588a46.png\"></p>\n<p>这样做不需要任何代码级的改造，就可以解决JCL的ClassLoader带来的问题，但没有办法享受日志模板等slf4j的api带来的优点。不过之后在现系统上开发的新功能就可以使用slf4j的api了，老代码也可以分批进行改造。</p>\n<p>如果现有系统使用JCL作为日志门面，又头疼JCL不支持logback和log4j2等新的日志服务，也可以通过桥接库以slf4j替代JCL，但同样无法直接享受slf4j api的优点。</p>\n<p>如果想要使用slf4j的api，那么就不得不进行代码改造了，当然改造也可以参考1中提到的方式逐步进行。</p>\n<p>如果现系统面临着log4j的性能问题，可以使用Apache Logging提供的log4j到log4j2的桥接库log4j-1.2-api，把通过log4j api输出的日志桥接至log4j2。这样可以最快地使用上log4j2的先进性能，但组件中缺失了slf4j，对后续进行日志架构改造的灵活性有影响。另一种办法是先把log4j桥接至slf4j，再使用slf4j到log4j2的适配库。这样做稍微麻烦了一点，但可以逐步将系统中的日志输出标准化为使用slf4j的api，为后面的工作打好基础。</p>\n",
            "tags": [
                "常用开发库",
                "日志类库详解"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/JSON%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/JSON%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "title": "JSON类库详解",
            "date_published": "2024-01-03T13:13:21.653Z",
            "content_html": "<blockquote>\n<p>JSON应用非常广泛，对于Java常用的JSON库要完全掌握; 其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。</p>\n</blockquote>\n<h1 id=\"JSON简介\"><a href=\"#JSON简介\" class=\"headerlink\" title=\"JSON简介\"></a>JSON简介</h1><h2 id=\"JSON是什么\"><a href=\"#JSON是什么\" class=\"headerlink\" title=\"JSON是什么\"></a>JSON是什么</h2><ul>\n<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>\n<li>JSON 是轻量级的文本数据交换格式</li>\n<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>\n<li>JSON 具有自我描述性，更易理解</li>\n</ul>\n<h2 id=\"结构与类型\"><a href=\"#结构与类型\" class=\"headerlink\" title=\"结构与类型\"></a>结构与类型</h2><ul>\n<li>只有两种结构：对象内的键值对集合结构和数组，对象用<code>&#123;&#125;</code>表示、内部是<code>”key”:”value”</code>，数组用<code>[]</code>表示，不同值用逗号分开</li>\n<li>基本数值有7个： <ul>\n<li>false </li>\n<li>null </li>\n<li>true </li>\n<li>object </li>\n<li>array </li>\n<li>number </li>\n<li>string</li>\n</ul>\n</li>\n<li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li>\n</ul>\n<p>结构实例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;Image&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>       <span class=\"hljs-attr\">&quot;Width&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-number\">800</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">600</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Title&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">&quot;View from 15th Floor&quot;</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Thumbnail&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>           <span class=\"hljs-attr\">&quot;Url&quot;</span><span class=\"hljs-punctuation\">:</span>    <span class=\"hljs-string\">&quot;http://www.example.com/image/481989943&quot;</span><span class=\"hljs-punctuation\">,</span><br>           <span class=\"hljs-attr\">&quot;Height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">125</span><span class=\"hljs-punctuation\">,</span><br>           <span class=\"hljs-attr\">&quot;Width&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">&quot;100&quot;</span><br>       <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;IDs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">116</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">943</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">234</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">38793</span><span class=\"hljs-punctuation\">]</span><br>     <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSON在线解析工具\"><a href=\"#JSON在线解析工具\" class=\"headerlink\" title=\"JSON在线解析工具\"></a>JSON在线解析工具</h2><p><a href=\"https://www.bejson.com/\">BeJson</a></p>\n<h1 id=\"JSON类库\"><a href=\"#JSON类库\" class=\"headerlink\" title=\"JSON类库\"></a>JSON类库</h1><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p>\n<p>下面是几个常用的 JSON 解析类库：</p>\n<ul>\n<li>FastJson: 阿里巴巴开发的 JSON 库，性能优秀。</li>\n<li>Jackson: 社区十分活跃且更新速度很快。</li>\n<li>Gson: 谷歌开发的 JSON 库，功能十分全面。</li>\n</ul>\n<h2 id=\"性能测试对比\"><a href=\"#性能测试对比\" class=\"headerlink\" title=\"性能测试对比\"></a>性能测试对比</h2><p><a href=\"https://www.xncoding.com/java/basic/jsons.html\">参考文章</a></p>\n<p>根据序列化次数比较小的时候，Gson性能最好，当不断增加的时候到了100000，Gson明细弱于Jackson和FastJson， 这时候FastJson性能是真的牛，另外还可以看到不管数量少还是多，Jackson一直表现优异。而那个Json-lib可以直接忽略。</p>\n<h1 id=\"FastJSON\"><a href=\"#FastJSON\" class=\"headerlink\" title=\"FastJSON\"></a>FastJSON</h1><p>先泼一盆冷水，个人非常不推荐使用FastJson, 为什么？</p>\n<ul>\n<li>FastJson 源码质量较低</li>\n<li>FastJson Bug、漏洞较多</li>\n<li>FastJson 牺牲多数场景下的稳定性而提高的效率</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>\n<p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/fastjson\">Fastjson Github</a> </li>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\">Fastjson 中文 Wiki</a></li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>提供服务器端、安卓客户端两种解析工具，性能表现较好。</li>\n<li>提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换。调用toJSONString方 法即可将对象转换成 JSON 字符串，parseObject 方法则反过来将 JSON 字符串转换成对象。</li>\n<li>允许转换预先存在的无法修改的对象（只有class、无源代码）。</li>\n<li>Java泛型的广泛支持。</li>\n<li>允许对象的自定义表示、允许自定义序列化类。</li>\n<li>支持任意复杂对象（具有深厚的继承层次和广泛使用的泛型类型）。</li>\n</ul>\n<h2 id=\"下载-amp-amp-使用\"><a href=\"#下载-amp-amp-使用\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>你可以在 maven 中央仓库中直接下载：<a href=\"http://repo1.maven.org/maven2/com/alibaba/fastjson/\">http://repo1.maven.org/maven2/com/alibaba/fastjson</a></p>\n<p>配置 maven 依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.x.x<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 x.x.x 是版本号，根据需要使用特定版本，建议使用最新版本。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>user.setName(<span class=\"hljs-string\">&quot;校长&quot;</span>);<br>user.setAge(<span class=\"hljs-number\">3</span>);<br>user.setSalary(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-string\">&quot;123456789.0123&quot;</span>));<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonString</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(user);<br>System.out.println(jsonString);<br><span class=\"hljs-comment\">// 输出 &#123;&quot;age&quot;:3,&quot;name&quot;:&quot;校长&quot;,&quot;old&quot;:false,&quot;salary&quot;:123456789.0123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123&#125;&quot;</span>;<br> <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> JSON.parseObject(jsonString ,User.class);<br> System.out.println(u.getName());<br> <span class=\"hljs-comment\">// 输出 校长</span><br><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStringArray</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;[&#123;\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123&#125;]&quot;</span>;<br>List&lt;User&gt; userList = JSON.parseArray(jsonStringArray, User.class);<br>System.out.println(userList.size());<br><span class=\"hljs-comment\">// 输出 1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h3><p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.defaultTimeZone = TimeZone.getTimeZone(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>);<br>JSON.defaultLocale = Locale.US;<br>        <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Model</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(format = &quot;MMM dd, yyyy h:mm:ss aa&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> java.util.Date date;<br><br>    <span class=\"hljs-keyword\">public</span> java.util.Date <span class=\"hljs-title function_\">getDate</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> date;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDate</span><span class=\"hljs-params\">(java.util.Date date)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.date = date;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@JSONField(format = &quot;MMM-dd-yyyy h:mm:ss aa&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> java.sql.Date date2;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Bean和数组转换\"><a href=\"#Bean和数组转换\" class=\"headerlink\" title=\"Bean和数组转换\"></a>Bean和数组转换</h3><ul>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/BeanToArray_cn\">官方例子 - BeanToArray_cn</a></li>\n</ul>\n<h3 id=\"设置指定字段为特定字段名\"><a href=\"#设置指定字段为特定字段名\" class=\"headerlink\" title=\"设置指定字段为特定字段名\"></a>设置指定字段为特定字段名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(name=&quot;ID&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<span class=\"hljs-keyword\">return</span> id;&#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> &#123;<span class=\"hljs-built_in\">this</span>.id = id;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置是否不序列化某字段\"><a href=\"#设置是否不序列化某字段\" class=\"headerlink\" title=\"设置是否不序列化某字段\"></a>设置是否不序列化某字段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(serialize=false)</span><br>    <span class=\"hljs-keyword\">public</span> Date date;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(deserialize=false)</span><br>    <span class=\"hljs-keyword\">public</span> Date date;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置字段顺序\"><a href=\"#设置字段顺序\" class=\"headerlink\" title=\"设置字段顺序\"></a>设置字段顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VO</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(ordinal = 3)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f0;<br><br>    <span class=\"hljs-meta\">@JSONField(ordinal = 2)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f1;<br><br>    <span class=\"hljs-meta\">@JSONField(ordinal = 1)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f2;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义序列化和反序列化\"><a href=\"#自定义序列化和反序列化\" class=\"headerlink\" title=\"自定义序列化和反序列化\"></a>自定义序列化和反序列化</h3><ul>\n<li><a href=\"https://blog.csdn.net/u010246789/article/details/52539576\">fastjson SerializerFeature详解</a></li>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn\">ObjectDeserializer_cn</a></li>\n</ul>\n<h3 id=\"FastJson漏洞问题\"><a href=\"#FastJson漏洞问题\" class=\"headerlink\" title=\"FastJson漏洞问题\"></a>FastJson漏洞问题</h3><ul>\n<li><a href=\"http://blog.nsfocus.net/analysis-protection-fastjson-remote-code-execution-vulnerability/\">fastjson远程代码执行漏洞技术分析与防护方案</a></li>\n<li><a href=\"https://github.com/alibaba/fastjson/issues\">alibaba&#x2F;fastjson</a></li>\n<li><a href=\"https://www.zhihu.com/question/44199956/answer/112224034\">fastjson这么快老外为啥还是热衷 jackson?</a></li>\n</ul>\n<p class=\"note note-warning\">\n<span class=\"label label-primary\">警告</span>\n尽量使用最新版本。\n</p>\n\n<h1 id=\"JackSon\"><a href=\"#JackSon\" class=\"headerlink\" title=\"JackSon\"></a>JackSon</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li><a href=\"https://github.com/FasterXML/jackson\">Jackson Github</a> </li>\n<li><a href=\"http://wiki.fasterxml.com/JacksonHome\">Jackson Wiki</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-docs\">Jackson 文档</a></li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"3个核心模块：\"><a href=\"#3个核心模块：\" class=\"headerlink\" title=\"3个核心模块：\"></a>3个核心模块：</h3><ul>\n<li><strong>Streaming</strong>: jackson-core jar，定义了底层的streaming API和实现了Json特性。</li>\n<li><strong>Annotations</strong>: jackson-annotations jar，包含了标准的Jackson注解。本文暂不介绍。</li>\n<li><strong>Databind</strong>: jackson-databind jar，实现了数据绑定和对象序列化，它依赖于streaming和annotations的包。</li>\n</ul>\n<h3 id=\"第三方数据类型模块\"><a href=\"#第三方数据类型模块\" class=\"headerlink\" title=\"第三方数据类型模块\"></a>第三方数据类型模块</h3><p>这些扩展是插件式的Jackson模块，用<code>ObjectMapper.registerModule()</code>注册，并且通过添加<code>serializers</code>和<code>deserializers</code>以便Databind包（ObjectMapper &#x2F; ObjectReader &#x2F; ObjectWriter）可以读写这些类型，来增加对各种常用的Java库的数据类型的支持。</p>\n<h3 id=\"数据格式模块\"><a href=\"#数据格式模块\" class=\"headerlink\" title=\"数据格式模块\"></a>数据格式模块</h3><p>Jackson也有处理程序对JAX-RS标准实现者例如Jersey, RESTeasy, CXF等提供了数据格式支持。处理程序实现了MessageBodyReader和MessageBodyWriter，目前支持的数据格式包括JSON, Smile, XML, YAML和CBOR。</p>\n<p>数据格式提供了除了Json之外的数据格式支持，它们绝大部分仅仅实现了streaming API abstractions，以便数据绑定组件可以按照原来的方式使用。另一些（几乎不需要）提供了databind标准功能来处理例如schemas。</p>\n<h2 id=\"下载-amp-amp-使用-1\"><a href=\"#下载-amp-amp-使用-1\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>引用maven jar包：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化-1\"><a href=\"#序列化-1\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toJson</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> JsonProcessingException &#123;<br><br>    <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br><br>    <span class=\"hljs-type\">City</span> <span class=\"hljs-variable\">case1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">City</span>();<br>    case1.setCity(<span class=\"hljs-string\">&quot;SD&quot;</span>);<br>    case1.setAge(<span class=\"hljs-number\">123</span>);<br><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> mapper.writeValueAsString(case1);<br>    System.out.println(<span class=\"hljs-string\">&quot;JSON:&quot;</span> + jsonStr);<br>&#125;<br><span class=\"hljs-comment\">// 输出：JSON:&#123;&quot;city&quot;:&quot;SD&quot;,&quot;age&quot;:123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化-1\"><a href=\"#反序列化-1\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toObj</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> JsonParseException, JsonMappingException, IOException &#123;<br>    <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">inputjsonstr</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\&quot;city\\&quot;:\\&quot;SZ\\&quot;,\\&quot;age\\&quot;:123&#125;&quot;</span>;<br>    <br>    <span class=\"hljs-type\">City</span> <span class=\"hljs-variable\">readcase</span> <span class=\"hljs-operator\">=</span> mapper.readValue(inputjsonstr, City.class);<br><br>    System.out.println(<span class=\"hljs-string\">&quot;city info:&quot;</span> + readcase);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果里面有未知属性，比如json中有<code>desc</code>字段，但是City中没有相应字段，会报错, 需要设置如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\">mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@JsonProperty(&quot;xxx&quot;)</code></td>\n<td>将当前的属性名在<code>json</code>字符串中重新命名为当前设置的这个值，比如在示例中，将<code>age</code>–&gt;<code>mAge</code></td>\n</tr>\n<tr>\n<td><code>@JsonIgnore</code></td>\n<td>将被标注的属性在生成<code>json</code>字符串的时候，直接忽略</td>\n</tr>\n<tr>\n<td><code>@JsonInclude</code></td>\n<td>是一个类级别的设置，<code>sonInclude.Include.NON_EMPTY</code>标识只有非NULL的值才会被纳入<code>json string</code>之中，其余的都被忽略，比如这里的<code>location</code>属性，并没有出现在最终的结果字符串中。</td>\n</tr>\n<tr>\n<td><code>@JsonSerialize</code></td>\n<td>使用自定义的类来实现自定义的字段转换。写入操作。</td>\n</tr>\n<tr>\n<td><code>@JsonDeserialize</code></td>\n<td>解析的时候，自定义的转换器；读取操作。</td>\n</tr>\n<tr>\n<td><code>@JsonAutoDetect</code></td>\n<td>设置类的访问策略，是否所有的属性都可以，还是按照一定的方式来提取。</td>\n</tr>\n<tr>\n<td><code>@JsonRawValue</code></td>\n<td>无转换的将属性值写入到<code>json</code> 字符串中。 写入操作</td>\n</tr>\n<tr>\n<td><code>@JsonValue</code></td>\n<td>标注方法，用以替代缺省的方法，由该方法来完成<code>json</code>的字符输出。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Gson\"><a href=\"#Gson\" class=\"headerlink\" title=\"Gson\"></a>Gson</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Gson是这样一个Java类库，它可以将Java对象转换为相应的JSON形式，也可以将JSON字符串转换为对应的Java对象。 Gson可以使用任意Java对象，包括哪些预先存在的、不在你的源代码中的对象（因此，你并不知道对象的属性）。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/1e20b28c39d1\">Gson用户指南（中文翻译）</a></li>\n</ul>\n<h2 id=\"Gson的目标\"><a href=\"#Gson的目标\" class=\"headerlink\" title=\"Gson的目标\"></a>Gson的目标</h2><ul>\n<li>提供一种机制，使得将Java对象转换为JSON或相反如使用toString()以及构造器（工厂方法）一样简单。</li>\n<li>允许预先存在的不可变的对象转换为JSON或与之相反。</li>\n<li>允许自定义对象的表现形式</li>\n<li>支持任意复杂的对象</li>\n<li>输出轻量易读的JSON</li>\n</ul>\n<h2 id=\"下载-amp-amp-使用-2\"><a href=\"#下载-amp-amp-使用-2\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>使用Gson的首要类是Gson类，你可以仅仅通过new Gson()的方式创建它。你也可以通过GsonBuilder类去创建Gson实例，这个类允许你进行一系列配置，例如版本控制等等。</p>\n<p>Gson实例不会保存任何进行Json操作时的状态。因此，你可以自由的服用相同的Gson对象进行诸多的Json序列化和反序列化操作。</p>\n<p>引用maven jar包：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>28.2-jre<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"操作-2\"><a href=\"#操作-2\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化-2\"><a href=\"#序列化-2\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基础类型</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br>gson.toJson(<span class=\"hljs-number\">1</span>);            ==&gt; prints <span class=\"hljs-number\">1</span><br>gson.toJson(<span class=\"hljs-string\">&quot;abcd&quot;</span>);       ==&gt; prints <span class=\"hljs-string\">&quot;abcd&quot;</span><br>gson.toJson(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Long</span>(<span class=\"hljs-number\">10</span>)); ==&gt; prints <span class=\"hljs-number\">10</span><br><span class=\"hljs-type\">int</span>[] values = &#123; <span class=\"hljs-number\">1</span> &#125;;<br>gson.toJson(values);       ==&gt; prints [<span class=\"hljs-number\">1</span>]<br><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-type\">BagOfPrimitives</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BagOfPrimitives</span>();<br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> gson.toJson(obj);  <br>==&gt; json is &#123;<span class=\"hljs-string\">&quot;value1&quot;</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;value2&quot;</span>:<span class=\"hljs-string\">&quot;abc&quot;</span>&#125;<br><br><span class=\"hljs-comment\">// 数组</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span>[] ints = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;;<br>String[] strings = &#123;<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;def&quot;</span>, <span class=\"hljs-string\">&quot;ghi&quot;</span>&#125;;<br>gson.toJson(ints);     ==&gt; prints [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]<br>gson.toJson(strings);  ==&gt; prints [<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;def&quot;</span>, <span class=\"hljs-string\">&quot;ghi&quot;</span>]<br><br><span class=\"hljs-comment\">// 集合</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br>Collection&lt;Integer&gt; ints = Lists.immutableList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> gson.toJson(ints); ==&gt; json is [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]<br></code></pre></td></tr></table></figure>\n\n<p>其中的对象代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BagOfPrimitives</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">value1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abc&quot;</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">value3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br>  BagOfPrimitives() &#123;<br>    <span class=\"hljs-comment\">// no-args constructor</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化-2\"><a href=\"#反序列化-2\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基础类型</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-type\">int</span>.class);<br><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, Integer.class);<br><span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, Long.class);<br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">false</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;false&quot;</span>, Boolean.class);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;\\&quot;abc\\&quot;&quot;</span>, String.class);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">anotherStr</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;[\\&quot;abc\\&quot;]&quot;</span>, String.class);<br><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-type\">BagOfPrimitives</span> <span class=\"hljs-variable\">obj2</span> <span class=\"hljs-operator\">=</span> gson.fromJson(json, BagOfPrimitives.class);   <br>==&gt; obj2 is just like obj<br><br><span class=\"hljs-comment\">// 数组</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span>[] ints2 = gson.fromJson(<span class=\"hljs-string\">&quot;[1,2,3,4,5]&quot;</span>, <span class=\"hljs-type\">int</span>[].class); <br>==&gt; ints2 will be same as ints<br><br><span class=\"hljs-comment\">// 集合</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">Type</span> <span class=\"hljs-variable\">collectionType</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeToken</span>&lt;Collection&lt;Integer&gt;&gt;()&#123;&#125;.getType();<br>Collection&lt;Integer&gt; ints2 = gson.fromJson(json, collectionType);<br>ints2 is same as ints<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义序列化和反序列化机制\"><a href=\"#自定义序列化和反序列化机制\" class=\"headerlink\" title=\"自定义序列化和反序列化机制\"></a>自定义序列化和反序列化机制</h3><p>有时候，默认的实现并不是你想要的。这在处理类库时常常发生（例如DateTime）。Gson允许你注册自己自定义的序列化器和反序列化器。该过程分为两部分：</p>\n<ul>\n<li>Json序列化器：需要为一个对象自定义序列化机制。</li>\n<li>Json反序列化器：需要为一个类型自定义反序列化机制。</li>\n</ul>\n<p>实例构造者：并不需要，如果无参构造器是可用的或者注册了一个反序列化器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">GsonBuilder</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GsonBuilder</span>();<br>gson.registerTypeAdapter(MyType2.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyTypeAdapter</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MySerializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyDeserializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInstanceCreator</span>());<br></code></pre></td></tr></table></figure>\n\n<p>registerTypeAdapter会检查类型适配器是否实现了上面三个接口中的一个以上并且它们都注册了类型适配器。</p>\n<h3 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h3><p>更多请参考：<a href=\"https://www.jianshu.com/p/1e20b28c39d1\">Gson用户指南（中文翻译）</a></p>\n",
            "tags": [
                "常用开发库",
                "JSON类库详解"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Hutool/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Hutool/",
            "title": "Hutool",
            "date_published": "2024-01-03T13:13:21.653Z",
            "content_html": "<blockquote>\n<p>Hutool作为后起之秀，功能上也比较全。但是要注意一点，它的开源协议是：中国第一个开源协议<a href=\"http://license.coscl.org.cn/MulanPSL\">木兰宽松许可证, 第1版</a>，对此在商业项目中需要谨慎些，在个人项目无所谓。</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。</p>\n<p>Hutool中的工具方法来自于每个用户的精雕细琢，它涵盖了Java开发底层代码中的方方面面，它既是大型项目开发中解决小问题的利器，也是小型项目中的效率担当；</p>\n<p>Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。</p>\n<h2 id=\"Hutool名称的由来\"><a href=\"#Hutool名称的由来\" class=\"headerlink\" title=\"Hutool名称的由来\"></a>Hutool名称的由来</h2><p>Hutool &#x3D; Hu + tool，是原公司项目底层代码剥离后的开源库，“Hu”是公司名称的表示，tool表示工具。Hutool谐音“糊涂”，一方面简洁易懂，一方面寓意“难得糊涂”。</p>\n<h2 id=\"Hutool如何改变我们的coding方式\"><a href=\"#Hutool如何改变我们的coding方式\" class=\"headerlink\" title=\"Hutool如何改变我们的coding方式\"></a>Hutool如何改变我们的coding方式</h2><p>Hutool的目标是使用一个工具方法代替一段复杂代码，从而最大限度的避免“复制粘贴”代码的问题，彻底改变我们写代码的方式。</p>\n<p>以计算MD5为例：</p>\n<ul>\n<li>【以前】打开搜索引擎 -&gt; 搜“Java MD5加密” -&gt; 打开某篇博客-&gt; 复制粘贴 -&gt; 改改好用</li>\n<li>【现在】引入Hutool -&gt; SecureUtil.md5()</li>\n</ul>\n<p>Hutool的存在就是为了减少代码搜索成本，避免网络上参差不齐的代码出现导致的bug。</p>\n<h1 id=\"包含组件\"><a href=\"#包含组件\" class=\"headerlink\" title=\"包含组件\"></a>包含组件</h1><p>一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：</p>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hutool-aop</td>\n<td>JDK动态代理封装，提供非IOC下的切面支持</td>\n</tr>\n<tr>\n<td>hutool-bloomFilter</td>\n<td>布隆过滤，提供一些Hash算法的布隆过滤</td>\n</tr>\n<tr>\n<td>hutool-cache</td>\n<td>简单缓存实现</td>\n</tr>\n<tr>\n<td>hutool-core</td>\n<td>核心，包括Bean操作、日期、各种Util等</td>\n</tr>\n<tr>\n<td>hutool-cron</td>\n<td>定时任务模块，提供类Crontab表达式的定时任务</td>\n</tr>\n<tr>\n<td>hutool-crypto</td>\n<td>加密解密模块，提供对称、非对称和摘要算法封装</td>\n</tr>\n<tr>\n<td>hutool-db</td>\n<td>JDBC封装后的数据操作，基于ActiveRecord思想</td>\n</tr>\n<tr>\n<td>hutool-dfa</td>\n<td>基于DFA模型的多关键字查找</td>\n</tr>\n<tr>\n<td>hutool-extra</td>\n<td>扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）</td>\n</tr>\n<tr>\n<td>hutool-http</td>\n<td>基于HttpUrlConnection的Http客户端封装</td>\n</tr>\n<tr>\n<td>hutool-log</td>\n<td>自动识别日志实现的日志门面</td>\n</tr>\n<tr>\n<td>hutool-script</td>\n<td>脚本执行封装，例如Javascript</td>\n</tr>\n<tr>\n<td>hutool-setting</td>\n<td>功能更强大的Setting配置文件和Properties封装</td>\n</tr>\n<tr>\n<td>hutool-system</td>\n<td>系统参数调用封装（JVM信息等）</td>\n</tr>\n<tr>\n<td>hutool-json</td>\n<td>JSON实现</td>\n</tr>\n<tr>\n<td>hutool-captcha</td>\n<td>图片验证码实现</td>\n</tr>\n<tr>\n<td>hutool-poi</td>\n<td>针对POI中Excel的封装</td>\n</tr>\n<tr>\n<td>hutool-socket</td>\n<td>基于Java的NIO和AIO的Socket封装</td>\n</tr>\n</tbody></table>\n<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>\n<h1 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h1><ul>\n<li><a href=\"https://www.hutool.cn/docs/\">中文文档</a> 看这里</li>\n<li><a href=\"https://www.hutool.club/docs/\">中文文档（备用）</a></li>\n<li><a href=\"https://apidoc.gitee.com/loolly/hutool/\">参考API</a></li>\n</ul>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h2><p>在项目的pom.xml的dependencies中加入以下内容:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>cn.hutool<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>hutool-all<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span>              <br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.1.0<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Gradle\"><a href=\"#Gradle\" class=\"headerlink\" title=\"Gradle\"></a>Gradle</h2><figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs gradle\"><span class=\"hljs-keyword\">compile</span> <span class=\"hljs-string\">&#x27;cn.hutool:hutool-all:5.1.0&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"非Maven项目\"><a href=\"#非Maven项目\" class=\"headerlink\" title=\"非Maven项目\"></a>非Maven项目</h2><p>点击以下任一链接，下载<code>hutool-all-X.X.X.jar</code>即可：</p>\n<ul>\n<li><a href=\"https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.1.0/\">Maven中央库1</a></li>\n<li><a href=\"http://repo2.maven.org/maven2/cn/hutool/hutool-all/5.1.0/\">Maven中央库2</a></li>\n</ul>\n<blockquote>\n<p>注意 Hutool 5.x支持JDK8+，对Android平台没有测试，不能保证所有工具类获工具方法可用。 如果你的项目使用JDK7，请使用Hutool 4.x版本</p>\n</blockquote>\n<h2 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h2><p>访问Hutool的码云主页：<a href=\"https://gitee.com/loolly/hutool\">https://gitee.com/loolly/hutool在新窗口打开</a> 下载整个项目源码（v5-master或v5-dev分支都可）然后进入Hutool项目目录执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">./hutool.sh install<br></code></pre></td></tr></table></figure>\n\n<p>然后就可以使用Maven引入了。</p>\n<hr>\n<p>著作权归@pdai所有 原文链接：<a href=\"https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html\">https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html</a></p>\n",
            "tags": [
                "常用开发库",
                "Hutool",
                "工具类"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/",
            "title": "Apache Common",
            "date_published": "2024-01-03T13:13:21.652Z",
            "content_html": "<h1 id=\"Apache-Common包简介\"><a href=\"#Apache-Common包简介\" class=\"headerlink\" title=\"Apache Common包简介\"></a>Apache Common包简介</h1><p>Apache Commons是对JDK的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题，减少重复劳动。官网网址:<a href=\"http://commons.apache.org/\">http://commons.apache.org</a></p>\n<h1 id=\"Common包包含哪些类？\"><a href=\"#Common包包含哪些类？\" class=\"headerlink\" title=\"Common包包含哪些类？\"></a>Common包包含哪些类？</h1><blockquote>\n<p>请参考：<a href=\"http://commons.apache.org/\">Apache Common官方网站</a></p>\n</blockquote>\n<h2 id=\"常用包梳理\"><a href=\"#常用包梳理\" class=\"headerlink\" title=\"常用包梳理\"></a>常用包梳理</h2><p>| 包名         | 介绍     |<br>| ————- |:————-:| <br>| commons-lang      | 提供字符串处理、数值处理、对象等工具方法 |<br>| commons-collections | 集合工具类,用来操作各种集合     |<br>| commons-io         | IO流操作的工具类     |<br>| commons-beanutils  | Java Bean 操作和封装工具     |  <br>| commons-dbcp2     | 数据库连接池实现  |<br>| commons-pool2      | 对象池实现,用于数据库连接池等 |<br>| commons-fileupload | HTML文件上传工具     | <br>| commons-codec      | 编码&#x2F;解码算法,如Base64、Hex、MD5等 |  <br>| commons-net        | 网络工具,如FTP、Telnet、DNS等 |<br>| commons-configuration | 配置文件解析器   |<br>| commons-vfs        | 虚拟文件系统,对各种文件系统的包装| <br>| commons-digester   | XML解析器    | <br>| commons-logging    | 日志记录器抽象层|<br>| commons-validator  | 数据校验器|</p>\n<h3 id=\"Commons-BeanUtils\"><a href=\"#Commons-BeanUtils\" class=\"headerlink\" title=\"Commons BeanUtils\"></a>Commons BeanUtils</h3><p>针对Bean的一个工具集。由于Bean往往是有一堆get和set组成，所以BeanUtils也是在此基础上进行一些包装。它利用Java的反射机制，从动态的生成对bean的getter和setter的调用代码，到模拟创建一个动态的bean，等等。<br>这个包看似简单，却是很多开源项目的基石：如在著名的Struts和Spring Framework中，我们都能找到BeanUtils的影子。大家猜猜看，有哪位名人是BeanUtils的作者之一？没错，就是Struts的创始人Craig McClanahan。<br>一个比较常用的功能是Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。</p>\n<h4 id=\"模块介绍\"><a href=\"#模块介绍\" class=\"headerlink\" title=\"模块介绍\"></a>模块介绍</h4><table>\n<thead>\n<tr>\n<th>包名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beanutils</td>\n<td>核心包，主要是一些常用的工具类及接口定义</td>\n</tr>\n<tr>\n<td>converters</td>\n<td>转换String到需要类型的类，实现Converter接口</td>\n</tr>\n<tr>\n<td></td>\n<td>这些转换器实现了 LocaleConverter 接口,并提供了根据本地语言环境格式化对象到字符串以及解析字符串到对象的功能。<br/>主要用途是:<br/>国际化:    根据不同语言环境解析和格式化数值<br/>本地化的 Bean 操作:    解析不同本地语言环境的请求参数到 Bean</td>\n</tr>\n<tr>\n<td>expression</td>\n<td>统一的表达式语言接口,定义表达式解析、求值和设置属性值等方法。</td>\n</tr>\n</tbody></table>\n<h4 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.Data;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.BeanUtils;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.ConvertUtils;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.converters.DateConverter;  <br><span class=\"hljs-keyword\">import</span> org.junit.Test;  <br>  <br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;  <br><span class=\"hljs-keyword\">import</span> java.util.Arrays;  <br><span class=\"hljs-keyword\">import</span> java.util.Date;  <br><span class=\"hljs-keyword\">import</span> java.util.HashMap;  <br><span class=\"hljs-keyword\">import</span> java.util.Map;  <br>  <br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * CovertTest * <span class=\"hljs-doctag\">@author</span> will */</span><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanUtilTest</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">//将字符串转换为指定类型  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCovertToInteger</span><span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-string\">&quot;123&quot;</span>, Integer.class);  <br>        <span class=\"hljs-keyword\">if</span> (i <span class=\"hljs-keyword\">instanceof</span> Integer) &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;it can cast to integer&quot;</span>);  <br>            System.out.println(<span class=\"hljs-string\">&quot;the number result is &quot;</span> + (Integer) i);  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <br>            System.err.print(<span class=\"hljs-string\">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class=\"hljs-comment\">//将字符串数组转换为指定类型数组  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testConvertArrToIntegerArr</span><span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">convert</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;, Integer.class);  <br>        <span class=\"hljs-keyword\">if</span> (convert <span class=\"hljs-keyword\">instanceof</span> Integer[]) &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;it can cast to Integer Array&quot;</span>);  <br>            Integer[] integers = (Integer[]) convert;  <br>            Arrays.stream(integers).forEach(System.out::println);  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <br>            System.err.print(<span class=\"hljs-string\">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class=\"hljs-comment\">//将字符串转换为日期类型  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCovertToDate</span> <span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-comment\">// 日期格式转换  </span><br>        <span class=\"hljs-type\">DateConverter</span> <span class=\"hljs-variable\">dateConverter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DateConverter</span>();  <br>        dateConverter.setPatterns(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>,<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&#125;);  <br>        ConvertUtils.register(dateConverter, Date.class);  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">convert</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-string\">&quot;2023-12-01&quot;</span>, Date.class);  <br>        System.out.println(convert);  <br>        <span class=\"hljs-comment\">// 常规时间类型转换  </span><br>        System.out.println(ConvertUtils.convert(<span class=\"hljs-string\">&quot;2023-06-30 09:53:55&quot;</span>, Date.class));  <br>    &#125;  <br>  <br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBeanUtil</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &#123;  <br>        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();  <br>        map.put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;will&quot;</span>);  <br>        map.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;18&quot;</span>);  <br>  <br>        <span class=\"hljs-comment\">// 将map数据拷贝到Java Bean中  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.populate(p, map);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p is &quot;</span> + p);  <br>        <span class=\"hljs-comment\">// 对象拷贝  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.copyProperties(p1, p);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p1 is &quot;</span> + p1);  <br>        <span class=\"hljs-comment\">// 拷贝指定的属性  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.copyProperty(p2,<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;will_yang&quot;</span>);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p2 is &quot;</span> + p2);  <br>        <span class=\"hljs-comment\">// 设置指定的属性  </span><br>        BeanUtils.setProperty(p2, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p2 is &quot;</span> + p2);  <br>        <span class=\"hljs-comment\">//对象克隆  </span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">bean</span> <span class=\"hljs-operator\">=</span> BeanUtils.cloneBean(p2);  <br>        System.out.println(<span class=\"hljs-string\">&quot;bean = &quot;</span> + bean);  <br>    &#125;  <br>  <br>    <span class=\"hljs-meta\">@Data</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;  <br>        <span class=\"hljs-keyword\">private</span> String name;  <br>        <span class=\"hljs-keyword\">private</span> String age;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Codec\"><a href=\"#Commons-Codec\" class=\"headerlink\" title=\"Commons Codec\"></a>Commons Codec</h2><p>是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。</p>\n<h3 id=\"二进制相关\"><a href=\"#二进制相关\" class=\"headerlink\" title=\"二进制相关\"></a>二进制相关</h3><p>二进制包主要提供16进制、Base64、Base32等的编解码工具类。</p>\n<h4 id=\"16进制（Hex类）\"><a href=\"#16进制（Hex类）\" class=\"headerlink\" title=\"16进制（Hex类）\"></a>16进制（Hex类）</h4><p>十六进制常用于将二进制以更简短的方式展示，比如MD5是128位，展现起来太长，而转换为16进制后只需要32个字符即可表示出来。<br>示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// byte数组转为16进制字符串</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> Hex.encodeHexString(<span class=\"hljs-string\">&quot;123&quot;</span>.getBytes());<br>System.out.println(hex);<br><span class=\"hljs-comment\">// 16进制字符串解码</span><br><span class=\"hljs-type\">byte</span>[] src = Hex.decodeHex(hex);<br>System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(src));<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-Base64，Base32，Base16\"><a href=\"#2-Base64，Base32，Base16\" class=\"headerlink\" title=\"2. Base64，Base32，Base16\"></a>2. Base64，Base32，Base16</h4><p>Base64是网络上最常见的用于传输二进制数据的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。Base32就是使用32个可打印字符，Base16就是使用16个（实际上相当于16进制）。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>名称</td>\n<td>编码表字符串</td>\n<td>位数不足是否会补全 &#x3D;</td>\n</tr>\n<tr>\n<td>base16</td>\n<td>数字0<del>9 和 字母 A</del>F</td>\n<td>不会，位数刚好是 4 的倍数</td>\n</tr>\n<tr>\n<td>base32</td>\n<td>大写字母A<del>Z 和 数字2</del>7</td>\n<td>会</td>\n</tr>\n<tr>\n<td>base64</td>\n<td>Base大写字母A-Z，小写字母a-z，数字0~9以及”+”，”&#x2F;“</td>\n<td>会</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// base64编码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">base64</span> <span class=\"hljs-operator\">=</span> Base64.encodeBase64String(<span class=\"hljs-string\">&quot;测试&quot;</span>.getBytes());<br>System.out.println(base64);<br><span class=\"hljs-comment\">// base64解码</span><br><span class=\"hljs-type\">byte</span>[] src = Base64.decodeBase64(base64);<br>System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(src));<br><span class=\"hljs-comment\">// 字符串是否是base64</span><br>Base64.isBase64(base64);<br><br><span class=\"hljs-comment\">// Base32 Base16 同理</span><br></code></pre></td></tr></table></figure>\n\n<p>Codec还提供了Base系列的流处理，以流的方式去处理Base编解码，示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 以流方式提供Base64编码和解码</span><br><span class=\"hljs-comment\">// 附：&quot;123&quot;的base64编码为&quot;MTIz&quot;</span><br><br><span class=\"hljs-comment\">// 对输入流做base64编码</span><br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(<span class=\"hljs-string\">&quot;123&quot;</span>.getBytes());<br><span class=\"hljs-type\">Base64InputStream</span> <span class=\"hljs-variable\">ebis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64InputStream</span>(is, <span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">enc</span> <span class=\"hljs-operator\">=</span> IOUtils.toString(ebis, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>); <span class=\"hljs-comment\">// MTIz</span><br><br><span class=\"hljs-comment\">// 对base64数据流做解码</span><br>is = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(enc.getBytes());<br><span class=\"hljs-type\">Base64InputStream</span> <span class=\"hljs-variable\">dbis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64InputStream</span>(is, <span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dec</span> <span class=\"hljs-operator\">=</span> IOUtils.toString(dbis, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>); <span class=\"hljs-comment\">// 123</span><br><br><span class=\"hljs-comment\">// -----------------------</span><br><br><span class=\"hljs-comment\">// 将数据做base64编码写入输出流</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">data</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">baos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-type\">Base64OutputStream</span> <span class=\"hljs-variable\">ebos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64OutputStream</span>(baos, <span class=\"hljs-literal\">true</span>);<br>IOUtils.write(data, ebos, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">enc2</span> <span class=\"hljs-operator\">=</span> baos.toString(); <span class=\"hljs-comment\">// MTIz</span><br><br><span class=\"hljs-comment\">// 将base64数据做解码写入输出流</span><br>baos = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-type\">Base64OutputStream</span> <span class=\"hljs-variable\">dbos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64OutputStream</span>(baos, <span class=\"hljs-literal\">false</span>);<br>IOUtils.write(data, dbos, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dec2</span> <span class=\"hljs-operator\">=</span> dbos.toString(); <span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"URL相关\"><a href=\"#URL相关\" class=\"headerlink\" title=\"URL相关\"></a>URL相关</h3><p>URL之所以要进行编码，是因为URL中有些字符会引起歧义。</p>\n<p>例如URL参数字符串中使用key&#x3D;value键值对这样的形式来传参，键值对之间以&amp;符号分隔，如&#x2F;s?q&#x3D;abc&amp;ie&#x3D;utf-8。如果你的value字符串中包含了&#x3D;或者&amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;和&#x3D;符号进行转义，也就是对其进行编码。</p>\n<p>又如URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。</p>\n<p>URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p>\n<p>编解码示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">URLCodec</span> <span class=\"hljs-variable\">urlCodec</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URLCodec</span>();<br><span class=\"hljs-comment\">// url编码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">encUrl</span> <span class=\"hljs-operator\">=</span> urlCodec.encode(<span class=\"hljs-string\">&quot;http://x.com?f=哈&quot;</span>);<br>System.out.println(encUrl);<br><span class=\"hljs-comment\">// url解码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">decUrl</span> <span class=\"hljs-operator\">=</span> urlCodec.decode(encUrl);<br>System.out.println(decUrl);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"摘要算法\"><a href=\"#摘要算法\" class=\"headerlink\" title=\"摘要算法\"></a>摘要算法</h3><p>摘要算法是一种单向的散列算法，它满足以下几个特点。</p>\n<ul>\n<li>输入长度是任意的</li>\n<li>输出长度是固定的</li>\n<li>对每一个给定的输入，计算输出是很容易的</li>\n<li>不可逆，无法通过输出推算出原数据</li>\n<li>输出不依赖于输入。就是输入数据变动一个字节结果会相差很多</li>\n</ul>\n<p>由于摘要算法以上特点，主要用于数据完整性校验。例如网上的资源一般会提供一个摘要值（一般用MD5算法），用户下载后可以通过工具对资源做MD5后和网上给定的值比较，如果不一致说明文件不完整了，可能是下载过程网络波动内容有丢失，也可能被人篡改过。</p>\n<p>也可以做数据的指纹，比如网盘秒传，就是利用摘要值做判断。客户端上传前先对文件做摘要值，传给服务端，服务端发现有相同摘要的文件说明两个文件内容是一致的，这样就无需上传直接将文件存储路径指向这个文件就可以了，既实现了秒传，还节约了服务器磁盘空间（不同用户相同内容的文件实际上指向的是同一份文件）。</p>\n<p>很多系统也将密码做md5后存储，其中这种方式并不安全。md5已经很很多公开结果了，并且使用彩虹表碰撞也很容易破解了。所以并不建议使用md5存储密码。密码推荐使用BCrypt算法。</p>\n<p>摘要算法主要有以下几个</p>\n<ul>\n<li>MD(Message Digest)：消息摘要</li>\n<li>SHA(Secure Hash Algorithm)：安全散列</li>\n<li>MAC(Message Authentication Code)：消息认证码</li>\n</ul>\n<p><strong>1. MD系列</strong></p>\n<p>主要有MD2、MD4、MD5，目前一般常用MD5</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 如果使用Java自带的api需要十多行才能实现md5算法</span><br><br><span class=\"hljs-comment\">// 对数据做md5，参数支持字符串，字节数据，输入流</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">md5</span> <span class=\"hljs-operator\">=</span> DigestUtils.md5Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. SHA系列</strong></p>\n<p>SHA系列有SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，SHA3-224、SHA3-256、SHA3-384、SHA3-512等。目前安全起见一般选择256以上，推荐384以上。当然摘要越长则计算耗时也越长，需要根据需求权衡。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 参数支持字符串，字节数据，输入流</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha1</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha1Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha256</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha256Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha384</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha384Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha512</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha512Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_256</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_256Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_384</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_384Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_512</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_512Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. HMAC系列</strong></p>\n<p>HMAC(keyed-Hash Message Authentication Code)系列是包含密钥的散列算法，包含了MD和SHA两个系列的消息摘要算法。融合了MD，SHA：</p>\n<p>MD系列：HMacMD2，HMacMD4，HMacMD5</p>\n<p>SHA系列：HMacSHA1，HMacSHA224，HMacSHA256，HMacSHA38</p>\n<p>，HMacSHA512</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;asdf3234asdf3234asdf3234asdf3234&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">valueToDigest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;测试数据&quot;</span>; <span class=\"hljs-comment\">// valueToDigest参数支持字节数据，流，文件等</span><br><span class=\"hljs-comment\">// 做HMAC-MD5摘要</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacMd5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);<br><span class=\"hljs-comment\">// 做HMAC-sha摘要</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha256</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha384</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha512</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Collections\"><a href=\"#Commons-Collections\" class=\"headerlink\" title=\"Commons Collections\"></a>Commons Collections</h2><p>Apache Commons Collections 是对 java.util.Collection 的扩展。</p>\n<p>目前 <strong>Collections</strong> 包有两个：</p>\n<ul>\n<li>commons-collections</li>\n<li>commons-collections4<br>commons-collections 最新版本是3.2.2，不支持泛型，目前官方已不在维护。<br>collections4 目前最新版本是4.4，最低要求 Java8 以上。<br>相对于 collections 来说完全支持 Java8 的特性并且支持泛型，该版本无法兼容旧有版本，于是为了避免冲突改名为 collections4。推荐直接使用该版本。（注：两个版本可以共存，使用时需要注意）。<br>这里使用3.2.2版本的中包名做下介绍：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>包名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>collections</td>\n<td>CommonsCollections自定义的一组公用的接口和工具类</td>\n</tr>\n<tr>\n<td>bag</td>\n<td>实现Bag接口的一组类</td>\n</tr>\n<tr>\n<td>bidimap</td>\n<td>实现BidiMap系列接口的一组类</td>\n</tr>\n<tr>\n<td>buffer</td>\n<td>实现Buffer接口的一组类</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>实现java.util.Collection接口的一组类</td>\n</tr>\n<tr>\n<td>comparators</td>\n<td>实现java.util.Comparator接口的一组类</td>\n</tr>\n<tr>\n<td>functors</td>\n<td>Commons Collections自定义的一组功能类</td>\n</tr>\n<tr>\n<td>iterators</td>\n<td>实现java.util.Iterator接口的一组类</td>\n</tr>\n<tr>\n<td>keyvalue</td>\n<td>实现集合和键&#x2F;值映射相关的一组类</td>\n</tr>\n<tr>\n<td>list</td>\n<td>实现java.util.List接口的一组类</td>\n</tr>\n<tr>\n<td>map</td>\n<td>实现Map系列接口的一组类</td>\n</tr>\n<tr>\n<td>set</td>\n<td>实现Set系列接口的一组类</td>\n</tr>\n</tbody></table>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><h4 id=\"CollectionUtils\"><a href=\"#CollectionUtils\" class=\"headerlink\" title=\"CollectionUtils\"></a>CollectionUtils</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;);<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list2</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 判断是否为空（null或空list都为true）</span><br>CollectionUtils.isEmpty(list1);<br><span class=\"hljs-comment\">// 添加元素（忽略null元素）</span><br>CollectionUtils.addIgnoreNull(list1, str);<br><span class=\"hljs-comment\">// list是否包含subList中的所有元素</span><br>CollectionUtils.containsAll(list1, list2); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-comment\">// list是否包含subList中的任意一个元素</span><br>CollectionUtils.containsAny(list1, list2); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-comment\">// list1 减去 list2</span><br>CollectionUtils.subtract(list1, list2); <span class=\"hljs-comment\">// [&quot;3&quot;]</span><br><span class=\"hljs-comment\">// 合并两个list并去重</span><br>CollectionUtils.union(list1, list2); <span class=\"hljs-comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br><span class=\"hljs-comment\">// 取两个list同时存在的元素</span><br>CollectionUtils.intersection(list1, list2); <span class=\"hljs-comment\">// [1&quot;, &quot;2&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ListUtils\"><a href=\"#ListUtils\" class=\"headerlink\" title=\"ListUtils\"></a>ListUtils</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;);<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list2</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 同CollectionUtils, 返回结果为List</span><br>ListUtils.subtract(list1, list2); <span class=\"hljs-comment\">// [&quot;3&quot;]</span><br>ListUtils.union(list1, list2); <span class=\"hljs-comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br>ListUtils.intersection(list1, list2); <span class=\"hljs-comment\">// [1&quot;, &quot;2&quot;]</span><br><span class=\"hljs-comment\">// 判断两个集合中的内容是否完全相同（顺序也一致）</span><br>ListUtils.isEqualList(list1, list2); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-comment\">// list1如果为null则转换为空List</span><br>ListUtils.emptyIfNull(list1);<br><span class=\"hljs-comment\">// list1中所有元素做Hash</span><br>ListUtils.hashCodeForList(list1);<br></code></pre></td></tr></table></figure>\n\n<p>除了以上介绍了两个还有 MapUtils，SetUtils，EnumerationUtils，IterableUtils 等不是很常用就不多做介绍了。</p>\n<h3 id=\"集合扩展\"><a href=\"#集合扩展\" class=\"headerlink\" title=\"集合扩展\"></a>集合扩展</h3><h4 id=\"FixedSizeList\"><a href=\"#FixedSizeList\" class=\"headerlink\" title=\"FixedSizeList\"></a>FixedSizeList</h4><p>FixedSizeList 用于装饰另一个 List 以阻止修改其大小。不支持添加、删除、清除等操作。set 方法是允许的（因为它不会改变列表大小），下面看代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br><span class=\"hljs-comment\">// 装饰一下原list</span><br>List&lt;String&gt; list = FixedSizeList.fixedSizeList(sourceList);<br>list.set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;11&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [11,2,3]</span><br><span class=\"hljs-comment\">// 以下改变容器size的操作会抛出异常</span><br>list.add(<span class=\"hljs-string\">&quot;4&quot;</span>); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.remove(<span class=\"hljs-string\">&quot;5&quot;</span>); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.clear(); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"SetUniqueList\"><a href=\"#SetUniqueList\" class=\"headerlink\" title=\"SetUniqueList\"></a>SetUniqueList</h4><p>SetUniqueList 用来装饰另一个 List 以确保不存在重复元素，内部使用了 Set 来判断重复问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>sourceList.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br><span class=\"hljs-comment\">// 元素不重复的list</span><br>SetUniqueList&lt;String&gt; list = SetUniqueList.setUniqueList(sourceList);<br><span class=\"hljs-comment\">// 存在则不处理，不会影响原来顺序</span><br>list.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1,2]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"TransformedList\"><a href=\"#TransformedList\" class=\"headerlink\" title=\"TransformedList\"></a>TransformedList</h4><p>TransformedList 装饰另一个 List 以转换添加的对象。add 和 set 方法受此类影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>sourceList.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br><span class=\"hljs-comment\">// 转换list,在添加元素的时候会通过第二个参数Transformer转换一下</span><br><span class=\"hljs-comment\">// （Transformer接口只有一个抽象方法可以使用lambda表达式）</span><br>       <br><span class=\"hljs-comment\">// transformingList不会对原list的已有元素做转换</span><br>TransformedList&lt;String&gt; list = TransformedList.transformingList(sourceList, e -&gt; e.concat(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1, 2, a_]</span><br><br><span class=\"hljs-comment\">// transformedList会对原list的已有元素做转换</span><br>list = TransformedList.transformedList(sourceList, e -&gt; e.concat(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1_, 2_, a_]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PredicatedList\"><a href=\"#PredicatedList\" class=\"headerlink\" title=\"PredicatedList\"></a>PredicatedList</h4><p>PredicatedList 装饰另一个 List ，装饰后的 List 在添加元素的时候会调用 Predicate 接口来判断元素，匹配通过才会被添加到集合中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-comment\">// 在添加元素的时候会通过第二个参数Predicate判断一下是否符合要求，符合要求才添加进来</span><br>PredicatedList&lt;String&gt; list = PredicatedList.predicatedList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(), e -&gt; e.startsWith(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;_4&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [_4]</span><br><br><span class=\"hljs-comment\">// 以下会抛异常：java.lang.IllegalArgumentException: Cannot add Object &#x27;4&#x27;</span><br>list.add(<span class=\"hljs-string\">&quot;4&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ListOrderedSet\"><a href=\"#ListOrderedSet\" class=\"headerlink\" title=\"ListOrderedSet\"></a>ListOrderedSet</h4><p>ListOrderedSet 有序的Set，顺序按照元素添加顺序排列，类似 List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 有序的set，按照插入顺序排序</span><br>Set&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListOrderedSet</span>&lt;&gt;();<br>set.add(<span class=\"hljs-string\">&quot;aa&quot;</span>);<br>set.add(<span class=\"hljs-string\">&quot;11&quot;</span>);<br>set.add(<span class=\"hljs-string\">&quot;哈哈&quot;</span>);<br>println(set); <span class=\"hljs-comment\">// [aa,11,哈哈]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Bag\"><a href=\"#Bag\" class=\"headerlink\" title=\"Bag\"></a>Bag</h4><p>Bag 接口是带计数功能的集合扩展，它继承了 Collection 接口，可以当做集合来使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// bag 带计数功能的集合</span><br>Bag&lt;String&gt; bag = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashBag</span>&lt;&gt;();<br>bag.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>bag.add(<span class=\"hljs-string\">&quot;b&quot;</span>);<br>bag.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(bag.size()); <span class=\"hljs-comment\">// 3</span><br>println(bag.getCount(<span class=\"hljs-string\">&quot;a&quot;</span>)); <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map扩展\"><a href=\"#Map扩展\" class=\"headerlink\" title=\"Map扩展\"></a>Map扩展</h3><h4 id=\"MultiValuedMap\"><a href=\"#MultiValuedMap\" class=\"headerlink\" title=\"MultiValuedMap\"></a>MultiValuedMap</h4><p>MultiValuedMap 和正常的 Map 有点区别，同一个 key 允许存放多个 value，这些 value 会放到一个 List 中。这个功能如果用 Java 的 Map 我们需要构造一个 <code>Map&lt;String, List&lt;String&gt;&gt;</code> 加个各种操作来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// list实现，允许value重复</span><br>ListValuedMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayListValuedHashMap</span>&lt;&gt;(); <br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;李四&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;12&quot;</span>);<br><span class=\"hljs-comment\">// 注意：value的泛型是String, 但是get方法返回的是List&lt;String&gt;</span><br>List&lt;String&gt; users2 = map.get(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// [张三,李四,张三]</span><br><br><span class=\"hljs-comment\">// multiMap的其他方法</span><br>map.containsKey(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// true</span><br>map.containsValue(<span class=\"hljs-string\">&quot;张三&quot;</span>); <span class=\"hljs-comment\">// true</span><br>map.containsMapping(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> map.size(); <span class=\"hljs-comment\">// 4</span><br><br>Collection&lt;String&gt; ss = map.values();<span class=\"hljs-comment\">// [张三,李四,张三,12]</span><br>map.remove(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// 清空user的所有value</span><br><span class=\"hljs-comment\">// 转换为原生map</span><br>Map&lt;String, Collection&lt;String&gt;&gt; jMap = map.asMap();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"CaseInsensitiveMap\"><a href=\"#CaseInsensitiveMap\" class=\"headerlink\" title=\"CaseInsensitiveMap\"></a>CaseInsensitiveMap</h4><p>key大小写不敏感的Map</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// key大小写不敏感</span><br>Map&lt;String, Integer&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CaseInsensitiveMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;one&quot;</span>, <span class=\"hljs-number\">1</span>);<br>map.put(<span class=\"hljs-string\">&quot;two&quot;</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> map.get(<span class=\"hljs-string\">&quot;ONE&quot;</span>);<br>println(o); <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"OrderedMap\"><a href=\"#OrderedMap\" class=\"headerlink\" title=\"OrderedMap\"></a>OrderedMap</h4><p>有顺序的 Map，按照插入顺序排序。如果使用 hashMap 的话 key 会按照 hash 值排序，可能和插入顺序一样，也可能不一样。key 数量和不同 JDK 版本都可能影响顺序，这是由于不同版本 jdk map 的 hash 算法有区别，hash 算法和当前 map 的容量也有关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// key有序：按照插入顺序</span><br>OrderedMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListOrderedMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;哈哈&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;此处&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>);<br><span class=\"hljs-comment\">// 得到的keySet有序</span><br>Set&lt;String&gt; set = map.keySet(); <span class=\"hljs-comment\">// 哈哈,此处,cc,dd</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nk</span> <span class=\"hljs-operator\">=</span> map.nextKey(<span class=\"hljs-string\">&quot;此处&quot;</span>); <span class=\"hljs-comment\">// cc</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">pk</span> <span class=\"hljs-operator\">=</span> map.previousKey(<span class=\"hljs-string\">&quot;此处&quot;</span>); <span class=\"hljs-comment\">// 哈哈</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"LRUMap\"><a href=\"#LRUMap\" class=\"headerlink\" title=\"LRUMap\"></a>LRUMap</h4><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>\n<p>各种缓存框架都有对 LRU 算法的支持，如 EhCache，GuavaCache，Redis 等，可以说是很常用的一种算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">LRUMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUMap</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);<br>map.put(<span class=\"hljs-string\">&quot;aa&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br><span class=\"hljs-comment\">// 最早没有被使用的aa将被移出</span><br>println(map); <span class=\"hljs-comment\">// [bb:2, cc:3]</span><br><span class=\"hljs-comment\">// 访问一次bb，此时在put的话将会移出最早没有被访问的cc</span><br>map.get(<span class=\"hljs-string\">&quot;bb&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>);<br>println(map); <span class=\"hljs-comment\">// [bb:2, dd:4]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PassiveExpiringMap\"><a href=\"#PassiveExpiringMap\" class=\"headerlink\" title=\"PassiveExpiringMap\"></a>PassiveExpiringMap</h4><p>装饰一个 Map 以在达到过期时间时删除过期条目。当在 Map 中放置键值对时，此装饰器使用 ExpirationPolicy 来确定条目应保持多长时间，由到期时间值定义。当对 Map 做操作的时候才会检查元素是否过期并触发删除操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 存活一秒钟</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ttlMillis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000</span>;<br>PassiveExpiringMap.ExpirationPolicy&lt;String, String&gt; ep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PassiveExpiringMap</span>.ConstantTimeToLiveExpirationPolicy&lt;&gt;(ttlMillis);<br>PassiveExpiringMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PassiveExpiringMap</span>&lt;&gt;(ep);<br>map.put(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br><span class=\"hljs-comment\">// 等待一秒后在获取</span><br>Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">vc</span> <span class=\"hljs-operator\">=</span> map.get(<span class=\"hljs-string\">&quot;c&quot;</span>);<br>println(vc); <span class=\"hljs-comment\">// null</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-ReferenceMap\"><a href=\"#6-ReferenceMap\" class=\"headerlink\" title=\"6. ReferenceMap\"></a>6. ReferenceMap</h4><p>ReferenceMap 允许垃圾收集器删除映射。可以指定使用什么类型的引用来存储映射的键和值。如果使用的不是强引用，则垃圾收集器可以在键或值变得不可访问，或者 JVM 内存不足时删除映射。用它做一个简易的缓存不会导致存放内容过多导致内存溢出。</p>\n<h4 id=\"BidiMap\"><a href=\"#BidiMap\" class=\"headerlink\" title=\"BidiMap\"></a>BidiMap</h4><p>BidiMap 允许在 key 和 value 之间进行双向查找。其中一个键可以查找一个值，一个值可以同样轻松地查找一个键。这个接口扩展了 Map，value 不允许重复，如果重复将同时覆盖旧的键值对。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 双向map, 可通过value获取key</span><br><span class=\"hljs-comment\">// value也不允许重复，如果重复将会覆盖旧值</span><br>BidiMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeBidiMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;dog&quot;</span>, <span class=\"hljs-string\">&quot;狗&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cat&quot;</span>, <span class=\"hljs-string\">&quot;猫&quot;</span>);<br><span class=\"hljs-comment\">// value重复的话key也会被覆盖，相当于&quot;cat2:猫&quot;会覆盖掉&quot;cat:猫&quot;</span><br><span class=\"hljs-comment\">// map.put(&quot;cat2&quot;, &quot;猫&quot;);</span><br>println(map); <span class=\"hljs-comment\">// &#123;cat=猫, dog=狗&#125;</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> map.getKey(<span class=\"hljs-string\">&quot;狗&quot;</span>);<br>println(key); <span class=\"hljs-comment\">// dog</span><br><br><span class=\"hljs-comment\">// 反向，value变为key，key变为value</span><br>BidiMap&lt;String, String&gt; iMap = map.inverseBidiMap();<br>println(iMap); <span class=\"hljs-comment\">// &#123;狗=dog, 猫=cat&#125;</span><br>println(iMap.get(<span class=\"hljs-string\">&quot;狗&quot;</span>)); <span class=\"hljs-comment\">// dog</span><br><br><span class=\"hljs-comment\">// 对反向map操作同时影响原map</span><br>iMap.put(<span class=\"hljs-string\">&quot;鱼&quot;</span>, <span class=\"hljs-string\">&quot;fish&quot;</span>);<br>println(iMap); <span class=\"hljs-comment\">// &#123;狗=dog, 猫=cat, 鱼=fish&#125;</span><br>println(map); <span class=\"hljs-comment\">// &#123;cat=猫, dog=狗, fish=鱼&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Compress\"><a href=\"#Commons-Compress\" class=\"headerlink\" title=\"Commons Compress\"></a>Commons Compress</h2><p>压缩、解压缩文件的组件，可以操作rar、cpio、Unix dump、tar、zip、gzip、XZ、Pack200和bzip2格式的压缩文件。</p>\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><p>压缩：按某种算法减小文件所占用空间的大小<br>解压：按对应的逆向算法恢复文件</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GzipCompressorOutputStream</td>\n<td>压缩<code>&quot;*.gz</code>“文件</td>\n</tr>\n<tr>\n<td>GzipCompressorInputStream</td>\n<td>解压<code>&quot;*.gz</code>“文件</td>\n</tr>\n<tr>\n<td>BZip2CompressorOutputStream</td>\n<td>压缩<code>&quot;*.bz2</code>“文件</td>\n</tr>\n<tr>\n<td>BZip2CompressorInputStream</td>\n<td>解压<code>&quot;*.bz2</code>“文件</td>\n</tr>\n<tr>\n<td>XZCompressorOutputStream</td>\n<td>压缩<code>&quot;*.xz</code>“文件</td>\n</tr>\n<tr>\n<td>XZCompressorInputStream</td>\n<td>解压<code>&quot;*.xz</code>“文件</td>\n</tr>\n<tr>\n<td>FramedLZ4CompressorOutputStream</td>\n<td>压缩<code>&quot;*.lz4</code>“文件</td>\n</tr>\n<tr>\n<td>FramedLZ4CompressorInputStream</td>\n<td>解压<code>&quot;*.lz4</code>“文件</td>\n</tr>\n<tr>\n<td>BlockLZ4CompressorOutputStream</td>\n<td>压缩<code>&quot;*.block_lz4</code>“文件</td>\n</tr>\n<tr>\n<td>BlockLZ4CompressorInputStream</td>\n<td>解压<code>&quot;*.block_lz4</code>“文件</td>\n</tr>\n<tr>\n<td>Pack200CompressorOutputStream</td>\n<td>压缩<code>&quot;*.pack</code>“文件</td>\n</tr>\n<tr>\n<td>Pack200CompressorInputStream</td>\n<td>解压<code>&quot;*.pack</code>“文件</td>\n</tr>\n<tr>\n<td>DeflateCompressorOutputStream</td>\n<td>压缩<code>&quot;*.deflate</code>“文件</td>\n</tr>\n<tr>\n<td>DeflateCompressorInputStream</td>\n<td>解压<code>&quot;*.deflate</code>“文件</td>\n</tr>\n<tr>\n<td>LZMACompressorOutputStream</td>\n<td>压缩<code>&quot;*.lzma</code>“文件</td>\n</tr>\n<tr>\n<td>LZMACompressorInputStream</td>\n<td>解压<code>&quot;*.lzma</code>“文件</td>\n</tr>\n<tr>\n<td>FramedSnappyCompressorOutputStream</td>\n<td>压缩<code>&quot;*.sz</code>“文件</td>\n</tr>\n<tr>\n<td>FramedSnappyCompressorInputStream</td>\n<td>解压<code>&quot;*.sz</code>“文件</td>\n</tr>\n<tr>\n<td>ZCompressorInputStream</td>\n<td>解压<code>&quot;*.Z</code>“文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h4><p>gzip是Unix，Linux上常用的压缩工具，也是当今的WEB站点上非常流行的压缩技术。其有压缩级别等概念，可以通过GzipParameters去设置。JDK8也自带了GZIPInputStream类，用法类似。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// gzip压缩</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.js&quot;</span>;<br><span class=\"hljs-type\">GzipParameters</span> <span class=\"hljs-variable\">parameters</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipParameters</span>();<br>parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);<br>parameters.setOperatingSystem(<span class=\"hljs-number\">3</span>);<br>parameters.setFilename(FilenameUtils.getName(file));<br>parameters.setComment(<span class=\"hljs-string\">&quot;Test file&quot;</span>);<br>parameters.setModificationTime(System.currentTimeMillis());<br><span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">fos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(file + <span class=\"hljs-string\">&quot;.gz&quot;</span>);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">GzipCompressorOutputStream</span> <span class=\"hljs-variable\">gzos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorOutputStream</span>(fos, parameters);<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file)) &#123;<br>    IOUtils.copy(is, gzos);<br>&#125;<br><span class=\"hljs-comment\">// gzip解压</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">gzFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.js.gz&quot;</span>;<br><span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(gzFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">GzipCompressorInputStream</span> <span class=\"hljs-variable\">gis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorInputStream</span>(is)) &#123;<br>    <span class=\"hljs-type\">GzipParameters</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> gis.getMetaData();<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test.js&quot;</span>);<br>    FileUtils.copyToFile(gis, targetFile);<br>    targetFile.setLastModified(p.getModificationTime());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bz2\"><a href=\"#bz2\" class=\"headerlink\" title=\"bz2\"></a>bz2</h4><p>bz2是Linux下常见的压缩文件格式，是由具有高压缩率的压缩工具bzip2生成，以后缀为.bz2结尾的压缩文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 压缩bz2</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">srcFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar.bz2&quot;</span>;<br><span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(targetFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">BZip2CompressorOutputStream</span> <span class=\"hljs-variable\">bzos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BZip2CompressorOutputStream</span>(os);<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(srcFile)) &#123;<br>    IOUtils.copy(is, bzos);<br>&#125;<br><span class=\"hljs-comment\">// 解压bz2</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bzFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar.bz2&quot;</span>;<br><span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(bzFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">BZip2CompressorInputStream</span> <span class=\"hljs-variable\">bzis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BZip2CompressorInputStream</span>(is)) &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;test.tar&quot;</span>);<br>    FileUtils.copyToFile(bzis, targetFile);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其他压缩算法的使用方式和bz2基本一致，这里就不做代码示例了。</p>\n<h3 id=\"归档\"><a href=\"#归档\" class=\"headerlink\" title=\"归档\"></a>归档</h3><p>归档：将许多零散的文件整理为一个文件，文件总大小基本不变<br>解包：从归档文件中释放文件</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TarArchiveOutputStream</td>\n<td>归档<code>*.tar</code>文件</td>\n</tr>\n<tr>\n<td>TarArchiveInputStream</td>\n<td>解包<code>*.tar</code>文件</td>\n</tr>\n<tr>\n<td>ZipArchiveOutputStream</td>\n<td>归档压缩<code>*.zip</code>文件</td>\n</tr>\n<tr>\n<td>ZipArchiveInputStream</td>\n<td>解包解压<code>*.zip</code>文件</td>\n</tr>\n<tr>\n<td>JarArchiveOutputStream</td>\n<td>归档压缩<code>*.jar</code>文件</td>\n</tr>\n<tr>\n<td>JarArchiveInputStream</td>\n<td>解包解压<code>*.jar</code>文件</td>\n</tr>\n<tr>\n<td>DumpArchiveOutputStream</td>\n<td>归档<code>*.dump</code>文件</td>\n</tr>\n<tr>\n<td>DumpArchiveInputStream</td>\n<td>解包<code>*.dump</code>文件</td>\n</tr>\n<tr>\n<td>CpioArchiveOutputStream</td>\n<td>归档压缩<code>*.cpio</code>文件</td>\n</tr>\n<tr>\n<td>CpioArchiveInputStream</td>\n<td>解包解压<code>*.cpio</code>文件</td>\n</tr>\n<tr>\n<td>ArArchiveOutputStream</td>\n<td>归档压缩<code>*.ar</code>文件</td>\n</tr>\n<tr>\n<td>ArArchiveInputStream</td>\n<td>解包解压<code>*.ar</code>文件</td>\n</tr>\n<tr>\n<td>ArjArchiveInputStream</td>\n<td>解包解压<code>*.arj</code>文件</td>\n</tr>\n<tr>\n<td>SevenZOutputFile</td>\n<td>归档压缩<code>*.7z</code>文件</td>\n</tr>\n<tr>\n<td>SevenZFile</td>\n<td>解包解压<code>*.7z</code>文件</td>\n</tr>\n</tbody></table>\n<p>其中zip，jar，cpio，ar，7z既支持归档也支持压缩，能在归档的过程中做压缩处理。</p>\n<p>由于他们会处理一个个零散的文件，所以会有ArchiveEntry的概念，即一个ArchiveEntry代表归档包内的一个目录或文件。</p>\n<h4 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h4><p>tar是Unix和Linux系统上的常用的压缩归档工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为”tar”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// tar压缩</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tar</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">srcDir</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveOutputStream</span> <span class=\"hljs-variable\">tos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveOutputStream</span>(<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(targetFile))) &#123;<br>        tarRecursive(tos, srcDir, <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 递归压缩目录下的文件和目录</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tarRecursive</span><span class=\"hljs-params\">(TarArchiveOutputStream tos, File srcFile, String basePath)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nextBasePath</span> <span class=\"hljs-operator\">=</span> basePath + srcFile.getName() + <span class=\"hljs-string\">&quot;/&quot;</span>;<br>        <span class=\"hljs-keyword\">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class=\"hljs-comment\">// 空目录</span><br>            <span class=\"hljs-type\">TarArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveEntry</span>(srcFile, nextBasePath);<br>            tos.putArchiveEntry(entry);<br>            tos.closeArchiveEntry();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">for</span> (File file : files) &#123;<br>                tarRecursive(tos, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">TarArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveEntry</span>(srcFile, basePath + srcFile.getName());<br>        tos.putArchiveEntry(entry);<br>        FileUtils.copyFile(srcFile, tos);<br>        tos.closeArchiveEntry();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// tar解压</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">untar</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/test.tar&quot;</span>);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveInputStream</span> <span class=\"hljs-variable\">tis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(is)) &#123;<br>        TarArchiveEntry nextEntry;<br>        <span class=\"hljs-keyword\">while</span> ((nextEntry = tis.getNextTarEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> nextEntry.getName();<br>            <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, name);<br>            <span class=\"hljs-comment\">//如果是目录，创建目录</span><br>            <span class=\"hljs-keyword\">if</span> (nextEntry.isDirectory()) &#123;<br>                file.mkdir();<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">//文件则写入具体的路径中</span><br>                FileUtils.copyToFile(tis, file);<br>                file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h4><p>7z 是一种全新的压缩格式，它拥有极高的压缩比。</p>\n<p>7z 格式的主要特征：</p>\n<ul>\n<li>开放的结构</li>\n<li>高压缩比</li>\n<li>强大的 AES-256 加密</li>\n<li>能够兼容任意压缩、转换、加密算法</li>\n<li>最高支持 16000000000 GB 的文件压缩</li>\n<li>以 Unicode 为标准的文件名</li>\n<li>支持固实压缩</li>\n<li>支持文件头压缩</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 7z压缩</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_7z</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">SevenZOutputFile</span> <span class=\"hljs-variable\">outputFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SevenZOutputFile</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test.7z&quot;</span>))) &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">srcFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>);<br>        _7zRecursive(outputFile, srcFile, <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 递归压缩目录下的文件和目录</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_7zRecursive</span><span class=\"hljs-params\">(SevenZOutputFile _7zFile, File srcFile, String basePath)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nextBasePath</span> <span class=\"hljs-operator\">=</span> basePath + srcFile.getName() + <span class=\"hljs-string\">&quot;/&quot;</span>;<br>        <span class=\"hljs-comment\">// 空目录</span><br>        <span class=\"hljs-keyword\">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class=\"hljs-type\">SevenZArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> _7zFile.createArchiveEntry(srcFile, nextBasePath);<br>            _7zFile.putArchiveEntry(entry);<br>            _7zFile.closeArchiveEntry();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">for</span> (File file : files) &#123;<br>                _7zRecursive(_7zFile, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">SevenZArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> _7zFile.createArchiveEntry(srcFile, basePath + srcFile.getName());<br>        _7zFile.putArchiveEntry(entry);<br>        <span class=\"hljs-type\">byte</span>[] bs = FileUtils.readFileToByteArray(srcFile);<br>        _7zFile.write(bs);<br>        _7zFile.closeArchiveEntry();<br>    &#125;<br>&#125;<br> <span class=\"hljs-comment\">// 7z解压</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">un7z</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">SevenZFile</span> <span class=\"hljs-variable\">archive</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SevenZFile</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;test.7z&quot;</span>))) &#123;<br>        SevenZArchiveEntry entry;<br>        <span class=\"hljs-keyword\">while</span> ((entry = archive.getNextEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, entry.getName());<br>            <span class=\"hljs-keyword\">if</span> (entry.isDirectory()) &#123;<br>                file.mkdirs();<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (entry.hasStream()) &#123;<br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span> [] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span> [<span class=\"hljs-number\">1024</span>];<br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">baos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; (len = archive.read(buf)) &gt; <span class=\"hljs-number\">0</span>;) &#123;<br>                    baos.write(buf, <span class=\"hljs-number\">0</span>, len);<br>                &#125;<br>                FileUtils.writeByteArrayToFile(file, baos.toByteArray());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修改归档文件\"><a href=\"#修改归档文件\" class=\"headerlink\" title=\"修改归档文件\"></a>修改归档文件</h3><p>有时候我们会有修改归档内文件的需求，比如添加、删除一个文件，修改其中的文件内容等，当然我们也可以全部解压出来改完后在压缩回去。这样除了代码量多一些外，归档文件大也会导致操作时间过长。那么有没有办法用代码去动态的修改归档文件里的内容呢？</p>\n<p>org.apache.commons.compress.changes包下正好就提供了一些类用于动态的修改归档文件里的内容。下面看一个简单的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">tarFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(tarFile);<br><span class=\"hljs-comment\">// 替换后会覆盖原test.tar，如果是windows可能会由于文件被访问而覆盖报错</span><br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(tarFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveInputStream</span> <span class=\"hljs-variable\">tais</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(is);<br>     <span class=\"hljs-type\">TarArchiveOutputStream</span> <span class=\"hljs-variable\">taos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveOutputStream</span>(os)) &#123;<br>    <span class=\"hljs-type\">ChangeSet</span> <span class=\"hljs-variable\">changes</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChangeSet</span>();<br>    <span class=\"hljs-comment\">// 删除&quot;test.tar中&quot;的&quot;dir/1.txt&quot;文件</span><br>    changes.delete(<span class=\"hljs-string\">&quot;dir/1.txt&quot;</span>);<br>    <span class=\"hljs-comment\">// 删除&quot;test.tar&quot;中的&quot;t&quot;目录</span><br>    changes.delete(<span class=\"hljs-string\">&quot;t&quot;</span>);<br>    <span class=\"hljs-comment\">// 添加文件，如果已存在则替换</span><br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">addFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/a.txt&quot;</span>);<br>    <span class=\"hljs-type\">ArchiveEntry</span> <span class=\"hljs-variable\">addEntry</span> <span class=\"hljs-operator\">=</span> taos.createArchiveEntry(addFile, addFile.getName());<br>    <span class=\"hljs-comment\">// add可传第三个参数：true: 已存在则替换(默认值)， false: 不替换</span><br>    changes.add(addEntry, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(addFile));<br>    <span class=\"hljs-comment\">// 执行修改</span><br>    <span class=\"hljs-type\">ChangeSetPerformer</span> <span class=\"hljs-variable\">performer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChangeSetPerformer</span>(changes);<br>    <span class=\"hljs-type\">ChangeSetResults</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> performer.perform(tais, taos);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h4><p>commons-compress还提供了一些简单的工厂类用户动态的获取压缩流和归档流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用factory动态获取归档流</span><br><span class=\"hljs-type\">ArchiveStreamFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArchiveStreamFactory</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">archiveName</span> <span class=\"hljs-operator\">=</span> ArchiveStreamFactory.TAR;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/in.tar&quot;</span>);<br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;/out.tar&quot;</span>);<br><span class=\"hljs-comment\">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class=\"hljs-type\">ArchiveInputStream</span> <span class=\"hljs-variable\">ais</span> <span class=\"hljs-operator\">=</span> factory.createArchiveInputStream(archiveName, is);<br><span class=\"hljs-type\">ArchiveOutputStream</span> <span class=\"hljs-variable\">aos</span> <span class=\"hljs-operator\">=</span> factory.createArchiveOutputStream(archiveName, os);<br><span class=\"hljs-comment\">// 其他业务操作</span><br><br><span class=\"hljs-comment\">// ------------------------</span><br><br><span class=\"hljs-comment\">// 使用factory动态获取压缩流</span><br><span class=\"hljs-type\">CompressorStreamFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompressorStreamFactory</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">compressName</span> <span class=\"hljs-operator\">=</span> CompressorStreamFactory.GZIP;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/in.gz&quot;</span>);<br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;/out.gz&quot;</span>);<br><span class=\"hljs-comment\">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class=\"hljs-type\">CompressorInputStream</span> <span class=\"hljs-variable\">cis</span> <span class=\"hljs-operator\">=</span> factory.createCompressorInputStream(compressName, is);<br><span class=\"hljs-type\">CompressorOutputStream</span> <span class=\"hljs-variable\">cos</span> <span class=\"hljs-operator\">=</span> factory.createCompressorOutputStream(compressName, os);<br><span class=\"hljs-comment\">// 其他业务操作</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"同时解压解包\"><a href=\"#同时解压解包\" class=\"headerlink\" title=\"同时解压解包\"></a>同时解压解包</h4><p>上面说了很多都是单一的操作，那么如果解压”test.tar.gz”这种归档和压缩于一体的文件呢？</p>\n<p>其实很简单，我们不需要先解压在解包，可以一步同时完成解压和解包，只需要将对应的流包装一下即可（不得不感叹Java IO的装饰者模式设计真的很巧妙）。下面看代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 解压 解包test.tar.gz文件</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/test.tar.gz&quot;</span>);<br><span class=\"hljs-comment\">// 先解压，所以需要先用gzip流包装文件流</span><br><span class=\"hljs-type\">CompressorInputStream</span> <span class=\"hljs-variable\">gis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorInputStream</span>(is);<br><span class=\"hljs-comment\">// 在解包，用tar流包装gzip流</span><br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ArchiveInputStream</span> <span class=\"hljs-variable\">tgis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(gis)) &#123;<br>    ArchiveEntry nextEntry;<br>    <span class=\"hljs-keyword\">while</span> ((nextEntry = tgis.getNextEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> nextEntry.getName();<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, name);<br>        <span class=\"hljs-comment\">// 如果是目录，创建目录</span><br>        <span class=\"hljs-keyword\">if</span> (nextEntry.isDirectory()) &#123;<br>            file.mkdir();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 文件则写入具体的路径中</span><br>            FileUtils.copyToFile(tgis, file);<br>            file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Configuration\"><a href=\"#Commons-Configuration\" class=\"headerlink\" title=\"Commons Configuration\"></a>Commons Configuration</h2><p>是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载配置信息。</p>\n<h2 id=\"Commons-CSV\"><a href=\"#Commons-CSV\" class=\"headerlink\" title=\"Commons CSV\"></a>Commons CSV</h2><p>是一个用来读写各种Comma Separated Value(CSV)格式文件的Java类库。</p>\n<h2 id=\"Commons-Daemon\"><a href=\"#Commons-Daemon\" class=\"headerlink\" title=\"Commons Daemon\"></a>Commons Daemon</h2><p>实现将普通的Java应用变成系统的后台服务,例如 Tomcat 就是利用这个项目来实现作为 Linux 和 Windows 的服务启动和停止的。</p>\n<h2 id=\"Commons-DBCP\"><a href=\"#Commons-DBCP\" class=\"headerlink\" title=\"Commons DBCP\"></a>Commons DBCP</h2><p>数据库连接池。</p>\n<h2 id=\"Commons-DBUtils\"><a href=\"#Commons-DBUtils\" class=\"headerlink\" title=\"Commons DBUtils\"></a>Commons DBUtils</h2><p>是JDBC工具组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。</p>\n<h2 id=\"Commons-Digester\"><a href=\"#Commons-Digester\" class=\"headerlink\" title=\"Commons Digester\"></a>Commons Digester</h2><p>是XML到Java对象的映射工具集。</p>\n<h2 id=\"Commons-Email\"><a href=\"#Commons-Email\" class=\"headerlink\" title=\"Commons Email\"></a>Commons Email</h2><p>是邮件操作组件，对Java Mail API进行了封装，提供了常用的邮件发送和接收类，简化邮件操作。该组件依赖Java Mail API。</p>\n<h2 id=\"Commons-Exec\"><a href=\"#Commons-Exec\" class=\"headerlink\" title=\"Commons Exec\"></a>Commons Exec</h2><p>提供一些常用的方法用来执行外部进程，如执行exe文件或命令行。</p>\n<h2 id=\"Commons-FileUpload\"><a href=\"#Commons-FileUpload\" class=\"headerlink\" title=\"Commons FileUpload\"></a>Commons FileUpload</h2><p>为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。</p>\n<h2 id=\"Commons-IO\"><a href=\"#Commons-IO\" class=\"headerlink\" title=\"Commons IO\"></a>Commons IO</h2><p>是处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。</p>\n<h2 id=\"Commons-JCI\"><a href=\"#Commons-JCI\" class=\"headerlink\" title=\"Commons JCI\"></a>Commons JCI</h2><p>提供通用的Java编译器接口。</p>\n<h2 id=\"Commons-Lang3\"><a href=\"#Commons-Lang3\" class=\"headerlink\" title=\"Commons Lang3\"></a>Commons Lang3</h2><p>是处理Java基本对象方法的工具类包，该类包提供对字符、数组等基本对象的操作，弥补了java.lang api基本处理方法上的不足。</p>\n<ul>\n<li><a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html\">API 文档</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>工具类</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayUtils</td>\n<td>用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等</td>\n</tr>\n<tr>\n<td>BitField</td>\n<td>用于操作位元，提供了一些方便而安全的方法</td>\n</tr>\n<tr>\n<td>BooleanUtils</td>\n<td>用于操作和转换boolean或者Boolean及相应的数组</td>\n</tr>\n<tr>\n<td>CharEncoding</td>\n<td>包含了Java环境支持的字符编码，提供是否支持某种编码的判断</td>\n</tr>\n<tr>\n<td>CharRange</td>\n<td>用于设定字符范围并做相应检查</td>\n</tr>\n<tr>\n<td>CharSet</td>\n<td>用于设定一组字符作为范围并做相应检查</td>\n</tr>\n<tr>\n<td>CharSetUtils</td>\n<td>用于操作CharSet</td>\n</tr>\n<tr>\n<td>CharUtils</td>\n<td>用于操作char值和Character对象</td>\n</tr>\n<tr>\n<td>ClassUtils</td>\n<td>用于对Java类的操作，不使用反射</td>\n</tr>\n<tr>\n<td>ObjectUtils</td>\n<td>用于操作Java对象，提供null安全的访问和其他一些功能</td>\n</tr>\n<tr>\n<td>RandomStringUtils</td>\n<td>用于生成随机的字符串</td>\n</tr>\n<tr>\n<td>SerializationUtils</td>\n<td>用于处理对象序列化，提供比一般Java序列化更高级的处理能力</td>\n</tr>\n<tr>\n<td>StringEscapeUtils</td>\n<td>用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码</td>\n</tr>\n<tr>\n<td>StringUtils</td>\n<td>处理String的核心类，提供了相当多的功能</td>\n</tr>\n<tr>\n<td>SystemUtils</td>\n<td>在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断</td>\n</tr>\n<tr>\n<td>Validate</td>\n<td>提供验证的操作，有点类似assert断言</td>\n</tr>\n<tr>\n<td>WordUtils</td>\n<td>用于处理单词大小写、换行等</td>\n</tr>\n</tbody></table>\n<h2 id=\"Commons-Logging\"><a href=\"#Commons-Logging\" class=\"headerlink\" title=\"Commons Logging\"></a>Commons Logging</h2><p>提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。类包给中间件&#x2F;日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。</p>\n<h2 id=\"Commons-Math\"><a href=\"#Commons-Math\" class=\"headerlink\" title=\"Commons Math\"></a>Commons Math</h2><p>轻量级自容器的数学和统计计算方法类包，包含大多数常用的数值算法。</p>\n<h2 id=\"Commons-Net\"><a href=\"#Commons-Net\" class=\"headerlink\" title=\"Commons Net\"></a>Commons Net</h2><p>封装了各种网络协议的客户端，支持FTP、NNTP、SMTP、POP3、Telnet等协议。</p>\n<h2 id=\"Commons-Pool\"><a href=\"#Commons-Pool\" class=\"headerlink\" title=\"Commons Pool\"></a>Commons Pool</h2><p>提供了一整套用于实现对象池化的框架，以及若干各具特色的对象池实现，可以有效地减少处理对象池化时的工作量。类包用于提高像文件句柄、数据库连接、socket通信这类大对象的调用效率，简单的说就是一种对象一次创建多次使用的技术。</p>\n<h2 id=\"Commons-Primitives\"><a href=\"#Commons-Primitives\" class=\"headerlink\" title=\"Commons Primitives\"></a>Commons Primitives</h2><p>提供了一个更小，更快和更易使用的对Java基本类型的支持。</p>\n<h2 id=\"Commons-Validator\"><a href=\"#Commons-Validator\" class=\"headerlink\" title=\"Commons Validator\"></a>Commons Validator</h2><p>提供了一个简单的、可扩展的框架来在一个XML文件中定义校验器(校验方法)和校验规则。支持校验规则的和错误消息的国际化。</p>\n<h2 id=\"Apache-HttpClient\"><a href=\"#Apache-HttpClient\" class=\"headerlink\" title=\"Apache HttpClient\"></a>Apache HttpClient</h2><p>曾经是Apache Commons的子项目，后来独立出来。HttpClient简化HTTP客户端与服务器的各种通讯，实现HTTP客户端程序（也就是浏览器程序）的功能。</p>\n",
            "tags": [
                "常用开发库",
                "工具类",
                "Apache Common"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Google%20Guava/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Google%20Guava/",
            "title": "Google Guava",
            "date_published": "2024-01-03T13:13:21.652Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 <code>[collections]</code> 、缓存<code> [caching]</code> 、原生类型支持 <code>[primitives support]</code> 、并发库<code> [concurrency libraries]</code> 、通用注解<code> [common annotations]</code> 、字符串处理<code> [string processing]</code> 、<code>I/O</code> 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。</p>\n<p>guava的优点：</p>\n<ul>\n<li>高效设计良好的API，被Google的开发者设计，实现和使用</li>\n<li>遵循高效的java语法实践</li>\n<li>使代码更刻度，简洁，简单</li>\n<li>节约时间，资源，提高生产力</li>\n</ul>\n<h1 id=\"推荐网址\"><a href=\"#推荐网址\" class=\"headerlink\" title=\"推荐网址\"></a>推荐网址</h1><ul>\n<li><a href=\"https://github.com/google/guava/wiki/Home\">Guava Wiki</a></li>\n<li><a href=\"https://guava.dev/releases/snapshot-jre/api/docs/\">Guava API Doc</a></li>\n<li><a href=\"https://github.com/google/guava\">Guava Github</a></li>\n<li><a href=\"http://ifeve.com/google-guava/\">Guava 中文教程 - ifeve.com</a></li>\n</ul>\n<h1 id=\"使用Guava\"><a href=\"#使用Guava\" class=\"headerlink\" title=\"使用Guava\"></a>使用Guava</h1><blockquote>\n<p>注意：JDK 1.8 or higher.</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>28.2-jre<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>  <span class=\"hljs-comment\">&lt;!-- or, for Android: --&gt;</span><br>  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>28.2-android<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"内容简介\"><a href=\"#内容简介\" class=\"headerlink\" title=\"内容简介\"></a>内容简介</h1><h2 id=\"基本工具-Basic-utilities\"><a href=\"#基本工具-Basic-utilities\" class=\"headerlink\" title=\"基本工具 [Basic utilities]\"></a>基本工具 <code>[Basic utilities]</code></h2><p>让使用Java语言变得更舒适</p>\n<h3 id=\"Optional\"><a href=\"#Optional\" class=\"headerlink\" title=\"Optional\"></a>Optional</h3><blockquote>\n<p> 使用和避免null：null是模棱两可的，会引起令人困惑的错误，有些时候它让人很不舒服。很多Guava工具类用快速失败拒绝null值，而不是盲目地接受</p>\n</blockquote>\n<p>Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）。</p>\n<p>这里讲的optional 也是指jdk中的optional，其实二者类似，但是编码使用gauva的optional，阿里巴巴编程规范会提醒换成jdk自带的optional。</p>\n<p>这里强调一下Optional的用法。</p>\n<ul>\n<li><strong>不要用isPressent判断一个对象是否为空</strong><br>这种用法不但没有减少null的防御性检查，而且增加了Optional包装的过程，违背了Optional设计的初衷，因此开发中要避免这种糟糕的使用</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">TestEnum</span> &#123;<br>    <span class=\"hljs-comment\">/***</span><br><span class=\"hljs-comment\">     * 编号和对应的名称</span><br><span class=\"hljs-comment\">     */</span><br>    a(<span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-string\">&quot;aname&quot;</span>),<br>    b(<span class=\"hljs-string\">&quot;bbbb&quot;</span>, <span class=\"hljs-string\">&quot;bname&quot;</span>),<br>    c(<span class=\"hljs-string\">&quot;cccc&quot;</span>, <span class=\"hljs-string\">&quot;cname&quot;</span>),<br>    ;<br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> String code;<br>    <span class=\"hljs-meta\">@Getter</span><br>    <span class=\"hljs-keyword\">private</span> String name;<br><br>    TestEnum(String code, String name) &#123;<br>        <span class=\"hljs-built_in\">this</span>.code = code;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getNameByCod</span><span class=\"hljs-params\">(String code)</span> &#123;<br>        Optional&lt;String&gt; nameOfCode = Arrays.stream(TestEnum.values())<br>                .filter(item -&gt; StringUtils.equals(item.code, code))<br>                .map(TestEnum::getName)<br>                .findFirst();<br>        <span class=\"hljs-comment\">//不要这样使用optional 这样optional的意义：优雅的处理空指针 就不存在了</span><br>        <span class=\"hljs-keyword\">if</span> (nameOfCode.isPresent()) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;不存在&quot;</span>);<br>        &#125;<br>        <span class=\"hljs-comment\">// 请使用orElseThrow 和orElse</span><br>        <span class=\"hljs-keyword\">return</span> nameOfCode.orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;不存在&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>考虑让方法返回optional</strong></li>\n</ul>\n<p>《Effective Java》中对方法返回Optional的一些观点:</p>\n<ul>\n<li>容器（包括，集合，映射，数组，stream，optional）都不应该包装在Optional进行返回，返回空的容器能让客户端免于处理一个Optional</li>\n<li>如果无法返回结果，且没有返回结果客户端必须进行特殊的处理，那么就应该声明返回optional</li>\n<li>返回optional并不是一个不需要成本的操作，无论返回空，还是非空，使用optional作为返回值的方法都是需要初始化的，所以optional在看重性能的情况下使用不当是一种性能的浪费</li>\n<li>永远不要返回基本类型对于包装类型的Optional，这需要进行基本类型-&gt;包装类型-&gt;optional的三层包装，可以使用OptionalInt，optionallong等。</li>\n</ul>\n<h3 id=\"PreConditions前置条件检查\"><a href=\"#PreConditions前置条件检查\" class=\"headerlink\" title=\"PreConditions前置条件检查\"></a>PreConditions前置条件检查</h3><p>前置条件: 让方法中的条件检查更简单</p>\n<p>根据参数分为三种：</p>\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>没有额外参数</td>\n<td>抛出的异常中没有错误消息</td>\n</tr>\n<tr>\n<td>有一个Object对象作为额外参数</td>\n<td>抛出的异常使用Object.toString() 作为错误消息</td>\n</tr>\n<tr>\n<td>有一个String对象作为额外参数，并且有一组任意数量的附加Object对象</td>\n<td>这个变种处理异常消息的方式有点类似printf，但考虑GWT的兼容性和效率，只支持%s指示符。</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">test1</span><span class=\"hljs-params\">(Integer index, List&lt;String&gt;list)</span>&#123;<br>    <span class=\"hljs-keyword\">if</span> (Objects.isNull(index))&#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;index不可以为空&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (CollectionUtils.isEmpty(list))&#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;list不可以为空&quot;</span>);<br>    &#125;<br>    <span class=\"hljs-keyword\">if</span> (index&lt;<span class=\"hljs-number\">0</span>||index&gt;=list.size())&#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(String.format(<span class=\"hljs-string\">&quot;越界无法获取，下标%S&quot;</span>,index));<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> list.get(index);<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">test2</span><span class=\"hljs-params\">(Integer index, List&lt;String&gt;list)</span>&#123;<br>    Preconditions.checkNotNull(index,<span class=\"hljs-string\">&quot;index不可以为空&quot;</span>);<br>    Preconditions.checkNotNull(list,<span class=\"hljs-string\">&quot;list不可以为空&quot;</span>);<br>    Preconditions.checkElementIndex(index,list.size(),String.format(<span class=\"hljs-string\">&quot;越界无法获取，下标%S&quot;</span>,index));<br>    Preconditions.checkArgument(index &gt;= <span class=\"hljs-number\">0</span>&amp;&amp;index&lt;list.size(),<span class=\"hljs-string\">&quot;越界无法获取，下标%S&quot;</span>,index);<br>    <span class=\"hljs-keyword\">return</span> list.get(index);<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>test1 缺点：if看起来臃肿，优点：可用抛出我们系统的自定义异常便于前端反馈<br>test2 优点：简单直接，缺点：抛出的都是jdk中的异常，通一异常处理可能无法返回正确提示的通一结果集给前端<br>我们可用写一个带异常Class的工具类或者直接代理guava中的Predition 加一层try catch 使我其抛出我们系统的自定义异常。</p>\n<h3 id=\"ComparisonChain和Ordering\"><a href=\"#ComparisonChain和Ordering\" class=\"headerlink\" title=\"ComparisonChain和Ordering\"></a>ComparisonChain和Ordering</h3><p>想象一个场景，人先根据age排序后根据height排序</p>\n<h4 id=\"实现comparable\"><a href=\"#实现comparable\" class=\"headerlink\" title=\"实现comparable\"></a>实现comparable</h4><p>这是常规写法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-meta\">@Builder</span><br><span class=\"hljs-meta\">@NoArgsConstructor</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">People</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;People&gt; &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer age;<br>    <span class=\"hljs-keyword\">private</span> Integer height;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(People o)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!Objects.equals(<span class=\"hljs-built_in\">this</span>.age, o.age)) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.age - o.age;<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>.height - o.height;<br>        &#125;<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-type\">People</span> <span class=\"hljs-variable\">p1</span> <span class=\"hljs-operator\">=</span> People.builder().build();<br>        <span class=\"hljs-type\">People</span> <span class=\"hljs-variable\">p2</span> <span class=\"hljs-operator\">=</span> People.builder().build();<br>        List&lt;People&gt; list = Arrays.asList(p1, p2);<br>        Collections.sort(list);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">//你或许会写得更高级一点 如下</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(People o)</span> &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ageCompare</span> <span class=\"hljs-operator\">=</span> Ints.compare(<span class=\"hljs-built_in\">this</span>.age, o.age);<br>        <span class=\"hljs-keyword\">if</span> (ageCompare==<span class=\"hljs-number\">0</span>)&#123;<br>            <span class=\"hljs-keyword\">return</span> Ints.compare(<span class=\"hljs-built_in\">this</span>.height, o.height);<br>        &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> ageCompare;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure>\n\n<p>上述代码缺点：</p>\n<ul>\n<li>写法繁琐  </li>\n<li>忽略了空指针， return this.age - o.age; 这一句存在空指针的情况，对null进行拆箱直接NPE（NullPoint Exception，及空指针异常）  </li>\n<li>维护复杂，再加一个存款，加逻辑复杂。</li>\n</ul>\n<h4 id=\"JAVA8使用Stream进行操作\"><a href=\"#JAVA8使用Stream进行操作\" class=\"headerlink\" title=\"JAVA8使用Stream进行操作\"></a>JAVA8使用Stream进行操作</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(People o)</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">thisAge</span> <span class=\"hljs-operator\">=</span> Optional.ofNullable(<span class=\"hljs-built_in\">this</span>.age).orElse(Integer.MAX_VALUE);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">thisHeight</span> <span class=\"hljs-operator\">=</span> Optional.ofNullable(<span class=\"hljs-built_in\">this</span>.height).orElse(Integer.MAX_VALUE);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oAge</span> <span class=\"hljs-operator\">=</span> Optional.ofNullable(o.age).orElse(Integer.MAX_VALUE);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">oHeight</span> <span class=\"hljs-operator\">=</span> Optional.ofNullable(o.height).orElse(Integer.MAX_VALUE);<br>    <span class=\"hljs-keyword\">if</span> (thisAge!=oAge)&#123;<br>        <span class=\"hljs-keyword\">return</span> thisAge-oAge;<br>    &#125;<span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> thisHeight - oHeight;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上述代码，规避了NPE,但是缺点依旧存在：</p>\n<ul>\n<li>Stream复杂的写法，导致语法不明显，逻辑不通俗易懂。</li>\n<li>维护复杂，如果增加条件则需要变更方法。</li>\n</ul>\n<h4 id=\"ComparisonChain\"><a href=\"#ComparisonChain\" class=\"headerlink\" title=\"ComparisonChain\"></a>ComparisonChain</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span>  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compareTo</span><span class=\"hljs-params\">(People o)</span> &#123;  <br>    <span class=\"hljs-keyword\">return</span> ComparisonChain.start()  <br>            .compare(<span class=\"hljs-built_in\">this</span>.getAge(), o.getAge(), Ordering.natural().nullsFirst())  <br>            .compare(<span class=\"hljs-built_in\">this</span>.getHeight(), o.getHeight(), Ordering.natural().nullsFirst())  <br>            .result();  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>优点：</p>\n<ul>\n<li>优雅的处理空指针，传入比较器 Ordering.natural().nullsFirst() 让null在最前面</li>\n<li>语义化明显：先比较age 后比较 height，null在最前面</li>\n<li>更易于维护，只需要加一行</li>\n</ul>\n<h4 id=\"Ordering\"><a href=\"#Ordering\" class=\"headerlink\" title=\"Ordering\"></a>Ordering</h4><p>Ordering是Guava流畅风格比较器Comparator的实现，它可以用来构建复杂的比较器，以完成排序的功能。</p>\n<p>从实现上说Ordering实例就是一个特殊的Comparator实例。Ordering把很多基于Comparator的静态方法比如</p>\n<p>Collections.max包装成自己的实例方法(非静态方法)，并且提供了链式调用方法，来定制和增强现有的比较器。</p>\n<h5 id=\"创建排序器\"><a href=\"#创建排序器\" class=\"headerlink\" title=\"创建排序器\"></a>创建排序器</h5><p>常见的排序器可以由下面的静态方法创建</p>\n<ul>\n<li>natural()</li>\n</ul>\n<p>对可排序类型做自然排序，如数字按照大小，日期按照先后顺序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>);<br>    list.sort(Ordering.natural());<br>    System.out.println(list.toString());<span class=\"hljs-comment\">//[1, 3, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>usingToString()</li>\n</ul>\n<p>按对象的字符串形式做字典排序，即使用toString()返回的字符串按字典顺序进行排序。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; stringList = Lists.newArrayList(<span class=\"hljs-string\">&quot;zhangsan&quot;</span>,<span class=\"hljs-string\">&quot;lisi&quot;</span>,<span class=\"hljs-string\">&quot;wangwu&quot;</span>);<br>        Collections.sort(stringList,Ordering.usingToString());<br>        System.out.println(stringList.toString());<span class=\"hljs-comment\">//[lisi, wangwu, zhangsan]</span><br>        list.sort(Ordering.usingToString());<br>        System.out.println(list.toString());<span class=\"hljs-comment\">//[1, 3, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>from()<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">zhangsan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>());<br><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">lisi</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-string\">&quot;李四&quot;</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>());<br>List&lt;User&gt; users =  Lists.newArrayList(zhangsan,lisi);<br><span class=\"hljs-comment\">//按照age字段进行排序</span><br>Ordering&lt;User&gt; ordering1 = Ordering.from(Comparator.comparingInt(u -&gt; u.getAge()));<br>users.sort(ordering1);<br>System.out.println(users.toString());<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"链式调用方法\"><a href=\"#链式调用方法\" class=\"headerlink\" title=\"链式调用方法\"></a>链式调用方法</h5><ul>\n<li><p>reverse()<br>获取语义相反的排序器</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list = Lists.newArrayList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">6</span>,<span class=\"hljs-number\">9</span>,<span class=\"hljs-number\">7</span>,<span class=\"hljs-number\">8</span>);<br>list.sort(Ordering.natural().reverse());<br>System.out.println(list.toString());<span class=\"hljs-comment\">//[9, 8, 7, 6, 5, 3, 1]</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>nullsFirst()<br>使用当前排序器，但额外把null值排到最前面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list1 = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-comment\">//Collections.sort(list1); // 出现异常...</span><br>Collections.sort(list1, Ordering.natural().nullsFirst());<br>System.out.println(list1);<span class=\"hljs-comment\">//[null, 1, 2, 3, 5, 8]</span><br></code></pre></td></tr></table></figure></li>\n<li><p>nullsLast()<br>使用当前排序器，但额外把null值排到最后面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list2 = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-comment\">//Collections.sort(list1); // 出现异常...</span><br>Collections.sort(list1, Ordering.natural().nullsLast());<br>System.out.println(list1);<span class=\"hljs-comment\">//[1, 2, 3, 5, 8, null]</span><br></code></pre></td></tr></table></figure></li>\n<li><p>compound(Comparator)<br>成另一个比较器，以处理当前排序器中的相等情况</p>\n</li>\n</ul>\n<p>首先按照年龄进行排序，如果年龄相同则按照薪水排序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Comparator&lt;UserPojo&gt; objectComparator = Comparator.comparingInt(u -&gt; u.getAge());<br>        Comparator&lt;UserPojo&gt; objectComparator2 = Comparator.comparing(u -&gt; u.getSalary());<br>        Ordering&lt;UserPojo&gt; ordering1 = Ordering.from(objectComparator).compound(objectComparator2);<br>        <span class=\"hljs-type\">UserPojo</span> <span class=\"hljs-variable\">zhangsan</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserPojo</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>,<span class=\"hljs-number\">20</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>(),<span class=\"hljs-number\">1000</span>);<br>        <span class=\"hljs-type\">UserPojo</span> <span class=\"hljs-variable\">lisi</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserPojo</span>(<span class=\"hljs-string\">&quot;李四&quot;</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>(),<span class=\"hljs-number\">2000</span>);<br>        <span class=\"hljs-type\">UserPojo</span> <span class=\"hljs-variable\">wangwu</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserPojo</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>(),<span class=\"hljs-number\">3000</span>);<br>        <span class=\"hljs-type\">UserPojo</span> <span class=\"hljs-variable\">amao</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">UserPojo</span>(<span class=\"hljs-string\">&quot;杨猫&quot;</span>,<span class=\"hljs-number\">30</span>,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Company</span>(),<span class=\"hljs-number\">4000</span>);<br>        List&lt;UserPojo&gt; users =  Lists.newArrayList(zhangsan,lisi,wangwu,amao);<br>        users.sort(ordering1);<br>        <span class=\"hljs-comment\">//[UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]</span><br>        System.out.println(users.toString());<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>onResultOf(Function)<br>把比较器的元素使用Function函数转化成一个值result，再对这个值应用Ordering的比较方法。result的排序顺序就是最后的排序顺序<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;UserPojo&gt; users2 =  Lists.newArrayList(zhangsan,lisi,wangwu,amao,<span class=\"hljs-literal\">null</span>);<br>        Ordering&lt;UserPojo&gt; fOrdering = Ordering.natural().onResultOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Function</span>&lt;UserPojo, Comparable&gt;() &#123;<br>            <span class=\"hljs-meta\">@Override</span><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-meta\">@Nullable</span> Comparable <span class=\"hljs-title function_\">apply</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Nullable</span> UserPojo userPojo)</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> userPojo.getSalary();<br>            &#125;<br>        &#125;).nullsFirst();<br>        users2.sort(fOrdering);<br>        <span class=\"hljs-comment\">//[null, UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]</span><br>        System.out.println(users2.toString());<br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>注意</p>\n<blockquote>\n<p>注意链式排序器的调用顺序–从右往左的顺序，上面Ordering.natural().onResultOf().nullsFirst();<br>先调用apply方法获取salary值，并把salary为null的元素放到最前面，然后把剩下的进行自然排序<br>所以如果将nullsFirst放在onResultOf的左边则会报异常</p>\n</blockquote>\n<h5 id=\"运用排序器\"><a href=\"#运用排序器\" class=\"headerlink\" title=\"运用排序器\"></a>运用排序器</h5><ul>\n<li><p>greatestOf(Iterable iterable,int k)<br>获取可迭代对象中最大的k个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; result = Ordering.natural().greatestOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)),<span class=\"hljs-number\">2</span>);<br>       System.out.println(result);<span class=\"hljs-comment\">//[5, 4]</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>leastOf(Iterable iterable,int k)<br>对元素按照从小到大排序，并返回前k个元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; result1 = Ordering.natural().leastOf(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>)),<span class=\"hljs-number\">2</span>);<br>System.out.println(result1);<span class=\"hljs-comment\">//[1, 2]</span><br></code></pre></td></tr></table></figure></li>\n<li><p>isOrdered(Iterable)<br>判断可迭代对象是否已按照排序器排序:允许有排序值相等的元素</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">2</span>);<br>Collections.sort(list);<br><span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">order</span> <span class=\"hljs-operator\">=</span> Ordering.natural().isOrdered(list);<br>System.out.println(order);<span class=\"hljs-comment\">//true</span><br></code></pre></td></tr></table></figure></li>\n<li><p>sortedCopy(Iterable)<br>返回一个新的已经排序的列表，原来的列表顺序不会变</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; nums = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(Arrays.asList(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">3</span>));<br>List&lt;Integer&gt; resultCopy = Ordering.natural().sortedCopy(nums);<br>System.out.println(resultCopy); <span class=\"hljs-comment\">// [1, 3, 4]</span><br>System.out.println(nums); <span class=\"hljs-comment\">// [4, 1, 3]</span><br></code></pre></td></tr></table></figure></li>\n<li><p>min(E,E,…)<br>返回最小值，如果有多个，则返回第一个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">min</span> <span class=\"hljs-operator\">=</span> Ordering.natural().min(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>);<br>System.out.println(min);<br></code></pre></td></tr></table></figure></li>\n<li><p>max(E,E,…)<br>返回最大值，如果有多个，则返回第一个</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">max</span> <span class=\"hljs-operator\">=</span> Ordering.natural().max(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">1</span>);<br>System.out.println(max)<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"不可变集合\"><a href=\"#不可变集合\" class=\"headerlink\" title=\"不可变集合\"></a>不可变集合</h3><p>使用场景：</p>\n<p>如定义一系列状态比如吃饭，睡觉，过马路，需要根据这个状态判断是否可以玩手机，可以在类中定义集合包装这个三个状态，如果当前状态属于三个之一那么不可以玩手机，你可以使用基本的hashset，但是hashset的元素可以被更改，导致可能方法的判断和原本的语义出现出入</p>\n<p>优点</p>\n<p>当对象被不可信的库调用时，不可变形式是安全的；<br>不可变对象被多个线程调用时，不存在竞态条件问题<br>不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变 形式有更好的内存利用率（分析和测试细节）；<br>不可变对象因为有固定不变，可以作为常量来安全使用</p>\n<h3 id=\"新集合类型\"><a href=\"#新集合类型\" class=\"headerlink\" title=\"新集合类型\"></a>新集合类型</h3><h4 id=\"Multiset\"><a href=\"#Multiset\" class=\"headerlink\" title=\"Multiset\"></a>Multiset</h4><p>可以用两种方式看待Multiset：</p>\n<ul>\n<li>没有元素顺序限制的ArrayList<br>  当把Multiset看成普通的Collection时，它表现得就像无序的ArrayList<ul>\n<li>add(E)添加单个给定元素</li>\n<li>iterator()返回一个迭代器，包含Multiset的所有元素（包括重复的元素）</li>\n<li>size()返回所有元素的总个数（包括重复的元素）</li>\n<li>Map&lt;E, Integer&gt;，键为元素，值为计数0</li>\n</ul>\n</li>\n<li>Multiset看作Map&lt;E, Integer&gt;时，它也提供了符合性能期望的查询操作：<br>  - count(Object)返回给定元素的计数。HashMultiset.count的复杂度为O(1)，TreeMultiset.count的复杂度为O(log n)。<br>  - entrySet()返回Set&lt;Multiset.Entry&gt;，和Map的entrySet类似。<br>  - elementSet()返回所有不重复元素的Set，和Map的keySet()类似。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MultiSetTest</span> &#123;<br><br>    <span class=\"hljs-comment\">/****</span><br><span class=\"hljs-comment\">     * java 8 一下</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> list</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, Integer&gt; <span class=\"hljs-title function_\">statisticsWordCount1</span><span class=\"hljs-params\">(List&lt;String&gt; list)</span> &#123;<br>        Map&lt;String, Integer&gt; countMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">if</span> (list == <span class=\"hljs-literal\">null</span> || list.size() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> countMap;<br>        &#125;<br>        <span class=\"hljs-keyword\">for</span> (String s : list) &#123;<br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">nowCount</span> <span class=\"hljs-operator\">=</span> countMap.getOrDefault(s, <span class=\"hljs-number\">0</span>);<br>            countMap.put(s, nowCount + <span class=\"hljs-number\">1</span>);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> countMap;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * java 8</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> list</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, Integer&gt; <span class=\"hljs-title function_\">statisticsWordCount2</span><span class=\"hljs-params\">(List&lt;String&gt; list)</span> &#123;<br>        list = Optional.ofNullable(list).orElse(Collections.emptyList());<br>        <span class=\"hljs-keyword\">return</span> list.stream()<br>                .collect(Collectors.groupingBy(t -&gt; t,<br>                        Collectors.reducing(<span class=\"hljs-number\">0</span>, num -&gt; <span class=\"hljs-number\">1</span>, Integer::sum)));<br><br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * guava api</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> list</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, Integer&gt; <span class=\"hljs-title function_\">statisticsWordCount3</span><span class=\"hljs-params\">(List&lt;String&gt; list)</span> &#123;<br>        list = Optional.ofNullable(list).orElse(Collections.emptyList());<br>        HashMultiset&lt;String&gt; multiset = HashMultiset.create(list);<br>        System.out.println(multiset);<br>        <span class=\"hljs-keyword\">return</span> multiset.stream()<br>                .collect(Collectors.toMap(item -&gt; item, multiset::count, BinaryOperator.maxBy(Ordering.natural())));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        Map&lt;String, Integer&gt; map = statisticsWordCount3(Arrays.asList(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;c&quot;</span>));<br>        map.forEach((k, v) -&gt; System.out.println(k + <span class=\"hljs-string\">&quot;-&quot;</span> + v));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"SortedMultiset\"><a href=\"#SortedMultiset\" class=\"headerlink\" title=\"SortedMultiset\"></a>SortedMultiset</h4><p>Multiset 接口的变种，它支持高效地获取指定范围的子集。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SortMultiSetTest</span> &#123;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在不改变源money 元素的情况下 统计介于min和max间的钱</span><br><span class=\"hljs-comment\">     * money中的null 视为0</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Float&gt; <span class=\"hljs-title function_\">findMoneyBetween1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> min, <span class=\"hljs-type\">float</span> max, List&lt;Float&gt; money)</span> &#123;<br>        money = Optional.ofNullable(money).orElse(Collections.emptyList());<br>        <span class=\"hljs-keyword\">return</span> money.stream().map(item -&gt; Optional.ofNullable(item).orElse(<span class=\"hljs-number\">0F</span>))<br>                .filter(item -&gt; item &gt; min &amp;&amp; item &lt; max)<br>                .collect(Collectors.toList());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 在不改变源money 元素的情况下 统计介于min和max间的钱</span><br><span class=\"hljs-comment\">     * money中的null 视为0</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> List&lt;Float&gt; <span class=\"hljs-title function_\">findMoneyBetween2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> min, <span class=\"hljs-type\">float</span> max, List&lt;Float&gt; money)</span> &#123;<br>        money = Optional.ofNullable(money).orElse(Collections.emptyList());<br>        TreeMultiset&lt;Float&gt; treeMultiset = TreeMultiset.create(Ordering.&lt;Float&gt;natural().onResultOf(f1 -&gt; Optional.ofNullable(f1).orElse(<span class=\"hljs-number\">0F</span>)));<br>        treeMultiset.addAll(money);<br>        <span class=\"hljs-keyword\">return</span> Lists.newLinkedList(treeMultiset.subMultiset(min, BoundType.CLOSED, max, BoundType.CLOSED));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"Multimap\"><a href=\"#Multimap\" class=\"headerlink\" title=\"Multimap\"></a>Multimap</h4><p>Guava的 Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, Collection&lt;Integer&gt;&gt; <span class=\"hljs-title function_\">mergeMap1</span><span class=\"hljs-params\">(Map&lt;String, Integer&gt; map1, Map&lt;String, Integer&gt; map2)</span> &#123;<br>    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());<br>    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());<br>    Set&lt;String&gt; allKey = Stream.of(map1.keySet(), map2.keySet()).flatMap(Collection::stream).collect(Collectors.toSet());<br>    Map&lt;String, Collection&lt;Integer&gt;&gt; resMap = Maps.newHashMap();<br>    <span class=\"hljs-keyword\">for</span> (String key : allKey) &#123;<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">integer1</span> <span class=\"hljs-operator\">=</span> map1.get(key);<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">integer2</span> <span class=\"hljs-operator\">=</span> map2.get(key);<br>        Set&lt;Integer&gt; tempSet = Sets.newHashSet();<br>        <span class=\"hljs-keyword\">if</span> (Objects.nonNull(integer1)) &#123;<br>            tempSet.add(integer1);<br>        &#125;<br>        <span class=\"hljs-keyword\">if</span> (Objects.nonNull(integer2)) &#123;<br>            tempSet.add(integer2);<br>        &#125;<br>        resMap.put(key, tempSet);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> resMap;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Map&lt;String, Collection&lt;Integer&gt;&gt; <span class=\"hljs-title function_\">mergeMap2</span><span class=\"hljs-params\">(Map&lt;String, Integer&gt; map1, Map&lt;String, Integer&gt; map2)</span> &#123;<br>    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());<br>    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());<br>    Multimap&lt;String, Integer&gt; multimap = HashMultimap.create();<br>    map1.forEach(multimap::put);<br>    map2.forEach(multimap::put);<br>    <span class=\"hljs-keyword\">return</span> multimap.asMap();<br>&#125;<br><br></code></pre></td></tr></table></figure>\n<h4 id=\"BiMap\"><a href=\"#BiMap\" class=\"headerlink\" title=\"BiMap\"></a>BiMap</h4><p>BiMap是特殊的Map：</p>\n<ul>\n<li>可以用 inverse()反转BiMap&lt;K, V&gt;的键值映射</li>\n<li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li>\n<li>在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。如果对特定值，你想要强制替换它的键，请使用 BiMap.forcePut(key, value)。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BiMapLearn</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        <span class=\"hljs-comment\">//想象这是用户id 和用户名对应map</span><br>        <span class=\"hljs-comment\">//你需要根据id查询用户名。根据用户名查询id（用户名同样不可以重复）</span><br>        HashBiMap&lt;String, String&gt; userNameAndIdMap = HashBiMap.create();<br>        userNameAndIdMap.put(<span class=\"hljs-string\">&quot;2017015600&quot;</span>,<span class=\"hljs-string\">&quot;陈兴cupk&quot;</span>);<br>        userNameAndIdMap.put(<span class=\"hljs-string\">&quot;80309525&quot;</span>,<span class=\"hljs-string\">&quot;陈兴cmbnk&quot;</span>);<br>        <span class=\"hljs-comment\">// 重复value 会抛出异常ava.lang.IllegalArgumentException:</span><br>        <span class=\"hljs-comment\">// value already present: 陈兴cmbnk</span><br><span class=\"hljs-comment\">//        userNameAndIdMap.put(&quot;309525&quot;,&quot;陈兴cmbnk&quot;);</span><br>        <span class=\"hljs-comment\">//forcePut 可以强制替换 key -value 组合</span><br><span class=\"hljs-comment\">//        userNameAndIdMap.forcePut(&quot;309525&quot;,&quot;陈兴cmbnk&quot;);</span><br>        System.out.println(userNameAndIdMap.get(<span class=\"hljs-string\">&quot;2017015600&quot;</span>));<br>        System.out.println(userNameAndIdMap.inverse().get(<span class=\"hljs-string\">&quot;陈兴cmbnk&quot;</span>));<br>        System.out.println(userNameAndIdMap.get(<span class=\"hljs-string\">&quot;80309525&quot;</span>));<br>        <span class=\"hljs-comment\">//set类型的key value</span><br>        Set&lt;String&gt; strings = userNameAndIdMap.keySet();<br>        Set&lt;String&gt; values = userNameAndIdMap.values();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"Table\"><a href=\"#Table\" class=\"headerlink\" title=\"Table\"></a>Table</h4><p>使用场景：当你需要多个字段作为key时，你可能为这个key编写一个类，重写equals和hashMap。或者使用形同Map&lt;FirstName, Map&lt;LastName, Person&gt;&gt;的map结构，前者编码繁琐，后者使用不友好（第一个get后判空，后才能左第二次get）</p>\n<p>Guava为此提供了新集合类型Table，它有两个支持所有类型的键：”行”和”列”。Table提供多种视图，以便你从各种角度使用它：</p>\n<p>rowMap()：用Map&lt;R, Map&lt;C, V&gt;&gt;表现Table&lt;R, C, V&gt;。同样的， rowKeySet()返回”行”的集合Set。</p>\n<p>row ：用Map&lt;C, V&gt;返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。</p>\n<p>类似的列访问方法：columnMap()、columnKeySet()、column。（基于列的访问会比基于的行访问稍微低效点）</p>\n<p>cellSet()：用元素类型为Table.Cell的Set表现Table&lt;R, C, V&gt;。Cell类似于Map.Entry，但它是用行和列两个键区分的。</p>\n<p>使用案例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TableLearn</span> &#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(getNameByAgeAndNo1(<span class=\"hljs-number\">17</span>, <span class=\"hljs-string\">&quot;201715600&quot;</span>));<br>        System.out.println(getNameByAgeAndNo2(<span class=\"hljs-number\">17</span>, <span class=\"hljs-string\">&quot;201715600&quot;</span>));<br>    &#125;<br><br>\t<span class=\"hljs-comment\">//根据年龄和编号 获取名字，编写KeyOfAgeAndNo 重写equals hashcode</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getNameByAgeAndNo1</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age,String no)</span>&#123;<br>        HashMap&lt;KeyOfAgeAndNo, String&gt; memory = Maps.newHashMap();<br>        memory.put(KeyOfAgeAndNo.of(<span class=\"hljs-number\">17</span>,<span class=\"hljs-string\">&quot;201715600&quot;</span>),<span class=\"hljs-string\">&quot;大一的陈兴&quot;</span>);<br>        memory.put(KeyOfAgeAndNo.of(<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;0929&quot;</span>),<span class=\"hljs-string\">&quot;高一的陈兴&quot;</span>);<br>        memory.put(KeyOfAgeAndNo.of(<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;80303697&quot;</span>),<span class=\"hljs-string\">&quot;实习的陈兴&quot;</span>);<br><br>        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(memory.get(KeyOfAgeAndNo.of(age, no)))<br>                .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;查无此人&quot;</span>));<br>    &#125;<br>\t<span class=\"hljs-comment\">//编写KeyOfAgeAndNo 重写equals hashcode</span><br>    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">KeyOfAgeAndNo</span>&#123;<br>        Integer age;<br>        String no;<br>        <span class=\"hljs-keyword\">static</span> KeyOfAgeAndNo <span class=\"hljs-title function_\">of</span><span class=\"hljs-params\">( Integer age,String no)</span>&#123;<br>            <span class=\"hljs-type\">KeyOfAgeAndNo</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">KeyOfAgeAndNo</span>();<br>            res.age=age;<br>            res.no=no;<br>            <span class=\"hljs-keyword\">return</span> res;<br>        &#125;<br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">equals</span><span class=\"hljs-params\">(Object o)</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span> == o) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;<br>            <span class=\"hljs-keyword\">if</span> (!(o <span class=\"hljs-keyword\">instanceof</span> KeyOfAgeAndNo)) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;<br>            <span class=\"hljs-type\">KeyOfAgeAndNo</span> <span class=\"hljs-variable\">that</span> <span class=\"hljs-operator\">=</span> (KeyOfAgeAndNo) o;<br>            <span class=\"hljs-keyword\">return</span> Objects.equals(age, that.age) &amp;&amp;<br>                    Objects.equals(no, that.no);<br>        &#125;<br><br>        <span class=\"hljs-meta\">@Override</span><br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">hashCode</span><span class=\"hljs-params\">()</span> &#123;<br>            <span class=\"hljs-keyword\">return</span> Objects.hash(age, no);<br>        &#125;<br>    &#125;<br>\t<span class=\"hljs-comment\">//使用table </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getNameByAgeAndNo2</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> age,String no)</span>&#123;<br>        HashBasedTable&lt;Integer ,String,String&gt;table=HashBasedTable.create();<br>        table.put(<span class=\"hljs-number\">17</span>,<span class=\"hljs-string\">&quot;201715600&quot;</span>,<span class=\"hljs-string\">&quot;大一的陈兴&quot;</span>);<br>        table.put(<span class=\"hljs-number\">14</span>,<span class=\"hljs-string\">&quot;0929&quot;</span>,<span class=\"hljs-string\">&quot;高一的陈兴&quot;</span>);<br>        table.put(<span class=\"hljs-number\">20</span>,<span class=\"hljs-string\">&quot;80303697&quot;</span>,<span class=\"hljs-string\">&quot;实习的陈兴&quot;</span>);<br>        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(table.get(age, no))<br>                .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;查无此人&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n<h4 id=\"ClassToInstanceMap\"><a href=\"#ClassToInstanceMap\" class=\"headerlink\" title=\"ClassToInstanceMap\"></a>ClassToInstanceMap</h4><ul>\n<li>使用场景，类型指向实例，使用普通map需要</li>\n<li>示例<br>  getInstanceByClass1需要进行强转因为map get方法返回object类型，不能限制key的类型<br>  getInstanceByClass2则没有这种需要 且可以限定key的类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ClassToInstanceMapLearn</span> &#123;<br><span class=\"hljs-comment\">//静态内部类实现单例 和ClassToInstanceMap 使用没有必要关系</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SingletonHolder</span> &#123;<br>        <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ClassToInstanceMapLearn INSTANCE;<br><br>        <span class=\"hljs-keyword\">static</span> &#123;<br>            INSTANCE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ClassToInstanceMapLearn</span>();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">ClassToInstanceMapLearn</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;ClassToInstanceMapLearn Constructor&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> ClassToInstanceMapLearn <span class=\"hljs-title function_\">newInstance</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;Class&lt;?&gt;, ? <span class=\"hljs-built_in\">super</span> ClassToInstanceMapLearn&gt; Memory1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        Memory1.put(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());<br>        <span class=\"hljs-comment\">//加入从 简单工场拿SingletonHolder实例 强转化 将抛出异常</span><br>        Memory1.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ClassToInstanceMapLearn</span>&gt; T <span class=\"hljs-title function_\">getInstanceByClass1</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-comment\">//需要强转需要去判断 是否是clazz的实例 错误写法</span><br>        <span class=\"hljs-keyword\">return</span> (T) Optional.ofNullable(Memory1.get(clazz))<br>                .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;不存在&quot;</span>));<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> ClassToInstanceMap&lt;? <span class=\"hljs-built_in\">super</span> ClassToInstanceMapLearn&gt; Memory2 = MutableClassToInstanceMap.create();<br><br>    <span class=\"hljs-keyword\">static</span> &#123;<br>        Memory2.putInstance(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());<br>        <span class=\"hljs-comment\">//无法加入</span><br><span class=\"hljs-comment\">//        Memory2.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());</span><br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">ClassToInstanceMapLearn</span>&gt; T <span class=\"hljs-title function_\">getInstanceByClass2</span><span class=\"hljs-params\">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class=\"hljs-comment\">//不需要强转</span><br>        <span class=\"hljs-keyword\">return</span> Optional.ofNullable(Memory2.getInstance(clazz))<br>                .orElseThrow(() -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(<span class=\"hljs-string\">&quot;不存在&quot;</span>));<br>    &#125;<br><br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>        System.out.println(getInstanceByClass1(ClassToInstanceMapLearn.class));<br>         System.out.println(getInstanceByClass2(ClassToInstanceMapLearn.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"集合-Collections\"><a href=\"#集合-Collections\" class=\"headerlink\" title=\"集合[Collections]\"></a>集合<code>[Collections]</code></h2><p>Guava对JDK集合的扩展，这是Guava最成熟和为人所知的部分<br>guava 中的集合工具常常以集合名称加s出现</p>\n<ul>\n<li>Collections2 因为java存在Collections guava加了2</li>\n<li>Lists</li>\n<li>Maps</li>\n<li>Sets<br>等等 上面介绍的新集合类型也存在对应的工具类<br>这些工具类的共性<strong>都存在静态工厂方法</strong><br>为什么要使用静态工厂方法，它相比于构造方法（这里的静态工厂方法不是指，设计模式中的工厂模式）<br>《Effective Java》第一条 使用静态工厂方法代替构造器，给予了解答</li>\n<li>静态工厂方法有名字<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//这一句是什么意思</span><br><span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">big1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigInteger</span>(<span class=\"hljs-number\">10</span>, <span class=\"hljs-number\">100</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>(<span class=\"hljs-number\">10</span>));<br>System.out.println(big1);<br><span class=\"hljs-comment\">//这一句又是什么意思</span><br><span class=\"hljs-type\">BigInteger</span> <span class=\"hljs-variable\">big2</span> <span class=\"hljs-operator\">=</span> BigInteger.probablePrime(<span class=\"hljs-number\">10</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>(<span class=\"hljs-number\">10</span>));<br>System.out.println(big2);<br></code></pre></td></tr></table></figure></li>\n<li>静态工厂方法，不必每次都生成一个对象<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//虽然下面两句都在放屁，但是前者的屁更臭</span><br><span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">flag</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>().nextInt() % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br><span class=\"hljs-comment\">//每次生成一个新对象</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">b1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Boolean</span>(flag);<br><span class=\"hljs-comment\">//不会生成新对象</span><br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">b2</span> <span class=\"hljs-operator\">=</span> Boolean.valueOf(flag);<br></code></pre></td></tr></table></figure></li>\n<li>静态工厂方法可以返回任何原返回类型的子类型，如guava中的api</li>\n<li>静态工厂的返回对象的类可也随着每次调用而变化，取决于入参类似于简单工厂模式</li>\n<li>静态工厂方法返回的对象所属的类可以在，在编写百行该静态工厂方法的类时不存在，如JDBC数据库连接</li>\n</ul>\n<h3 id=\"Collections2\"><a href=\"#Collections2\" class=\"headerlink\" title=\"Collections2\"></a>Collections2</h3><ul>\n<li>过滤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">filterLearn</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-literal\">null</span>);<br>    Collection&lt;Integer&gt; filter = Collections2.filter(list, Objects::nonNull);<br>    System.out.println(list);<br>    System.out.println(filter);<br>    <span class=\"hljs-comment\">//返回一个继承了AbstractCollection的集合</span><br>    System.out.println(filter.getClass());<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>转换<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Collections2Test</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Integer nums;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Collections2Test</span><span class=\"hljs-params\">(Integer nums)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.nums = nums;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">transformLearn</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">Collections2Test</span> <span class=\"hljs-variable\">c1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Collections2Test</span>(<span class=\"hljs-number\">1</span>);<br>        <span class=\"hljs-type\">Collections2Test</span> <span class=\"hljs-variable\">c2</span> <span class=\"hljs-operator\">=</span> ne <span class=\"hljs-title function_\">Collections2Test</span><span class=\"hljs-params\">(<span class=\"hljs-number\">2</span>)</span>;<br>        <span class=\"hljs-type\">Collections2Test</span> <span class=\"hljs-variable\">c3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Collections2Test</span>(<span class=\"hljs-number\">3</span>);<br>        List&lt;Collections2Test&gt; list = Arrays.asList(c1, c2, c3);<br>        Collection&lt;Integer&gt; transform = Collections2.transform(list,<br>                t -&gt; Optional.ofNullable(t)<br>                        .orElse(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Collections2Test</span>(<span class=\"hljs-number\">0</span>)).nums);<br>        System.out.println(transform);<br>        System.out.println(transform.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>\n<li>全排列<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    ArrayList&lt;Integer&gt; list = Lists.newArrayList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br>    Collection&lt;List&lt;Integer&gt;&gt; lists = Collections2.orderedPermutations(list);<br>    lists.forEach(System.out::println);<br>    Collection&lt;List&lt;Integer&gt;&gt; permutations = Collections2.permutations(list);<br>    System.out.println(<span class=\"hljs-string\">&quot;====&quot;</span>);<br>    permutations.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Lists\"><a href=\"#Lists\" class=\"headerlink\" title=\"Lists\"></a>Lists</h3><ul>\n<li>切割<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//获取一个字符串中的全部字符，返回不可变集合</span><br>ImmutableList&lt;Character&gt; chars = Lists.charactersOf(<span class=\"hljs-string\">&quot;123&quot;</span>);<br>System.out.println(chars);<br><span class=\"hljs-comment\">//按照大小分割list</span><br>ArrayList&lt;Integer&gt; intList = Lists.newArrayList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>);<br>List&lt;List&lt;Integer&gt;&gt; partitionList = Lists.partition(intList, <span class=\"hljs-number\">2</span>);<br>System.out.println(partitionList);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Sets\"><a href=\"#Sets\" class=\"headerlink\" title=\"Sets\"></a>Sets</h3><ul>\n<li>交集<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">HashSet&lt;Integer&gt; set1 = Sets.newHashSet(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>);<br>HashSet&lt;Integer&gt; set2 = Sets.newHashSet(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-comment\">//返回交集</span><br>Sets.SetView&lt;Integer&gt; intersection = Sets.intersection(set1, set2);<br>System.out.println(intersection);<br></code></pre></td></tr></table></figure></li>\n<li>差集<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//返回set1中存在 s2中不存在的元素</span><br>System.out.println(Sets.difference(set1, set2));<br>System.out.println(Sets.difference(set2, set1));<br></code></pre></td></tr></table></figure></li>\n<li>并集<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//返回并集</span><br>Sets.SetView&lt;Integer&gt; union = Sets.union(set1, set2);<br>System.out.println(union);<br></code></pre></td></tr></table></figure></li>\n<li>过滤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">System.out.println(Sets.filter(union, t -&gt; t % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>));<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"Maps\"><a href=\"#Maps\" class=\"headerlink\" title=\"Maps\"></a>Maps</h3><ul>\n<li>uniqueIndex 根据传入的function生成map<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">ArrayList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//传入function根据function生成map 要求 key 不可重复</span><br>ImmutableMap&lt;String, Integer&gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);<br></code></pre></td></tr></table></figure></li>\n<li>获取两个map的不同<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//如果你预计hashMap的大小请使用这个方法</span><br>HashMap&lt;String, Integer&gt; map1 = Maps.newHashMapWithExpectedSize(<span class=\"hljs-number\">3</span>);<br>map1.put(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-number\">1</span>);<br>map1.put(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-number\">2</span>);<br>map1.put(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-number\">3</span>);<br>map1.put(<span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-number\">3</span>);<br>map1.put(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-number\">5</span>);<br>ArrayList&lt;Integer&gt; list1 = Lists.newArrayList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">6</span>);<br><span class=\"hljs-comment\">//传入function根据function生成map 要求 key 不可重复</span><br>ImmutableMap&lt;String, Integer&gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);<br>MapDifference&lt;String, Integer&gt; difference = Maps.difference(map1, integerImmutableMap);<br><span class=\"hljs-comment\">//左边独有key</span><br>Map&lt;String, Integer&gt; mapLeft = difference.entriesOnlyOnLeft();<br><span class=\"hljs-comment\">//右边独有key</span><br>Map&lt;String, Integer&gt; mapRight = difference.entriesOnlyOnRight();<br><span class=\"hljs-comment\">//两个map相同key 但是不同value</span><br>Map&lt;String, MapDifference.ValueDifference&lt;Integer&gt;&gt; valueDifferenceMap = difference.entriesDiffering();<br><span class=\"hljs-comment\">//左边map的值 有边map的值</span><br>System.out.println(valueDifferenceMap.get(<span class=\"hljs-string\">&quot;4&quot;</span>).rightValue());<br>System.out.println(valueDifferenceMap.get(<span class=\"hljs-string\">&quot;4&quot;</span>).leftValue());<br></code></pre></td></tr></table></figure></li>\n<li>过滤<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//过滤map 中的Entries</span><br>Map&lt;String, Integer&gt; filterEntriesMap = Maps.filterEntries(map1, e -&gt; &#123;<br>    <span class=\"hljs-keyword\">assert</span> e != <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">return</span> StringUtils.equals(e.getKey(), String.valueOf(e.getValue()));<br>&#125;);<br><span class=\"hljs-comment\">//过滤key</span><br>Map&lt;String, Integer&gt; filterKeysMap = Maps.filterKeys(map1, StringUtils::isNotBlank);<br><span class=\"hljs-comment\">//过滤value</span><br>Map&lt;String, Integer&gt; filterValuesMap = Maps.filterValues(map1, v -&gt; &#123;<br>    <span class=\"hljs-keyword\">assert</span> v != <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">return</span> v % <span class=\"hljs-number\">2</span> == <span class=\"hljs-number\">0</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li>根据map构造转换器<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">HashBiMap&lt;String, Integer&gt; biMapForConverter = HashBiMap.create(integerImmutableMap);<br>Converter&lt;String, Integer&gt; converter = Maps.asConverter(biMapForConverter);<br>System.out.println(converter.convert(<span class=\"hljs-string\">&quot;1&quot;</span>));<br>Iterable&lt;Integer&gt; convertRes = converter.convertAll(Arrays.asList(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>));<br></code></pre></td></tr></table></figure></li>\n<li>转换<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Map&lt;String, String&gt; transformEntriesMap = Maps.transformEntries(map1, (key, value) -&gt; String.valueOf(map1.get(key)));<br><span class=\"hljs-comment\">//同样还存在</span><br><span class=\"hljs-comment\">//        Maps.transformValues()</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"字符串处理\"><a href=\"#字符串处理\" class=\"headerlink\" title=\"字符串处理\"></a>字符串处理</h2><h3 id=\"连接器-Joiner\"><a href=\"#连接器-Joiner\" class=\"headerlink\" title=\"连接器[Joiner]\"></a>连接器<code>[Joiner]</code></h3><p><strong>连接任何实现了Iterable结果的类型</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-literal\">null</span>);<br><span class=\"hljs-comment\">//跳过null</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str1</span> <span class=\"hljs-operator\">=</span> Joiner.on(<span class=\"hljs-string\">&quot;-&quot;</span>).skipNulls().join(list);<br>System.out.println(str1);<br><span class=\"hljs-comment\">//用NNNN代替空</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str2</span> <span class=\"hljs-operator\">=</span> Joiner.on(<span class=\"hljs-string\">&quot;-&quot;</span>).useForNull(<span class=\"hljs-string\">&quot;NNNN&quot;</span>).join(list);<br>System.out.println(str2);<br><span class=\"hljs-comment\">//空指针</span><br>String str3= Joiner.on(<span class=\"hljs-string\">&quot;-&quot;</span>).join(list);<br>System.out.println(str3);<br></code></pre></td></tr></table></figure>\n<ul>\n<li>连接map<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">HashMap&lt;String, String&gt; map = Maps.newHashMap();<br>map.put(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;2&quot;</span>);<br><span class=\"hljs-comment\">//每一个k-v连接方式为\\n  kv连接方式为-&gt;</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str1</span> <span class=\"hljs-operator\">=</span> Joiner.on(<span class=\"hljs-string\">&quot;\\n&quot;</span>).withKeyValueSeparator(<span class=\"hljs-string\">&quot;-&gt;&quot;</span>).join(map);<br>System.out.println(str1);<br></code></pre></td></tr></table></figure></li>\n<li>连接实现了Appendable的任何类型<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">StringBuilder</span> <span class=\"hljs-variable\">str3</span> <span class=\"hljs-operator\">=</span> Joiner.on(<span class=\"hljs-string\">&quot;-&quot;</span>).appendTo(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuilder</span>(), Arrays.asList(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;2&quot;</span>));<br>System.out.println(str3);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"分割器-Splitter\"><a href=\"#分割器-Splitter\" class=\"headerlink\" title=\"分割器[Splitter]\"></a>分割器<code>[Splitter]</code></h3><ul>\n<li>分隔成list<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String str=<span class=\"hljs-string\">&quot;1-2  -3 - 4- - - &quot;</span>;<br>List&lt;String&gt; list1 = Splitter.fixedLength(<span class=\"hljs-number\">2</span>).splitToList(str);<br>System.out.println(list1);<br>List&lt;String&gt; list2 = Splitter.on(<span class=\"hljs-string\">&quot;-&quot;</span>).splitToList(str);<br>System.out.println(list2);<br>List&lt;String&gt; list3 = Splitter.on(<span class=\"hljs-string\">&quot;-&quot;</span>).trimResults().splitToList(str);<br>System.out.println(list3);<br></code></pre></td></tr></table></figure></li>\n<li>分割成map<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">String str2=<span class=\"hljs-string\">&quot;1#2-2#3-3#1&quot;</span>;<br><span class=\"hljs-comment\">//每一组entry使用的是-分割 k和v使用的#分割</span><br>Map&lt;String, String&gt; map = Splitter.on(<span class=\"hljs-string\">&quot;-&quot;</span>).withKeyValueSeparator(<span class=\"hljs-string\">&quot;#&quot;</span>).split(str2);<br>map.forEach((k,v)-&gt; System.out.println(k+<span class=\"hljs-string\">&quot;-&gt;&quot;</span>+v));<br></code></pre></td></tr></table></figure></li>\n<li>分割成Iterable<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Iterable&lt;String&gt; stringIterable = Splitter.on(<span class=\"hljs-string\">&quot;-&quot;</span>).split(str);<br>stringIterable.iterator().forEachRemaining(System.out::println);<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"字符匹配器\"><a href=\"#字符匹配器\" class=\"headerlink\" title=\"字符匹配器\"></a>字符匹配器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//删除字符</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/1/2/3/4&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str1</span> <span class=\"hljs-operator\">=</span> CharMatcher.is(<span class=\"hljs-string\">&#x27;/&#x27;</span>).removeFrom(str);<br>System.out.println(str1);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str2</span> <span class=\"hljs-operator\">=</span> CharMatcher.anyOf(<span class=\"hljs-string\">&quot;/1&quot;</span>).removeFrom(str);<br>System.out.println(str2);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str3</span> <span class=\"hljs-operator\">=</span> CharMatcher.noneOf(<span class=\"hljs-string\">&quot;12/&quot;</span>).removeFrom(str);<br>System.out.println(str3);<br><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str4</span> <span class=\"hljs-operator\">=</span> CharMatcher.inRange(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>).removeFrom(str);<br>System.out.println(str4);<br><span class=\"hljs-comment\">//替换</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str5</span> <span class=\"hljs-operator\">=</span> CharMatcher.inRange(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>).replaceFrom(<span class=\"hljs-string\">&quot;a1b2c3&quot;</span>, <span class=\"hljs-string\">&quot;.&quot;</span>);<br>System.out.println(str5);<br><span class=\"hljs-comment\">//裁剪</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str6</span> <span class=\"hljs-operator\">=</span> CharMatcher.inRange(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>).trimTrailingFrom(<span class=\"hljs-string\">&quot;a1b2c3&quot;</span>);<br>System.out.println(str6);<br><span class=\"hljs-comment\">//比对</span><br>System.out.println(CharMatcher.inRange(<span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;9&#x27;</span>).matchesAllOf(<span class=\"hljs-string\">&quot;1b2&quot;</span>));<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字符集和大小写格式\"><a href=\"#字符集和大小写格式\" class=\"headerlink\" title=\"字符集和大小写格式\"></a>字符集和大小写格式</h3><ul>\n<li>Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。</li>\n<li>CaseFormat</li>\n</ul>\n<h2 id=\"缓存-Caches\"><a href=\"#缓存-Caches\" class=\"headerlink\" title=\"缓存[Caches]\"></a>缓存<code>[Caches]</code></h2><p>Guava Cache：本地缓存实现，支持多种缓存过期策略</p>\n<h2 id=\"函数式风格-Functional-idioms\"><a href=\"#函数式风格-Functional-idioms\" class=\"headerlink\" title=\"函数式风格[Functional idioms]\"></a>函数式风格<code>[Functional idioms]</code></h2><p>Guava的函数式支持可以显著简化代码，但请谨慎使用它</p>\n<h2 id=\"并发-Concurrency\"><a href=\"#并发-Concurrency\" class=\"headerlink\" title=\"并发[Concurrency]\"></a>并发<code>[Concurrency]</code></h2><p>强大而简单的抽象，让编写正确的并发代码更简单</p>\n<ul>\n<li>ListenableFuture：完成后触发回调的Future</li>\n<li>Service框架：抽象可开启和关闭的服务，帮助你维护服务的状态逻辑</li>\n</ul>\n<h2 id=\"字符串处理-Strings\"><a href=\"#字符串处理-Strings\" class=\"headerlink\" title=\"字符串处理[Strings]\"></a>字符串处理<code>[Strings]</code></h2><p>非常有用的字符串工具，包括分割、连接、填充等操作</p>\n<h2 id=\"原生类型-Primitives\"><a href=\"#原生类型-Primitives\" class=\"headerlink\" title=\"原生类型[Primitives]\"></a>原生类型<code>[Primitives]</code></h2><p>扩展 JDK 未提供的原生类型（如int、char）操作， 包括某些类型的无符号形式</p>\n<h2 id=\"区间-Ranges\"><a href=\"#区间-Ranges\" class=\"headerlink\" title=\"区间[Ranges]\"></a>区间<code>[Ranges]</code></h2><p>可比较类型的区间API，包括连续和离散类型</p>\n<h2 id=\"I-x2F-O\"><a href=\"#I-x2F-O\" class=\"headerlink\" title=\"I&#x2F;O\"></a>I&#x2F;O</h2><p>简化I&#x2F;O尤其是I&#x2F;O流和文件的操作，针对Java5和6版本</p>\n<h2 id=\"散列-Hash\"><a href=\"#散列-Hash\" class=\"headerlink\" title=\"散列[Hash]\"></a>散列<code>[Hash]</code></h2><p>提供比Object.hashCode()更复杂的散列实现，并提供布鲁姆过滤器的实现</p>\n<h2 id=\"事件总线-EventBus\"><a href=\"#事件总线-EventBus\" class=\"headerlink\" title=\"事件总线[EventBus]\"></a>事件总线<code>[EventBus]</code></h2><p>发布-订阅模式的组件通信，但组件不需要显式地注册到其他组件中</p>\n<h2 id=\"数学运算-Math\"><a href=\"#数学运算-Math\" class=\"headerlink\" title=\"数学运算[Math]\"></a>数学运算<code>[Math]</code></h2><p>优化的、充分测试的数学工具类</p>\n<h2 id=\"反射-Reflection\"><a href=\"#反射-Reflection\" class=\"headerlink\" title=\"反射[Reflection]\"></a>反射<code>[Reflection]</code></h2><p>Guava 的 Java 反射机制工具类</p>\n",
            "tags": [
                "常用开发库",
                "工具类",
                "Google Guava"
            ]
        }
    ]
}