{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"linux\" category",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E6%9C%BA&%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E6%9C%BA&%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA/",
            "title": "VMware-复制虚拟机&克隆虚拟机",
            "date_published": "2024-01-03T13:13:21.661Z",
            "content_html": "<blockquote>\n<p>关于虚拟机提示选择“我已移动该虚拟机”或“我已复制该虚拟机”</p>\n</blockquote>\n<ul>\n<li>我已移动该虚拟机<blockquote>\n<p>表示打开后，虚拟机的网卡的mac地址不变，如果复制的是本地的虚拟机，复制前的虚拟机和复制后的虚拟机同时开机会造成网络冲突。</p>\n</blockquote>\n</li>\n<li>我已复制该虚拟机<blockquote>\n<p>表示打开复制后的虚拟机的网卡的物理地址是新生成的，这样怎么开机都不会有网卡问题，所以VMware本身也是建议不知道的就选这个选项。</p>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"复制虚拟机\"><a href=\"#复制虚拟机\" class=\"headerlink\" title=\"复制虚拟机\"></a>复制虚拟机</h1><p>VMware 上创建的虚拟机是可以重复使用的，安装好的虚拟机可以直接复制或者剪切到其它任意电脑上，然后使用 VMware 打开使用，两者的虚拟机设置以及登录密码都完全一样。</p>\n<p>比如在某台电脑 A 上创建了 CentOS 7.2 的虚拟机（其它系统虚拟机如 windows、Red hat 也是同理），某一天在电脑 B 上也需要使用虚拟机，此时在电脑 B 上只需要安装 VMware 软件，然后从电脑 A 复制创建好的虚拟机文件目录到电脑 B，然后打开启动虚拟机即可。虚拟机的配置，如内存大小，处理器，磁盘大小等等，电脑 B 都会与电脑 A 中的保持一致，连登陆密码都是一致。</p>\n<p>这样的情况其实挺多的，比如从自己的旧电脑复制到新电脑上，或者从家里的笔记本复制到公司的台式机等等，如下动图所示，就是将旧电脑上创建好了的 CentOS 虚拟机整个目录复制到了新电脑上，然后运行 VMware 打开即可运行。</p>\n<p>注意：</p>\n<ul>\n<li>虽然虚拟机系统可以复制或者剪切重复使用，但是虚拟机系统内部安装的软件（比如 Java、mysql、docker等等）可能需要重新安装，造成原因如下：<ul>\n<li>新旧电脑的环境不一致</li>\n<li>因为旧电脑上使用的是 VMware 12，而新电脑使用的是 VMware 15</li>\n<li>直接复制的系统里面的程序本身真的需要重新安装。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"克隆虚拟机\"><a href=\"#克隆虚拟机\" class=\"headerlink\" title=\"克隆虚拟机\"></a>克隆虚拟机</h1><p>平时开发的时候需要做集群，比如 Redis 集群、Kafka 集群、微服务集群等等，为了更贴实际，就需要多台虚拟机，使用一个 VMware 开启多个 虚拟机系统，此时固然可以重新创建虚拟机、或者复制虚拟机，但是都没有克隆虚拟机来的快。</p>\n<p>克隆虚拟机只需简单几步，就能克隆一个一模一样的系统，虚拟机配置、登陆账户及密码等等完全一样、更重要的是连原系统安装的程序在新克隆的系统中都能继续使用。</p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><font color=\"#c00000\">无法为已经开启或者挂起的虚拟机克隆，所以克隆前需要关闭虚拟机。</font></p>\n<h2 id=\"克隆步骤\"><a href=\"#克隆步骤\" class=\"headerlink\" title=\"克隆步骤\"></a>克隆步骤</h2><p>右键要克隆的虚拟机、选择管理 ——&gt; 克隆，进入克隆虚拟机向导，然后根据向导即可轻松创建。</p>\n<ul>\n<li>克隆源<ul>\n<li>虚拟机中的当前状态</li>\n<li>现有快照(仅限关闭的虚拟机)</li>\n</ul>\n</li>\n<li>克隆类型<ul>\n<li>创建链接克隆</li>\n<li>创建完整克隆</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"克隆后修改事项\"><a href=\"#克隆后修改事项\" class=\"headerlink\" title=\"克隆后修改事项\"></a>克隆后修改事项</h2><p>克隆后并不是直接能用，而是需要进行一些调试。 因为刚刚克隆完之后，克隆机和母机MAC地址一样，我们需要重新配置和删除网卡信息</p>\n<h3 id=\"修改MAC地址\"><a href=\"#修改MAC地址\" class=\"headerlink\" title=\"修改MAC地址\"></a>修改MAC地址</h3><p>通过虚拟机设置进行修改，点击生成即可<br>虚拟机设置-&gt;网络适配器-&gt;高级-&gt;MAC地址-&gt;生成</p>\n<h3 id=\"修改主机名\"><a href=\"#修改主机名\" class=\"headerlink\" title=\"修改主机名\"></a>修改主机名</h3><p>出于程序开发的需要，需要区别各个服务器的名称，所以修改新系统的主机名称，它默认是：localhost.localdomain</p>\n<table>\n<thead>\n<tr>\n<th>hostname</th>\n<th>查看系统主机名称</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hostnamectl set-hostname xxx</td>\n<td>修改系统主机名称<br/>1、主机名称中的特殊字符或空白字符都将会被移除，大写字母会自动转化成小写<br/>2、执行命令之后，会自动修改 &#x2F;etc&#x2F;hostname 文件<br/>3、执行命令之后，会立即生效，且重启系统也会生效</td>\n</tr>\n<tr>\n<td>cat &#x2F;etc&#x2F;hostname</td>\n<td>查看 &#x2F;etc&#x2F;hostname 文件内容，里面配置的就是系统主机名称</td>\n</tr>\n</tbody></table>\n<h3 id=\"IP-地址修改\"><a href=\"#IP-地址修改\" class=\"headerlink\" title=\"IP 地址修改\"></a>IP 地址修改</h3><blockquote>\n<p>如果是静态地址的话需要手动修改一下ip地址，如果是DHCP动态分配则无需配置。</p>\n</blockquote>\n<h4 id=\"查看网络信息\"><a href=\"#查看网络信息\" class=\"headerlink\" title=\"查看网络信息\"></a>查看网络信息</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">ifconfig<br></code></pre></td></tr></table></figure>\n\n<p>假如是静态  ip，则可以手动修改 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; 目录下的网卡文件，如 ifcfg-ens33（ifcfg-是前缀，ens33是网卡名称），网卡名称可以使用 ifconfig 命令查看。静态 ip 时，BOOTPROTO&#x3D;”static”，还会多一行 IPADDR&#x3D;x.x.x.x，修改此 IPADDR 即可修改 ip 地址。</p>\n<p><font color=\"#c00000\">特别提醒：如果克隆出来的新系统的网卡文件名称仍然和原系统的网卡名称一致，则需要手动修改文件名称为新系统的网卡名称，同时也要修改网卡文件内的 NAME、DEVICE 属性和新系统网卡名称一致。</font></p>\n<h4 id=\"重启网络\"><a href=\"#重启网络\" class=\"headerlink\" title=\"重启网络\"></a>重启网络</h4><p>使用 nmcli c reload（centos 8） 命令或 service network restart (centos 7)命令重启虚拟网卡，查看本机 ip 如果不是设置的则重启虚拟机</p>\n<h3 id=\"删除网卡信息\"><a href=\"#删除网卡信息\" class=\"headerlink\" title=\"删除网卡信息\"></a>删除网卡信息</h3><p>如果上述配置完了还有问题，就把网卡信息文件删掉重启，当然你也可以在配置的时候就直接删掉网卡信息，他在重启的时候会自动生成。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">rm</span> -rf /etc/udev/rules.d/70-persistent-ipoib.rules <br></code></pre></td></tr></table></figure>\n\n<h3 id=\"重启虚拟机\"><a href=\"#重启虚拟机\" class=\"headerlink\" title=\"重启虚拟机\"></a>重启虚拟机</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">init 6<br></code></pre></td></tr></table></figure>\n\n<p>此时就可以正常应用已经克隆好的虚拟机了。</p>\n",
            "tags": [
                "LINUX",
                "VMware"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/",
            "title": "VMware-安装虚拟机",
            "date_published": "2024-01-03T13:13:21.661Z",
            "content_html": "<h1 id=\"准备\"><a href=\"#准备\" class=\"headerlink\" title=\"准备\"></a>准备</h1><p>在安装vmware前，需要确认是否开启虚拟化<br>任务管理器-&gt;性能-&gt;虚拟化<br>如果没有开启则需要开启相关配置</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"创建虚拟机，选择安装类型\"><a href=\"#创建虚拟机，选择安装类型\" class=\"headerlink\" title=\"创建虚拟机，选择安装类型\"></a>创建虚拟机，选择安装类型</h2><p>创建虚拟机时，需要选择虚拟机安装类型。<br>这里默认安装自定义安装。</p>\n<p>典型安装与自定义安装的差别：通常设计人员使用自定义安装（高级）。</p>\n<ol>\n<li>典型安装：<br>这种安装方式将默认选项用于所有安装设置，包括安装位置、虚拟网络配置等。<br>这通常是新用户使用的方法，因为它省去了诸如配置选项之类的繁琐步骤，使得安装非常简便快捷。</li>\n<li>自定义安装：<br>这种安装方式允许您自己选择要安装的组件和默认选项。<br>通过自定义安装，您可以选择特定的安装位置、禁用不需要的组件、自定义虚拟网络配置等。<br>自定义安装通常是高级用户使用的方法，因为它提供了更大的灵活性和控制权。</li>\n</ol>\n<h2 id=\"虚拟机硬件兼容性\"><a href=\"#虚拟机硬件兼容性\" class=\"headerlink\" title=\"虚拟机硬件兼容性\"></a>虚拟机硬件兼容性</h2><p>虚拟机硬件兼容性是一个重要的选项，它决定了虚拟机能够在哪些版本的VMware产品上运行在选择虚拟机硬件兼容性选项时，需要考虑主机系统的版本以及目标环境的版本，以确保虚拟机可以在目标环境中正常运行。同时，不同的硬件兼容性选项可能会影响虚拟机所支持的特性和性能，因此需要根据实际需求进行选。<br>​ 例如：<br>​ Workstation 16.x：该选项表示虚拟机仅能在VMware Workstation 16或更高版本上运行<br>​ Workstation 15.x：该选项表示虚拟机可以在VMware Workstation 15或更高版本上运行<br>​ Workstation 14.x：该选项表示虚拟机可以在VMware Workstation 14或更高版本上运行。<br>​ 这个选项意义比如：<br>​ 在a机器上创建的虚拟机 在未来可能要移入到b机器<br>​ 如果a机器是Workstation 16.x<br>​ 但是b机器是Workstation 15.x 会存在兼容性问题<br>​ 如果是相反的操作<br>​ 如果a机器是Workstation 15.x<br>​ b机器是Workstation 16.x<br>​ a机器上创建的虚拟机移入到b机器，则可以使用，因为16.x是兼容15.x的</p>\n<h2 id=\"安装镜像文件\"><a href=\"#安装镜像文件\" class=\"headerlink\" title=\"安装镜像文件\"></a>安装镜像文件</h2><p>这一步选择稍后安装操作系统。</p>\n<p>安装方式分为三种安装方式 ：<br>​ 第一种是通过电脑外，光盘驱动安装 (使用很少)<br>​ 第二种是通过电脑内，下载的镜像文件 (常用)<br>​ 第三种是先创建空虚拟机，稍后再安装系统 (常用)</p>\n<h2 id=\"选择版本\"><a href=\"#选择版本\" class=\"headerlink\" title=\"选择版本\"></a>选择版本</h2><p>操作系统选择Linux,CentOS8版本</p>\n<h2 id=\"命名虚拟机以及安装路径\"><a href=\"#命名虚拟机以及安装路径\" class=\"headerlink\" title=\"命名虚拟机以及安装路径\"></a>命名虚拟机以及安装路径</h2><p>给虚拟机一个合适的名称即可</p>\n<h2 id=\"处理器配置选择\"><a href=\"#处理器配置选择\" class=\"headerlink\" title=\"处理器配置选择\"></a>处理器配置选择</h2><p>处理器数量：<br>​ 可以根据虚拟机的需求选择使用的物理CPU核心数。但是，需要确认主机系统的CPU是否支持所需的核心数，否则可能会导致虚拟机无法启动或性能不佳。<br>查看主机CPU可以选择任务管理-&gt;资源监视器<br>cpu内核总数是cpu&#x3D;n+1<br>再选择虚拟机的cpu核心数（注意：你需要同时开启的虚拟机内核数相加不能超过你电脑cpu内核总数）</p>\n<h2 id=\"虚拟机内存配置选择\"><a href=\"#虚拟机内存配置选择\" class=\"headerlink\" title=\"虚拟机内存配置选择\"></a>虚拟机内存配置选择</h2><p>虚拟机内存配置的合适数值取决于许多因素，例如虚拟机运行的操作系统、应用程序的类型和数量、主机系统的硬件配置等。一般来说，以下是一些关于虚拟机内存配置的推荐：</p>\n<p>对于桌面虚拟机（例如Windows 10），最低配置为2GB，推荐4GB或更高。<br>对于服务器虚拟机（例如Windows Server、Linux服务器），至少需要4GB，推荐8GB及以上。<br>可以在虚拟机中，根据实际需求增加内存。</p>\n<h2 id=\"虚拟机网络配置选择\"><a href=\"#虚拟机网络配置选择\" class=\"headerlink\" title=\"虚拟机网络配置选择\"></a>虚拟机网络配置选择</h2><p>以下是VMware虚拟网络中的三种常见网络连接方式：</p>\n<table>\n<thead>\n<tr>\n<th>网络模式</th>\n<th>网络模式含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>桥接（Bridged）</td>\n<td>将虚拟机网络透明地连接到物理网络中，并且虚拟机可获得与物理网络相同的IP地址段。<br/>这种连接方式可以让虚拟机直接访问物理网络上的其他设备，同时也能让物理网络上的其他设备访问到虚拟机。<br/>在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。<br/>同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP&#x2F;IP配置信息，以实现通过局域网的网关或路由器访问互联网</td>\n</tr>\n<tr>\n<td>NAT（Network Address Translation）</td>\n<td>在主机和虚拟机之间建立一个私有网络，并通过虚拟网络适配器对连接进行管理。虚拟机使用虚拟网络适配器向外部发送请求，而请求的源IP地址被转换为主机的IP地址。<br/>这种连接方式可以提供一定的安全性，防止虚拟机受到来自外部的攻击，并且允许虚拟机访问Internet。</td>\n</tr>\n<tr>\n<td>仅主机（Host-Only）</td>\n<td>创建一个独立的虚拟网络，只包含主机和虚拟机，而不与任何物理网络连接。<br/>这种连接方式可以提供一定的安全性，因为虚拟机无法从Internet或局域网中访问其他设备，但是不允许虚拟机之间直接通信。</td>\n</tr>\n</tbody></table>\n<p>桥接模式的细则理解：</p>\n<ul>\n<li>桥接模式可以让虚拟机透明地连接到物理网络中，并且虚拟机可获得与物理网络相同的IP地址段。在桥接模式下，VMware虚拟网络适配器会创建一个虚拟交换机（Virtual Switch），这个虚拟交换机类似于物理网络交换机，用于将虚拟机和物理网络之间进行通信。虚拟机和主机之间的通信并非直接发生，而是通过虚拟交换机（Virtual Switch）进行传递。虚拟交换机类似于物理网络交换机，用于将虚拟机和物理网络之间进行通信。当虚拟机向主机发送数据包时，数据包会先通过虚拟交换机，然后再传递给主机系统；反之，当主机向虚拟机发送数据包时，数据包也会经过虚拟交换机转发给虚拟机。</li>\n<li>当虚拟机使用桥接模式连接网络时，它们就像物理计算机一样被分配了一个唯一的MAC地址和IP地址。这使得虚拟机能够直接访问物理网络上的其他设备，同时也能让物理网络上的其他设备访问到虚拟机。因此，在桥接模式下，虚拟机可以像物理计算机一样访问网络资源、共享文件等。<br>3、需要注意的是，使用桥接模式需要根据实际需求进行设置，并确保主机系统的网络适配器正确配置。如果网络适配器未正确配置，可能导致虚拟机无法访问网络或访问速度缓慢。同时，为避免安全问题，建议对虚拟机启用防火墙或其他安全功能。</li>\n</ul>\n<p>NAT模式的细则理解：</p>\n<ul>\n<li>NAT模式（Network Address Translation）在主机和虚拟机之间建立一个私有网络，通过虚拟网络适配器对连接进行管理，使得虚拟机可以使用主机的Internet连接。具体来说，在NAT模式下，VMware会创建一个虚拟DHCP服务器，并为虚拟机分配一个虚拟IP地址，同时将本地主机的IP地址作为NAT路由器的出口IP地址</li>\n<li>当虚拟机使用NAT模式连接到Internet时，虚拟机的所有网络通信都是通过主机系统进行转发和管理的。虚拟机的访问请求先被发送到虚拟DHCP服务器，然后经由主机进行NAT转换，返回数据则也会经过主机的NAT转换后再传递给虚拟机。这种连接方式可以提供一定的安全性，防止虚拟机受到来自外部的攻击，并且允许虚拟机访问Internet。</li>\n<li>需要注意的是，使用NAT模式需要根据实际需求进行设置，并确保主机系统的网络适配器正确配置。如果网络适配器未正确配置，可能导致虚拟机无法访问网络或访问速度缓慢。同时，建议对虚拟机启用防火墙或其他安全功能，以保护虚拟机免受来自外部的攻击。</li>\n</ul>\n<p>仅主机模式的细则理解：</p>\n<ul>\n<li>仅主机模式（Host-Only）创建一个独立的虚拟网络，只包含主机和虚拟机，而不与任何物理网络连接。在这种模式下，虚拟机只能与主机进行通信，而无法直接访问Internet或局域网上的其他设备。为了实现这种连接方式，VMware会创建一个虚拟网络适配器，并将其配置为与主机系统共享。</li>\n<li>当虚拟机使用仅主机模式连接网络时，它们就像被放置在一个私有网络中，可以相互通信、共享资源等，但是无法从Internet或局域网中访问其他设备。这种连接方式可以提供一定的安全性，因为虚拟机无法从Internet或局域网中访问其他设备，同时也不会受到来自外部的攻击。</li>\n<li>需要注意的是，在仅主机模式下，虚拟机之间可以直接通信，但不能与主机所在的物理网络（例如家庭或企业网络）通信。如果需要让虚拟机与物理网络通信，可以考虑使用桥接或NAT模式。同时，在使用仅主机模式时，建议对虚拟机启用防火墙或其他安全功能，以保护虚拟机免受来自虚拟机之间的攻击。</li>\n</ul>\n<h2 id=\"I-x2F-O控制器配置选择\"><a href=\"#I-x2F-O控制器配置选择\" class=\"headerlink\" title=\"I&#x2F;O控制器配置选择\"></a>I&#x2F;O控制器配置选择</h2><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>BusLogic</td>\n<td>是第一个被支持的SCSI控制器类型，适用于早期的Windows操作系统和其他一些老旧的操作系统。在性能方面，BusLogic相对较慢，因为它使用CPU软件仿真来处理I&#x2F;O请求。</td>\n</tr>\n<tr>\n<td>LSI Logic</td>\n<td>是一种较新的SCSI控制器类型，适用于大多数现代操作系统和应用程序。与BusLogic相比，LSI Logic使用更先进的技术来处理I&#x2F;O请求，具有更好的性能和可靠性。(推荐)</td>\n</tr>\n<tr>\n<td>LSI Logic SAS</td>\n<td>是一种基于SAS架构的SCSI控制器，适用于需要高速存储和高并发I&#x2F;O的应用场景。与LSI Logic相比，LSI Logic SAS提供了更高的带宽和更低的延迟。(推荐) Paravirtualized SCSI：是一种特殊类型的SCSI控制器，使用虚拟化技术来提高性能和效率。它可以通过直接访问物理设备来避免CPU软件仿真，提供更低的延迟和更高的吞吐量。</td>\n</tr>\n</tbody></table>\n<h2 id=\"磁盘类型选择\"><a href=\"#磁盘类型选择\" class=\"headerlink\" title=\"磁盘类型选择\"></a>磁盘类型选择</h2><p>在VMware虚拟机中，IDE磁盘类型、SCSI磁盘类型、SATA磁盘类型和NVMe磁盘类型都有各自的特点和适用场景。以下是它们的主要特点和适用场景：</p>\n<p>IDE磁盘类型：适用于较早的操作系统和应用程序，如MS-DOS和Windows 95&#x2F;98等。它可以连接两个IDE硬盘或CD&#x2F;DVD-ROM设备，但不支持热插拔功能，且性能相对较差。</p>\n<p>SCSI磁盘类型：适用于大多数现代操作系统和应用程序，特别是需要高性能存储的应用场景。它支持多达15个SCSI设备，包括硬盘、CD&#x2F;DVD-ROM、磁带机等，并提供了更好的性能和可靠性。</p>\n<p>SATA磁盘类型：适用于较新的Windows、Linux和其他操作系统，特别是桌面和笔记本电脑的虚拟机。它可以连接多个SATA硬盘和CD&#x2F;DVD-ROM设备，并提供了较好的性能和扩展性。与IDE相比，SATA磁盘类型支持更高的数据传输速率和更大的存储容量。</p>\n<p>NVMe磁盘类型：适用于需要极高性能存储的应用场景，如大规模数据分析和高性能计算等。它可以连接多个NVMe硬盘，并提供了较低的延迟和更高的带宽。与SCSI和SATA相比，NVMe具有更高的I&#x2F;O吞吐量和更低的访问延迟。</p>\n<p>IDE磁盘类型适用于较早的系统和应用程序，而SCSI、SATA和NVMe则适用于现代的操作系统和应用程序。在选择磁盘类型时，应该根据实际需求进行权衡，考虑到性能、兼容性和扩展性等因素。需要注意的是，在更改磁盘类型时，可能需要重新安装操作系统或驱动程序，以确保虚拟机可以正常工作。</p>\n<h2 id=\"磁盘选择\"><a href=\"#磁盘选择\" class=\"headerlink\" title=\"磁盘选择\"></a>磁盘选择</h2><p>在VMware虚拟机中，创建新的虚拟磁盘、使用现有的虚拟磁盘和使用物理磁盘都有各自的优缺点和适用场景。以下是它们的主要区别：<br>​ 创建新的虚拟磁盘：这种方法可以为虚拟机分配一个新的虚拟磁盘，并将其格式化为所需的文件系统。创建新的虚拟磁盘通常比较简单，且不会影响其他虚拟机或主机系统。</p>\n<p>​ 使用现有的虚拟磁盘：这种方法可以利用已经存在的虚拟磁盘，避免重复创建和占用存储空间。如果虚拟机需要多个磁盘，使用现有的虚拟磁盘也可以提高磁盘管理的效率和便捷性。</p>\n<p>​ 使用物理磁盘：这种方法可以将物理磁盘直接映射到虚拟机中，使得虚拟机可以直接读写物理磁盘上的数据。使用物理磁盘可以获得更好的性能和可靠性，但需要注意保护物理磁盘的数据安全性。</p>\n<p>​ 需要注意的是，在使用以上任何一种方法时，都需要考虑到存储空间、性能和安全等方面的问题，并根据实际需求进行权衡选择。同时，在使用物理磁盘时，需要特别小心，以避免对宿主机上的数据造成损坏或泄露。</p>\n<h2 id=\"磁盘容量选择\"><a href=\"#磁盘容量选择\" class=\"headerlink\" title=\"磁盘容量选择\"></a>磁盘容量选择</h2><p>如无特殊需求，大小和分配类型根据红框选择即可，如有特殊需求可自行调配。</p>\n<h2 id=\"磁盘存储路径\"><a href=\"#磁盘存储路径\" class=\"headerlink\" title=\"磁盘存储路径\"></a>磁盘存储路径</h2><p>依据自己真实情况进行选择配置。</p>\n<h2 id=\"创建虚拟机\"><a href=\"#创建虚拟机\" class=\"headerlink\" title=\"创建虚拟机\"></a>创建虚拟机</h2><p>可自定义配置虚拟机硬件配置信息，如博猪会把USB驱动、声卡等非必要的硬件配置信息，配置完成后，点击完成即可。</p>\n<h1 id=\"初始配置\"><a href=\"#初始配置\" class=\"headerlink\" title=\"初始配置\"></a>初始配置</h1><h2 id=\"虚拟网卡区别\"><a href=\"#虚拟网卡区别\" class=\"headerlink\" title=\"虚拟网卡区别\"></a>虚拟网卡区别</h2><h3 id=\"VMnet1-和-VMnet8区别：\"><a href=\"#VMnet1-和-VMnet8区别：\" class=\"headerlink\" title=\"VMnet1 和 VMnet8区别：\"></a>VMnet1 和 VMnet8区别：</h3><p>vmnet1和vmnet8是两个虚拟网卡，主要作用是让虚拟机可以通过我们的宿主机的网线上网。</p>\n<p><font color=\"#c00000\">注意：如果有“！”，说明不能用。</font></p>\n<blockquote>\n<h2 id=\"vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host-Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。\"><a href=\"#vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host-Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。\" class=\"headerlink\" title=\"vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。\"></a>vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。<br>设置私有网络（Host Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；<br>设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。<br>而使用桥接网络时，则不需要这两个网卡了。</h2><p>使用Host-Only模式的guest系统与主机通信需要VMnet1网卡的支持；<br>通过NAT方式上网的guest系统与主机通信需要VMnet8网卡的支持；<br>使用桥接模式上网需要网络中存在DHCP服务器，且提供服务。</p>\n</blockquote>\n<p>再来区分一下应用场景：</p>\n<ul>\n<li>VMnet1<br>使用Host-Only模式的guest系统与主机通信需要VMnet1网卡的支持</li>\n<li>VMnet8<br>使用NAT网络模式，在宿主机安装多台虚拟机，和宿主组成一个小局域网，宿主机，虚拟机之间都可以互相通信，虚拟机也可访问外网，例如 搭建 hadoop 集群，分布式服务</li>\n<li>VMNet0<br>使用桥接模式，安装VM后，在VM里建立虚拟机 默认 就是该模式。<br>如果你只是需要一台虚拟机可以和宿主互通，并可以访问外网，此模式即可。</li>\n</ul>\n<blockquote>\n<p>安装虚拟机系统后不需要调整网络，物理网络中的 “路由” 所包含的DHCP服务器会自动识别该虚拟机并为其分配IP地址；<br>如果没有路由，可以自己手动在系统分配，原则是和宿主机在同一网段并指向相同的网关即可通信。</p>\n</blockquote>\n<h2 id=\"配置虚拟机网络配置\"><a href=\"#配置虚拟机网络配置\" class=\"headerlink\" title=\"配置虚拟机网络配置\"></a>配置虚拟机网络配置</h2><p><font color=\"#c00000\">网络模式默认配置为NAT模式</font></p>\n<p>既然要网络模式要设置为NAT模式，即对应VMware中的<code>VMware Network Adapter VMnet8</code>网卡设备，这个是虚拟网卡。</p>\n<p>VMware-&gt;编辑-&gt;选择VMnet8<br>配置子网地址、子网掩码、网关信息，如果需要动态分配IP地址的话则需要配置DHCP信息。</p>\n<h2 id=\"编辑网卡配置文件\"><a href=\"#编辑网卡配置文件\" class=\"headerlink\" title=\"编辑网卡配置文件\"></a>编辑网卡配置文件</h2><p>编辑网卡配置文件，进入 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts 目录，网卡名称可能不同，查看 ip (使用 ifconfig 或 ip addr 命令)，可以找到网卡名，进入网卡名对应的文件。<br>一般虚拟机网卡信息为：<code>ifcfg-ens160</code>,如果存在多个网卡配置信息，可以使用<code>ifconfig</code>查询虚拟机网卡信息，找到对应网段的信息配置。<br>这里就以<code>ifcfg-ens160</code>为例。</p>\n<p><code>vim ifcfg-ens160</code> 修改配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\">TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br><span class=\"hljs-comment\"># 这里默认为DHCP,即动态分配，现在修改为静态地址</span><br>BOOTPROTO=static<br>DEFROUTE=<span class=\"hljs-built_in\">yes</span><br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=<span class=\"hljs-built_in\">yes</span><br>IPV6_AUTOCONF=<span class=\"hljs-built_in\">yes</span><br>IPV6_DEFROUTE=<span class=\"hljs-built_in\">yes</span><br>IPV6_FAILURE_FATAL=no<br>NAME=ens160<br>UUID=79179731-c3c5-4ba8-8b78-b54af474f1b7<br>DEVICE=ens160<br><span class=\"hljs-comment\"># 开机自启动</span><br>ONBOOT=<span class=\"hljs-built_in\">yes</span><br><span class=\"hljs-comment\"># 静态IP地址</span><br>IPADDR=192.168.122.128<br><span class=\"hljs-comment\"># 静态IP掩码信息</span><br>NETMASK=255.255.255.0<br><span class=\"hljs-comment\"># 静态IP网关</span><br>GATEWAY=192.168.122.2<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"重启网卡配置信息\"><a href=\"#重启网卡配置信息\" class=\"headerlink\" title=\"重启网卡配置信息\"></a>重启网卡配置信息</h2><p>使用 <code>nmcli c reload</code>（centos 8） 命令或 <code>service network restart</code> (centos 7)命令重启虚拟网卡，查看本机 ip 如果不是设置的则重启虚拟机</p>\n<h1 id=\"桌面调整设置\"><a href=\"#桌面调整设置\" class=\"headerlink\" title=\"桌面调整设置\"></a>桌面调整设置</h1><p>centos中的6种运行级别如下：</p>\n<ul>\n<li>0：关机 runlevel0 poweroff.target</li>\n<li>1：单用户 runlevel1 rescue.target</li>\n<li>2：多用户无网络 runlevel2 multi-user.target</li>\n<li>3：多用户有网络 runlevel3 multi-user.target</li>\n<li>4：保留 runlevel4 multi-user.target</li>\n<li>5：图形界面 runlevel5 graphical.target</li>\n<li>6：关机并重启 runlevel6 reboot.target</li>\n</ul>\n<h2 id=\"1-centos7以下的版本\"><a href=\"#1-centos7以下的版本\" class=\"headerlink\" title=\"1. centos7以下的版本\"></a>1. centos7以下的版本</h2><p>通过有以下方式进行设置默认启动方式<br><code>vim /etc/inittab</code><br>找到id:5:initdefault,将 5 修改为3即可</p>\n<h2 id=\"2-centos7-含-以上的版本\"><a href=\"#2-centos7-含-以上的版本\" class=\"headerlink\" title=\"2. centos7(含)以上的版本\"></a>2. centos7(含)以上的版本</h2><ul>\n<li><p>设置成默认命令模式启动<br>  <code>systemctl set-default multi-user.target 或者 systemctl set-default runlevel3</code><br>  等同于<br>  <code>rm /etc/systemd/system/default.target &amp;&amp; ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target</code></p>\n</li>\n<li><p>设置成默认图形模式启动<br>  <code>systemctl set-default graphical.target 或者 systemctl set-default runlevel5</code><br>  等同于<br>  <code>rm /etc/systemd/system/default.target &amp;&amp; ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</code></p>\n</li>\n</ul>\n<p>可以看到他们的关系：  </p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">ls</span> -l /etc/systemd/system/default.target<br><span class=\"hljs-built_in\">ls</span> -l /lib/systemd/system/runlevel*<br></code></pre></td></tr></table></figure>\n<h2 id=\"3-手动启动某个模式\"><a href=\"#3-手动启动某个模式\" class=\"headerlink\" title=\"3. 手动启动某个模式\"></a>3. 手动启动某个模式</h2><p><code>init 3 //运行命令行模式</code><br><code>init 5 //运行图形模式</code></p>\n<h2 id=\"4-安装图像界面\"><a href=\"#4-安装图像界面\" class=\"headerlink\" title=\"4. 安装图像界面\"></a>4. 安装图像界面</h2><p><code>dnf groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</code><br>centos8以下版本，把dnf改为yum</p>\n",
            "tags": [
                "VMware"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "title": "Crontab-定时任务",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<h1 id=\"Linux-Crontab-定时任务\"><a href=\"#Linux-Crontab-定时任务\" class=\"headerlink\" title=\"Linux Crontab 定时任务\"></a>Linux Crontab 定时任务</h1><blockquote>\n<p>很多时候，我们需要定时执行某个应用或者某段脚本，在linux上，可以使用cron服务，它有点类似于Windows上的任务计划程序。</p>\n</blockquote>\n<h2 id=\"crond和crontab\"><a href=\"#crond和crontab\" class=\"headerlink\" title=\"crond和crontab\"></a>crond和crontab</h2><p>首先需要分清楚两个概念：crond和crontab。crond是后台守护进程的名称（d代表daemon），用来实际执行脚本，它在系统中是一直运行的。可以通过下面的方式查看到它：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl | grep crond<br></code></pre></td></tr></table></figure>\n\n<p>crontab是一个工具，用来列出cron中当前运行的作业（应用或脚本等）、向cron中添加作业、编辑作业、删除作业。它并不是一直在后台运行的，是一个短时的命令行工具，执行完就结束了。</p>\n<p>可以简单理解crond和crontab组合起来提供cron服务。</p>\n<p>大体流程如下：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F634d76f98ad0252888ea044489e3d5bf.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1627445494&t=e65617a03bb7ecea66217142dd0da756\" alt=\"img\"></p>\n<h2 id=\"crontab配置文件\"><a href=\"#crontab配置文件\" class=\"headerlink\" title=\"crontab配置文件\"></a>crontab配置文件</h2><p>Linux下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab命令。使用以下命令进行查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat /etc/crontab<br></code></pre></td></tr></table></figure>\n\n<p>配置文件可以看到如下解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash；第二行PATH变量指定了系统执行命令的路径；第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户；第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p>\n<h2 id=\"crontab文件含义\"><a href=\"#crontab文件含义\" class=\"headerlink\" title=\"crontab文件含义\"></a>crontab文件含义</h2><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute hour day month week command</p>\n<p><img src=\"https://www.linuxprobe.com/wp-content/uploads/2016/09/crontab.png\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>“<em>&quot;代表所有的取值范围内的数字，如月份字段为</em>，则表示1到12个月；</p>\n<p>“&#x2F;“代表每一定时间间隔的意思，如分钟字段为*&#x2F;10，表示每10分钟执行1次。</p>\n<p>“-“代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。</p>\n<p>“,”分散的数字（不一定连续），如1,2,3,4,7,9。</p>\n<p>注：由于各个地方每周第一天不一样，因此Sunday&#x3D;0（第一天）或Sunday&#x3D;7（最后1天）。</p>\n<h2 id=\"crontab命令详解\"><a href=\"#crontab命令详解\" class=\"headerlink\" title=\"crontab命令详解\"></a>crontab命令详解</h2><blockquote>\n<p>因为crond是一个守护进程，所以在系统开机后，通过<code>systemctl start crond</code>启动一次以后（默认自动启动的），几乎就不需要再管它了，之后的操作都通过crontab来完成。</p>\n</blockquote>\n<h3 id=\"查看现有任务\"><a href=\"#查看现有任务\" class=\"headerlink\" title=\"查看现有任务\"></a>查看现有任务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>no crontab for root<br></code></pre></td></tr></table></figure>\n\n<p>因为现在没有任务，所以显示的是 no crontab for root，可见，任务是根据用户进行区分的。</p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><p>为了便于测试，我们可以创建这样一个简单的脚本(位于~&#x2F;tmp&#x2F;job1.sh)：在一个文件末尾追加当前时间。脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">date +&#x27;%F %T&#x27; &gt;&gt; ~/tmp/job1.log<br></code></pre></td></tr></table></figure>\n\n<p>创建完成后记得赋予一下执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">chmod</span> 755 job1.sh</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，需要配置多久运行一次。这里通过cron表达式来设置，它非常灵活，可以很简单也可以很复杂。cron表达式的应用广泛，不止用在系统层面，在其他各种编程语言的类库当中，都有类似的实现，语法略有不同。使用下面的命令可以查看linux系统中cron表达式的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> /etc/crontab</span> <br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>如果需要查看更详细的用法，可以使用 <code># man crontab</code> 命令查看。</p>\n<p>整理后如下表所示：</p>\n<blockquote>\n<p><strong>注意：</strong>不同的cron应用存在很大差异，比如crontab不支持“秒”，特殊字符也支持的比较少（支持,-*&#x2F;）。而其他一些应用，则支持“秒”和更多的特殊字符。这里为了更完备一些，所以全都列出来了，省的以后再去总结。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">必须</th>\n<th align=\"left\">取值范围</th>\n<th align=\"left\">可设置的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">分</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-59</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">时</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-23</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(月)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-31</td>\n<td align=\"left\">,-*?&#x2F;LW</td>\n</tr>\n<tr>\n<td align=\"left\">月</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-12 或者 jan-dec</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(周)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-7（0和7都是星期天） 或者 sun-sat</td>\n<td align=\"left\">,-*?&#x2F;L#</td>\n</tr>\n<tr>\n<td align=\"left\">年</td>\n<td align=\"left\">否</td>\n<td align=\"left\">留空，1970-2099</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n</tbody></table>\n<p>几个特殊字符的含义：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">全部。意思是在该时间的任意点都应当执行</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">不指定，任意。仅用于 日(月)和日(周)。0 0 5 * ? 代表每个月的第5天零点，不论星期几。 0 0 ? * 1 代表每周一，不论是当月的哪天。</td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td align=\"left\">多个值的分隔符，例如1,5,10</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">代表连续值，例如1-20</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">步长。例如 5&#x2F;15，代表从5开始，以15为步长。因此，当5&#x2F;15位于分钟的位置时，表示小时内的第5、20、35和50分钟。</td>\n</tr>\n<tr>\n<td align=\"left\">L</td>\n<td align=\"left\">最后一天。可以是每月最后一天或者每周最后一天。如果用在 天(周)字段，并且前面加数字，则表示最后一个周N。例如5L，表示最后一个周五（5表示周五，L表示最后）。</td>\n</tr>\n<tr>\n<td align=\"left\">W</td>\n<td align=\"left\">工作日，指周一到周五的任意一天</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">表示第几个的意思，例如 6#3，表示当月第3个星期六（6表示周六，3表示第3个）</td>\n</tr>\n</tbody></table>\n<p>几个简单的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">表达式</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">* * * * *</td>\n<td align=\"left\">每分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">30 * * * *</td>\n<td align=\"left\">每小时的30分执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">*&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">0&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次，且仅在0,5,15,20…55分执行</td>\n</tr>\n<tr>\n<td align=\"left\">5 0 * * *</td>\n<td align=\"left\">每天的00:05执行一次</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意：</strong>crontab中 日(周)不接受“?”的写法，在很多其他应用中则可以，例如Quartz.Net库：<a href=\"https://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/crontrigger.html\">https://www.quartz-scheduler.net/</a></p>\n</blockquote>\n<blockquote>\n<p><strong>提示：</strong>更多的用法，可以参考：<a href=\"https://crontab.guru/\">https://crontab.guru</a></p>\n</blockquote>\n<p>接下来，如果我们想要每分钟执行一下前面创建的job1.sh脚本，需要再创建一个crontab作业(jobs.cron，后缀名无所谓，这里只是为了便于识别)，其中包含了cron表达式，用于表明job1.sh执行的周期：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<p>使用crontab将它加入到计划中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>再次查看当前计划，可以看到这样的结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除定时任务\"><a href=\"#删除定时任务\" class=\"headerlink\" title=\"删除定时任务\"></a>删除定时任务</h3><p>先将job1.sh复制一份，稍作修改，然后编辑一下jobs.cron，将job2.sh也加入进去：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>然后重新加入到cron服务中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>接着查看一下当前cron中的作业：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>可以看到上面有job1.sh和job2.sh两个作业，其效果相当于将jobs.cron文件的内容拷贝进去。</p>\n<p>如果想要删除作业，则执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -r</span><br></code></pre></td></tr></table></figure>\n\n<p>这样会删除所有作业，如果只想删除一个，或者想对作业进行编辑，可以使用下面的命令。</p>\n<h3 id=\"编辑定时任务\"><a href=\"#编辑定时任务\" class=\"headerlink\" title=\"编辑定时任务\"></a>编辑定时任务</h3><p><code>crontab -e</code> 命令会调用编辑器（通常是vi或者vim），直接编辑计划作业，相当于编辑jobs.cron。只不过编辑完立即生效，不需要再执行crontab进行加载。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -e</span><br>crontab: installing new crontab<br></code></pre></td></tr></table></figure>\n\n<p>统一期间，个人不建议使用crontab -e编辑计划，而是编辑jobs.cron，然后进行加载。这样的话jobs.cron文件相当于一个备份，方便日后恢复。</p>\n<h2 id=\"查看作业日志\"><a href=\"#查看作业日志\" class=\"headerlink\" title=\"查看作业日志\"></a>查看作业日志</h2><p>在作业执行出现异常（或作业脚本写日志）时，cron服务会输出日志，在我的CentOS7系统上，查看的地址位于&#x2F;var&#x2F;log下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> /var/log | grep cron</span><br>cron<br>cron-20180819<br>cron-20180826<br>cron-20180902<br>cron-20180909<br></code></pre></td></tr></table></figure>\n\n<p>如果想让自己编写的作业输出日志，可以这样编写jobs.cron：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh &gt;&gt; /var/log/job1.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure>\n\n<p>上面的意思是将stdout和stderr输出到&#x2F;var&#x2F;log&#x2F;job1.log。</p>\n<p>修改job1.sh，在底部加入<code>echo hello</code>。然后调用<code>crontab jobs.cron</code>重新加载，然后在&#x2F;var&#x2F;log目录下可以看到job1.log，其中包含了输出的文本“hello”。</p>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Crontab"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Jenkins/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Jenkins/",
            "title": "Jenkins",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<blockquote>\n<p>持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。</p>\n</blockquote>\n<h1 id=\"持续集成工具\"><a href=\"#持续集成工具\" class=\"headerlink\" title=\"持续集成工具\"></a>持续集成工具</h1><h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。私有项目会收费。</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>Jenkins是一个用Java编写的开源的持续集成工具。官方网站：<a href=\"https://jenkins.io/\">https://jenkins.io/</a><br>Jenkins能实时监控持续集成过程中所存在的问题，提供详细的日志文件和提醒功能，还能用图表的形式，形象地展示项目构建的趋势和稳定性。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Jenkins自动化部署可以解决集成、测试、部署等重复性的工作，工具集成的效率明显高于人工操作；并且持续集成可以更早的获取代码变更的信息，从而更早的进入测试阶段，更早的发现问题，这样解决问题的成本就会显著下降：持续集成缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间出现的等待时间；持续集成也意味着开发、集成、测试、部署得以持续。。<br>使用Maven（Ant）等来实现lava项目自动化构建发布部署。这些工具可以帮助在构建过程中实现自动化发布、回滚等动作。</p>\n<blockquote>\n<p>Jenkins提供Docker、war等部署方式，博猪比较倾向于yum源安装方式，同时作为一个服务启动。</p>\n</blockquote>\n<h1 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h1><h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>最低推荐配置:</p>\n<ul>\n<li>256MB可用内存</li>\n<li>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li>\n</ul>\n<p>为小团队推荐的硬件配置:</p>\n<ul>\n<li>1GB+可用内存</li>\n<li>50 GB+ 可用磁盘空间</li>\n</ul>\n<p>软件配置:</p>\n<ul>\n<li>Java 8—无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。</li>\n</ul>\n<blockquote>\n<p><strong>注意:</strong> 如果将Jenkins作为Docker 容器运行，这不是必需的</p>\n</blockquote>\n<h2 id=\"下载Jenkins\"><a href=\"#下载Jenkins\" class=\"headerlink\" title=\"下载Jenkins\"></a>下载Jenkins</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo wget -O /etc/yum.repos.d/jenkins.repo \\<br>    https://pkg.jenkins.io/redhat/jenkins.repo<br>sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>sudo yum upgrade<br>sudo yum install epel-release java-11-openjdk-devel<br>sudo yum install jenkins<br>sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看Jenkins状态\"><a href=\"#查看Jenkins状态\" class=\"headerlink\" title=\"查看Jenkins状态\"></a>查看Jenkins状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl status jenkins<br></code></pre></td></tr></table></figure>\n\n<p>如果是开启状态，关闭，以便更改配置。关闭命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl stop jenkins<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><blockquote>\n<p>配置路径如下：  &#x2F;etc&#x2F;sysconfig</p>\n</blockquote>\n<h3 id=\"自定义配置路径\"><a href=\"#自定义配置路径\" class=\"headerlink\" title=\"自定义配置路径\"></a>自定义配置路径</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_HOME=&quot;/opt/jenkins&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义默认用户\"><a href=\"#自定义默认用户\" class=\"headerlink\" title=\"自定义默认用户\"></a>自定义默认用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_USER=&quot;root&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义访问路径\"><a href=\"#自定义访问路径\" class=\"headerlink\" title=\"自定义访问路径\"></a>自定义访问路径</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_PORT=&quot;9955&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"重启-amp-amp-启动Jenkins服务\"><a href=\"#重启-amp-amp-启动Jenkins服务\" class=\"headerlink\" title=\"重启&amp;&amp;启动Jenkins服务\"></a>重启&amp;&amp;启动Jenkins服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl start jenkins<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问-amp-amp-解锁Jenkins\"><a href=\"#访问-amp-amp-解锁Jenkins\" class=\"headerlink\" title=\"访问&amp;&amp;解锁Jenkins\"></a>访问&amp;&amp;解锁Jenkins</h2><blockquote>\n<p>访问地址为：linux+端口号，如上配置为：<code>http://192.168.56.121:9955</code>，访问后，进入一下配置页面。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/04/Fwx6D1kGHqt2ogX.png\" alt=\"image-20211004202424221\"></p>\n<p>按照上方提示，输入一下命令,输入密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat /opt/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"按照插件\"><a href=\"#按照插件\" class=\"headerlink\" title=\"按照插件\"></a>按照插件</h2><p>默认按照推荐按照即可。</p>\n<p><img src=\"https://i.loli.net/2021/10/04/EZwmnHSxribWpd5.png\" alt=\"image-20211004203303329\"></p>\n<h2 id=\"初始化用户\"><a href=\"#初始化用户\" class=\"headerlink\" title=\"初始化用户\"></a>初始化用户</h2><blockquote>\n<p>创建初始化用户，用户名：opser,密码：admin</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/04/OEiDtgdlAYW65kz.png\" alt=\"image-20211004204936715\"></p>\n<p>Jenkins初始URL默认不进行配置</p>\n<p><img src=\"https://i.loli.net/2021/10/04/YRJmbgUFoj1xhnB.png\" alt=\"image-20211004205136257\"></p>\n<h2 id=\"安装完成，开始使用\"><a href=\"#安装完成，开始使用\" class=\"headerlink\" title=\"安装完成，开始使用\"></a>安装完成，开始使用</h2><p><img src=\"https://i.loli.net/2021/10/04/kdETlSe1rw7N5py.png\" alt=\"image-20211004205218802\"></p>\n<h1 id=\"Jenkins优化\"><a href=\"#Jenkins优化\" class=\"headerlink\" title=\"Jenkins优化\"></a>Jenkins优化</h1><h2 id=\"插件优化\"><a href=\"#插件优化\" class=\"headerlink\" title=\"插件优化\"></a>插件优化</h2><blockquote>\n<p>由于Jenkins默认使用国外的镜像，所以插件下载安装速度极慢，所以我们需要更改插件仓库。</p>\n<p><strong>注意：该仓库更改必须要在没有下载插件之前！</strong></p>\n</blockquote>\n<ul>\n<li><p>进入Jenkins目录，<code>/opt/jenkins</code></p>\n</li>\n<li><p>复制并重命名文件<code>hudson.model.UpdateCenter.xml</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cp hudson.model.UpdateCenter.xml hudson.model.UpdateCenter.xml.bak<br></code></pre></td></tr></table></figure></li>\n<li><p>修改<code>hudson.model.UpdateCenter.xml</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">url改为<br>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<br></code></pre></td></tr></table></figure></li>\n<li><p>修改<code>default.json</code></p>\n</li>\n<li><p>配置default.json</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /var/lib/jenkins/updates/default.json<br></code></pre></td></tr></table></figure></li>\n<li><p>全局替换</p>\n<blockquote>\n<p>把  updates.jenkins-ci.org&#x2F;download  替换为  mirrors.tuna.tsinghua.edu.cn&#x2F;jenkins</p>\n<p>地址修改把  <code>www.google.com</code> 替换为  <code>www.baidu.com</code></p>\n</blockquote>\n</li>\n<li><p>重启服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl restart jenkins<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"页面优化\"><a href=\"#页面优化\" class=\"headerlink\" title=\"页面优化\"></a>页面优化</h2><blockquote>\n<p>装完Jenkins之后，我们发现有一部分菜单汉化了，有一部分菜单没有汉化，这让人很不爽，所以我们需要调整一下让页面保持统一！</p>\n</blockquote>\n<ul>\n<li><code>系统管理</code>-<code>插件管理</code>-<code>已安装</code>，中搜索，<code>Localization: Chinese (Simplified)</code></li>\n<li>卸载，重装，同时安装<code>locale</code>插件</li>\n<li><code>系统管理</code>-<code>系统配置</code>-<code>Locale</code>-<code>Default Language</code>,填写<code>zh_CN</code>,勾选<code>Ignore browser preference and force this language to all users</code></li>\n<li>重启</li>\n</ul>\n<h1 id=\"Jenkins操作\"><a href=\"#Jenkins操作\" class=\"headerlink\" title=\"Jenkins操作\"></a>Jenkins操作</h1><h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"配置一览\"><a href=\"#配置一览\" class=\"headerlink\" title=\"配置一览\"></a>配置一览</h3><p><img src=\"https://i.loli.net/2021/10/05/KNfwrISu3cqpzoB.jpg\" alt=\"img\"></p>\n<h3 id=\"构建环境配置\"><a href=\"#构建环境配置\" class=\"headerlink\" title=\"构建环境配置\"></a>构建环境配置</h3><p>指定构建时所依赖的环境参数，如jdk版本，可以手动安装jdk，也可以在【全局工具配置】中指定好jdk版本，在首次构建时会自动安装，首次构建下载时间较长，耐心等待即可。</p>\n<p>以NodeJS自动安装为例：</p>\n<p><img src=\"https://i.loli.net/2021/10/05/w3ypsOPzqZ4QM2d.jpg\" alt=\"img\"></p>\n<h2 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h2><p>构建模块大多以插件形式存在，使用前需安装，否则无法找到对应构建项。</p>\n<p><img src=\"https://i.loli.net/2021/10/05/BQ7LWwcZgriysMS.jpg\" alt=\"img\"></p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><p>系统管理-&gt;系统配置-&gt;Publish over SSH，点击[新增]按钮添加服务器，按要求填写服务器信息，如果没有找到此选项，可先在【插件管理】中安装Publish over SSH插件。</p>\n<p><img src=\"https://i.loli.net/2021/10/05/e96JzP8iSpvhcy7.jpg\" alt=\"img\"></p>\n<p>说明：Remote Directory指定的目录会作为文件上传时的根目录。</p>\n<h2 id=\"Java应用构建配置\"><a href=\"#Java应用构建配置\" class=\"headerlink\" title=\"Java应用构建配置\"></a>Java应用构建配置</h2><h3 id=\"新建任务\"><a href=\"#新建任务\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><p>以构建Maven项目为例，选择一个Maven构建风格，可以省去许多maven配置，如果已经有一个相同配置，可选择输入名称进行复制。</p>\n<p>Maven setting.xml配置文件：</p>\n<blockquote>\n<p>&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;tools&#x2F;hudson.tasks.Maven_MavenInstallation&#x2F;maven&#x2F;conf&#x2F;</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/05/QqhzG2svYTgujEN.jpg\" alt=\"img\"></p>\n<h3 id=\"构建包留存策略\"><a href=\"#构建包留存策略\" class=\"headerlink\" title=\"构建包留存策略\"></a>构建包留存策略</h3><p><img src=\"https://i.loli.net/2021/10/05/BsxnbpaRHl6qdGM.jpg\" alt=\"img\"></p>\n<h3 id=\"源码仓库\"><a href=\"#源码仓库\" class=\"headerlink\" title=\"源码仓库\"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg\" alt=\"img\"></p>\n<p>配置源码仓库，指定动态tag分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/sSY6haTOtJcqI2M.jpg\" alt=\"img\"></p>\n<h3 id=\"自动构建选项\"><a href=\"#自动构建选项\" class=\"headerlink\" title=\"自动构建选项\"></a>自动构建选项</h3><p>取消触发自动构建的选项</p>\n<p><img src=\"https://i.loli.net/2021/10/05/RBLYzZElcywuX7U.jpg\" alt=\"img\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p><img src=\"https://i.loli.net/2021/10/05/i84axClGu2AokXY.jpg\" alt=\"img\"></p>\n<p>在jekenis服务器本地构建，使用jekenis服务器的maven配置进行编译构建</p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>构建成功后上传到指定部署服务器，仅编译成功后进行上传</p>\n<p><img src=\"https://i.loli.net/2021/10/05/xyuPw2FXsRdIDpL.jpg\" alt=\"img\"></p>\n<ul>\n<li>Name：在服务列表中选择上传目标；</li>\n<li>Source files：指定上传的jar包，支持正则通配（根据构建目录距离jar包位置的不同，会自动在服务器端创建不同深度的目录）。</li>\n<li>Remote directory：可以指定上传目录，目录位于配置服务器时指定的根目录之下。</li>\n<li>Exec command：上传成功后在上传后的服务器上执行的命令或脚本。</li>\n</ul>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n<h2 id=\"Js应用构建\"><a href=\"#Js应用构建\" class=\"headerlink\" title=\"Js应用构建\"></a>Js应用构建</h2><h3 id=\"新建任务-1\"><a href=\"#新建任务-1\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><p>选择一个自由风格的构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/W48lXhm1DkjRvag.jpg\" alt=\"img\"></p>\n<h3 id=\"构建包留存策略-1\"><a href=\"#构建包留存策略-1\" class=\"headerlink\" title=\"构建包留存策略\"></a>构建包留存策略</h3><p><img src=\"https://i.loli.net/2021/10/05/5XyWcCawtzI9JlV.jpg\" alt=\"img\"></p>\n<h3 id=\"源码仓库-1\"><a href=\"#源码仓库-1\" class=\"headerlink\" title=\"源码仓库\"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg\" alt=\"img\"></p>\n<p>配置源码仓库，指定动态tag分支</p>\n<p><img src=\"https://i.loli.net/2021/10/06/sgqaEWYKMb5rA8z.png\" alt=\"image-20211006134146871\"></p>\n<h3 id=\"自动构建选项-1\"><a href=\"#自动构建选项-1\" class=\"headerlink\" title=\"自动构建选项\"></a>自动构建选项</h3><p>取消自动构建选项</p>\n<p><img src=\"https://i.loli.net/2021/10/05/WUG6PSjmNKFaH37.jpg\" alt=\"img\"></p>\n<h3 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h3><p>指定构建环境，选择已配置的nodejs构建环境，在jekenis本地服务器进行编译构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/gcNnHvzawXFKC76.jpg\" alt=\"img\"></p>\n<h3 id=\"构建-1\"><a href=\"#构建-1\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>在jekenis本地服务器进行编译构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/j2Z4QHn5qYSolFM.jpg\" alt=\"img\"></p>\n<p>为方便后续上传，在构建环节执行了压缩命令，可视情况而定。</p>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n<h3 id=\"上传-1\"><a href=\"#上传-1\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>将编译并压缩后的前端文件上传到指定服务器</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zjxrTqCF4QGvNLH.jpg\" alt=\"img\"></p>\n<p>在服务器列表中选择目标，指定上传文件，填写上传成功后需执行的命令。因VUE编译多次会生成不同的文件，故需将编译后的文件一次性上传多个负载的服务器。</p>\n<p>即重新选择一次上传步骤：</p>\n<p><img src=\"https://i.loli.net/2021/10/05/m5ODJEU6vIx9n3L.jpg\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2021/10/05/2Dsf1Mg7rq4vYdn.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Jenkins"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Maven/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Maven/",
            "title": "Maven",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Maven是意第绪语，意思是“知识的积累者”，最初是为了简化Jakarta Turbine项目中的构建过程。有几个项目，每个项目都有自己的Ant构建文件，所有项目都略有不同。JAR已检入CVS。我们想要一种标准的方式来构建项目，清晰地定义项目的组成，一种简单的方式来发布项目信息，以及一种在多个项目中共享JAR的方式。</p>\n<p>结果是一个可以用于构建和管理任何基于Java的项目的工具。我们希望我们已经创建了一些东西，可以使Java开发人员的日常工作更加轻松，并且通常有助于理解任何基于Java的项目。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>Maven官网地址：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"https://i.loli.net/2021/10/06/wi56hbVS1LqjZYd.png\" alt=\"image-20211006143204542\"></p>\n<p>进入上方官网地址，点击左侧<code>Download</code>，进入下载页面。</p>\n<p><img src=\"https://i.loli.net/2021/10/06/km3iteEFAHdKxsz.png\" alt=\"image-20211006143351772\"></p>\n<p>右键点击超链接，复制链接地址。</p>\n<p>链接服务器，进入安装目录,博猪安装在：<code>/opt</code></p>\n<p>使用<code>wget</code>进行下载，如果没有<code>wget</code>，请使用<code>yum -y install wget</code>先用yum安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar -zxvf apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>进入<code>/etc/profile.d/</code>目录，增加<code>maven.sh</code>环境脚本。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim maven.sh<br></code></pre></td></tr></table></figure>\n\n<p>增加环境变量</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> MAVEN_HOME=/opt/apache-maven-3.8.3<br><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$&#123;MAVEN_HOME&#125;</span>/bin:<span class=\"hljs-variable\">$&#123;PATH&#125;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果是以普通用户身份运行，则需要增加可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">chmod</span> +x /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>使用<code>source</code>命令加载环境变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>想要验证 Maven 软件安装，使用<code>mvn -version</code>命令，它将会打印出 Maven 版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn -version<br></code></pre></td></tr></table></figure>\n\n<p>你将会看到类似下面的输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Apache Maven 3.8.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)<br>Maven home: /opt/apache-maven-3.8.3<br>Java version: 11.0.5, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk-11.0.5.10-0.el8_0.x86_64<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: &quot;linux&quot;, version: &quot;4.18.0-80.7.1.el8_0.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"配置国内镜像仓库\"><a href=\"#配置国内镜像仓库\" class=\"headerlink\" title=\"配置国内镜像仓库\"></a>配置国内镜像仓库</h1><p>配置maven仓库，设置阿里镜像仓库，一定要配置一下，国内的下载jar快些。</p>\n<p>设置本地仓库存储地址：<code>/opt/apache-maven-3.8.3/repo</code>,进入配置路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /opt/apache-maven-3.8.3/conf<br>vi settings.xml<br></code></pre></td></tr></table></figure>\n\n<p>修改仓库存储地址</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">&lt;localRepository&gt;<span class=\"hljs-regexp\">/opt/</span>apache-maven-<span class=\"hljs-number\">3.8</span>.<span class=\"hljs-number\">3</span><span class=\"hljs-regexp\">/repo&lt;/</span>localRepository&gt;<br></code></pre></td></tr></table></figure>\n\n<p>修改镜像仓库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Maven"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-MongoDB/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-MongoDB/",
            "title": "Centos7-MongoDB",
            "date_published": "2024-01-03T13:13:21.658Z",
            "content_html": "<h1 id=\"离线安装\"><a href=\"#离线安装\" class=\"headerlink\" title=\"离线安装\"></a>离线安装</h1><h2 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><p>根据自己的要求下载tar包，<a href=\"https://www.mongodb.com/try/download/community2\">点击此链接选择进行下载</a></p>\n<p>博猪下载版本为<code>mongodb-linux-x86_64-rhel70-4.4.17.tgz</code></p>\n<h2 id=\"上传安装包\"><a href=\"#上传安装包\" class=\"headerlink\" title=\"上传安装包\"></a>上传安装包</h2><h2 id=\"解压压缩包\"><a href=\"#解压压缩包\" class=\"headerlink\" title=\"解压压缩包\"></a>解压压缩包</h2><p>解压到 &#x2F;opt 目录下，并重命名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar zxvf mongodb-linux-x86_64-rhel70-4.4.17.tgz -C /opt<br><br>mv mongodb-linux-x86_64-rhel70-6.0.0 mongodb<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>在 &#x2F;etc&#x2F;profile 中加入下面一行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">export PATH=/opt/mongodb/bin:$PATH<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">刷新配置</span><br>source /etc/profile<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建数据库目录和日志目录\"><a href=\"#创建数据库目录和日志目录\" class=\"headerlink\" title=\"创建数据库目录和日志目录\"></a>创建数据库目录和日志目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir -p /opt/mongodb/logs  # 日志目录<br>mkdir -p /opt/mongodb/db  # 数据库目录<br><br>touch /opt/mongodb/logs/mongodb.log  # 创建日志文件<br>chmod 777 /opt/mongodb/logs<br>chmod 777 /opt/mongodb/db<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"创建配置文件\"><a href=\"#创建配置文件\" class=\"headerlink\" title=\"创建配置文件\"></a>创建配置文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi /opt/mongodb/mongodb.conf<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-attr\">port</span>= <span class=\"hljs-string\">27017</span><br><span class=\"hljs-attr\">dbpath</span>=<span class=\"hljs-string\">/opt/mongodb/db  # 指定数据库路径</span><br><span class=\"hljs-attr\">logpath</span>=<span class=\"hljs-string\">/opt/mongodb/logs/mongodb.log # 指定日志文件路径</span><br><span class=\"hljs-attr\">logappend</span>=<span class=\"hljs-string\">true  # 使用追加方式写日志</span><br><span class=\"hljs-attr\">fork</span>=<span class=\"hljs-string\">true  # 以守护进程的方式运行</span><br><span class=\"hljs-attr\">maxConns</span>=<span class=\"hljs-string\">100  # 最大同时连接数</span><br><span class=\"hljs-attr\">noauth</span>=<span class=\"hljs-string\">true  # 不启用验证</span><br><span class=\"hljs-attr\">journal</span>=<span class=\"hljs-string\">true  # 每次写入会记录一条操作日志</span><br><span class=\"hljs-attr\">storageEngine</span>=<span class=\"hljs-string\">wiredTiger # 存储引擎</span><br><span class=\"hljs-attr\">bind_ip</span>=<span class=\"hljs-string\">0.0.0.0 # 服务绑定地址</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"启动mongodb\"><a href=\"#启动mongodb\" class=\"headerlink\" title=\"启动mongodb\"></a>启动mongodb</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mongod --config /opt/mongodb/mongodb.conf<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"启用授权验证\"><a href=\"#启用授权验证\" class=\"headerlink\" title=\"启用授权验证\"></a>启用授权验证</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mongod --config /opt/mongodb/mongodb.conf --auth<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"停止-mongodb\"><a href=\"#停止-mongodb\" class=\"headerlink\" title=\"停止 mongodb\"></a>停止 mongodb</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mongod --config /opt/mongodb/mongodb.conf --shutdown<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置开机启动\"><a href=\"#配置开机启动\" class=\"headerlink\" title=\"配置开机启动\"></a>配置开机启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /etc/init.d/mongodb<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\"></span><br><span class=\"language-bash\"><span class=\"hljs-comment\">#chkconfig: 2345 80 90</span></span><br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">description: mongodb</span><br>start() &#123;<br> /opt/mongodb/bin/mongod --config /opt/mongodb/mongodb.conf<br>&#125;<br> <br>stop() &#123;<br>  /opt/mongodb/bin/mongod --config /opt/mongodb/mongodb.conf --shutdown<br>&#125;<br> <br>case &quot;$1&quot; in<br>  start)<br> start<br> ;;<br>  stop)<br> stop<br> ;;<br>  restart)<br> stop<br> start<br> ;;<br>  *)<br> echo $&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;<br> exit 1<br>esac<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /etc/init.d/<br><br>sudo chkconfig --add mongodb<br>sudo chmod +x  mongodb<br>sudo chkconfig mongodb on<br></code></pre></td></tr></table></figure>\n\n<p>配置完成后可使用以下命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动mongodb：</span><br>service mongodb start<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">停止mongodb：</span><br>service mongodb stop<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：上述启动为root账户启动，权限太大，如果需要启用验证，则需要将配置文件（&#x2F;opt&#x2F;mongodb&#x2F;mongodb.conf）中的 noauth 设置为 false</p>\n</blockquote>\n<h1 id=\"Yum源安装\"><a href=\"#Yum源安装\" class=\"headerlink\" title=\"Yum源安装\"></a>Yum源安装</h1><h2 id=\"创建存储源文件夹\"><a href=\"#创建存储源文件夹\" class=\"headerlink\" title=\"创建存储源文件夹\"></a>创建存储源文件夹</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mkdir -p /opt/rpm_repo<br>cd /opt/rpm_repo\t<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"下载MongoDBYum源\"><a href=\"#下载MongoDBYum源\" class=\"headerlink\" title=\"下载MongoDBYum源\"></a>下载MongoDBYum源</h2><blockquote>\n<p>根据自己的要求下载tar包，<a href=\"https://www.mongodb.com/try/download/community2\">点击此链接选择进行下载</a>,选择一下三个选项，右键<code>Download</code>,复制链接地址即可。</p>\n<p><img src=\"http://tva1.sinaimg.cn/large/0086NgqGly1h7acvnupi8j313d0mp7ak.jpg\" alt=\"image.png\"></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">shell-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.17-1.el7.x86_64.rpm<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">server-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-server-4.4.17-1.el7.x86_64.rpm<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">mongos-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-mongos-4.4.17-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"使用Yum安装\"><a href=\"#使用Yum安装\" class=\"headerlink\" title=\"使用Yum安装\"></a>使用Yum安装</h2><blockquote>\n<p>使用 yum 安装 mongodb，可以解决依赖包问题</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install -y mongodb-org-*.rpm<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查询MongoDB状态\"><a href=\"#查询MongoDB状态\" class=\"headerlink\" title=\"查询MongoDB状态\"></a>查询MongoDB状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl status mongod<br></code></pre></td></tr></table></figure>\n\n<p>如果启动，则需要停止运行，停止命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl stop mongod<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"修改MongoDB配置文件\"><a href=\"#修改MongoDB配置文件\" class=\"headerlink\" title=\"修改MongoDB配置文件\"></a>修改MongoDB配置文件</h2><ul>\n<li>备份配置文件</li>\n<li>备份配置文件</li>\n<li>备份配置文件</li>\n</ul>\n<p>重要的事情说三遍！！！！</p>\n<blockquote>\n<p>一般yum安装配置信息都在<code>/etc</code></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /etc<br>cp mongod.conf mongod.conf.bak<br></code></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vi mongod.conf<br></code></pre></td></tr></table></figure>\n\n<p>最终文件配置如下：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yaml\"><span class=\"hljs-comment\"># mongod.conf</span><br><br><span class=\"hljs-comment\"># for documentation of all options, see:</span><br><span class=\"hljs-comment\">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><br><span class=\"hljs-comment\"># where to write logging data.</span><br><span class=\"hljs-attr\">systemLog:</span><br>  <span class=\"hljs-attr\">destination:</span> <span class=\"hljs-string\">file</span><br>  <span class=\"hljs-attr\">logAppend:</span> <span class=\"hljs-literal\">true</span><br>  <span class=\"hljs-comment\"># 指定日志文件路径</span><br>  <span class=\"hljs-attr\">path:</span> <span class=\"hljs-string\">/opt/mongodb/logs/mongod.log</span><br><br><span class=\"hljs-comment\"># Where and how to store data.</span><br><span class=\"hljs-attr\">storage:</span><br>  <span class=\"hljs-comment\"># 指定数据库路径</span><br>  <span class=\"hljs-attr\">dbPath:</span> <span class=\"hljs-string\">/opt/mongodb/db</span><br>  <span class=\"hljs-comment\"># 每次写入会记录一条操作日志</span><br>  <span class=\"hljs-attr\">journal:</span><br>    <span class=\"hljs-attr\">enabled:</span> <span class=\"hljs-literal\">true</span><br><span class=\"hljs-comment\">#  engine:</span><br><span class=\"hljs-comment\">#  wiredTiger:</span><br><br><span class=\"hljs-comment\"># how the process runs</span><br><span class=\"hljs-attr\">processManagement:</span><br>  <span class=\"hljs-comment\"># 以守护进程的方式运行</span><br>  <span class=\"hljs-attr\">fork:</span> <span class=\"hljs-literal\">true</span>  <span class=\"hljs-comment\"># fork and run in background</span><br>  <span class=\"hljs-attr\">pidFilePath:</span> <span class=\"hljs-string\">/var/run/mongodb/mongod.pid</span>  <span class=\"hljs-comment\"># location of pidfile</span><br>  <span class=\"hljs-attr\">timeZoneInfo:</span> <span class=\"hljs-string\">/usr/share/zoneinfo</span><br><br><span class=\"hljs-comment\"># network interfaces</span><br><span class=\"hljs-attr\">net:</span><br>  <span class=\"hljs-comment\"># 配置端口</span><br>  <span class=\"hljs-attr\">port:</span> <span class=\"hljs-number\">37017</span><br>  <span class=\"hljs-comment\"># 服务绑定地址</span><br>  <span class=\"hljs-comment\"># 输入0.0.0.0，::绑定所有IPv4和IPv6地址，或者使用网络。bindIpAll设置</span><br>  <span class=\"hljs-attr\">bindIp:</span> <span class=\"hljs-number\">0.0</span><span class=\"hljs-number\">.0</span><span class=\"hljs-number\">.0</span>  <span class=\"hljs-comment\"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><br><br><span class=\"hljs-comment\">#security:</span><br><br><span class=\"hljs-comment\">#operationProfiling:</span><br><br><span class=\"hljs-comment\">#replication:</span><br><br><span class=\"hljs-comment\">#sharding:</span><br><br><span class=\"hljs-comment\">## Enterprise-Only Options</span><br><br><span class=\"hljs-comment\">#auditLog:</span><br><br><span class=\"hljs-comment\">#snmp:</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "CentOS7",
                "MongoDB"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-Redis/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-Redis/",
            "title": "Centos7-Redis",
            "date_published": "2024-01-03T13:13:21.658Z",
            "content_html": "<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><p>redis是由C语言开发，因此安装之前必须要确保服务器已经安装了gcc，可以通过如下命令查看机器是否安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">gcc -v<br></code></pre></td></tr></table></figure>\n\n<p>如果没有安装则通过以下命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum install -y gcc<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><blockquote>\n<p>下载redis安装包并解压，<a href=\"https://redis.io/download/#redis-downloads\">点击此链接跳转到</a>​<a href=\"https://redis.io/download/#redis-downloads\"><code>Redis</code></a>​<a href=\"https://redis.io/download/#redis-downloads\">下载页面</a></p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /opt<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">下载，我是在opt下执行的下载，所以我的下载目录为：/opt/redis-&#123;version-number&#125;，这里按照自己的实际情况调整</span><br>wget https://github.com/redis/redis/archive/7.0.5.tar.gz<br>mv 7.0.5.tar.gz redis-7.0.5.tar.gz<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">解压</span><br>tar -zxvf redis-7.0.5.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入解压目录</span><br>cd redis-7.0.5<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">编译</span><br>make<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"指定安装目录并进行安装\"><a href=\"#指定安装目录并进行安装\" class=\"headerlink\" title=\"指定安装目录并进行安装\"></a>指定安装目录并进行安装</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">这里默认安装位置为:/usr/local/redis</span><br>make install PREFIX=/usr/local/redis<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"启动Redis服务\"><a href=\"#启动Redis服务\" class=\"headerlink\" title=\"启动Redis服务\"></a>启动Redis服务</h1><h2 id=\"直接启动（不建议使用）\"><a href=\"#直接启动（不建议使用）\" class=\"headerlink\" title=\"直接启动（不建议使用）\"></a>直接启动（不建议使用）</h2><blockquote>\n<p>直接启动，使用的是redis的默认配置，不建议直接默认启动！！！！</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">进入redis安装目录</span><br>cd /usr/local/redis/bin/<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动服务</span><br>./redis-server<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"通过守护进程方式启动\"><a href=\"#通过守护进程方式启动\" class=\"headerlink\" title=\"通过守护进程方式启动\"></a>通过守护进程方式启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">第一步：从 redis 的源码目录中复制 redis.conf 到 redis 的安装目录</span><br>cp /opt/redis-7.0.5/redis.conf /usr/local/redis/bin/<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">第二步：修改redis.conf配置文件</span><br>cd /usr/local/redis/bin/<br>vi redis.conf<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">修改内容如下：</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">daemonize 的值从 no 修改成 <span class=\"hljs-built_in\">yes</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">requirepass 123456 <span class=\"hljs-comment\"># 设置密码</span></span> <br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">127.0.0.1          <span class=\"hljs-comment\">#注释掉这行代码,以便外网访问</span></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">第三步：启动服务</span><br>./redis-server redis.conf<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">第四步：查看进程来确定redis是否启动成功，非必须,建议查看</span><br>ps -ef |grep redis<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"停止Redis服务\"><a href=\"#停止Redis服务\" class=\"headerlink\" title=\"停止Redis服务\"></a>停止Redis服务</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-built_in\">cd</span> /usr/local/redis/bin<br>./redis-cli shutdown<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"设置开机自动启动\"><a href=\"#设置开机自动启动\" class=\"headerlink\" title=\"设置开机自动启动\"></a>设置开机自动启动</h1><p>切换到&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录，创建redis.service文件。命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /lib/systemd/system/<br>vim redis.service<br></code></pre></td></tr></table></figure>\n\n<p>文件内容如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">ExecStart需要按照实际情况修改成自己的地址</span><br>ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>\n\n<p>设置开启自动启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\"># 开机自动启动</span><br>systemctl <span class=\"hljs-built_in\">enable</span> redis.service<br><span class=\"hljs-comment\"># 启动redis服务</span><br>systemctl start redis.service<br><span class=\"hljs-comment\"># 查看服务状态</span><br>systemctl status redis.service<br><span class=\"hljs-comment\"># 停止服务</span><br>systemctl stop redis.service<br><span class=\"hljs-comment\"># 取消开机自动启动(卸载服务)</span><br>systemctl disabled redis.service<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "CentOS7",
                "Redis"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/",
            "title": "",
            "date_published": "2024-01-03T13:13:21.657Z",
            "content_html": "<h1 id=\"Centos7\"><a href=\"#Centos7\" class=\"headerlink\" title=\"Centos7\"></a>Centos7</h1><p>‍</p>\n",
            "tags": []
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2023/12/24/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/%E5%AE%89%E8%A3%85Java8/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2023/12/24/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/%E5%AE%89%E8%A3%85Java8/",
            "title": "安装Java8",
            "date_published": "2023-12-23T23:29:06.230Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>最近</p>\n",
            "tags": [
                "LINUX",
                "JAVA",
                "shell"
            ]
        }
    ]
}