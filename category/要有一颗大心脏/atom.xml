<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</id>
    <title>Will • Posts by &#34;要有一颗大心脏&#34; category</title>
    <link href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io" />
    <updated>2024-01-03T13:13:21.669Z</updated>
    <category term="开发习惯" />
    <category term="思考" />
    <category term="思维习惯" />
    <category term="感言" />
    <category term="Docker" />
    <category term="LINUX" />
    <category term="Node" />
    <category term="前端" />
    <category term="Nvm" />
    <category term="CentOS" />
    <category term="Linux" />
    <category term="Crontab" />
    <category term="Jenkins" />
    <category term="IDEA" />
    <category term="Alibaba Cloud Toolkit" />
    <category term="Archery" />
    <category term="MySql" />
    <category term="工具" />
    <category term="Maven" />
    <category term="Git" />
    <category term="JAVA" />
    <category term="shell" />
    <category term="信息安全等级保护认证" />
    <category term="系统认证" />
    <category term="读书笔记" />
    <category term="BeetlSql" />
    <category term="Beetl" />
    <category term="异常" />
    <category term="Java IO-初识IO" />
    <category term="Spring" />
    <category term="SpringCloud" />
    <category term="SpringCloud Alibaba" />
    <category term="枚举" />
    <category term="POI" />
    <category term="Spring Boot" />
    <category term="VinUtil" />
    <category term="VerificationCode" />
    <category term="SOAR" />
    <category term="其他" />
    <category term="ProtoBuffer" />
    <category term="博客园" />
    <category term="博客" />
    <category term="MongoDb" />
    <category term="Lombok工具库详解" />
    <category term="常用开发库" />
    <category term="JSON类库详解" />
    <category term="Hutool" />
    <category term="工具类" />
    <category term="Spring常用工具类" />
    <category term="异步编程" />
    <category term="线程" />
    <category term="方法论" />
    <category term="开源协议" />
    <category term="CentOS7" />
    <category term="MongoDB" />
    <category term="Redis" />
    <category term="VMware" />
    <category term="Typora" />
    <category term="PostMan" />
    <category term="Java8" />
    <category term="特性" />
    <category term="JDBC" />
    <category term="Mysql" />
    <category term="EasyExcel" />
    <category term="日志类库详解" />
    <category term="Script" />
    <category term="设计模式" />
    <category term="MyBatis" />
    <category term="Apache Common" />
    <category term="Google Guava" />
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</id>
        <title>开发好习惯</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;写干净的代码，做风一样的男子！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编程5分钟，查代码2小时!&lt;/p&gt;
&lt;p&gt;在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当有人指出程序员代码有BUG时，程序员的回答各有不同：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可能啊，在我电脑上运行没有问题呀!&lt;/li&gt;
&lt;li&gt;我已经一星期没碰这块代码啦!&lt;/li&gt;
&lt;li&gt;没事，我改一行代码就可以了，不影响程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;center&gt;程序员调 Bug 的样子，非常真实~&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;​                                                                                                                         &lt;center&gt;↓↓↓&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif&#34; alt=&#34;0?wx_fmt=gif&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调bug是火，bug是烟。一处点火，四处冒烟&lt;/p&gt;
&lt;p&gt;下面奉上我日常开发的一些总结.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;如何减少代码的BUG呢-在此分享几个技巧&#34;&gt;&lt;a href=&#34;#如何减少代码的BUG呢-在此分享几个技巧&#34; class=&#34;headerlink&#34; title=&#34;如何减少代码的BUG呢?在此分享几个技巧&#34;&gt;&lt;/a&gt;如何减少代码的BUG呢?在此分享几个技巧&lt;/h1&gt;&lt;h2 id=&#34;别对警告视而不见&#34;&gt;&lt;a href=&#34;#别对警告视而不见&#34; class=&#34;headerlink&#34; title=&#34;别对警告视而不见&#34;&gt;&lt;/a&gt;别对警告视而不见&lt;/h2&gt;&lt;p&gt;相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的目标是，写干净的代码，做风一样的男子!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编程习惯&#34;&gt;&lt;a href=&#34;#编程习惯&#34; class=&#34;headerlink&#34; title=&#34;编程习惯&#34;&gt;&lt;/a&gt;编程习惯&lt;/h2&gt;&lt;p&gt;种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。&lt;/p&gt;
&lt;h2 id=&#34;写代码的时间问题&#34;&gt;&lt;a href=&#34;#写代码的时间问题&#34; class=&#34;headerlink&#34; title=&#34;写代码的时间问题&#34;&gt;&lt;/a&gt;写代码的时间问题&lt;/h2&gt;&lt;p&gt;对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。&lt;/p&gt;
&lt;p&gt;虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;验证、自测&#34;&gt;&lt;a href=&#34;#验证、自测&#34; class=&#34;headerlink&#34; title=&#34;验证、自测&#34;&gt;&lt;/a&gt;验证、自测&lt;/h2&gt;&lt;p&gt;在提交测试前要多验证，其中包括自动化测试、手动跑用例等。&lt;/p&gt;
&lt;p&gt;有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。&lt;/p&gt;
&lt;p&gt;这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试&lt;/p&gt;
&lt;h2 id=&#34;仔细的DEBUG&#34;&gt;&lt;a href=&#34;#仔细的DEBUG&#34; class=&#34;headerlink&#34; title=&#34;仔细的DEBUG&#34;&gt;&lt;/a&gt;仔细的DEBUG&lt;/h2&gt;&lt;p&gt;在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。&lt;/p&gt;
&lt;h2 id=&#34;仔细的设计&#34;&gt;&lt;a href=&#34;#仔细的设计&#34; class=&#34;headerlink&#34; title=&#34;仔细的设计&#34;&gt;&lt;/a&gt;仔细的设计&lt;/h2&gt;&lt;p&gt;在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。&lt;/p&gt;
&lt;h2 id=&#34;避免干扰&#34;&gt;&lt;a href=&#34;#避免干扰&#34; class=&#34;headerlink&#34; title=&#34;避免干扰&#34;&gt;&lt;/a&gt;避免干扰&lt;/h2&gt;&lt;p&gt;有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;写注释，写注释，写注释。重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;因为前期的注释有利于后续开发的时候容易减少bug。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自从修改了注释模板，整个人精神多了，bug也明显少了，如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png&#34; alt=&#34;image-20201215145125620&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;敢于维护上古代码&#34;&gt;&lt;a href=&#34;#敢于维护上古代码&#34; class=&#34;headerlink&#34; title=&#34;敢于维护上古代码&#34;&gt;&lt;/a&gt;敢于维护上古代码&lt;/h2&gt;&lt;p&gt;博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
</content>
        <category term="开发习惯" />
        <category term="思考" />
        <updated>2024-01-03T13:13:21.669Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/01/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B/</id>
        <title>以终为始</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/01/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B/"/>
        <content type="html">&lt;h1 id=&#34;“以终为始”是什么？&#34;&gt;&lt;a href=&#34;#“以终为始”是什么？&#34; class=&#34;headerlink&#34; title=&#34;“以终为始”是什么？&#34;&gt;&lt;/a&gt;“以终为始”是什么？&lt;/h1&gt;&lt;p&gt;意思是指，先在脑海里构思，然后进行实质创造，需要由两个层面来构成的：&lt;/p&gt;
&lt;p&gt;一是心智层面，即在脑海里构思；&lt;br&gt;二是实践层面，即在实际中行动。&lt;br&gt;当然也有个人会把他们理解为二次创造。&lt;/p&gt;
&lt;p&gt;就好像我们写文章一样，如果什么都想表达，反而什么都表达不了。&lt;/p&gt;
&lt;p&gt;忽然记得之前有个很火的广告语:”去哪里不重要，重要的是去啊”。其实之前我是很认可这种说法的，我认为行动起来很重要，但是的近半年的经历让我忽然有些转变了。&lt;/p&gt;
&lt;p&gt;举个简单的例子，我是程序员出身，那就举一个面试中经常出一个一个完整的一个业务场景：用户登录，好那开发一个用户登录的功能。&lt;br&gt;我相信很多人读到上面的时候脑子已经构思出大致的轮廓了，有的甚至可以进行code了，但是呢，我忽然发现我这块有短信服务，是否可以对接一下短信服务进行便捷登录呢？当然也是否可以通过微信扫码进行更为便捷的登录呢？&lt;br&gt;思路顺道这里是否心里有很多的mmp飞过，当然我之前也是这种思考思维，但是经过过多的踩坑然后调节后我发现了”以终为始”这个思维方式，并逐步的运用到工作和生活中。&lt;/p&gt;
&lt;h2 id=&#34;为什么要“以终为始”&#34;&gt;&lt;a href=&#34;#为什么要“以终为始”&#34; class=&#34;headerlink&#34; title=&#34;为什么要“以终为始”&#34;&gt;&lt;/a&gt;为什么要“以终为始”&lt;/h2&gt;&lt;p&gt;养成“以终为始”的习惯不仅能帮提升我们的工作效率，而且能最大程度上激发我们的潜能。&lt;/p&gt;
&lt;p&gt;从结果出发来思考，你会将着眼点放在现在要做什么的事情，才能最快地达到目标，而不是仅仅局限在现有的环境和资源中，觉得茫然无措。&lt;/p&gt;
&lt;p&gt;比如，日本企业家稻盛和夫，在自己公司规模还很小的时候，就敢接手要求高到离谱的大订单。&lt;/p&gt;
&lt;p&gt;因为稻盛和夫认为要达到订单的要求，不能从现在的能力去衡量。而是应该从结果出发，去调动一切资源，去努力成长。稻盛和夫正是应用这种思维，将三家企业做到了世界500强。&lt;/p&gt;
&lt;p&gt;做事情之前，&lt;strong&gt;永远要先思考一下，我想做什么，我要达成什么样的目标，这样你的努力，就不会偏离你要去的终点，&lt;/strong&gt;而且还有助于激发你的潜力。&lt;/p&gt;
&lt;h1 id=&#34;怎么样才能做到“以终为始”？&#34;&gt;&lt;a href=&#34;#怎么样才能做到“以终为始”？&#34; class=&#34;headerlink&#34; title=&#34;怎么样才能做到“以终为始”？&#34;&gt;&lt;/a&gt;怎么样才能做到“以终为始”？&lt;/h1&gt;&lt;p&gt;道理简单，但做到真的很难，具体要怎么才能达到“以终为始”呢？可以从下面三个tips入手。&lt;/p&gt;
&lt;h2 id=&#34;1、遇到事情，倒着想&#34;&gt;&lt;a href=&#34;#1、遇到事情，倒着想&#34; class=&#34;headerlink&#34; title=&#34;1、遇到事情，倒着想&#34;&gt;&lt;/a&gt;1、遇到事情，倒着想&lt;/h2&gt;&lt;p&gt;如果在一项工作当中，你并没有完全领会领导的最终意图，**应及时主动沟通，避免方向性的错误。&lt;br&gt;只有确定了目标和意义，才会不折不挠的始终向着目标前进，而这就是我们所说的以终为始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、分解目标，制定做事顺序&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;“兵马未动，粮草先行”，树立好目标后，要提前做好统筹计划，考虑可能出现的问题和困难。&lt;/p&gt;
&lt;p&gt;什么是有效的计划？业界有一个通用的SMART原则，是英文&lt;strong&gt;Specific、Measurable、Attainable、Relevant、Time－based&lt;/strong&gt;这5个词的缩写，亦即“具体、可衡量、有可行性、有相关性、有时间期限”。&lt;/p&gt;
&lt;p&gt;“量化”在目标实现中是一个非常重要的因素。用一句话来概括就是：我需要在什么时间点，达成什么样的进度？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、坚决执行，适时调整&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我个人比较不理解的一句话就是“听过很多道理，却过不好这一生”。总感觉这是那些没什么执行力和自制力的人为自己找的借口。&lt;/p&gt;
&lt;p&gt;而想要提升效率最好的办法就是&lt;strong&gt;一件一件事去做&lt;/strong&gt;！&lt;/p&gt;
&lt;p&gt;但是在执行过程中，不能一根筋，完全按照当时的计划按部就班地执行。因为我们前期制定计划往往不是完美无缺的。&lt;/p&gt;
</content>
        <category term="思维习惯" />
        <updated>2024-01-01T10:30:54.019Z</updated>
    </entry>
</feed>
