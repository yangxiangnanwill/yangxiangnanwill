<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>开发好习惯</title>
    <url>/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>写干净的代码，做风一样的男子！</p>
</blockquote>
<p>编程5分钟，查代码2小时!</p>
<p>在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。</p>
<p><img src="https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<p><strong>当有人指出程序员代码有BUG时，程序员的回答各有不同：</strong></p>
<ul>
<li>不可能啊，在我电脑上运行没有问题呀!</li>
<li>我已经一星期没碰这块代码啦!</li>
<li>没事，我改一行代码就可以了，不影响程序。</li>
</ul>
<div>
<center>程序员调 Bug 的样子，非常真实~</center>
</div>

<p>​                                                                                                                         <center>↓↓↓</center></p>
<p><img src="https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&wxfrom=5&wx_lazy=1" alt="0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1"></p>
<p><img src="https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&wxfrom=5&wx_lazy=1" alt="0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1"></p>
<p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif" alt="0?wx_fmt=gif"></p>
<blockquote>
<p>调bug是火，bug是烟。一处点火，四处冒烟</p>
<p>下面奉上我日常开发的一些总结.</p>
</blockquote>
<h1 id="如何减少代码的BUG呢-在此分享几个技巧"><a href="#如何减少代码的BUG呢-在此分享几个技巧" class="headerlink" title="如何减少代码的BUG呢?在此分享几个技巧"></a>如何减少代码的BUG呢?在此分享几个技巧</h1><h2 id="别对警告视而不见"><a href="#别对警告视而不见" class="headerlink" title="别对警告视而不见"></a>别对警告视而不见</h2><p>相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。</p>
<p><strong>我们的目标是，写干净的代码，做风一样的男子!</strong></p>
<p><img src="https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<h2 id="编程习惯"><a href="#编程习惯" class="headerlink" title="编程习惯"></a>编程习惯</h2><p>种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。</p>
<h2 id="写代码的时间问题"><a href="#写代码的时间问题" class="headerlink" title="写代码的时间问题"></a>写代码的时间问题</h2><p>对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。</p>
<p>虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。</p>
<p><strong>我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。</strong></p>
<p><img src="https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<h2 id="验证、自测"><a href="#验证、自测" class="headerlink" title="验证、自测"></a>验证、自测</h2><p>在提交测试前要多验证，其中包括自动化测试、手动跑用例等。</p>
<p>有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。</p>
<p>这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试</p>
<h2 id="仔细的DEBUG"><a href="#仔细的DEBUG" class="headerlink" title="仔细的DEBUG"></a>仔细的DEBUG</h2><p>在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。</p>
<h2 id="仔细的设计"><a href="#仔细的设计" class="headerlink" title="仔细的设计"></a>仔细的设计</h2><p>在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。</p>
<h2 id="避免干扰"><a href="#避免干扰" class="headerlink" title="避免干扰"></a>避免干扰</h2><p>有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>写注释，写注释，写注释。重要的事情说三遍。</p>
<p>因为前期的注释有利于后续开发的时候容易减少bug。</p>
<p><strong>自从修改了注释模板，整个人精神多了，bug也明显少了，如图：</strong></p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png" alt="image-20201215145125620"></p>
<h2 id="敢于维护上古代码"><a href="#敢于维护上古代码" class="headerlink" title="敢于维护上古代码"></a>敢于维护上古代码</h2><p>博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>要有一颗大心脏</category>
      </categories>
      <tags>
        <tag>开发习惯</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>以终为始</title>
    <url>/2024/01/01/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E4%BB%A5%E7%BB%88%E4%B8%BA%E5%A7%8B/</url>
    <content><![CDATA[<h1 id="“以终为始”是什么？"><a href="#“以终为始”是什么？" class="headerlink" title="“以终为始”是什么？"></a>“以终为始”是什么？</h1><p>意思是指，先在脑海里构思，然后进行实质创造，需要由两个层面来构成的：</p>
<p>一是心智层面，即在脑海里构思；<br>二是实践层面，即在实际中行动。<br>当然也有个人会把他们理解为二次创造。</p>
<p>就好像我们写文章一样，如果什么都想表达，反而什么都表达不了。</p>
<p>忽然记得之前有个很火的广告语:”去哪里不重要，重要的是去啊”。其实之前我是很认可这种说法的，我认为行动起来很重要，但是的近半年的经历让我忽然有些转变了。</p>
<p>举个简单的例子，我是程序员出身，那就举一个面试中经常出一个一个完整的一个业务场景：用户登录，好那开发一个用户登录的功能。<br>我相信很多人读到上面的时候脑子已经构思出大致的轮廓了，有的甚至可以进行code了，但是呢，我忽然发现我这块有短信服务，是否可以对接一下短信服务进行便捷登录呢？当然也是否可以通过微信扫码进行更为便捷的登录呢？<br>思路顺道这里是否心里有很多的mmp飞过，当然我之前也是这种思考思维，但是经过过多的踩坑然后调节后我发现了”以终为始”这个思维方式，并逐步的运用到工作和生活中。</p>
<h2 id="为什么要“以终为始”"><a href="#为什么要“以终为始”" class="headerlink" title="为什么要“以终为始”"></a>为什么要“以终为始”</h2><p>养成“以终为始”的习惯不仅能帮提升我们的工作效率，而且能最大程度上激发我们的潜能。</p>
<p>从结果出发来思考，你会将着眼点放在现在要做什么的事情，才能最快地达到目标，而不是仅仅局限在现有的环境和资源中，觉得茫然无措。</p>
<p>比如，日本企业家稻盛和夫，在自己公司规模还很小的时候，就敢接手要求高到离谱的大订单。</p>
<p>因为稻盛和夫认为要达到订单的要求，不能从现在的能力去衡量。而是应该从结果出发，去调动一切资源，去努力成长。稻盛和夫正是应用这种思维，将三家企业做到了世界500强。</p>
<p>做事情之前，<strong>永远要先思考一下，我想做什么，我要达成什么样的目标，这样你的努力，就不会偏离你要去的终点，</strong>而且还有助于激发你的潜力。</p>
<h1 id="怎么样才能做到“以终为始”？"><a href="#怎么样才能做到“以终为始”？" class="headerlink" title="怎么样才能做到“以终为始”？"></a>怎么样才能做到“以终为始”？</h1><p>道理简单，但做到真的很难，具体要怎么才能达到“以终为始”呢？可以从下面三个tips入手。</p>
<h2 id="1、遇到事情，倒着想"><a href="#1、遇到事情，倒着想" class="headerlink" title="1、遇到事情，倒着想"></a>1、遇到事情，倒着想</h2><p>如果在一项工作当中，你并没有完全领会领导的最终意图，**应及时主动沟通，避免方向性的错误。<br>只有确定了目标和意义，才会不折不挠的始终向着目标前进，而这就是我们所说的以终为始。</p>
<p><strong>2、分解目标，制定做事顺序</strong></p>
<p>“兵马未动，粮草先行”，树立好目标后，要提前做好统筹计划，考虑可能出现的问题和困难。</p>
<p>什么是有效的计划？业界有一个通用的SMART原则，是英文<strong>Specific、Measurable、Attainable、Relevant、Time－based</strong>这5个词的缩写，亦即“具体、可衡量、有可行性、有相关性、有时间期限”。</p>
<p>“量化”在目标实现中是一个非常重要的因素。用一句话来概括就是：我需要在什么时间点，达成什么样的进度？</p>
<p><strong>3、坚决执行，适时调整</strong></p>
<p>我个人比较不理解的一句话就是“听过很多道理，却过不好这一生”。总感觉这是那些没什么执行力和自制力的人为自己找的借口。</p>
<p>而想要提升效率最好的办法就是<strong>一件一件事去做</strong>！</p>
<p>但是在执行过程中，不能一根筋，完全按照当时的计划按部就班地执行。因为我们前期制定计划往往不是完美无缺的。</p>
]]></content>
      <categories>
        <category>要有一颗大心脏</category>
      </categories>
      <tags>
        <tag>思维习惯</tag>
      </tags>
  </entry>
  <entry>
    <title>致正在奋斗路上的你</title>
    <url>/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%87%B4%E6%AD%A3%E5%9C%A8%E5%A5%8B%E6%96%97%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%BD%A0/</url>
    <content><![CDATA[<h1 id="致正在奋斗路上的你"><a href="#致正在奋斗路上的你" class="headerlink" title="致正在奋斗路上的你"></a>致正在奋斗路上的你</h1><h1 id="致正在奋斗路上的你-1"><a href="#致正在奋斗路上的你-1" class="headerlink" title="致正在奋斗路上的你"></a>致正在奋斗路上的你</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>写这个博客的目的主要是为了针对身边某些正在处于大学的朋友，感觉他们很迷茫，然后很刻苦，但是感觉努力的不在点上，所以我趁我考试的路上写下了这篇博客，一是为了记录一下这次旅行和放松的机会；二是给身边的一些朋友</p>
</blockquote>
<p>当你看到这个文章的时候，本博猪正在从大连回北京的路上，此时九点五十左右，博猪辗转反侧，夜不能寐，特此写下这篇文章，记录一下次不是在上坡的路上就是在上坡的路上的考试之旅，顺便缓解一下博猪六个小时屁股的煎熬。<br>首先按照常规流程博猪自我介绍一下，博猪笔名will，意义如何自行百度，98年出身，山东泰安人士，本博猪2019年3月份入坑，主要从事于车险，车险金融行业，先后参与过北汽鹏龙二期改造、北汽鹏龙微信端开发，捷通达集团车险经济平台理赔、续保、新车销售、部分报表统计等开发，参与北汽鹏龙中行、平安、浙江中行快速对接和流程设计和开发（SSI架构，前端LayUI），捷通达参与Erp,Sap系统资源对接，目前手里维护者九、十个左右的项目，目前正在长城驻场开发，参与车服务保代经济云系统、续保系统，主要负责续保系统的需求分析和业务开发，车服务系统对账方面开发和长城原系统和第三方系统对接封装基于spring cloud alibaba的相关工具类。目前项目已经上生产环境，目前正协助压测人员进行压力测试。</p>
<p>OK，博猪履历介绍到这里，俗话说三年小架构，博猪目标如此，也正在努力的朝着这个目标前进，废话不说博猪写这篇文章的目的是分享一下自己的学习方式和一些学习心得，缘由是博猪身边有几个入坑这个专业的大学生最近看他们也是挺努力刻苦的，但是学习的点总是不在那个关键的地方上，这样博猪心有余而力不足，想好心帮忙但是每次都是很费劲的完成。<br>那么，我分享一下我的学习方式，顺便跟着博猪思考一下博猪对你们的问题，是否对你现在有所触动和能解决你手里的问题！</p>
<ul>
<li><p>有目的的学习</p>
<p>目的很重要，因为它是你迷茫路上的一个指路灯，至少它能让你有一个目的地，在我的世界观里面target很重要，至少它能让你知道你下一步至少干啥，然后具体咋实现看你如何安排了。</p>
<blockquote>
<p>Q: 	你是否有想过近三年或者你毕业进入社会想干啥或者想过什么样的生活了没有？</p>
</blockquote>
</li>
<li><p>坚持</p>
<p>俗话说师傅领进门，修行靠个人，虽然博猪当时也啥都学，什么3dmax，ps，电商，嗯，因为我刚开始报的是电商的专业，然后大一上学期末临时转的软件开发，然后靠扎实的C语言的基础，自学的JAVA，JAVAEE，JAVA WEB，MySQL等，因为学校教程太慢，太杂，我当时的想法很简单，就是工作，然后赚钱，然后我静静的边抽烟边刷了一遍招聘软件上的软件开发的技术，然后回去下载资料，自己学，上机课我就偷偷的猫到一个角落自己戴着耳机学习，然后一遍遍的码代码，自己不关心的科目期末不挂科就行，寒暑假初中同学高中同学聚会能推就推。<br>所以，如果说我提出的第一点占头百分之二十的话，那么坚持就能占百分之七十。</p>
<blockquote>
<p>Q:	如果你已经深深的思考了第一题，那么鉴于第一题的基础上，你是否能你的目标坚持下去的努力？</p>
</blockquote>
</li>
<li><p>不浮躁</p>
<p>博猪很喜欢博猪学校的校训:坚持 不浮躁，坚持容易，不浮躁难。coding本身就是一个很枯燥无聊，甚至很容易没得朋友的一个事情，所以让自己的心沉下来很重要。</p>
</li>
<li><p>有属于自己的学习体系</p>
<p>有自己的学习体系很重要，作为一个成年人应该有个事情紧急程度的排序，给自己的科目或者事情排个序，那个可以做那个可以不做，不要把自己搞得很乱又很累。</p>
</li>
<li><p>学会自己思考</p>
<p>身边的朋友很多就是遇到问题就是，为啥明明都是一模一样的，为啥我的就直接报错，那么你有没有想过这个程序为啥这样执行？还有你执行完一个程序后是否进行复验程序？程序是不会骗人的，所以多多吃一些异常报错有营养，对自己成长有好处的。</p>
</li>
<li><p>学会自己解决问题</p>
<p>遇到一个问题以后，你要相信一句话这个一定不是你一个人再犯，肯定会有前人给你踩过坑，所以遇到问题学会找谷哥或者找度娘。</p>
</li>
<li><p>学会正确的搜索关键词</p>
<p>一个正确的搜索关键词会大大提高搜索引擎给你的搜索结果，也大大减少了浏览器因模糊或者一些广告给你带来的困扰。</p>
</li>
<li><p>切勿好高骛远</p>
<p>博猪最近遇到很多刚入行的小白，感觉微服务不过如此，业主不过如此，但是真正到自己手里的时候，连最基本的crud都不会，当然博猪和技术经理交给他们的这就是一些crud的项目模块，当然前期由于长城这个公司刚成立，一些最基本的技术沉淀都没有，当然博猪算是经历了一次一个公司技术体系从无到有的一个过程。</p>
</li>
<li><p>建议藏在内容里面，答案请自行寻找</p>
<p>俗话说的好，九为数极，哈哈，这个建议是针对将来入职程序猿的盆友建议，如果还在读大学建议赶紧找个对象，要不然你会发现你工作入职后不是你想象的白领的生活，而是整天不断的需求和加班，996的生活，正在朝着你招手，所以博猪最大的遗憾就是没在大学期间找个女票。</p>
</li>
</ul>
<p>话就絮叨到这里了，22点50了，车快到站了，博猪也要收拾一下东西回家了，哈哈末尾送你们一句话，也是博猪最近闲下来刷剧看到的一句话感觉挺不错的，句子如下：<br>须知少时凌云志，曾许人间第一流！</p>
<p>下面贴两张博猪拍的两张图片：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135857.jpg"></p>
<p>​<img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135915.jpg">​</p>
]]></content>
      <categories>
        <category>拥抱世界吧</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>感言</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(1)-初识Docker</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(1)-%E5%88%9D%E8%AF%86Docker/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="Docker的前世今生"><a href="#Docker的前世今生" class="headerlink" title="Docker的前世今生"></a>Docker的前世今生</h1><h2 id="传统项目开发部署的流程是怎样的？"><a href="#传统项目开发部署的流程是怎样的？" class="headerlink" title="传统项目开发部署的流程是怎样的？"></a>传统项目开发部署的流程是怎样的？</h2><h3 id="传统项目开发部署的基本流程"><a href="#传统项目开发部署的基本流程" class="headerlink" title="传统项目开发部署的基本流程"></a>传统项目开发部署的基本流程</h3><p>这里只简单描述一下，项目发布的基本流程</p>
<ul>
<li>本地开发+测试，没有问题的话，编译打包发布到测试环境</li>
<li>在测试环境中进行测试，测试完成后，发布到生产环境</li>
<li>在生产环境中进行最后的测试，如果没有问题，那么一切就OK了</li>
</ul>
<h3 id="存在什么问题？"><a href="#存在什么问题？" class="headerlink" title="存在什么问题？"></a>存在什么问题？</h3><ul>
<li><strong>存在问题：不同机器上的软件环境不一致。（比较核心的问题)</strong></li>
<li><strong>软件环境的配置繁多、命令记不清楚。</strong></li>
<li><strong>重复性搭建软件环境、效率低下。</strong></li>
</ul>
<h2 id="对照传统虚拟机总结"><a href="#对照传统虚拟机总结" class="headerlink" title="对照传统虚拟机总结"></a>对照传统虚拟机总结</h2><table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody><tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>硬盘使用</td>
<td>一般为MB</td>
<td>一般为GB</td>
</tr>
<tr>
<td>性能</td>
<td>接近原生</td>
<td>弱于</td>
</tr>
<tr>
<td>系统支持量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody></table>
<h1 id="Docker是干什么用的？"><a href="#Docker是干什么用的？" class="headerlink" title="Docker是干什么用的？"></a>Docker是干什么用的？</h1><h2 id="Docker解决的问题"><a href="#Docker解决的问题" class="headerlink" title="Docker解决的问题"></a>Docker解决的问题</h2><p>由于不同的机器有不同的操作系统，以及不同的库和组件，在将一个应用部署到多台机器上需要进行大量的环境配置操作。<br>Docker 主要解决环境配置问题，它是一种虚拟化技术，对进程进行隔离，被隔离的进程独立于宿主操作系统和其它隔离的进程。使用 Docker 可以不修改应用程序代码，不需要开发人员学习特定环境下的技术，就能够将现有的应用程序部署在其它机器上。</p>
<p><img src="https://ss2.bdstatic.com/70cFvnSh_Q1YnxGkpoWK1HF6hhy/it/u=2520176274,3530821872&fm=26&gp=0.jpg"></p>
<h2 id="与虚拟机的比较"><a href="#与虚拟机的比较" class="headerlink" title="与虚拟机的比较"></a>与虚拟机的比较</h2><p>虚拟机也是一种虚拟化技术，它与 Docker 最大的区别在于它是通过模拟硬件，并在硬件上安装操作系统来实现。</p>
<p>so</p>
<blockquote>
<p>&#x3D;&#x3D;<strong>Docker不是虚拟机</strong>&#x3D;&#x3D;</p>
</blockquote>
<blockquote>
<p>对Docker的感受：</p>
</blockquote>
<p>比如公司买了一台新服务器，系统是centos，你要想把项目部署到服务器上，而且项目中使用到了mysql、redis、activemq、zookeeper等技术，要想项目能在服务器上正常运行，必须在新的服务器上搭建好mysql、redis、activemq、zookeeper服务环境。这样的话，在环境搭建和配置上就要花费太多的时间了（因为需要配置很多的配置文件、需要手动启动服务等）。</p>
<p>又或者每次重装一次系统或者换一个机器，你就要把环境重装一次，东西越多花费的时间越多、很麻烦、浪费时间和精力。</p>
<p>而使用Docker的话，你只需要一条命令，你就可以在你的centos系统上运行你需要的软件，比如mysql、tomcat、jdk、redis等。</p>
<blockquote>
<p>举个栗子</p>
</blockquote>
<p>【示例1】：Docker上安装mysql</p>
<ul>
<li>你需要MySQL服务，那么在docker中通过简单的命令就可以安装一个MySQL数据库服务：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull mysql<br></code></pre></td></tr></table></figure>

<ul>
<li>启动mysql命令</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 3306:3306 --name mysql -e MYSQL_ROOT_PASSWORD=123456 mysql<br></code></pre></td></tr></table></figure>

<blockquote>
<p>很简单吧，一个mysql服务就启动完成了，就可以正常使用了。可以通过mysql客户端（Navicat、DataGrip等）连接这个mysql数据库。</p>
</blockquote>
<p>【示例2】：Docker上安装jdk</p>
<ul>
<li>你需要JDK环境，那么在Docker中通过简单的命令安装一个JDK的镜像， 然后通过一条命令启动这个容器就行了，容器会自动给你安装配置好JDK环境。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull java<br></code></pre></td></tr></table></figure>

<blockquote>
<p>就这么简单的一条命令，JDK就安装好了。你可以在Docker容器的命令行中通过java -version来检测jdk是否安装成功。</p>
</blockquote>
<blockquote>
<p><strong>镜像、容器</strong>：</p>
<p>对于新手而言，或许有点不明白镜像和容器分别是个什么东东，还是有点不明白。</p>
<p>你可以这样感官的理解：</p>
<blockquote>
<p>镜像 —— 相当于ISO操作系统的安装包，ISO镜像的内容是固定的，不会发生改变，可以重复使用。</p>
<p>容器 —— 类似于使用 ISO镜像安装的新的操作系统，可以使用一个相同的ISO镜像，安装很多操作系统。</p>
</blockquote>
</blockquote>
<blockquote>
<p>Docker占用的资源很小。启动一个容器一般都是秒级的。</p>
</blockquote>
<h1 id="Docker镜像、容器、仓库的介绍"><a href="#Docker镜像、容器、仓库的介绍" class="headerlink" title="Docker镜像、容器、仓库的介绍"></a>Docker镜像、容器、仓库的介绍</h1><h2 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h2><p>通俗的理解镜像</p>
<blockquote>
<p>Docker的镜像是一个只读的模板，一个独立的文件系统，包括运行容器所需的数据，可以用来创建新的容器。</p>
</blockquote>
<p>Docker的镜像相当于ISO操作系统的安装包，ISO镜像的内容是固定的，不会发生改变，可以重复使用。</p>
<p>如果上面的形容还无法让你理解Docker镜像，那我再举一个例子：</p>
<p>从事Java开发的人都知道类和实例的关系。直观的感觉，类就像是一个模板，根据这个类模板，可以生成很多个具体的对象实例。</p>
<p>则，<strong>Docker镜像就相当于Java的类，而通过Docker镜像生成出来的东西，我们就叫他它“容器”</strong>。</p>
<p>通过上面的形容，应该可以感觉的到镜像和容器之间的关系了吧。</p>
<h2 id="Docker容器"><a href="#Docker容器" class="headerlink" title="Docker容器"></a>Docker容器</h2><p>通俗的理解容器</p>
<p>在上一节已经介绍了镜像与容器的关系。</p>
<p>这里就直接copy文档中的一句话，来简单形容一下容器：</p>
<p><strong>Docker镜像就相当于Java的类，而通过Docker镜像生成出来的东西，我们就叫他它“容器”</strong>。</p>
<h2 id="Docker仓库"><a href="#Docker仓库" class="headerlink" title="Docker仓库"></a>Docker仓库</h2><p>通俗的理解Docker仓库</p>
<p>仓库支持的操作类似git，当用户创建了自己的镜像之后就可以使用 push 命令将它上传到公有或者私有仓库，这样下次在另外一台机器上使用这个镜像时候，只需要从仓库上 pull 下来就可以了。</p>
<p>类似于，将某项目模块打成jar包，然后上传到私有或者公有的maven仓库，然后在其他的所有支持maven环境的机器上，都可以拉取这个jar进行使用。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(3)-安装jdk</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(3)-%E5%AE%89%E8%A3%85jdk/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="在Docker中安装JDK"><a href="#在Docker中安装JDK" class="headerlink" title="在Docker中安装JDK"></a>在Docker中安装JDK</h1><blockquote>
<p>所有的环境安装，都是在centos系统中操作的，并非本地windows系统。</p>
</blockquote>
<blockquote>
<p>Docker 中国官方镜像加速 <a href="http://www.docker-cn.com/registry-mirror">http://www.docker-cn.com/registry-mirror</a></p>
</blockquote>
<h2 id="获取JAVA镜像："><a href="#获取JAVA镜像：" class="headerlink" title="获取JAVA镜像："></a>获取JAVA镜像：</h2><blockquote>
<p>在终端客户端命令行输入以下命令，获取JAVA镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull java<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>默认是从Docker Hub官方的仓库中下载镜像的。如果没有指定对应的版本，默认会获取版本为latest的镜像。</p>
<p>注意：</p>
<p>latest是针对于镜像所在的仓库里面的软件最新版本。并非是软件本身的最新发布版本。</p>
</blockquote>
<p>回车执行，一开始会进行下载对应的依赖库，稍作等待：<img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201006174731.png" alt="QQ20201003-204338"></p>
<p>出现下面的信息，说明镜像下载完成：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201006174818.png" alt="截屏2020-10-03 下午8.44.19"></p>
<h2 id="查看下载的镜像"><a href="#查看下载的镜像" class="headerlink" title="查看下载的镜像"></a>查看下载的镜像</h2><p>命令行中执行命令，查看刚刚下载的JAVA镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201006174929.png" alt="截屏2020-10-03 下午8.44.54"></p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p>命令行中执行命令，启动JAVA镜像容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -it --name java java<br></code></pre></td></tr></table></figure>

<p>如下图所示，说明成功启动了容器：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201006175022.png" alt="截屏2020-10-03 下午8.46.03"></p>
<p>其中，–name后面的“java”是为容器指定了一个别名，而最后的那个“java”指的是下载镜像时的名称。</p>
<blockquote>
<p>命令以及参数的含义：</p>
<p>run：启动一个镜像容器</p>
<p>-d：指定容器运行于后台</p>
<p>-it：-i 和 -t 的缩写；</p>
<ul>
<li>-i：以交互模式运行容器，通常与 -t 同时使用</li>
<li>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用</li>
</ul>
<p>–name：指定容器名字，后续可以通过名字进行容器管理</p>
</blockquote>
<p>具体更多的参数含义，可自行网上学习。</p>
<h2 id="查看运行的容器"><a href="#查看运行的容器" class="headerlink" title="查看运行的容器"></a>查看运行的容器</h2><p>首先我们在命令行中执行命令，查看处于运行状态的容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>

<p>因为在上面的操作步骤中，我们运行了java镜像，所以你会看到有一个名称为java的容器正在运行，如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201006175118.png" alt="截屏2020-10-03 下午8.46.37"></p>
<p>通过输出的信息可以看到，当前容器的ID是“9179eb86b007”，容器别名是java（最后一列的值）。</p>
<h2 id="登录容器"><a href="#登录容器" class="headerlink" title="登录容器"></a>登录容器</h2><p>【询问】：如果想查看容器中安装的jdk版本，该怎么做呢？</p>
<blockquote>
<p>如果直接在命令行输入java -version会报错的，如下图：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527495437982-7aee34bf-9f5c-4ac5-8b8f-a3b21e9053c7.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527495437982-7aee34bf-9f5c-4ac5-8b8f-a3b21e9053c7.png">http://www.cicoding.cn/images/docker/1527495437982-7aee34bf-9f5c-4ac5-8b8f-a3b21e9053c7.png</a></p>
<p>原因是因为：jdk是安装在容器里面的，需要进入容器，才能查看。意思就是说，jdk环境是在容器里面的，并非是宿主机。</p>
</blockquote>
<h3 id="进入容器内部"><a href="#进入容器内部" class="headerlink" title="进入容器内部"></a>进入容器内部</h3><ul>
<li><strong>使用attach进入容器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker attach 91<br></code></pre></td></tr></table></figure>

<blockquote>
<p>其中的 “91” 指的是什么呢？</p>
</blockquote>
<blockquote>
<p>上面有提到过，我们启动的java镜像的容器ID是“9179eb86b007”，所以， docker attach 命令后面，你可以指定容器ID来进入具体的容器。可以指定06等任意长度的值，都代表了当前的java容器。</p>
</blockquote>
<blockquote>
<p>回车，效果如下图：</p>
</blockquote>
<blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527495610202-3995506a-85ac-4a97-aeef-0edf11a8339a.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527495610202-3995506a-85ac-4a97-aeef-0edf11a8339a.png">http://www.cicoding.cn/images/docker/1527495610202-3995506a-85ac-4a97-aeef-0edf11a8339a.png</a></p>
</blockquote>
<blockquote>
<p>如果回车后没有反应，可以再次按下回车就可以进入容器的命令行模式了。</p>
</blockquote>
<blockquote>
<p>除了使用容器ID进入容器之外，也可以使用容器的别名进入容器：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker attach java<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面这种是通过容器的别名进入容器内部的。</p>
</blockquote>
<ul>
<li><strong>使用exec命令进入容器</strong></li>
</ul>
<blockquote>
<p>【方式一】：通过容器别名进入容器：</p>
</blockquote>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it java /bin/bash<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>【方式二】：通过容器ID进入容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it 91 /bin/bash<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>回车之后，就会看到命令行发生了一些变化：</p>
</blockquote>
<blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527506181535-4364031d-0caa-44fe-8a12-d87ccf46c97e.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527506181535-4364031d-0caa-44fe-8a12-d87ccf46c97e.png">http://www.cicoding.cn/images/docker/1527506181535-4364031d-0caa-44fe-8a12-d87ccf46c97e.png</a></p>
</blockquote>
<blockquote>
<p>仔细看第二行的开头，@符号后面的“9179eb86b007”就是我们的java容器的ID吧，这也就说明，我们已经进入了容器内部了，可以对容器进行操作了。</p>
</blockquote>
<h3 id="进入容器后，输入-java-version-查看JDK版本信息"><a href="#进入容器后，输入-java-version-查看JDK版本信息" class="headerlink" title="进入容器后，输入 java -version 查看JDK版本信息"></a>进入容器后，输入 java -version 查看JDK版本信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -version<br></code></pre></td></tr></table></figure>

<p>无论是通过attach还是exec进入的容器，我们都可以在命令行中输入命令“java -version”来查看JDK版本信息。</p>
<p>下面我们就分别使用这2个命令进入容器，来看看效果，如下图所示：</p>
<ul>
<li>attach命令进入容器，查看JDK版本信息</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527504069333-c1266217-f560-4a9d-b0d3-cac9f273dff0.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527504069333-c1266217-f560-4a9d-b0d3-cac9f273dff0.png">http://www.cicoding.cn/images/docker/1527504069333-c1266217-f560-4a9d-b0d3-cac9f273dff0.png</a></p>
<ul>
<li>exec命令进入容器，查看JDK版本信息</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527506442973-e6d97093-08df-46a7-89f8-7bd314c4733e.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527506442973-e6d97093-08df-46a7-89f8-7bd314c4733e.png">http://www.cicoding.cn/images/docker/1527506442973-e6d97093-08df-46a7-89f8-7bd314c4733e.png</a></p>
<h3 id="登陆Docker容器的方式"><a href="#登陆Docker容器的方式" class="headerlink" title="登陆Docker容器的方式"></a>登陆Docker容器的方式</h3><blockquote>
<p>上面已经简单的介绍了attach、exec命令的使用，下面讲解一下这两个命令之间的区别。</p>
</blockquote>
<blockquote>
<p>对于运行在后台的Docker容器，我们运维人员时常是有登陆进去的需求。登陆Docker容器的方式：</p>
</blockquote>
<ul>
<li>使用ssh登陆容器</li>
</ul>
<blockquote>
<p>这种方法需要在容器中启动sshd，存在开销和攻击面增大的问题。同时也违反了Docker所倡导的一个容器一个进程的原则。</p>
</blockquote>
<ul>
<li>使用自带命令docker attach登陆容器</li>
</ul>
<blockquote>
<p>docker attach存在的问题是：当多个窗口同时attach到同一个容器时，所有的窗口都会同步的显示，假如其中的一个窗口发生阻塞时，其它的窗口也会阻塞，docker attach命令可以说是最不方便的进入后台docker容器的方法</p>
</blockquote>
<ul>
<li>使用自带命令docker exec登陆容器</li>
</ul>
<blockquote>
<p>docker exec和docker attach是Docker的原生方法，大多数情况下就使用这两种命令登陆容器。docker exec命令是在docker1.3之后出现的，比docker attach命令更加方便</p>
</blockquote>
<h3 id="分别使用attach与exec进入容器，查看它们的区别"><a href="#分别使用attach与exec进入容器，查看它们的区别" class="headerlink" title="分别使用attach与exec进入容器，查看它们的区别"></a>分别使用attach与exec进入容器，查看它们的区别</h3><p>1、Docker attach必须是登陆到一个已经运行的容器里。需要注意的是如果从这个容器中exit退出的话，就会导致容器停止！！这是极其不方便的！</p>
<p>见下图所示结果：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527507117875-46795fe1-3255-46c0-a2bc-6bde4b1e51dd.png" alt="在Docker中安装JDK"><a href="http://www.cicoding.cn/images/docker/1527507117875-46795fe1-3255-46c0-a2bc-6bde4b1e51dd.png">http://www.cicoding.cn/images/docker/1527507117875-46795fe1-3255-46c0-a2bc-6bde4b1e51dd.png</a></p>
<blockquote>
<p>你会发现通过attach进入容器的话，当使用exit退出容器的时候，对应的容器也停止运行了，所以在生产环境中很少使用。</p>
</blockquote>
<p>2、docker exec登陆容器，注意有两个参数：-t和-i，这两个参数很重要！</p>
<blockquote>
<p>对于 -t 、-i 的具体作用，可以参考 <a href="https://www.cnblogs.com/kevingrace/p/6656095.html">https://www.cnblogs.com/kevingrace/p/6656095.html</a></p>
</blockquote>
<blockquote>
<p>使用docker exec -it 进入容器和我们平常操作console界面类似。而且不像attach方式退出，导致整个容器退出，exec在生产环境中用的比较多。exec 比使用ssh 、nsenter、nsinit方式更方便，生产中常用的方式。</p>
</blockquote>
<blockquote>
<p>在使用docker exec登陆容器或执行容器中的命令时，最好都带上-t和-i参数。</p>
</blockquote>
<h2 id="退出Docker容器"><a href="#退出Docker容器" class="headerlink" title="退出Docker容器"></a>退出Docker容器</h2><ul>
<li>如果是通过 attach 进入的容器，在退出容器的时候，如果不想让容器停止运行的话，就不能使用exit命令或者Ctrl+D快捷键的形式退出，而是使用 Ctrl + P + Q 组合键退出容器。</li>
<li>如果是通过 exec 命令进入的容器，在退出容器的时候，就可以使用exit或者Ctrl+D快捷键退出容器，同时容器不会停止运行，这也是exec与attach的最大区别。当然，你也可以使用Ctrl + P + Q 组合键退出容器，容器一样不会停止运行。</li>
</ul>
<blockquote>
<p>所以，通过上面的比较，也就印证了exec在实际使用过程中用的最多的，也是建议使用的一种方式。尤其是生产环境下，强烈建议使用exec的方式。</p>
</blockquote>
<h2 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h2><p>通过 docker stop (容器ID | 容器别名) 的命令，可以停止正在运行状态的容器：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino">docker stop java<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面是通过容器别名来停止容器的，你也可以使用容器ID。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(2)-CentOS安装</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(2)-CentOS%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="在Centos系统中安装Docker"><a href="#在Centos系统中安装Docker" class="headerlink" title="在Centos系统中安装Docker"></a>在Centos系统中安装Docker</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>网上很多关于docker在centos系统上的安装教程，但是又各有异同，比较混乱。所以，此文章接下来的对于docker的安装，将参照官方的文档进行安装。</p>
</blockquote>
<blockquote>
<p>官方文档地址：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
</blockquote>
<h2 id="Docker版本"><a href="#Docker版本" class="headerlink" title="Docker版本"></a>Docker版本</h2><p>Docker如今划分成了2个版本：</p>
<ul>
<li>Docker CE（社区版）</li>
<li>Docker EE（企业版）</li>
</ul>
<blockquote>
<p>具体详情以及区别，就不多做说明了。我们一般都会选择Docker CE（社区版），因为CE版本是开源免费的。对于大多数企业公司都比较节约成本。</p>
<p>因此，文章中所使用的Docker版本均为Docker CE版本。</p>
</blockquote>
<p>安装Docker CE版本的先决条件</p>
<p>官方文档中有这样一段描述：</p>
<blockquote>
<figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">&gt;&gt; OS requirements<br>&gt;&gt; To install Docker CE, you need a maintained version of CentOS 7. Archived versions aren’t supported or tested.<br></code></pre></td></tr></table></figure>
</blockquote>
<p>翻译过来的中文意思就是：</p>
<blockquote>
<p>OS要求</p>
<p>要安装Docker CE，您需要维护的CentOS 7版本。不支持或测试归档版本。</p>
</blockquote>
<p>官方推荐的系统是centos7以上，但其实centos6也是可以安装docker的，并没有强制必须是centos7。</p>
<p>但是我的文章是基于最新的centos7系统，所以对于低版本的centos系统如何安装docker，请自行网上查找资料或者实际操作。</p>
<p>卸载旧版本</p>
<p>老版本的Docker被称为docker或docker-engine。如果安装了它们，请卸载它们以及相关的依赖项。</p>
<p>在Linux命令行执行的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum remove docker \<br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine \<br></code></pre></td></tr></table></figure>

<h2 id="安装Docker-CE"><a href="#安装Docker-CE" class="headerlink" title="安装Docker CE"></a>安装Docker CE</h2><p>Docker CE安装的不同方式</p>
<ul>
<li>设置Docker的存储库并从中进行安装，以便安装和升级任务。这是推荐的方法。</li>
<li>有些用户下载RPM软件包并手动安装，并完全手动管理升级。这对于在无法访问互联网的系统上安装Docker等情况很有用。</li>
<li>在测试和开发环境中，一些用户选择使用自动便利脚本来安装Docker。</li>
</ul>
<blockquote>
<p>这里我们就选择第一种方式进行安装，这也是推荐的做法。</p>
<p>至于其他的安装方式，可自行网上学习，这里不做过多讲解。</p>
</blockquote>
<p>使用存储库进行安装</p>
<blockquote>
<p>首次在新主机上安装Docker CE之前，需要设置Docker存储库。之后，您可以从存储库安装和更新Docker。</p>
</blockquote>
<p>设置存储库</p>
<ul>
<li>安装所需的包。 yum-utils提供yum-config-manager实用程序，devicemapper存储驱动程序需要device-mapper-persistent-data和lvm2。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y yum-utils \<br>  device-mapper-persistent-data \<br>  lvm2 \<br></code></pre></td></tr></table></figure>

<ul>
<li>使用以下命令设置稳定的存储库。 即使您想从边缘或测试存储库安装构建，也总是需要稳定的存储库。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager \<br>    --add-repo \<br>    https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure>

<ul>
<li>（可选）：启用边缘和测试存储库。 这些存储库包含在上面的docker.repo文件中，但默认情况下处于禁用状态。 您可以将它们与稳定的存储库一起启用。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager --enable docker-ce-edge<br>yum-config-manager --enable docker-ce-test<br></code></pre></td></tr></table></figure>

<ul>
<li>（可选）：与上一步相反的作用。通过使用–disable标志运行yum-config-manager命令，可以禁用边缘或测试存储库。 要重新启用它，请使用–enable标志。 以下命令禁用边缘存储库。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager --disable docker-ce-edge<br></code></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意</strong>：从Docker 17.06开始，稳定版本也被推到<strong>边缘</strong>并<strong>测试</strong>版本库。</p>
<p>了解稳定和边缘构建 :<a href="https://docs.docker.com/install/">https://docs.docker.com/install/</a></p>
</blockquote>
<p>安装Docker CE</p>
<ol>
<li>安装最新版本的Docker CE：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install docker-ce<br></code></pre></td></tr></table></figure>

<p>如果命令行下面出现如下图所示的确认信息，请输入“y”继续，主要是用于处理依赖包的事情</p>
<p><img src="http://www.cicoding.cn/images/docker/1527434165078-d4b449d2-24f3-4acc-90b1-033301c4fbce.png" alt="在Centos系统中安装Docker"></p>
<p>如果没有，则需要添加yum源：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201002234210.png" alt="QQ20201002-231329"></p>
<p>上一步输入“y”之后，后面可能会遇到下图所示的确认提示信息，同样的输入“y”即可：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201002234320.png" alt="QQ20201002-231411"></p>
<p>稍作等待，当命令行最终输出“Complete！”即表示安装完成：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201002234614.png" alt="QQ20201002-232659"></p>
<p>启动Docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure>

<h2 id="验证Docker是否安装成功"><a href="#验证Docker是否安装成功" class="headerlink" title="验证Docker是否安装成功"></a>验证Docker是否安装成功</h2><blockquote>
<p>最简单的验证方式，就是使用 docker version 命令，类似于JDK的 java -version 一样的道理。</p>
<p>Docker安装成功的话，就可以直接在命令行运行Docker的命令的。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker version<br></code></pre></td></tr></table></figure>

<p>如果出现如下图所示信息，说明Docker以及安装成功了！</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201003172941.png" alt="QQ20201002-232747"></p>
<p>【可选】：当然，你也可以通过运行 hello-world 映像来检验Docker是否安装成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run hello-world<br></code></pre></td></tr></table></figure>

<blockquote>
<p>上面的命令含义：下载官方提供的用于测试使用的hello-world镜像并将其运行到容器中，来检验Docker服务是否正常安装并运行。</p>
<p>执行上面的命令之后，Docker会自动下载hello-world镜像并自动运行到容器中，当命令行中出现“Hello from Docker!”的字样，说明已经成功运行了hello-world镜像，一切就OK了！</p>
<p>这里就简单的作为Docker的入门操作，很简单的吧。让你有一个比较直观的感觉~</p>
</blockquote>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201003201011.png" alt="截屏2020-10-03 下午5.35.22"></p>
<h2 id="Docker默认挂载目录"><a href="#Docker默认挂载目录" class="headerlink" title="Docker默认挂载目录"></a>Docker默认挂载目录</h2><p>Docker CE安装成功之后，你可以发现 &#x2F;var&#x2F;lib 目录下有一个 docker 目录，你可以进入Docker目录查看Docker的一些结构，如下图所示：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201003201219.png" alt="截屏2020-10-03 下午8.07.15"></p>
<p>其中有一个containers 目录，这个目录就是存放Docker容器的。上面我们有提及到 hello-world 镜像，如果你运行了 hello-world 镜像，那么这个镜像所生成的容器信息，就会存储在 containers 目录中。</p>
<blockquote>
<p>具体 containers 目录中存放了什么内容，可自行网上查询资料学习。</p>
</blockquote>
<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><p>配置Docker在系统启动时启动</p>
<p>未配置Docker在系统启动时启动，则系统重启之后，Docker服务是无法正常访问</p>
<blockquote>
<p>如何解决？</p>
</blockquote>
<blockquote>
<p><strong>手动启动Docker服务：</strong></p>
<blockquote>
<p>通过在命令行中执行以下命令，即可实现Docker服务的启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl start docker<br></code></pre></td></tr></table></figure>

<p>这时候重新在命令行中执行 docker version命令，效果如下：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201003201651.png" alt="QQ20201002-232747"></p>
<p>出现Server相关的信息，标明Docker服务正常启动了，就可以对Docker进行一系列操作</p>
<p>上面这种启动方式存在什么不足呢？</p>
<p>当服务器重启的时候，Docker服务依然不能自动启动，还是需要手工去启动Docker服务。</p>
<p>那能不能做到系统重启之后，Docker服务自动启动，答案肯定是有的。</p>
</blockquote>
<p>实现Docker服务随着系统重启后自动启动</p>
<blockquote>
<p>大多数当前的Linux发行版（RHEL，CentOS，Fedora，Ubuntu 16.04和更高版本）使用systemd来管理在系统启动时启动哪些服务。</p>
<p>通过在命令行执行以下命令，用于设置Docker在系统重启时，自动启动Docker服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl enable docker<br></code></pre></td></tr></table></figure>

<p>执行该命令之后，会显示如下结果：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201003202021.png" alt="QQ20201002-232845"></p>
<p>主要的意思就是 设置Docker服务会随着服务器重启，会自动启动Docker服务。</p>
<p>当然，执行该命令之后，对于当前的Docker服务状况是没有启动服务的，需要手动启动Docker服务；只有下次服务器重启，就无需手动启动Docker服务了。</p>
<p>官方文档介绍：<a href="https://docs.docker.com/install/linux/linux-postinstall/#configure-docker-to-start-on-boot">https://docs.docker.com/install/linux/linux-postinstall/#configure-docker-to-start-on-boot</a></p>
</blockquote>
</blockquote>
<blockquote>
<p>注意一点：由于Linux不同版本的系统的差异、或者低版本的系统，命令或许会出现差异。如有遇到这样的问题，请自行网上查找资料解决。</p>
</blockquote>
<h2 id="卸载Docker-CE"><a href="#卸载Docker-CE" class="headerlink" title="卸载Docker CE"></a>卸载Docker CE</h2><blockquote>
<p>如果需要卸载机器上已经安装的Docker CE，可以通过简单命令实现。</p>
</blockquote>
<ol>
<li>卸载Docker包：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum remove docker-ce<br></code></pre></td></tr></table></figure>

<ol>
<li>上面的命令，不会自动删除主机上的图像，容器，卷或自定义配置文件。要想删除所有图像，容器和卷，执行以下命令：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">rm -rf /var/lib/docker<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意：必须手动删除任何已编辑的配置文件</p>
</blockquote>
<h2 id="shell一键安装"><a href="#shell一键安装" class="headerlink" title="shell一键安装"></a>shell一键安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl -fsSL get.docker.com -o get-docker.sh<br>sudo sh get-docker.sh<br></code></pre></td></tr></table></figure>

<p>这样执行完了就完成安装了，简单便捷</p>
<p>然后启动docker</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl start docker<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(7)-Docker常用命令</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(7)-Docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="Docker常用命令大全"><a href="#Docker常用命令大全" class="headerlink" title="Docker常用命令大全"></a>Docker常用命令大全</h1><h2 id="Docker帮助命令"><a href="#Docker帮助命令" class="headerlink" title="Docker帮助命令"></a>Docker帮助命令</h2><blockquote>
<p>Docker 全部命令可通过：</p>
</blockquote>
<blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker --help<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201009113009.png" alt="image-20201009113001805"></p>
<p>比如想查看日志操作方法可使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker logs --help<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201009113238.png" alt="image-20201009113237094"></p>
</blockquote>
<h2 id="镜像常用命令"><a href="#镜像常用命令" class="headerlink" title="镜像常用命令"></a>镜像常用命令</h2><h3 id="docker-images-查看本地镜像"><a href="#docker-images-查看本地镜像" class="headerlink" title="docker images 查看本地镜像"></a>docker images 查看本地镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker images [OPTIONS] [REPOSITORY[:TAG]]<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-a :</strong> 列出本地所有的镜像（含中间映像层，默认情况下，过滤掉中间映像层）；</li>
<li><strong>-q :</strong> 只显示镜像ID。</li>
<li><strong>–digests :</strong> 显示镜像的摘要信息；</li>
<li><strong>–no-trunc :</strong> 显示完整的镜像信息；</li>
<li><strong>-f :</strong> 显示满足条件的镜像；</li>
<li><strong>–format :</strong> 指定返回值的模板文件；</li>
</ul>
<h3 id="docker-search-从Docker-Hub查找镜像"><a href="#docker-search-从Docker-Hub查找镜像" class="headerlink" title="docker search : 从Docker Hub查找镜像"></a>docker search : 从Docker Hub查找镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker search [OPTIONS] TERM<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><em><strong>-s :</strong></em> <strong>列出收藏数不小于指定值的镜像。</strong></li>
<li><strong>–automated :</strong> 只列出 automated build类型的镜像；</li>
<li><strong>–no-trunc :</strong> 显示完整的镜像描述；</li>
</ul>
<blockquote>
<p>从Docker Hub查找所有镜像名包含java，并且收藏数大于10的镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker search -s 10 java<br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="docker-pull-从镜像仓库中拉取或者更新指定镜像"><a href="#docker-pull-从镜像仓库中拉取或者更新指定镜像" class="headerlink" title="docker pull :  从镜像仓库中拉取或者更新指定镜像"></a>docker pull :  从镜像仓库中拉取或者更新指定镜像</h3><figure class="highlight elixir"><table><tr><td class="code"><pre><code class="hljs elixir">docker pull [<span class="hljs-title class_">OPTIONS</span>] <span class="hljs-title class_">NAME</span>[<span class="hljs-symbol">:TAG|</span><span class="hljs-variable">@DIGEST</span>]<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-a :</strong> 拉取所有 tagged 镜像</li>
<li><strong>–disable-content-trust :</strong> 忽略镜像的校验,默认开启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">docker pull redis等于一下命令，latest是最新的版本，也可以指定某个版本号</span><br>docker pull redis:latest<br></code></pre></td></tr></table></figure>

<h3 id="docker-rmi-删除本地一个或多少镜像。"><a href="#docker-rmi-删除本地一个或多少镜像。" class="headerlink" title="docker rmi : 删除本地一个或多少镜像。"></a>docker rmi : 删除本地一个或多少镜像。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker rmi [OPTIONS] IMAGE [IMAGE...]<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong> 强制删除；</li>
<li><strong>–no-prune :</strong> 不移除该镜像的过程镜像，默认移除；</li>
</ul>
<h2 id="容器常用命令"><a href="#容器常用命令" class="headerlink" title="容器常用命令"></a>容器常用命令</h2><h3 id="docker-run-：创建一个新的容器并运行一个命令"><a href="#docker-run-：创建一个新的容器并运行一个命令" class="headerlink" title="docker run ：创建一个新的容器并运行一个命令"></a>docker run ：创建一个新的容器并运行一个命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><em><strong>-d:</strong></em>  <strong>后台运行容器，并返回容器ID;</strong></li>
<li><em><strong>–name&#x3D;&quot;nginx-lb&quot;:</strong></em>  <strong>为容器指定一个名称；</strong></li>
<li><em><strong>-p:</strong></em> <strong>指定端口映射，格式为：主机(宿主)端口:容器端口</strong></li>
<li><em><strong>–volume , -v:</strong></em>  <strong>绑定一个卷</strong></li>
<li><em><strong>-i:</strong></em> <strong>以交互模式运行容器，通常与 -t 同时使用；</strong></li>
<li><strong>-a stdin:</strong>  指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li>
<li><strong>-P:</strong>  随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li>
<li><strong>-t:</strong>  为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>
<li><strong>–dns 8.8.8.8:</strong>  指定容器使用的DNS服务器，默认和宿主一致；</li>
<li><strong>–dns-search example.com:</strong>  指定容器DNS搜索域名，默认和宿主一致；</li>
<li><strong>-h &quot;mars&quot;:</strong>  指定容器的hostname；</li>
<li><strong>-e username&#x3D;&quot;ritchie&quot;:</strong>  设置环境变量；</li>
<li><strong>–env-file&#x3D;[]:</strong>  从指定文件读入环境变量；</li>
<li>–env key&#x3D;value 添加配置变量</li>
<li><strong>–cpuset&#x3D;&quot;0-2&quot; or –cpuset&#x3D;&quot;0,1,2&quot;:</strong>  绑定容器到指定CPU运行；</li>
<li><strong>-m :</strong> 设置容器使用内存最大值；</li>
<li><strong>–net&#x3D;&quot;bridge&quot;:</strong>  指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container:&lt;name|id&gt; 四种类型；</li>
<li><strong>–link&#x3D;[]:</strong>  添加链接到另一个容器；</li>
<li><strong>–expose&#x3D;[]:</strong>  开放一个端口或一组端口；</li>
</ul>
<h3 id="docker-ps-查看当前运行容器"><a href="#docker-ps-查看当前运行容器" class="headerlink" title="docker ps  查看当前运行容器"></a>docker ps  查看当前运行容器</h3><p><img src="http://www.cicoding.cn/images/docker/1527507117875-46795fe1-3255-46c0-a2bc-6bde4b1e51dd.png" alt="在Docker中安装JDK"></p>
<h3 id="docker-exec-：-在运行的容器中执行命令"><a href="#docker-exec-：-在运行的容器中执行命令" class="headerlink" title="docker exec ： 在运行的容器中执行命令"></a>docker exec ： 在运行的容器中执行命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec [OPTIONS] CONTAINER COMMAND [ARG...]　　<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><em><strong>-i :</strong></em> <strong>即使没有附加也保持STDIN 打开</strong></li>
<li><em><strong>-t :</strong></em> <strong>分配一个伪终端</strong></li>
<li><strong>-d :</strong> 分离模式: 在后台运行</li>
</ul>
<h3 id="docker-start-x2F-stop-x2F-restart-docker-启动、停止、重启"><a href="#docker-start-x2F-stop-x2F-restart-docker-启动、停止、重启" class="headerlink" title="docker start&#x2F;stop&#x2F;restart (docker 启动、停止、重启)"></a>docker start&#x2F;stop&#x2F;restart (docker 启动、停止、重启)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker kill CONTAINER 强制停止<br></code></pre></td></tr></table></figure>

<h3 id="退出容器-exit"><a href="#退出容器-exit" class="headerlink" title="退出容器 exit"></a>退出容器 exit</h3><h3 id="删除container"><a href="#删除container" class="headerlink" title="删除container"></a>删除container</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker rm 镜像名称或者容器id(container)<br></code></pre></td></tr></table></figure>

<blockquote>
<p>批量删除 docker rm -f | $(docker ps -a -q)和docker ps -a -q | xargs docker rm</p>
</blockquote>
<h3 id="docker-logs-获取容器的日志"><a href="#docker-logs-获取容器的日志" class="headerlink" title="docker logs :  获取容器的日志"></a>docker logs :  获取容器的日志</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker logs [OPTIONS] CONTAINER<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong>  跟踪日志输出</li>
<li><strong>-t :</strong>  显示时间戳</li>
<li>**–tail : **仅列出最新N条容器日志</li>
<li><strong>–since :</strong> 显示某个开始时间的所有日志</li>
</ul>
<blockquote>
<p>查看nexus最新的200条实时日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker logs -f --tail=200 nexus3<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201009114334.png" alt="image-20201009114332847"></p>
</blockquote>
<h3 id="docker-top-查看容器中运行的进程信息，支持-ps-命令参数。"><a href="#docker-top-查看容器中运行的进程信息，支持-ps-命令参数。" class="headerlink" title="docker top : 查看容器中运行的进程信息，支持 ps 命令参数。"></a>docker top : 查看容器中运行的进程信息，支持 ps 命令参数。</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201009140626.png"></p>
<p>查看所有运行容器的进程信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">for i in  `docker ps |grep Up|awk &#x27;&#123;print $1&#125;&#x27;`;do echo \ &amp;&amp;docker top $i; done<br></code></pre></td></tr></table></figure>

<h3 id="docker-inspect-获取容器-x2F-镜像的元数据。"><a href="#docker-inspect-获取容器-x2F-镜像的元数据。" class="headerlink" title="docker inspect :  获取容器&#x2F;镜像的元数据。"></a>docker inspect :  获取容器&#x2F;镜像的元数据。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker inspect [OPTIONS] NAME|ID [NAME|ID...]<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-f :</strong> 指定返回值的模板文件。</li>
<li>**-s : **显示总的文件大小。</li>
<li><strong>–type :</strong> 为指定类型返回JSON。</li>
</ul>
<p>查看当前容器分配的ip</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201009140650.png" alt="img"></p>
<h3 id="docker-cp-用于容器与主机之间的数据拷贝。"><a href="#docker-cp-用于容器与主机之间的数据拷贝。" class="headerlink" title="docker cp : 用于容器与主机之间的数据拷贝。"></a>docker cp : 用于容器与主机之间的数据拷贝。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp [OPTIONS] CONTAINER:SRC_PATH DEST_PATH|-<br>docker cp [OPTIONS] SRC_PATH|- CONTAINER:DEST_PATH<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>-L :</strong> 保持源目标中的链接</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<blockquote>
<p>将主机&#x2F;www&#x2F;runoob目录拷贝到容器96f7f14e99ab的&#x2F;www目录下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp /www/runoob 96f7f14e99ab:/www/<br></code></pre></td></tr></table></figure>

<p>将容器96f7f14e99ab的&#x2F;www目录拷贝到主机的&#x2F;tmp目录中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp  96f7f14e99ab:/www /tmp/<br></code></pre></td></tr></table></figure>
</blockquote>
<h2 id="DockerFile"><a href="#DockerFile" class="headerlink" title="DockerFile"></a>DockerFile</h2><h3 id="docker-build-命令用于使用-Dockerfile-创建镜像。"><a href="#docker-build-命令用于使用-Dockerfile-创建镜像。" class="headerlink" title="docker build  命令用于使用 Dockerfile 创建镜像。"></a>docker build  命令用于使用 Dockerfile 创建镜像。</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker build [OPTIONS] PATH | URL | -<br></code></pre></td></tr></table></figure>

<p>OPTIONS说明：</p>
<ul>
<li><strong>–build-arg&#x3D;[] :</strong> 设置镜像创建时的变量；</li>
<li><strong>–cpu-shares :</strong> 设置 cpu 使用权重；</li>
<li><strong>–cpu-period :</strong> 限制 CPU CFS周期；</li>
<li><strong>–cpu-quota :</strong> 限制 CPU CFS配额；</li>
<li><strong>–cpuset-cpus :</strong> 指定使用的CPU id；</li>
<li><strong>–cpuset-mems :</strong> 指定使用的内存 id；</li>
<li><strong>–disable-content-trust :</strong> 忽略校验，默认开启；</li>
<li><strong>-f :</strong> 指定要使用的Dockerfile路径；</li>
<li><strong>–force-rm :</strong> 设置镜像过程中删除中间容器；</li>
<li><strong>–isolation :</strong> 使用容器隔离技术；</li>
<li><strong>–label&#x3D;[] :</strong> 设置镜像使用的元数据；</li>
<li><strong>-m :</strong> 设置内存最大值；</li>
<li><strong>–memory-swap :</strong> 设置Swap的最大值为内存+swap，”-1”表示不限swap；</li>
<li><strong>–no-cache :</strong> 创建镜像的过程不使用缓存；</li>
<li><strong>–pull :</strong> 尝试去更新镜像的新版本；</li>
<li><strong>–quiet, -q :</strong> 安静模式，成功后只输出镜像 ID；</li>
<li><strong>–rm :</strong> 设置镜像成功后删除中间容器；</li>
<li><strong>–shm-size :</strong> 设置&#x2F;dev&#x2F;shm的大小，默认值是64M；</li>
<li><strong>–ulimit :</strong> Ulimit配置。</li>
<li><strong>–tag, -t:</strong>  镜像的名字及标签，通常 name:tag 或者 name 格式；可以在一次构建中为一个镜像设置多个标签。</li>
<li><strong>–network:</strong>  默认 default。在构建期间设置RUN指令的网络模式</li>
</ul>
<blockquote>
<p>实例</p>
</blockquote>
<blockquote>
<p>使用当前目录的 Dockerfile 创建镜像，标签为 runoob&#x2F;ubuntu:v1。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker build -t runoob/ubuntu:v1 .<br></code></pre></td></tr></table></figure>
<p>使用URL <strong>github.com&#x2F;creack&#x2F;docker-firefox</strong> 的 Dockerfile 创建镜像。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker build github.com/creack/docker-firefox<br></code></pre></td></tr></table></figure>
<p>也可以通过 -f Dockerfile 文件的位置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker build -f /path/to/a/Dockerfile .<br></code></pre></td></tr></table></figure>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(6)-安装Nginx</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(6)-%E5%AE%89%E8%A3%85Nginx/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="在Docker中安装Nginx"><a href="#在Docker中安装Nginx" class="headerlink" title="在Docker中安装Nginx"></a>在Docker中安装Nginx</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>由于nginx是一个反向代理服务器，涉及到一些配置。如果你对nginx一点都不懂的话，那么，你在学习下面的内容的时候，可能就会不太懂，因为我们是要在docker中操作nginx，同时需要编辑一些配置文件。</p>
<p>适合对于nginx有一定了解的朋友参考使用。</p>
</blockquote>
<h2 id="下载nginx镜像"><a href="#下载nginx镜像" class="headerlink" title="下载nginx镜像"></a>下载nginx镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull nginx<br></code></pre></td></tr></table></figure>

<h2 id="查看下载的nginx镜像"><a href="#查看下载的nginx镜像" class="headerlink" title="查看下载的nginx镜像"></a>查看下载的nginx镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker images<br></code></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527832301031-bf1ad67d-a6a2-4c20-888e-970c41c7ae9d.png"></p>
<h2 id="启动nginx镜像容器"><a href="#启动nginx镜像容器" class="headerlink" title="启动nginx镜像容器"></a>启动nginx镜像容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 80:80 --name nginx nginx<br></code></pre></td></tr></table></figure>

<blockquote>
<p>nginx是一个代理，端口默认是80</p>
</blockquote>
<h2 id="访问服务器"><a href="#访问服务器" class="headerlink" title="访问服务器"></a>访问服务器</h2><p>在浏览器中输入：<a href="http://192.168.56.128/%EF%BC%8C%E5%9B%9E%E8%BD%A6%E7%9C%8B%E4%B8%80%E4%B8%8B%E6%95%88%E6%9E%9C%EF%BC%9A">http://192.168.56.128:80/，回车看一下效果：</a></p>
<p><img src="http://www.cicoding.cn/images/docker/1527832846216-4d03013e-d0cd-434f-9069-10f2e38e67bf.png" alt="在Docker中安装Nginx"></p>
<blockquote>
<p>出现上面的页面，说明nginx已经正常启动了。</p>
</blockquote>
<h2 id="将nginx的配置文件、日志目录映射到宿主机"><a href="#将nginx的配置文件、日志目录映射到宿主机" class="headerlink" title="将nginx的配置文件、日志目录映射到宿主机"></a>将nginx的配置文件、日志目录映射到宿主机</h2><blockquote>
<p>在测试环境、生产环境的话，都是需要编辑一些nginx的配置的，最常见的修改就是nginx.conf文件。</p>
</blockquote>
<blockquote>
<p>将nginx的配置文件、日志目录等，映射到宿主机上进行管理维护，是很方便的，也是推荐的做法。</p>
</blockquote>
<h3 id="在宿主机中创建nginx相关目录"><a href="#在宿主机中创建nginx相关目录" class="headerlink" title="在宿主机中创建nginx相关目录"></a>在宿主机中创建nginx相关目录</h3><blockquote>
<p>首先在宿主机中创建一个用于存放nginx相关文件的目录，这里我就在 &#x2F;opt 目录下新建了一个 docker_nginx 的目录文件。</p>
<p>然后在 docker_nginx 目录下新建 conf 、log 、www 这三个目录，目录含义是：</p>
<p>conf：存放nginx的相关配置文件，比如 nginx.conf</p>
<p>log：存放nginx的日志文件</p>
<p>www：存放相关静态资源文件</p>
</blockquote>
<blockquote>
<p>最终的目录结构如下：</p>
</blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527833862890-ad0217c0-5bf3-46c9-b332-88a7b04da6ca.png" alt="在Docker中安装Nginx"></p>
<p>复制一份nginx.conf文件到宿主机对应的目录下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp nginx:/etc/nginx/nginx.conf /opt/docker_nginx/conf/nginx.conf<br></code></pre></td></tr></table></figure>

<blockquote>
<p>这条命令的作用，就是复制nginx的docker容器中的 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 文件到宿主机下的 &#x2F;opt&#x2F;docker_nginx&#x2F;conf&#x2F; 目录下。这样可以直接进行默认的配置文件的编辑。</p>
</blockquote>
<p>看一下默认的nginx.conf配置文件的内容：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527834624021-ba784d6a-6c4a-4d0d-a2dc-e2885999314d.png" alt="在Docker中安装Nginx"></p>
<p>编辑 nginx 的配置文件：</p>
<blockquote>
<p>我们暂时就修改其中的 access_log 、error_log 、root 这些基本配置。</p>
</blockquote>
<blockquote>
<p>从上图可以看到，配置文件最下面，有这样一段配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">include /etc/nginx/conf.d/*.conf;<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>意思也就是引入了其他配置文件。</p>
<p>既然我们要在宿主机上管理nginx的配置文件，所以对于上面的include引入的文件，我们也要复制一份到对应的宿主机上。</p>
</blockquote>
<blockquote>
<p>我们进入nginx容器，去查看一下这个路径下面有哪些文件：</p>
<ul>
<li>进入nginx容器</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it e4 /bin/bash<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>其中的 e4 指的是容器ID的前2位字符串。</p>
</blockquote>
<blockquote>
<ul>
<li>查看 &#x2F;etc&#x2F;nginx&#x2F;conf.d&#x2F; 目录</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527835373585-7316d3b7-e789-4f62-8a6b-8c3953633697.png" alt="在Docker中安装Nginx"><a href="http://www.cicoding.cn/images/docker/1527835373585-7316d3b7-e789-4f62-8a6b-8c3953633697.png">http://www.cicoding.cn/images/docker/1527835373585-7316d3b7-e789-4f62-8a6b-8c3953633697.png</a></p>
<p>可以看到，里面有一个default.conf配置文件</p>
<ul>
<li>查看 default.conf配置文件</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527835468543-cbfd5cfc-ffcf-4512-abb9-46331febd3ae.png" alt="在Docker中安装Nginx"><a href="http://www.cicoding.cn/images/docker/1527835468543-cbfd5cfc-ffcf-4512-abb9-46331febd3ae.png">http://www.cicoding.cn/images/docker/1527835468543-cbfd5cfc-ffcf-4512-abb9-46331febd3ae.png</a></p>
</blockquote>
<blockquote>
<p>其中用黄色圈起来的部分，是我们要修改的内容（上面说过了，目前就先简单修改基本的配置，只是方便大家看到一下效果，至于其他的配置，可自行按照这样的步骤自行编辑）。</p>
<ul>
<li>复制一份default.conf文件到宿主机对应的目录下</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp nginx:/etc/nginx/conf.d/default.conf /opt/docker_nginx/conf/default.conf<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>查看一下目前宿主机下面的nginx配置文件情况</p>
</blockquote>
<blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527837882497-2ef89731-6d8c-4639-b6cb-2c9d4034a2cd.png" alt="在Docker中安装Nginx"><a href="http://www.cicoding.cn/images/docker/1527837882497-2ef89731-6d8c-4639-b6cb-2c9d4034a2cd.png">http://www.cicoding.cn/images/docker/1527837882497-2ef89731-6d8c-4639-b6cb-2c9d4034a2cd.png</a></p>
<ul>
<li>同样的，我们也需要把nginx的默认首页文件，复制到宿主机下面</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker cp nginx:/usr/share/nginx/html/index.html /opt/docker_nginx/www/<br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="编辑宿主机上的nginx相关配置文件"><a href="#编辑宿主机上的nginx相关配置文件" class="headerlink" title="编辑宿主机上的nginx相关配置文件"></a>编辑宿主机上的nginx相关配置文件</h3><blockquote>
<ul>
<li><strong>首先修改 nginx.conf 配置文件</strong>，修改后结果是：</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527838034307-65530160-3710-4246-a816-9703af4fc524.png" alt="在Docker中安装Nginx"><a href="http://www.cicoding.cn/images/docker/1527838034307-65530160-3710-4246-a816-9703af4fc524.png">http://www.cicoding.cn/images/docker/1527838034307-65530160-3710-4246-a816-9703af4fc524.png</a></p>
<blockquote>
<p>其中error_log的配置，就是我们前面在宿主机下面创建的nginx的log目录。</p>
<p>注意需要修改最下面的include配置，指定宿主机下面的default.conf配置文件（default&#x2F;conf与nginx.conf在相同目录下，所以直接写名称即可，无需指定具体目录路径）</p>
</blockquote>
<ul>
<li><strong>编辑default.conf文件</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /opt/docker_nginx/conf/default.conf<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>修改文件中的 access_log 以及 root 配置，效果如下</p>
</blockquote>
<blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527838387330-9501c9c8-1d8b-44e0-a177-d61a8c4699fa.png" alt="在Docker中安装Nginx"></p>
<blockquote>
<p>同样，access_log 以及 root 的配置，就是我们前面在宿主机下面创建的nginx的相关目录。</p>
</blockquote>
</blockquote>
<h3 id="重启nginx容器"><a href="#重启nginx容器" class="headerlink" title="重启nginx容器"></a>重启nginx容器</h3><ul>
<li><strong>先停止之前启动的nginx容器</strong></li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker stop e4s<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>重启nginx容器</strong></li>
</ul>
<blockquote>
<p>这次重启nginx容器的话，就不能使用一开始那种简单的run命令了，需要添加一些参数，具体命令如下：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 80:80 --name nginx-new \<br>    -v /opt/docker_nginx/www:/usr/share/nginx/html \<br>    -v /opt/docker_nginx/log:/var/log/nginx \<br>    -v /opt/docker_nginx/conf/nginx.conf:/etc/nginx/conf \<br>    -d nginx<br></code></pre></td></tr></table></figure>

<blockquote>
<p>这里的 -v 参数的含义是，将宿主机上的目录挂载到容器中的对应目录。</p>
<p>“：”冒号前面是宿主机的目录，后面是容器中的目录。</p>
</blockquote>
<blockquote>
<p>有些朋友可能会不搞不明白冒号后面的容器路径是怎么来的，这里解释一下，其实很简单，就是指的是nginx的默认的日志路径、配置文件路径。</p>
<p>你在nginx容器中去查看一下nginx.conf以及default.conf配置文件的内容，就可以看到log和配置文件的默认存储路径了。文章上面也有截图出来nginx.conf以及default.conf的默认配置截图，可自行翻阅到上面查看。</p>
</blockquote>
<ul>
<li><strong>查看启动的nginx容器</strong></li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527839391119-1d98218f-62eb-46d4-8c8e-3047e30c773c.png"></p>
<ul>
<li><strong>修改nginx默认首页内容</strong></li>
</ul>
<blockquote>
<p>先看一下默认首页的样子：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527840233785-22a458d3-1123-4249-b671-179ccc7e41fe.png" alt="在Docker中安装Nginx"></p>
</blockquote>
<p>我们把这个首页内容全部删除掉，加入我们自己的内容！</p>
<blockquote>
<p>编辑宿主机下面的 &#x2F;opt&#x2F;docker_nginx&#x2F;www&#x2F;index.html 文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /opt/docker_nginx/www/index.html<br></code></pre></td></tr></table></figure>
</blockquote>
<p>修改之后如下：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527840219657-335ad4a0-276f-47d3-b49a-0b55fa8299fd.png" alt="在Docker中安装Nginx"></p>
<ul>
<li>重新访问服务器域名，查看最终效果</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527841014053-e2e485f8-a08e-40d7-bc05-603c7d32d43e.png" alt="在Docker中安装Nginx"></p>
<blockquote>
<p>如果页面出现中文乱码的问题，可以在 index.html 好 标签里面加入：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>最终index.html文件内容如下：</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Welcome to nginx!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">35em</span>;</span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> auto;</span><br><span class="language-css">        <span class="hljs-attribute">font-family</span>: Tahoma, Verdana, Arial, sans-serif;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎访问!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>当前nginx服务来源于Docker容器<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>&lt;/html<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(4)-安装Tomcat</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(4)-%E5%AE%89%E8%A3%85Tomcat/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="在Docker中安装Tomcat"><a href="#在Docker中安装Tomcat" class="headerlink" title="在Docker中安装Tomcat"></a>在Docker中安装Tomcat</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p><strong>前言</strong></p>
<p>Tomcat镜像中已经包含jdk环境依赖，所以我们可以不用去启动java容器，直接运行tomcat容器就可以正常访问tomcat服务的，当然，你启动了java容器，也不会有什么影响，因为容器之间是隔离的。</p>
</blockquote>
<h2 id="查询Tomcat镜像列表"><a href="#查询Tomcat镜像列表" class="headerlink" title="查询Tomcat镜像列表"></a>查询Tomcat镜像列表</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker search tomcat<br></code></pre></td></tr></table></figure>

<p>运行结果如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010114436.png"></p>
<blockquote>
<p>一般情况下，都会选择下载stars数量最多的那个镜像，排在第一位的，一般都是官方提供的镜像。</p>
</blockquote>
<h2 id="下载Tomcat镜像"><a href="#下载Tomcat镜像" class="headerlink" title="下载Tomcat镜像"></a>下载Tomcat镜像</h2><p>执行命令下载tomcat镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull tomcat<br></code></pre></td></tr></table></figure>

<h2 id="运行Tomcat镜像"><a href="#运行Tomcat镜像" class="headerlink" title="运行Tomcat镜像"></a>运行Tomcat镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 8081:8080 tomcat<br></code></pre></td></tr></table></figure>

<p>运行效果如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010114658.png"></p>
<p>访问tomcat：</p>
<blockquote>
<p>访问地址为：ip:端口号，因为我的服务器地址为192.168.56.128，所以打开浏览器输入：<strong>192.168.56.128:8081</strong></p>
<p>效果如下：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010115113.png"></p>
</blockquote>
<h2 id="运行Tomcat404问题"><a href="#运行Tomcat404问题" class="headerlink" title="运行Tomcat404问题"></a>运行Tomcat404问题</h2><blockquote>
<p>解决docker启动tomcat容器访问端口显示404的问题，页面显示 源服务器未能找到目标资源的表示或者是不愿公开一个已经存在</p>
</blockquote>
<blockquote>
<p><strong>如果已经关闭防火墙，还出现404问题，那么就确定是tomcat的webapps文件夹下没有东西</strong></p>
</blockquote>
<ul>
<li><p>启动Tomcat容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -p 8081:8080 tomcat<br></code></pre></td></tr></table></figure></li>
<li><p>查看已经启动的容器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure></li>
<li><p>访问部署环境地址</p>
<blockquote>
<p>使用8011端口访问Tomcat失败</p>
<p><img src="https://img-blog.csdnimg.cn/20200228164338431.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1NTg5MDUw,size_16,color_FFFFFF,t_70" alt="ip:端口号"></p>
</blockquote>
</li>
</ul>
<h3 id="先查看防火墙状况"><a href="#先查看防火墙状况" class="headerlink" title="先查看防火墙状况"></a>先查看防火墙状况</h3><ul>
<li><p>先查看防火墙状态</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">service firewalld status<br></code></pre></td></tr></table></figure></li>
</ul>
<blockquote>
<p>出现下图所示代码，表示已经关闭防火墙</p>
<p><img src="https://img-blog.csdnimg.cn/20200228164705354.png" alt="在这里插入图片描述"></p>
</blockquote>
<h4 id="防火墙未关闭"><a href="#防火墙未关闭" class="headerlink" title="防火墙未关闭"></a>防火墙未关闭</h4><blockquote>
<p>如果防火墙没关闭，先关闭防火墙</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">禁止防火墙开机启动</span><br>systemctl disable firewalld.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动docker</span><br>systemctl start docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启docker</span><br>systemctl restart docker<br></code></pre></td></tr></table></figure>

<h4 id="防火墙关闭"><a href="#防火墙关闭" class="headerlink" title="防火墙关闭"></a>防火墙关闭</h4><ul>
<li><p>如果防火墙已经关闭但访问tomcat还是失败，那么使用如下命名进入tomcat的目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it a5f02a3e6dde(启动的tomcat容器的容器id) /bin/bash<br></code></pre></td></tr></table></figure></li>
<li><p>查看当前文件夹内的所有文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ls<br></code></pre></td></tr></table></figure></li>
<li><p>进入webapps文件夹下，如果显示total 0，我们就需要把webapps.dist中的内容复制到webapps文件夹下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd webapps<br>rm -f webapps<br>cp -r webapps.dist webapps<br></code></pre></td></tr></table></figure></li>
<li><p>访问ip:主机端口（8081）</p>
</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010115113.png" alt="img"></p>
<h2 id="后台运行Tomcat"><a href="#后台运行Tomcat" class="headerlink" title="后台运行Tomcat"></a>后台运行Tomcat</h2><blockquote>
<p>通过上述步骤搭建一个Tomcat，是不是很简单，一个tomcat就这样启动完成了！不得不说docker的强大！</p>
</blockquote>
<blockquote>
<p><strong>有没有觉得上面的启动方式存在什么问题？如果在命令行界面中按下 Ctrl+C快捷键，会有什么效果？</strong></p>
<blockquote>
<p>没错，当前的tomcat容器会停止运行，服务无法访问！</p>
</blockquote>
<p><strong>有什么办法可以让tomcat容器一直运行呢？</strong></p>
<blockquote>
<p>解决办法其实很简单，答案就再在 docker run 命令里面设置一个 -d 的参数即可，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 8081:8080 --name tomcat tomcat<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010164641.png"></p>
</blockquote>
</blockquote>
<blockquote>
<p>看到没有，和上面的启动tomcat的效果不同，控制台并未输出tomcat启动的日志信息，这时候我们打开浏览器，重新访问一下：  <strong>192.168.56.128:8081</strong></p>
<p>效果如下：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010115113.png" alt="img"></p>
</blockquote>
<p>通过上面两次docker run 启动tomcat的效果对比，我想大家也应该看得出区别了。所以，如果想让应用在后台一直运行的话，通过在 docker run 命令中使用“-d”参数来让容器处于后台运行。</p>
<h2 id="查看运行中的Tomcat容器"><a href="#查看运行中的Tomcat容器" class="headerlink" title="查看运行中的Tomcat容器"></a>查看运行中的Tomcat容器</h2><p>通过下面命令，来查看当前服务器上运行的docker容器列表：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010165054.png"></p>
<blockquote>
<p>从图中可以看到tomcat容器的一些信息，在最后一列的“NAMES”显示的tomcat名称是“tomcat9”，这是因为你在docker run的时候，指定了“–name”别名，如果没有，docker会给你自动生成一个别名，一般情况下，我们还是建议使用–name来设置别名以及版本，方便实际使用容易区分。</p>
<p>然后tomcat容器的“PORTS”这一列，可以看到8081 &gt; 8080 的信息，我们知道tomcat是运行在容器里面的，而tomcat默认的端口是8080，也就是说tomcat所在容器的对外端口是8080，我们如果想通过浏览器等访问到tomcat，就需要指定一个宿主机的端口与这个tomcat容器端口进行映射，也就是8081这个宿主机的端口。我们实际在浏览器访问的时候，就是通过8081来访问的，不能使用8080访问。端口号的话你也可以自定义的。</p>
</blockquote>
<h2 id="停止Tomcat容器"><a href="#停止Tomcat容器" class="headerlink" title="停止Tomcat容器"></a>停止Tomcat容器</h2><blockquote>
<p>我们在jdk的文章中已经提及到停止容器的命令。</p>
</blockquote>
<p>首先我们还是要查看一下目前正在运行状态的tomcat容器的信息（ID或者别名）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201010165054.png"></p>
<blockquote>
<p>我们可以看到tomcat容器的ID以及别名的信息，这里我就直接使用ID进行容器的操作了。</p>
</blockquote>
<p>通过docker stop实现容器停止关闭</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker stop tomcat9<br></code></pre></td></tr></table></figure>

<h2 id="疑问解答"><a href="#疑问解答" class="headerlink" title="疑问解答"></a>疑问解答</h2><h3 id="问题一"><a href="#问题一" class="headerlink" title="问题一"></a>问题一</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote>
<p>之前启动了tomcat容器，最后又把它关闭了，那我如果想再运行这个tomcat服务，怎么办？难道是要重新执行docker run这个命令来运行一个tomcat容器吗？</p>
</blockquote>
<h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><blockquote>
<p>我们要知道docker run这个命令的作用，其实是运行一个全新的容器。你执行一次docker run命令，就会生成一个新的容器，通过一个图来看一下具体情况：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527521919194-08e09ebc-778b-4f01-b5d0-bc9e229734da.png" alt="在Docker中安装Tomcat"><a href="http://www.cicoding.cn/images/docker/1527521919194-08e09ebc-778b-4f01-b5d0-bc9e229734da.png">http://www.cicoding.cn/images/docker/1527521919194-08e09ebc-778b-4f01-b5d0-bc9e229734da.png</a></p>
<p>从图中可以看到，出现了很多tomcat的容器，而且“STATUS”状态为“Exited”。什么意思呢？因为我在操作的过程中，总共执行了5次docker run命令（这里忽略docker rm删除的容器），启动了5个全新的容器，每个容器之间是隔离的。同时，我又对每个tomcat容器执行了docker stop关闭命令，所以状态都是“Exited”。</p>
<p>所以，你每次启动的容器，docker都会给你保留下来，并不是说你执行了docker stop命令，容器就会被删除掉，答案是不会删除掉，只是标记一下容器的STATUS为Exited状态，处于未运行状态。</p>
<p>所以，如果想重新运行关闭状态下的容器，请使用docker start命令，比如我这里随便启动一个tomcat容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker start 22<br></code></pre></td></tr></table></figure>

<p>这时候通过docker ps查看处于运行状态的容器列表：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527522366260-fea95bcb-fced-4f46-8234-c8e39393a245.png" alt="在Docker中安装Tomcat"><a href="http://www.cicoding.cn/images/docker/1527522366260-fea95bcb-fced-4f46-8234-c8e39393a245.png">http://www.cicoding.cn/images/docker/1527522366260-fea95bcb-fced-4f46-8234-c8e39393a245.png</a></p>
<p>说明tomcat容器已经启动成功了！</p>
<p>我们再通过docker ps -a查看所有的容器列表（包括未运行的容器），主要看一下tomcat容器的数量是否和上面的5个一致，并未重新运行一个全新的容器：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527522475276-0f83eb27-f7ef-4e5b-bcdc-39c32bdea54a.png" alt="在Docker中安装Tomcat"><a href="http://www.cicoding.cn/images/docker/1527522475276-0f83eb27-f7ef-4e5b-bcdc-39c32bdea54a.png">http://www.cicoding.cn/images/docker/1527522475276-0f83eb27-f7ef-4e5b-bcdc-39c32bdea54a.png</a></p>
<p>可以看到，tomcat容器的数量并未发生变化，其中的一个tomcat容器处于运行状态，剩余4个都是Exited停止状态。</p>
</blockquote>
<h3 id="问题二"><a href="#问题二" class="headerlink" title="问题二"></a>问题二</h3><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><blockquote>
<p>如果上图中代表当前服务器上的容器情况，如果这时候我执行以下命令，你觉得会出现什么问题？</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 8082:8080 --name quirky_mayer tomcat<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>命令的含义应该都明白吧。启动一个新的tomcat容器，映射的宿主机端口号是8082（因为之前已经启动了一个8081的容器，宿主机的端口号不能冲突），给该tomcat容器起了一个别名“quirky_mayer”，注意观察一下上图的tomcat容器的别名信息哦~</p>
</blockquote>
<h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h4><blockquote>
<p>运行结果如下图：<img src="http://www.cicoding.cn/images/docker/1527522929924-fbeab3d9-8623-4239-b816-d041b8da890a.png" alt="在Docker中安装Tomcat"><a href="http://www.cicoding.cn/images/docker/1527522929924-fbeab3d9-8623-4239-b816-d041b8da890a.png">http://www.cicoding.cn/images/docker/1527522929924-fbeab3d9-8623-4239-b816-d041b8da890a.png</a></p>
</blockquote>
<blockquote>
<p>其实错误信息很明显了，就是容器的别名“quirky_mayer”已经存在了，别的tomcat容器的别名也存在一个是“quirky_mayer”的。</p>
<p>这个别名校验是否重复，是针对所有容器而言的，并非是只判断运行状态的容器，那些Exited状态的容器也会进行校验。</p>
<p>因此，我们在使用–name指定别名的时候，不要出现重复。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Node安装与配置</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Node/Node%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="Node安装和全局配置"><a href="#Node安装和全局配置" class="headerlink" title="Node安装和全局配置"></a>Node安装和全局配置</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="本文环境"><a href="#本文环境" class="headerlink" title="本文环境"></a>本文环境</h3><ul>
<li>WIN11，64位，家庭版</li>
<li>Node 16.13.0_LTS</li>
</ul>
<h3 id="安装包下载"><a href="#安装包下载" class="headerlink" title="安装包下载"></a>安装包下载</h3><ul>
<li><a href="https://nodejs.org/zh-cn/">Node官网</a></li>
</ul>
<h3 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h3><ul>
<li>点击安装文件, 一键安装, 注意安装位置和添加到环境变量(xx to PATH)选项</li>
<li>打开控制台, 输入一下命令正常显示版本号则安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">node -v     # 查看node版本<br>npm -v      # 查看npm版本<br></code></pre></td></tr></table></figure>

<blockquote>
<p>Nodejs的安装很简单，基本上小白操作，但是一般配置和安装C盘，博猪习惯一般开发软件会放在系统盘以外的一个盘里面，有的像maven私服这种的配置就无需重复配置了，这样重装系统啥的也不会丢失相关的东西，并且重新安装之后只需要相关配置一下环境变量就行了，还是挺方便的，下面放一张博猪的一个配置文件，可供参考</p>
<p><img src="http://tva1.sinaimg.cn/mw690/006seI3Egy1gwm2ltvpntj30jo07bq82.jpg" alt="image-20211120233226273.png"></p>
</blockquote>
<h2 id="npm全局配置"><a href="#npm全局配置" class="headerlink" title="npm全局配置"></a>npm全局配置</h2><blockquote>
<p>如果像博猪一样是重装系统的，一定先要把node配置到系统环境变量中。</p>
</blockquote>
<ul>
<li>先找到node按照路径</li>
</ul>
<blockquote>
<p>D:\ProgramFiles\Node</p>
</blockquote>
<ul>
<li>在此目录下创建两个文件夹</li>
</ul>
<blockquote>
<p>node_global, node_cache</p>
</blockquote>
<ul>
<li>在控制台分别运行以下两条命令(注意改成自己的路径)</li>
</ul>
<blockquote>
<p># 全局模块插件存放路径</p>
<p>npm config set prefix “D:\ProgramFiles\Node\node_global”</p>
<p># 缓存路径</p>
<p>npm config set cache “D:\ProgramFiles\Node\node_cache”</p>
</blockquote>
<ul>
<li>配置npm安装源为淘宝</li>
</ul>
<blockquote>
<p>#全局配置切换到淘宝源</p>
<p>npm config set registry <a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a></p>
</blockquote>
<ul>
<li>把<code>D:\ProgramFiles\Node\node_global\node_modules</code>添加到系统环境变量(注意改成自己的路径)</li>
</ul>
<blockquote>
<p>我的电脑右击&gt;属性&gt;高级系统设置&gt;环境变量&gt;系统变量&gt;新建 变量名: NODE_PATH 变量值:D:\ProgramFiles\Node\node_global\node_modules</p>
</blockquote>
<h2 id="常用命令和技巧"><a href="#常用命令和技巧" class="headerlink" title="常用命令和技巧"></a>常用命令和技巧</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm安装包, npm全局安装包</span><br>npm install [包名]/[包名@指定版本号]  # 当前工程安装<br>npm install [包名]/[包名@指定版本号] -g  # 全局安装<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">全局安装cnpm, 可以替换npm命令, 有时因为node和npm版本问题造成安装失败, 可使用cnpm安装, 用法和npm相同</span><br>npm install cnpm -g<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装npm已安装模块检查更新的包</span><br>cnpm install npm-check -g<br>npm-check -u -g  # 使用方法 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看npm所有已安装模块</span><br>npm list --depth=0 -global<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看npm配置源信息</span><br>npm config get registry<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">更新npm到最新稳定版本</span><br>npm install npm@latest -g<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(8)-安装nacos</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(8)-%E5%AE%89%E8%A3%85nacos/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>日常开发使用springcloud-alibaba，为个人开发方便，本地搭建一个测试环境。</p>
</blockquote>
<h1 id="安装Nacos"><a href="#安装Nacos" class="headerlink" title="安装Nacos"></a>安装Nacos</h1><h2 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h2><figure class="highlight axapta"><table><tr><td class="code"><pre><code class="hljs axapta">docker pull nacos/nacos-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure>

<h2 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /data/nacos/logs/                      #新建logs目录<br>mkdir -p /data/nacos/init.d/          <br>vim /data/nacos/init.d/custom.properties        #修改配置文件<br></code></pre></td></tr></table></figure>

<h2 id="mysql新建nacos的数据库，并执行脚本"><a href="#mysql新建nacos的数据库，并执行脚本" class="headerlink" title="mysql新建nacos的数据库，并执行脚本"></a>mysql新建nacos的数据库，并执行脚本</h2><blockquote>
<p><a href="https://github.com/alibaba/nacos/blob/master/config/src/main/resources/META-INF/nacos-db.sql">下载地址</a></p>
</blockquote>
<h2 id="修改配置文件custom-properties"><a href="#修改配置文件custom-properties" class="headerlink" title="修改配置文件custom.properties"></a>修改配置文件<code>custom.properties</code></h2><figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.contextPath</span>=<span class="hljs-string">/nacos</span><br><span class="hljs-attr">server.servlet.contextPath</span>=<span class="hljs-string">/nacos</span><br><span class="hljs-attr">server.port</span>=<span class="hljs-string">8848</span><br><br><span class="hljs-attr">spring.datasource.platform</span>=<span class="hljs-string">mysql</span><br><span class="hljs-attr">db.num</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">db.url.0</span>=<span class="hljs-string">jdbc:mysql://192.168.56.120:3306/nacos_devtest_prod?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><br><span class="hljs-attr">db.user</span>=<span class="hljs-string">user</span><br><span class="hljs-attr">db.password</span>=<span class="hljs-string">pass</span><br><br><span class="hljs-attr">nacos.cmdb.dumpTaskInterval</span>=<span class="hljs-string">3600</span><br><span class="hljs-attr">nacos.cmdb.eventTaskInterval</span>=<span class="hljs-string">10</span><br><span class="hljs-attr">nacos.cmdb.labelTaskInterval</span>=<span class="hljs-string">300</span><br><span class="hljs-attr">nacos.cmdb.loadDataAtStart</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">management.metrics.export.elastic.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">management.metrics.export.influx.enabled</span>=<span class="hljs-string">false</span><br><span class="hljs-attr">server.tomcat.accesslog.enabled</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">server.tomcat.accesslog.pattern</span>=<span class="hljs-string">%h %l %u %t &quot;%r&quot; %s %b %D %&#123;User-Agent&#125;i</span><br><span class="hljs-attr">nacos.security.ignore.urls</span>=<span class="hljs-string">/,/**/*.css,/**/*.js,/**/*.html,/**/*.map,/**/*.svg,/**/*.png,/**/*.ico,/console-fe/public/**,/v1/auth/login,/v1/console/health/**,/v1/cs/**,/v1/ns/**,/v1/cmdb/**,/actuator/**,/v1/console/server/**</span><br><span class="hljs-attr">nacos.naming.distro.taskDispatchThreadCount</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">nacos.naming.distro.taskDispatchPeriod</span>=<span class="hljs-string">200</span><br><span class="hljs-attr">nacos.naming.distro.batchSyncKeyCount</span>=<span class="hljs-string">1000</span><br><span class="hljs-attr">nacos.naming.distro.initDataRatio</span>=<span class="hljs-string">0.9</span><br><span class="hljs-attr">nacos.naming.distro.syncRetryDelay</span>=<span class="hljs-string">5000</span><br><span class="hljs-attr">nacos.naming.data.warmup</span>=<span class="hljs-string">true</span><br><span class="hljs-attr">nacos.naming.expireInstance</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure>

<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker  run \<br>--name nacos -d \<br>-p 8848:8848 \<br>--privileged=true \<br>--restart=always \<br>-e JVM_XMS=256m \<br>-e JVM_XMX=256m \<br>-e MODE=standalone \<br>-e PREFER_HOST_MODE=hostname \<br>-v /data/nacos/logs:/home/nacos/logs \<br>-v /data/nacos/init.d/custom.properties:/home/nacos/init.d/custom.properties \<br>nacos/nacos-server<br></code></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><table>
<thead>
<tr>
<th>名称</th>
<th>值</th>
</tr>
</thead>
<tbody><tr>
<td>地址</td>
<td>http:&#x2F;&#x2F;宿主ip:8848&#x2F;nacos</td>
</tr>
<tr>
<td>用户名</td>
<td>nacos</td>
</tr>
<tr>
<td>密码</td>
<td>nacos</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>开发好习惯</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>写干净的代码，做风一样的男子！</p>
</blockquote>
<p>编程5分钟，查代码2小时!</p>
<p>在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。</p>
<p><img src="https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<p><strong>当有人指出程序员代码有BUG时，程序员的回答各有不同：</strong></p>
<ul>
<li>不可能啊，在我电脑上运行没有问题呀!</li>
<li>我已经一星期没碰这块代码啦!</li>
<li>没事，我改一行代码就可以了，不影响程序。</li>
</ul>
<div>
<center>程序员调 Bug 的样子，非常真实~</center>
</div>

<p>​                                                                                                                         <center>↓↓↓</center></p>
<p><img src="https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&wxfrom=5&wx_lazy=1" alt="0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1"></p>
<p><img src="https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&wxfrom=5&wx_lazy=1" alt="0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1"></p>
<p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif" alt="0?wx_fmt=gif"></p>
<blockquote>
<p>调bug是火，bug是烟。一处点火，四处冒烟</p>
<p>下面奉上我日常开发的一些总结.</p>
</blockquote>
<h1 id="如何减少代码的BUG呢-在此分享几个技巧"><a href="#如何减少代码的BUG呢-在此分享几个技巧" class="headerlink" title="如何减少代码的BUG呢?在此分享几个技巧"></a>如何减少代码的BUG呢?在此分享几个技巧</h1><h2 id="别对警告视而不见"><a href="#别对警告视而不见" class="headerlink" title="别对警告视而不见"></a>别对警告视而不见</h2><p>相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。</p>
<p><strong>我们的目标是，写干净的代码，做风一样的男子!</strong></p>
<p><img src="https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<h2 id="编程习惯"><a href="#编程习惯" class="headerlink" title="编程习惯"></a>编程习惯</h2><p>种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。</p>
<h2 id="写代码的时间问题"><a href="#写代码的时间问题" class="headerlink" title="写代码的时间问题"></a>写代码的时间问题</h2><p>对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。</p>
<p>虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。</p>
<p><strong>我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。</strong></p>
<p><img src="https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc" alt="程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！"></p>
<h2 id="验证、自测"><a href="#验证、自测" class="headerlink" title="验证、自测"></a>验证、自测</h2><p>在提交测试前要多验证，其中包括自动化测试、手动跑用例等。</p>
<p>有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。</p>
<p>这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试</p>
<h2 id="仔细的DEBUG"><a href="#仔细的DEBUG" class="headerlink" title="仔细的DEBUG"></a>仔细的DEBUG</h2><p>在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。</p>
<h2 id="仔细的设计"><a href="#仔细的设计" class="headerlink" title="仔细的设计"></a>仔细的设计</h2><p>在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。</p>
<h2 id="避免干扰"><a href="#避免干扰" class="headerlink" title="避免干扰"></a>避免干扰</h2><p>有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。</p>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>写注释，写注释，写注释。重要的事情说三遍。</p>
<p>因为前期的注释有利于后续开发的时候容易减少bug。</p>
<p><strong>自从修改了注释模板，整个人精神多了，bug也明显少了，如图：</strong></p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png" alt="image-20201215145125620"></p>
<h2 id="敢于维护上古代码"><a href="#敢于维护上古代码" class="headerlink" title="敢于维护上古代码"></a>敢于维护上古代码</h2><p>博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。</p>
<p>‍</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>开发感悟</category>
      </categories>
      <tags>
        <tag>开发习惯</tag>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/</url>
    <content><![CDATA[<h1 id="Centos7"><a href="#Centos7" class="headerlink" title="Centos7"></a>Centos7</h1><p>‍</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Nvm教程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Node/Nvm%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>因为某些原因博猪的电脑GG了，SO,现在电脑好了，，，虽然还有某些无关痛痒的问题存在，但是还是够博猪继续折腾了，老样子重装电脑后第一部配置相关环境变量，然后安装软件。。。。</p>
<p>当一切都OK的时候，博猪浏览自己的博客的时候发现一些问题：</p>
<ul>
<li><strong>&#x3D;&#x3D;控制台有很多错误,这个对于我这个死肥处女座来说简直不可忍受&#x3D;&#x3D;</strong></li>
<li>复制、博猪特意放网抑云的歌曲、图片放大等效果失效了</li>
<li>博客部署的时候部署不了了，或者说经常部署失败</li>
<li>。。。。。。。。。。。</li>
</ul>
<hr>
<p>OK，博猪简单说一下原因吧，原因很简单，由于博猪本次装机后对应的node版本使用的是最新的LTS版本，而node有没有相关的版本解决问题，所以我安装的时候默认安装的模块会是最新的，而最近的hexo和node有冲突，so，就导致本地可以运行，而使用相关功能的时候就有问题了。</p>
<p>so，很不幸，本文就由此出现了。</p>
</blockquote>
<h1 id="前景介绍"><a href="#前景介绍" class="headerlink" title="前景介绍"></a>前景介绍</h1><p>在我们的日常开发中经常会遇到这种情况：手上有好几个项目，每个项目的需求不同，进而不同项目必须依赖不同版的 NodeJS 运行环境。如果没有一个合适的工具，这个问题将非常棘手。</p>
<p><a href="https://github.com/creationix/nvm">nvm</a> 应运而生，nvm 是 Mac 下的 node 管理工具，有点类似管理 Ruby 的 rvm，如果需要管理 Windows 下的 node，官方推荐使用 <a href="https://github.com/hakobera/nvmw">nvmw</a> 或 <a href="https://github.com/coreybutler/nvm-windows">nvm-windows</a>。不过，nvm-windows 并不是 nvm 的简单移植，他们也没有任何关系。但下面介绍的所有命令，都可以在 nvm-windows 中运行。</p>
<h1 id="nvm-与-n-的区别"><a href="#nvm-与-n-的区别" class="headerlink" title="nvm 与 n 的区别"></a>nvm 与 n 的区别</h1><p>node 版本管理工具还有一个是 TJ大神的 <a href="https://github.com/tj/n">n</a> 命令，n 命令是作为一个 node 的模块而存在，而 nvm 是一个独立于 node&#x2F;npm 的外部 shell 脚本，因此 n 命令相比 nvm 更加局限。</p>
<p>由于 npm 安装的模块路径均为 <strong>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules</strong>，当使用 n 切换不同的 node 版本时，实际上会共用全局的 node&#x2F;npm 目录。 因此不能很好的满足『按不同 node 版本使用不同全局 node 模块』的需求。</p>
<h1 id="Windows-安装"><a href="#Windows-安装" class="headerlink" title="Windows 安装"></a>Windows 安装</h1><blockquote>
<p>由于博猪使用的是windows系统，所以博猪着重介绍windows安装，Mac、Linux安装请自行百度。</p>
</blockquote>
<p><strong>首先最重要的是：一定要卸载已安装的 NodeJS，否则会发生冲突。然后下载 ​</strong>​*<em><strong>​</strong>​ 最新安装包，直接安装即可。</em>*</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h2yvpq8um7j30td0f7n2z.jpg" alt="image.png"></p>
<p>选择nvm安装路径</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h2yvrvlcujj30dx0bf76n.jpg" alt="image.png"></p>
<p>选择node环境变量文件夹(<strong>注意:一定要是空文件夹或者不存在的文件夹,安装时会自动创建，默认是一个快捷方式，即软连接</strong>)</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h2yvsjyoydj30ee0bbtaz.jpg" alt="image.png"></p>
<p>安装完毕，打开命令行看是否安装成功</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h2yvxauxidj30sl0d07c3.jpg" alt="image.png"></p>
<blockquote>
<p>如果出现： nvm command is not defined 。表示你的全局环境变量没有配置或者配置出错了</p>
<p>如果环境变量都配置好了，还是nvm command is not defined ，这个时候建议重启vscode 或者重启电脑。</p>
</blockquote>
<h1 id="更改下载源"><a href="#更改下载源" class="headerlink" title="更改下载源"></a>更改下载源</h1><p>找到nvm程序所在路径，例如博猪安装路径:<code>D:\LenovoSoftstore\Install\nvm</code>，末尾添加以下内容：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">node_mirror</span>: <span class="hljs-string">http://npm.taobao.org/mirrors/node/</span><br><span class="hljs-attr">npm_mirror</span>: <span class="hljs-string">https://npm.taobao.org/mirrors/npm/</span><br></code></pre></td></tr></table></figure>

<h1 id="nvm基本使用"><a href="#nvm基本使用" class="headerlink" title="nvm基本使用"></a>nvm基本使用</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">列出当前电脑下的Node.js的版本列表</span><br>nvm list<br><span class="hljs-meta prompt_"># </span><span class="language-bash">显示所有可以下载的版本</span><br>nvm list available<br><span class="hljs-meta prompt_"># </span><span class="language-bash">切换指定版本的node</span><br>nvm use [version]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装指定版本的node</span><br>nvm install [version]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">卸载指定版本的node</span><br>nvm uninstall [version]<br></code></pre></td></tr></table></figure>

<h1 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h1><h2 id="下载指定node版本"><a href="#下载指定node版本" class="headerlink" title="下载指定node版本"></a>下载指定node版本</h2><blockquote>
<p>本文模拟两个版本node，一个版本较低，一个版本较高</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">nvm install 10.24.1<br>nvm install 12.22.12<br></code></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywdbtan0j30j405sq46.jpg" alt="image.png"></p>
<p>这时候我们看nvm对应的按照目录，这时候我们会发现，我们下载的两个版本的node已经下载好了。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywfcx3c1j30pe098ae3.jpg" alt="image.png"></p>
<h2 id="使用指定版本node"><a href="#使用指定版本node" class="headerlink" title="使用指定版本node"></a>使用指定版本node</h2><p>由于博猪hexo指定的node版本必须大于等于12，最新版本node还不支持，所以博猪索性下载了一个最新版本的12</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">nvm use 12.22.12<br></code></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywhvggizj30au02kwes.jpg" alt="image.png"></p>
<h2 id="安装hexo-cli"><a href="#安装hexo-cli" class="headerlink" title="安装hexo-cli"></a>安装hexo-cli</h2><p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywj4xy0mj30vn07j77s.jpg" alt="image.png"></p>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo c<br></code></pre></td></tr></table></figure>

<p>这时候我们发现，全局node命令是使用不了的，这时候我们需要配置一下环境变量。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywm3z2pdj30hl08442u.jpg" alt="image.png"></p>
<p>我们发现安装nvm时自动给我们配置两个环境变量，一个nvm软件的，一个node软连接使用的，这是我们需要配置对应的全局变量，即在<code>Path</code>中配置<code>node_global</code></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywp1p2slj30e506uact.jpg" alt="image.png"></p>
<p>配置完成后我们再次使用上述命令，发现可以使用了</p>
<h2 id="使用node全局命令"><a href="#使用node全局命令" class="headerlink" title="使用node全局命令"></a>使用node全局命令</h2><p>使用hexo命令部署博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">hexo g --d<br></code></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywry59z1j30pf09kdk3.jpg" alt="image.png"></p>
<p>登录博客再次查看相关失效功能</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywt0q34uj311x0q1tka.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywtlnmmjj3067057q2v.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2ywuckvx3j31ii0punhw.jpg" alt="image.png"></p>
<p>完美，我的快乐又回来了。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Node</category>
      </categories>
      <tags>
        <tag>Node</tag>
        <tag>前端</tag>
        <tag>Nvm</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/01/01/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E4%B8%9A%E5%8A%A1%E5%B8%B8%E8%A7%81%E5%BC%80%E5%8F%91%E9%94%99%E8%AF%AF(1)-%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>开发感悟</category>
      </categories>
  </entry>
  <entry>
    <title>Crontab-定时任务</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Linux-Crontab-定时任务"><a href="#Linux-Crontab-定时任务" class="headerlink" title="Linux Crontab 定时任务"></a>Linux Crontab 定时任务</h1><blockquote>
<p>很多时候，我们需要定时执行某个应用或者某段脚本，在linux上，可以使用cron服务，它有点类似于Windows上的任务计划程序。</p>
</blockquote>
<h2 id="crond和crontab"><a href="#crond和crontab" class="headerlink" title="crond和crontab"></a>crond和crontab</h2><p>首先需要分清楚两个概念：crond和crontab。crond是后台守护进程的名称（d代表daemon），用来实际执行脚本，它在系统中是一直运行的。可以通过下面的方式查看到它：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl | grep crond<br></code></pre></td></tr></table></figure>

<p>crontab是一个工具，用来列出cron中当前运行的作业（应用或脚本等）、向cron中添加作业、编辑作业、删除作业。它并不是一直在后台运行的，是一个短时的命令行工具，执行完就结束了。</p>
<p>可以简单理解crond和crontab组合起来提供cron服务。</p>
<p>大体流程如下：</p>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F634d76f98ad0252888ea044489e3d5bf.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1627445494&t=e65617a03bb7ecea66217142dd0da756" alt="img"></p>
<h2 id="crontab配置文件"><a href="#crontab配置文件" class="headerlink" title="crontab配置文件"></a>crontab配置文件</h2><p>Linux下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab命令。使用以下命令进行查看：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat /etc/crontab<br></code></pre></td></tr></table></figure>

<p>配置文件可以看到如下解释：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">For details see man 4 crontabs</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  .------------- hour (0 - 23)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  .---------- day of month (1 - 31)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*  *  *  *  * user-name  <span class="hljs-built_in">command</span> to be executed</span><br></code></pre></td></tr></table></figure>

<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash；第二行PATH变量指定了系统执行命令的路径；第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户；第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>
<p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p>
<h2 id="crontab文件含义"><a href="#crontab文件含义" class="headerlink" title="crontab文件含义"></a>crontab文件含义</h2><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute hour day month week command</p>
<p><img src="https://www.linuxprobe.com/wp-content/uploads/2016/09/crontab.png"></p>
<p>在以上各个字段中，还可以使用以下特殊字符：</p>
<p>“<em>&quot;代表所有的取值范围内的数字，如月份字段为</em>，则表示1到12个月；</p>
<p>“&#x2F;“代表每一定时间间隔的意思，如分钟字段为*&#x2F;10，表示每10分钟执行1次。</p>
<p>“-“代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。</p>
<p>“,”分散的数字（不一定连续），如1,2,3,4,7,9。</p>
<p>注：由于各个地方每周第一天不一样，因此Sunday&#x3D;0（第一天）或Sunday&#x3D;7（最后1天）。</p>
<h2 id="crontab命令详解"><a href="#crontab命令详解" class="headerlink" title="crontab命令详解"></a>crontab命令详解</h2><blockquote>
<p>因为crond是一个守护进程，所以在系统开机后，通过<code>systemctl start crond</code>启动一次以后（默认自动启动的），几乎就不需要再管它了，之后的操作都通过crontab来完成。</p>
</blockquote>
<h3 id="查看现有任务"><a href="#查看现有任务" class="headerlink" title="查看现有任务"></a>查看现有任务</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -l</span><br>no crontab for root<br></code></pre></td></tr></table></figure>

<p>因为现在没有任务，所以显示的是 no crontab for root，可见，任务是根据用户进行区分的。</p>
<h3 id="添加定时任务"><a href="#添加定时任务" class="headerlink" title="添加定时任务"></a>添加定时任务</h3><p>为了便于测试，我们可以创建这样一个简单的脚本(位于~&#x2F;tmp&#x2F;job1.sh)：在一个文件末尾追加当前时间。脚本如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">date +&#x27;%F %T&#x27; &gt;&gt; ~/tmp/job1.log<br></code></pre></td></tr></table></figure>

<p>创建完成后记得赋予一下执行权限：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">chmod</span> 755 job1.sh</span><br></code></pre></td></tr></table></figure>

<p>接下来，需要配置多久运行一次。这里通过cron表达式来设置，它非常灵活，可以很简单也可以很复杂。cron表达式的应用广泛，不止用在系统层面，在其他各种编程语言的类库当中，都有类似的实现，语法略有不同。使用下面的命令可以查看linux系统中cron表达式的写法：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cat</span> /etc/crontab</span> <br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">For details see man 4 crontabs</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">Example of job definition:</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">.---------------- minute (0 - 59)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  .------------- hour (0 - 23)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  .---------- day of month (1 - 31)</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">|  |  |  |  |</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">*  *  *  *  * user-name  <span class="hljs-built_in">command</span> to be executed</span><br></code></pre></td></tr></table></figure>

<p>如果需要查看更详细的用法，可以使用 <code># man crontab</code> 命令查看。</p>
<p>整理后如下表所示：</p>
<blockquote>
<p><strong>注意：</strong>不同的cron应用存在很大差异，比如crontab不支持“秒”，特殊字符也支持的比较少（支持,-*&#x2F;）。而其他一些应用，则支持“秒”和更多的特殊字符。这里为了更完备一些，所以全都列出来了，省的以后再去总结。</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">名称</th>
<th align="left">必须</th>
<th align="left">取值范围</th>
<th align="left">可设置的特殊字符</th>
</tr>
</thead>
<tbody><tr>
<td align="left">分</td>
<td align="left">是</td>
<td align="left">0-59</td>
<td align="left">,-*&#x2F;</td>
</tr>
<tr>
<td align="left">时</td>
<td align="left">是</td>
<td align="left">0-23</td>
<td align="left">,-*&#x2F;</td>
</tr>
<tr>
<td align="left">日(月)</td>
<td align="left">是</td>
<td align="left">1-31</td>
<td align="left">,-*?&#x2F;LW</td>
</tr>
<tr>
<td align="left">月</td>
<td align="left">是</td>
<td align="left">1-12 或者 jan-dec</td>
<td align="left">,-*&#x2F;</td>
</tr>
<tr>
<td align="left">日(周)</td>
<td align="left">是</td>
<td align="left">0-7（0和7都是星期天） 或者 sun-sat</td>
<td align="left">,-*?&#x2F;L#</td>
</tr>
<tr>
<td align="left">年</td>
<td align="left">否</td>
<td align="left">留空，1970-2099</td>
<td align="left">,-*&#x2F;</td>
</tr>
</tbody></table>
<p>几个特殊字符的含义：</p>
<table>
<thead>
<tr>
<th align="left">字符</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">*</td>
<td align="left">全部。意思是在该时间的任意点都应当执行</td>
</tr>
<tr>
<td align="left">?</td>
<td align="left">不指定，任意。仅用于 日(月)和日(周)。0 0 5 * ? 代表每个月的第5天零点，不论星期几。 0 0 ? * 1 代表每周一，不论是当月的哪天。</td>
</tr>
<tr>
<td align="left">,</td>
<td align="left">多个值的分隔符，例如1,5,10</td>
</tr>
<tr>
<td align="left">-</td>
<td align="left">代表连续值，例如1-20</td>
</tr>
<tr>
<td align="left">&#x2F;</td>
<td align="left">步长。例如 5&#x2F;15，代表从5开始，以15为步长。因此，当5&#x2F;15位于分钟的位置时，表示小时内的第5、20、35和50分钟。</td>
</tr>
<tr>
<td align="left">L</td>
<td align="left">最后一天。可以是每月最后一天或者每周最后一天。如果用在 天(周)字段，并且前面加数字，则表示最后一个周N。例如5L，表示最后一个周五（5表示周五，L表示最后）。</td>
</tr>
<tr>
<td align="left">W</td>
<td align="left">工作日，指周一到周五的任意一天</td>
</tr>
<tr>
<td align="left">#</td>
<td align="left">表示第几个的意思，例如 6#3，表示当月第3个星期六（6表示周六，3表示第3个）</td>
</tr>
</tbody></table>
<p>几个简单的例子：</p>
<table>
<thead>
<tr>
<th align="left">表达式</th>
<th align="left">含义</th>
</tr>
</thead>
<tbody><tr>
<td align="left">* * * * *</td>
<td align="left">每分钟执行一次</td>
</tr>
<tr>
<td align="left">30 * * * *</td>
<td align="left">每小时的30分执行一次</td>
</tr>
<tr>
<td align="left">*&#x2F;5 * * * *</td>
<td align="left">每5分钟执行一次</td>
</tr>
<tr>
<td align="left">0&#x2F;5 * * * *</td>
<td align="left">每5分钟执行一次，且仅在0,5,15,20…55分执行</td>
</tr>
<tr>
<td align="left">5 0 * * *</td>
<td align="left">每天的00:05执行一次</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>注意：</strong>crontab中 日(周)不接受“?”的写法，在很多其他应用中则可以，例如Quartz.Net库：<a href="https://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/crontrigger.html">https://www.quartz-scheduler.net/</a></p>
</blockquote>
<blockquote>
<p><strong>提示：</strong>更多的用法，可以参考：<a href="https://crontab.guru/">https://crontab.guru</a></p>
</blockquote>
<p>接下来，如果我们想要每分钟执行一下前面创建的job1.sh脚本，需要再创建一个crontab作业(jobs.cron，后缀名无所谓，这里只是为了便于识别)，其中包含了cron表达式，用于表明job1.sh执行的周期：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>

<p>使用crontab将它加入到计划中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>

<p>再次查看当前计划，可以看到这样的结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>

<h3 id="删除定时任务"><a href="#删除定时任务" class="headerlink" title="删除定时任务"></a>删除定时任务</h3><p>先将job1.sh复制一份，稍作修改，然后编辑一下jobs.cron，将job2.sh也加入进去：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>

<p>然后重新加入到cron服务中。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>

<p>接着查看一下当前cron中的作业：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>

<p>可以看到上面有job1.sh和job2.sh两个作业，其效果相当于将jobs.cron文件的内容拷贝进去。</p>
<p>如果想要删除作业，则执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -r</span><br></code></pre></td></tr></table></figure>

<p>这样会删除所有作业，如果只想删除一个，或者想对作业进行编辑，可以使用下面的命令。</p>
<h3 id="编辑定时任务"><a href="#编辑定时任务" class="headerlink" title="编辑定时任务"></a>编辑定时任务</h3><p><code>crontab -e</code> 命令会调用编辑器（通常是vi或者vim），直接编辑计划作业，相当于编辑jobs.cron。只不过编辑完立即生效，不需要再执行crontab进行加载。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">crontab -e</span><br>crontab: installing new crontab<br></code></pre></td></tr></table></figure>

<p>统一期间，个人不建议使用crontab -e编辑计划，而是编辑jobs.cron，然后进行加载。这样的话jobs.cron文件相当于一个备份，方便日后恢复。</p>
<h2 id="查看作业日志"><a href="#查看作业日志" class="headerlink" title="查看作业日志"></a>查看作业日志</h2><p>在作业执行出现异常（或作业脚本写日志）时，cron服务会输出日志，在我的CentOS7系统上，查看的地址位于&#x2F;var&#x2F;log下。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">ls</span> /var/log | grep cron</span><br>cron<br>cron-20180819<br>cron-20180826<br>cron-20180902<br>cron-20180909<br></code></pre></td></tr></table></figure>

<p>如果想让自己编写的作业输出日志，可以这样编写jobs.cron：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">* * * * * ~/tmp/job1.sh &gt;&gt; /var/log/job1.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure>

<p>上面的意思是将stdout和stderr输出到&#x2F;var&#x2F;log&#x2F;job1.log。</p>
<p>修改job1.sh，在底部加入<code>echo hello</code>。然后调用<code>crontab jobs.cron</code>重新加载，然后在&#x2F;var&#x2F;log目录下可以看到job1.log，其中包含了输出的文本“hello”。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Crontab</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Jenkins/</url>
    <content><![CDATA[<blockquote>
<p>持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。</p>
</blockquote>
<h1 id="持续集成工具"><a href="#持续集成工具" class="headerlink" title="持续集成工具"></a>持续集成工具</h1><h2 id="Travis-CI"><a href="#Travis-CI" class="headerlink" title="Travis CI"></a>Travis CI</h2><p>在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。私有项目会收费。</p>
<h2 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a>Jenkins</h2><p>Jenkins是一个用Java编写的开源的持续集成工具。官方网站：<a href="https://jenkins.io/">https://jenkins.io/</a><br>Jenkins能实时监控持续集成过程中所存在的问题，提供详细的日志文件和提醒功能，还能用图表的形式，形象地展示项目构建的趋势和稳定性。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Jenkins自动化部署可以解决集成、测试、部署等重复性的工作，工具集成的效率明显高于人工操作；并且持续集成可以更早的获取代码变更的信息，从而更早的进入测试阶段，更早的发现问题，这样解决问题的成本就会显著下降：持续集成缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间出现的等待时间；持续集成也意味着开发、集成、测试、部署得以持续。。<br>使用Maven（Ant）等来实现lava项目自动化构建发布部署。这些工具可以帮助在构建过程中实现自动化发布、回滚等动作。</p>
<blockquote>
<p>Jenkins提供Docker、war等部署方式，博猪比较倾向于yum源安装方式，同时作为一个服务启动。</p>
</blockquote>
<h1 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h1><h2 id="系统要求"><a href="#系统要求" class="headerlink" title="系统要求"></a>系统要求</h2><p>最低推荐配置:</p>
<ul>
<li>256MB可用内存</li>
<li>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li>
</ul>
<p>为小团队推荐的硬件配置:</p>
<ul>
<li>1GB+可用内存</li>
<li>50 GB+ 可用磁盘空间</li>
</ul>
<p>软件配置:</p>
<ul>
<li>Java 8—无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。</li>
</ul>
<blockquote>
<p><strong>注意:</strong> 如果将Jenkins作为Docker 容器运行，这不是必需的</p>
</blockquote>
<h2 id="下载Jenkins"><a href="#下载Jenkins" class="headerlink" title="下载Jenkins"></a>下载Jenkins</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo wget -O /etc/yum.repos.d/jenkins.repo \<br>    https://pkg.jenkins.io/redhat/jenkins.repo<br>sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>sudo yum upgrade<br>sudo yum install epel-release java-11-openjdk-devel<br>sudo yum install jenkins<br>sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure>

<h2 id="查看Jenkins状态"><a href="#查看Jenkins状态" class="headerlink" title="查看Jenkins状态"></a>查看Jenkins状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl status jenkins<br></code></pre></td></tr></table></figure>

<p>如果是开启状态，关闭，以便更改配置。关闭命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl stop jenkins<br></code></pre></td></tr></table></figure>

<h2 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h2><blockquote>
<p>配置路径如下：  &#x2F;etc&#x2F;sysconfig</p>
</blockquote>
<h3 id="自定义配置路径"><a href="#自定义配置路径" class="headerlink" title="自定义配置路径"></a>自定义配置路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">JENKINS_HOME=&quot;/opt/jenkins&quot;<br></code></pre></td></tr></table></figure>

<h3 id="自定义默认用户"><a href="#自定义默认用户" class="headerlink" title="自定义默认用户"></a>自定义默认用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">JENKINS_USER=&quot;root&quot;<br></code></pre></td></tr></table></figure>

<h3 id="自定义访问路径"><a href="#自定义访问路径" class="headerlink" title="自定义访问路径"></a>自定义访问路径</h3><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">JENKINS_PORT=&quot;9955&quot;<br></code></pre></td></tr></table></figure>

<h2 id="重启-amp-amp-启动Jenkins服务"><a href="#重启-amp-amp-启动Jenkins服务" class="headerlink" title="重启&amp;&amp;启动Jenkins服务"></a>重启&amp;&amp;启动Jenkins服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo systemctl start jenkins<br></code></pre></td></tr></table></figure>

<h2 id="访问-amp-amp-解锁Jenkins"><a href="#访问-amp-amp-解锁Jenkins" class="headerlink" title="访问&amp;&amp;解锁Jenkins"></a>访问&amp;&amp;解锁Jenkins</h2><blockquote>
<p>访问地址为：linux+端口号，如上配置为：<code>http://192.168.56.121:9955</code>，访问后，进入一下配置页面。</p>
</blockquote>
<p><img src="https://i.loli.net/2021/10/04/Fwx6D1kGHqt2ogX.png" alt="image-20211004202424221"></p>
<p>按照上方提示，输入一下命令,输入密码：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cat /opt/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>

<h2 id="按照插件"><a href="#按照插件" class="headerlink" title="按照插件"></a>按照插件</h2><p>默认按照推荐按照即可。</p>
<p><img src="https://i.loli.net/2021/10/04/EZwmnHSxribWpd5.png" alt="image-20211004203303329"></p>
<h2 id="初始化用户"><a href="#初始化用户" class="headerlink" title="初始化用户"></a>初始化用户</h2><blockquote>
<p>创建初始化用户，用户名：opser,密码：admin</p>
</blockquote>
<p><img src="https://i.loli.net/2021/10/04/OEiDtgdlAYW65kz.png" alt="image-20211004204936715"></p>
<p>Jenkins初始URL默认不进行配置</p>
<p><img src="https://i.loli.net/2021/10/04/YRJmbgUFoj1xhnB.png" alt="image-20211004205136257"></p>
<h2 id="安装完成，开始使用"><a href="#安装完成，开始使用" class="headerlink" title="安装完成，开始使用"></a>安装完成，开始使用</h2><p><img src="https://i.loli.net/2021/10/04/kdETlSe1rw7N5py.png" alt="image-20211004205218802"></p>
<h1 id="Jenkins优化"><a href="#Jenkins优化" class="headerlink" title="Jenkins优化"></a>Jenkins优化</h1><h2 id="插件优化"><a href="#插件优化" class="headerlink" title="插件优化"></a>插件优化</h2><blockquote>
<p>由于Jenkins默认使用国外的镜像，所以插件下载安装速度极慢，所以我们需要更改插件仓库。</p>
<p><strong>注意：该仓库更改必须要在没有下载插件之前！</strong></p>
</blockquote>
<ul>
<li><p>进入Jenkins目录，<code>/opt/jenkins</code></p>
</li>
<li><p>复制并重命名文件<code>hudson.model.UpdateCenter.xml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cp hudson.model.UpdateCenter.xml hudson.model.UpdateCenter.xml.bak<br></code></pre></td></tr></table></figure></li>
<li><p>修改<code>hudson.model.UpdateCenter.xml</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">url改为<br>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<br></code></pre></td></tr></table></figure></li>
<li><p>修改<code>default.json</code></p>
</li>
<li><p>配置default.json</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /var/lib/jenkins/updates/default.json<br></code></pre></td></tr></table></figure></li>
<li><p>全局替换</p>
<blockquote>
<p>把  updates.jenkins-ci.org&#x2F;download  替换为  mirrors.tuna.tsinghua.edu.cn&#x2F;jenkins</p>
<p>地址修改把  <code>www.google.com</code> 替换为  <code>www.baidu.com</code></p>
</blockquote>
</li>
<li><p>重启服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl restart jenkins<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><blockquote>
<p>装完Jenkins之后，我们发现有一部分菜单汉化了，有一部分菜单没有汉化，这让人很不爽，所以我们需要调整一下让页面保持统一！</p>
</blockquote>
<ul>
<li><code>系统管理</code>-<code>插件管理</code>-<code>已安装</code>，中搜索，<code>Localization: Chinese (Simplified)</code></li>
<li>卸载，重装，同时安装<code>locale</code>插件</li>
<li><code>系统管理</code>-<code>系统配置</code>-<code>Locale</code>-<code>Default Language</code>,填写<code>zh_CN</code>,勾选<code>Ignore browser preference and force this language to all users</code></li>
<li>重启</li>
</ul>
<h1 id="Jenkins操作"><a href="#Jenkins操作" class="headerlink" title="Jenkins操作"></a>Jenkins操作</h1><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><h3 id="配置一览"><a href="#配置一览" class="headerlink" title="配置一览"></a>配置一览</h3><p><img src="https://i.loli.net/2021/10/05/KNfwrISu3cqpzoB.jpg" alt="img"></p>
<h3 id="构建环境配置"><a href="#构建环境配置" class="headerlink" title="构建环境配置"></a>构建环境配置</h3><p>指定构建时所依赖的环境参数，如jdk版本，可以手动安装jdk，也可以在【全局工具配置】中指定好jdk版本，在首次构建时会自动安装，首次构建下载时间较长，耐心等待即可。</p>
<p>以NodeJS自动安装为例：</p>
<p><img src="https://i.loli.net/2021/10/05/w3ypsOPzqZ4QM2d.jpg" alt="img"></p>
<h2 id="插件管理"><a href="#插件管理" class="headerlink" title="插件管理"></a>插件管理</h2><p>构建模块大多以插件形式存在，使用前需安装，否则无法找到对应构建项。</p>
<p><img src="https://i.loli.net/2021/10/05/BQ7LWwcZgriysMS.jpg" alt="img"></p>
<h2 id="服务器配置"><a href="#服务器配置" class="headerlink" title="服务器配置"></a>服务器配置</h2><p>系统管理-&gt;系统配置-&gt;Publish over SSH，点击[新增]按钮添加服务器，按要求填写服务器信息，如果没有找到此选项，可先在【插件管理】中安装Publish over SSH插件。</p>
<p><img src="https://i.loli.net/2021/10/05/e96JzP8iSpvhcy7.jpg" alt="img"></p>
<p>说明：Remote Directory指定的目录会作为文件上传时的根目录。</p>
<h2 id="Java应用构建配置"><a href="#Java应用构建配置" class="headerlink" title="Java应用构建配置"></a>Java应用构建配置</h2><h3 id="新建任务"><a href="#新建任务" class="headerlink" title="新建任务"></a>新建任务</h3><p>以构建Maven项目为例，选择一个Maven构建风格，可以省去许多maven配置，如果已经有一个相同配置，可选择输入名称进行复制。</p>
<p>Maven setting.xml配置文件：</p>
<blockquote>
<p>&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;tools&#x2F;hudson.tasks.Maven_MavenInstallation&#x2F;maven&#x2F;conf&#x2F;</p>
</blockquote>
<p><img src="https://i.loli.net/2021/10/05/QqhzG2svYTgujEN.jpg" alt="img"></p>
<h3 id="构建包留存策略"><a href="#构建包留存策略" class="headerlink" title="构建包留存策略"></a>构建包留存策略</h3><p><img src="https://i.loli.net/2021/10/05/BsxnbpaRHl6qdGM.jpg" alt="img"></p>
<h3 id="源码仓库"><a href="#源码仓库" class="headerlink" title="源码仓库"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>
<p><img src="https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg" alt="img"></p>
<p>配置源码仓库，指定动态tag分支</p>
<p><img src="https://i.loli.net/2021/10/05/sSY6haTOtJcqI2M.jpg" alt="img"></p>
<h3 id="自动构建选项"><a href="#自动构建选项" class="headerlink" title="自动构建选项"></a>自动构建选项</h3><p>取消触发自动构建的选项</p>
<p><img src="https://i.loli.net/2021/10/05/RBLYzZElcywuX7U.jpg" alt="img"></p>
<h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p><img src="https://i.loli.net/2021/10/05/i84axClGu2AokXY.jpg" alt="img"></p>
<p>在jekenis服务器本地构建，使用jekenis服务器的maven配置进行编译构建</p>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>构建成功后上传到指定部署服务器，仅编译成功后进行上传</p>
<p><img src="https://i.loli.net/2021/10/05/xyuPw2FXsRdIDpL.jpg" alt="img"></p>
<ul>
<li>Name：在服务列表中选择上传目标；</li>
<li>Source files：指定上传的jar包，支持正则通配（根据构建目录距离jar包位置的不同，会自动在服务器端创建不同深度的目录）。</li>
<li>Remote directory：可以指定上传目录，目录位于配置服务器时指定的根目录之下。</li>
<li>Exec command：上传成功后在上传后的服务器上执行的命令或脚本。</li>
</ul>
<blockquote>
<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>
</blockquote>
<h2 id="Js应用构建"><a href="#Js应用构建" class="headerlink" title="Js应用构建"></a>Js应用构建</h2><h3 id="新建任务-1"><a href="#新建任务-1" class="headerlink" title="新建任务"></a>新建任务</h3><p>选择一个自由风格的构建</p>
<p><img src="https://i.loli.net/2021/10/05/W48lXhm1DkjRvag.jpg" alt="img"></p>
<h3 id="构建包留存策略-1"><a href="#构建包留存策略-1" class="headerlink" title="构建包留存策略"></a>构建包留存策略</h3><p><img src="https://i.loli.net/2021/10/05/5XyWcCawtzI9JlV.jpg" alt="img"></p>
<h3 id="源码仓库-1"><a href="#源码仓库-1" class="headerlink" title="源码仓库"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>
<p><img src="https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg" alt="img"></p>
<p>配置源码仓库，指定动态tag分支</p>
<p><img src="https://i.loli.net/2021/10/06/sgqaEWYKMb5rA8z.png" alt="image-20211006134146871"></p>
<h3 id="自动构建选项-1"><a href="#自动构建选项-1" class="headerlink" title="自动构建选项"></a>自动构建选项</h3><p>取消自动构建选项</p>
<p><img src="https://i.loli.net/2021/10/05/WUG6PSjmNKFaH37.jpg" alt="img"></p>
<h3 id="构建环境"><a href="#构建环境" class="headerlink" title="构建环境"></a>构建环境</h3><p>指定构建环境，选择已配置的nodejs构建环境，在jekenis本地服务器进行编译构建</p>
<p><img src="https://i.loli.net/2021/10/05/gcNnHvzawXFKC76.jpg" alt="img"></p>
<h3 id="构建-1"><a href="#构建-1" class="headerlink" title="构建"></a>构建</h3><p>在jekenis本地服务器进行编译构建</p>
<p><img src="https://i.loli.net/2021/10/05/j2Z4QHn5qYSolFM.jpg" alt="img"></p>
<p>为方便后续上传，在构建环节执行了压缩命令，可视情况而定。</p>
<blockquote>
<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>
</blockquote>
<h3 id="上传-1"><a href="#上传-1" class="headerlink" title="上传"></a>上传</h3><p>将编译并压缩后的前端文件上传到指定服务器</p>
<p><img src="https://i.loli.net/2021/10/05/zjxrTqCF4QGvNLH.jpg" alt="img"></p>
<p>在服务器列表中选择目标，指定上传文件，填写上传成功后需执行的命令。因VUE编译多次会生成不同的文件，故需将编译后的文件一次性上传多个负载的服务器。</p>
<p>即重新选择一次上传步骤：</p>
<p><img src="https://i.loli.net/2021/10/05/m5ODJEU6vIx9n3L.jpg" alt="img"></p>
<p><img src="https://i.loli.net/2021/10/05/2Dsf1Mg7rq4vYdn.jpg" alt="img"></p>
<blockquote>
<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Jenkins</tag>
      </tags>
  </entry>
  <entry>
    <title>Alibaba Cloud Toolkit</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Alibaba-Cloud-Toolkit/</url>
    <content><![CDATA[<hr>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><ul>
<li>Alibaba Cloud Toolkit（后文简称Cloud Toolkit）可以帮助开发者更高效地<strong>部署、测试、开发和诊断应用</strong>。</li>
<li>Cloud Toolkit与主流IDE(IDEA, Eclipse等)及阿里云其他产品<strong>无缝集成</strong>，帮助您简化应用部署到服务器。</li>
<li>您还可以通过其内嵌的Arthas程序诊断、Terminal Shell终端和MySQL执行器等工具，简化应用开发、测试和诊断的过程。</li>
</ul>
<blockquote>
<p>缘由：由于博猪最近开发新项目，牵扯到各系统的更改，再加上本次更改牵扯到基础架构相关的表结构，慎重起见，博猪迁移了一套内网环境，方便开发联调测试。</p>
<p>本文章基于<a href="https://help.aliyun.com/product/29966.html">Alibaba Cloud Toolkit官方使用教程整理</a></p>
</blockquote>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>在IntelliJ IDEA顶部菜单栏中选择File &gt; Settings。</li>
<li>在Settings对话框的左侧导航栏中单击Plugins。</li>
<li>在Plugins区域单击Marketplace。</li>
<li>在搜索栏中输入<code>Alibaba Cloud Toolkit</code>。</li>
<li>等待下载、安装完成后，单击Restart IDE。</li>
</ol>
<blockquote>
<p>基于其他方式安装Cloud Toolkit如下:</p>
<ul>
<li><a href="https://help.aliyun.com/document_detail/29970.html?spm=a2c4g.11186623.6.551.3e2266fa2nf2fD">基于Eclipse安装Cloud Toolkit</a></li>
<li><a href="https://help.aliyun.com/document_detail/154213.html?spm=a2c4g.11186623.6.552.15772d6duW8x64">基于Visual Studio Code安装Cloud Toolkit</a></li>
<li><a href="https://help.aliyun.com/document_detail/112740.html?spm=a2c4g.11186623.6.553.73803da4coYWsV">基于PyCharm安装Cloud Toolkit</a></li>
</ul>
</blockquote>
<blockquote>
<p>注意：</p>
<p>如果服务器是Windows, 需要我们安装OpenSSL, 安装步骤可参考<a href="https://www.cnblogs.com/xijun-gu/p/16476708.html">Windows上安装配置SSH</a></p>
</blockquote>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="Alibaba-Cloud-Toolkit-部署到本地服务器"><a href="#Alibaba-Cloud-Toolkit-部署到本地服务器" class="headerlink" title="Alibaba Cloud Toolkit 部署到本地服务器"></a>Alibaba Cloud Toolkit 部署到本地服务器</h2><h3 id="选择部署服务器类别，本文主要演示部署内网服务器，所以选择第一选项"><a href="#选择部署服务器类别，本文主要演示部署内网服务器，所以选择第一选项" class="headerlink" title="选择部署服务器类别，本文主要演示部署内网服务器，所以选择第一选项"></a>选择部署服务器类别，本文主要演示部署内网服务器，所以选择第一选项</h3><p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uhpvqyznj30ga0a478t.jpg" alt="image.png"></p>
<h3 id="添加内网服务器配置"><a href="#添加内网服务器配置" class="headerlink" title="添加内网服务器配置"></a>添加内网服务器配置</h3><p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uhsk8pelj30hm0fjjtz.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uhuo3z8zj30hm0fj773.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uhzs55mhj30k40f6n31.jpg" alt="image.png"></p>
<h3 id="部署项目"><a href="#部署项目" class="headerlink" title="部署项目"></a>部署项目</h3><h4 id="项目增加配置"><a href="#项目增加配置" class="headerlink" title="项目增加配置"></a>项目增加配置</h4><p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uj1glancj30f306qgnr.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4uj2ewr7mj308m0eu0wb.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujbbe946j30t00jg7b4.jpg" alt="image.png"></p>
<blockquote>
<p>注意SpringCloud项目，Maven多模块打包需要单独配置打包项目。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujdpclfoj30kj0b2ad9.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujep6ew7j30q105dgns.jpg" alt="image.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujfv4nhij30m704jjsl.jpg" alt="image.png"></p>
<p>例如博猪本项目最终配置如下：</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujgt79zzj30t00jggqf.jpg" alt="image.png"></p>
</blockquote>
<h4 id="部署脚本"><a href="#部署脚本" class="headerlink" title="部署脚本"></a>部署脚本</h4><blockquote>
<p>博猪提供一个博猪常用的docker部署脚本。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置镜像名称s</span><br>img=cloud-tool-test<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置镜像标签(版本)</span><br>tag=v1.0.0<br><span class="hljs-meta prompt_"># </span><span class="language-bash">配置容器名称</span><br>container=cloud-tool-test<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断容器是否存在，存在则删除。</span><br>if sudo docker ps -a --filter name=^/$container$ | grep -i &quot;$container&quot;; then<br>  echo &quot;容器: $container 存在，删除容器.&quot;<br>  sudo docker stop &quot;$container&quot;<br>  sudo docker rm -f &quot;$container&quot;<br>else<br>  echo &quot;容器: $container 不存在&quot; <br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">判断镜像是否存在，如存在则删除</span><br>if sudo docker images --filter=reference=&quot;$img:$tag&quot; | grep -i &quot;$img&quot;; then<br>  echo &quot;镜像: $img:$tag 镜像存在, 删除镜像重新构建.&quot;<br>  sudo docker rmi $img:$tag<br>fi<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">构建新镜像</span><br>echo &quot;构建镜像....................&quot;<br>sudo docker build -t $img:$tag .<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务，挂载外部数据信息</span><br>echo &quot;启动容器服务!&quot;<br>sudo docker run -d -p 8888:8080 --net=host --restart=always --name $container $img:$tag<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">检测服务是否启动成功</span><br>if sudo docker ps --filter name=^/$container$ | grep -i &quot;up&quot;; then<br>    echo &quot;服务启动成功....................&quot;<br>else<br>    echo &quot;服务启动失败....................&quot;<br>fi<br></code></pre></td></tr></table></figure>

<h4 id="部署-1"><a href="#部署-1" class="headerlink" title="部署"></a>部署</h4><p>选中服务器配置运行即可。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h4ujo9olblj309w01n3ym.jpg" alt="image.png"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>IDEA</tag>
        <tag>Alibaba Cloud Toolkit</tag>
      </tags>
  </entry>
  <entry>
    <title>Archery教程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<blockquote>
<p>本文基于官方文档安装，有不太详细的地方请多多包涵，下方为官方文档连接：</p>
</blockquote>
<p><a href="https://archerydms.com/">Archery中文官方文档</a></p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Archery是<a href="https://github.com/jly8866/archer">archer</a>的分支项目，定位于SQL审核查询平台，旨在提升DBA的工作效率，支持多数据库的SQL上线和查询，同时支持丰富的MySQL运维功能，所有功能都兼容手机端操作</p>
</blockquote>
<h1 id="功能清单"><a href="#功能清单" class="headerlink" title="功能清单"></a>功能清单</h1><table>
<thead>
<tr>
<th align="left">查询</th>
<th align="left">审核</th>
<th align="left">执行</th>
<th align="left">备份</th>
<th align="left">数据字典</th>
<th align="left">慢日志</th>
<th align="left">会话管理</th>
<th align="left">账号管理</th>
<th align="left">参数管理</th>
<th align="left">数据归档</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">MySQL</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">√</td>
<td>√</td>
</tr>
<tr>
<td align="left">MsSQL</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td>×</td>
</tr>
<tr>
<td align="left">Redis</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td>×</td>
</tr>
<tr>
<td align="left">PgSQL</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td>×</td>
</tr>
<tr>
<td align="left">Oracle</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">√</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td>×</td>
</tr>
<tr>
<td align="left">MongoDB</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">√</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td align="left">×</td>
<td>×</td>
</tr>
</tbody></table>
<h1 id="部署升级"><a href="#部署升级" class="headerlink" title="部署升级"></a>部署升级</h1><blockquote>
<p>支持docker部署、手动部署，支持升级。</p>
<p>由于安装包部署略微繁琐，本文不提供介绍，详细请看上方文档地址，自行搭建，本次只是提供基于docker的部署教程。</p>
</blockquote>
<ul>
<li>docker部署</li>
<li>安装包部署</li>
</ul>
<h1 id="Docker部署"><a href="#Docker部署" class="headerlink" title="Docker部署"></a>Docker部署</h1><h2 id="安装Docker-compose"><a href="#安装Docker-compose" class="headerlink" title="安装Docker-compose"></a>安装Docker-compose</h2><blockquote>
<p>安装Docker-compose有两种方法：一个通过Python的pip安装；另外一个是通过连接。</p>
<p>本文会详细介绍两种方法。</p>
</blockquote>
<h3 id="通过pip安装"><a href="#通过pip安装" class="headerlink" title="通过pip安装"></a>通过pip安装</h3><h4 id="更新Python3-X版本"><a href="#更新Python3-X版本" class="headerlink" title="更新Python3.X版本"></a>更新Python3.X版本</h4><figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 进入安装包目录</span><br><span class="hljs-built_in">cd</span> /source<br><span class="hljs-comment"># 下载Python3安装包</span><br>wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz<br><span class="hljs-comment"># 解压</span><br>tar xzvf Python-3.7.0.tgz<br><span class="hljs-built_in">cd</span> Python-3.7.0<br><span class="hljs-built_in">mkdir</span> /usr/local/src/python3   <span class="hljs-comment">#这个是个人喜好放在这个目录</span><br></code></pre></td></tr></table></figure>

<h4 id="安装GC编译器"><a href="#安装GC编译器" class="headerlink" title="安装GC编译器"></a>安装GC编译器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum -y install gcc<br></code></pre></td></tr></table></figure>

<blockquote>
<p>先安装一下GC编译器，要不然编译失败，没办法安装。</p>
<p><strong>检查一下：</strong>要注意的是产生了：python3和pip3.7</p>
</blockquote>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">ls <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/src/</span>python3/bin<br></code></pre></td></tr></table></figure>

<h4 id="安装pip"><a href="#安装pip" class="headerlink" title="安装pip"></a>安装pip</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装依赖</span><br>yum install -y epel-release<br><span class="hljs-meta prompt_">#</span><span class="language-bash">安装pip</span><br>yum install -y python-pip<br><span class="hljs-meta prompt_">#</span><span class="language-bash">查看pip版本</span><br>pip --version<br><span class="hljs-meta prompt_">#</span><span class="language-bash">升级pip版本</span><br>pip install -U pip<br></code></pre></td></tr></table></figure>

<h4 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>pip install docker-compose<br></code></pre></td></tr></table></figure>

<h3 id="通过docker安装"><a href="#通过docker安装" class="headerlink" title="通过docker安装"></a>通过docker安装</h3><h4 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h4><blockquote>
<p>已安装docker该步骤略过。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com -o get-docker.sh | sudo sh<br></code></pre></td></tr></table></figure>

<h4 id="安装-Docker-Compos"><a href="#安装-Docker-Compos" class="headerlink" title="安装 Docker Compos"></a>安装 Docker Compos</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure>

<h2 id="下载REALEASE文件"><a href="#下载REALEASE文件" class="headerlink" title="下载REALEASE文件"></a>下载REALEASE文件</h2><blockquote>
<p>下载下图路径下的文件，里面包含项目执行的所需要的SQL以及依赖。</p>
</blockquote>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316105046.png" alt="image-20210316105036672"></p>
<h2 id="准备运行配置"><a href="#准备运行配置" class="headerlink" title="准备运行配置"></a>准备运行配置</h2><p>具体可参考：<a href="https://github.com/hhyo/Archery/tree/master/src/docker-compose">文档地址</a></p>
<blockquote>
<p>docker-compose.yml文件内的services可按照本身的运行环境来调整，同时注意检查版本号是否正确，比如说外部已经装好了mysql、redis、inception，就可以将对应的services删除，但是需要注意修改settings.py文件的相关配置，具体可以参考<a href="https://archerydms.com/installation/manual/#_5">修改配置</a></p>
</blockquote>
<h2 id="启动部署"><a href="#启动部署" class="headerlink" title="启动部署"></a>启动部署</h2><blockquote>
<p>下载 <a href="https://github.com/hhyo/archery/releases/">Releases</a>文件，解压后进入docker-compose文件夹,按照本文4.3步骤进行本地配置。</p>
<p>因本人使用的是新建的虚拟机，所以就按照默认配置进行执行了。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>docker-compose -f docker-compose.yml up -d<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">表结构初始化</span><br>docker exec -ti archery /bin/bash<br>cd /opt/archery<br>source /opt/venv4archery/bin/activate<br>python3 manage.py makemigrations sql  <br>python3 manage.py migrate <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">数据初始化</span><br>python3 manage.py dbshell&lt;sql/fixtures/auth_group.sql<br>python3 manage.py dbshell&lt;src/init_sql/mysql_slow_query_review.sql<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建管理用户</span><br>python3 manage.py createsuperuser<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重启</span><br>docker restart archery<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">日志查看和问题排查</span><br>docker logs archery -f --tail=50<br></code></pre></td></tr></table></figure>

<h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://127.0.0.1:9123/">http://127.0.0.1:9123</a></p>
<h2 id="启动后配置"><a href="#启动后配置" class="headerlink" title="启动后配置"></a>启动后配置</h2><p>在启动后 Archery 有一些配置(如Inception , 资源组, 权限组等)需要按需配置, 请详细阅读 <a href="https://archerydms.com/configuration/">配置项说明</a> , 按照自己的需要进行配置</p>
<h2 id="运行界面"><a href="#运行界面" class="headerlink" title="运行界面"></a>运行界面</h2><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316113345.png" alt="image-20210316113342723"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Archery</tag>
        <tag>MySql</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Maven/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Maven是意第绪语，意思是“知识的积累者”，最初是为了简化Jakarta Turbine项目中的构建过程。有几个项目，每个项目都有自己的Ant构建文件，所有项目都略有不同。JAR已检入CVS。我们想要一种标准的方式来构建项目，清晰地定义项目的组成，一种简单的方式来发布项目信息，以及一种在多个项目中共享JAR的方式。</p>
<p>结果是一个可以用于构建和管理任何基于Java的项目的工具。我们希望我们已经创建了一些东西，可以使Java开发人员的日常工作更加轻松，并且通常有助于理解任何基于Java的项目。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Maven官网地址：<a href="https://maven.apache.org/">https://maven.apache.org/</a></p>
<p><img src="https://i.loli.net/2021/10/06/wi56hbVS1LqjZYd.png" alt="image-20211006143204542"></p>
<p>进入上方官网地址，点击左侧<code>Download</code>，进入下载页面。</p>
<p><img src="https://i.loli.net/2021/10/06/km3iteEFAHdKxsz.png" alt="image-20211006143351772"></p>
<p>右键点击超链接，复制链接地址。</p>
<p>链接服务器，进入安装目录,博猪安装在：<code>/opt</code></p>
<p>使用<code>wget</code>进行下载，如果没有<code>wget</code>，请使用<code>yum -y install wget</code>先用yum安装。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>

<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">tar -zxvf apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>进入<code>/etc/profile.d/</code>目录，增加<code>maven.sh</code>环境脚本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">vim maven.sh<br></code></pre></td></tr></table></figure>

<p>增加环境变量</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> MAVEN_HOME=/opt/apache-maven-3.8.3<br><span class="hljs-built_in">export</span> PATH=<span class="hljs-variable">$&#123;MAVEN_HOME&#125;</span>/bin:<span class="hljs-variable">$&#123;PATH&#125;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意：如果是以普通用户身份运行，则需要增加可执行权限</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><code class="hljs sh">sudo <span class="hljs-built_in">chmod</span> +x /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>
</blockquote>
<p>使用<code>source</code>命令加载环境变量：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>

<h2 id="验证安装"><a href="#验证安装" class="headerlink" title="验证安装"></a>验证安装</h2><p>想要验证 Maven 软件安装，使用<code>mvn -version</code>命令，它将会打印出 Maven 版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mvn -version<br></code></pre></td></tr></table></figure>

<p>你将会看到类似下面的输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">Apache Maven 3.8.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)<br>Maven home: /opt/apache-maven-3.8.3<br>Java version: 11.0.5, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk-11.0.5.10-0.el8_0.x86_64<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: &quot;linux&quot;, version: &quot;4.18.0-80.7.1.el8_0.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;<br></code></pre></td></tr></table></figure>

<h1 id="配置国内镜像仓库"><a href="#配置国内镜像仓库" class="headerlink" title="配置国内镜像仓库"></a>配置国内镜像仓库</h1><p>配置maven仓库，设置阿里镜像仓库，一定要配置一下，国内的下载jar快些。</p>
<p>设置本地仓库存储地址：<code>/opt/apache-maven-3.8.3/repo</code>,进入配置路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /opt/apache-maven-3.8.3/conf<br>vi settings.xml<br></code></pre></td></tr></table></figure>

<p>修改仓库存储地址</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><code class="hljs awk">&lt;localRepository&gt;<span class="hljs-regexp">/opt/</span>apache-maven-<span class="hljs-number">3.8</span>.<span class="hljs-number">3</span><span class="hljs-regexp">/repo&lt;/</span>localRepository&gt;<br></code></pre></td></tr></table></figure>

<p>修改镜像仓库</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Linux</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Git分支管理流程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>有幸参与一次大型项目，人员较多，需求较多，代码管理方面值得学习，记录总结一下分支管理。</p>
<p>本文参考：</p>
<p><a href="https://blog.csdn.net/ligang2585116/category_2869531.html?spm=1001.2014.3001.5482">李刚的学习专栏</a></p>
<p><a href="https://www.pianshen.com/article/1702340951/">程序员大本营</a></p>
</blockquote>
<h1 id="管理流程简介"><a href="#管理流程简介" class="headerlink" title="管理流程简介"></a>管理流程简介</h1><h2 id="流程图例"><a href="#流程图例" class="headerlink" title="流程图例"></a>流程图例</h2><p>大体管理流程如下：</p>
<p><img src="https://z3.ax1x.com/2021/03/22/6ok62V.png"></p>
<p><img src="https://www.pianshen.com/images/752/5e42a4fa2ddcfadf8c02c39a9da9cc40.png"></p>
<h2 id="案例解析"><a href="#案例解析" class="headerlink" title="案例解析"></a>案例解析</h2><p>如上图所示：</p>
<blockquote>
<p>生产初始版本为v0.5,项目初始develop与master是保持一致的</p>
<p>现有新需求:</p>
<ul>
<li>平台注册功能</li>
<li>平台登录功能</li>
</ul>
<p>版本规划：</p>
<ul>
<li>平台注册功能v1.0版本上线</li>
<li>平台登录功能v1.1版本上线</li>
</ul>
<p>开发任务：</p>
<ul>
<li>注册功能由张三负责</li>
<li>登录功能由李四负责</li>
</ul>
</blockquote>
<h3 id="张三同学：v1-0版本开发到上线"><a href="#张三同学：v1-0版本开发到上线" class="headerlink" title="张三同学：v1.0版本开发到上线"></a>张三同学：v1.0版本开发到上线</h3><ul>
<li>从develop新建一个用于开发注册功能的分支</li>
<li>命名为feature_register</li>
<li>本地拉取分支代码，开发注册功能，测试，修改再测试等流程</li>
<li>开发完成，提交到develop，此时feature_register可以删除</li>
<li>从develop新建一个预发布分支release-v1.0</li>
<li>从release-v1.0打包发布到测试环境</li>
<li>测试修复bug，测试通过更新到master以及develop</li>
<li>master打包，打tag，tag信息为v1.0相关信息</li>
</ul>
<h3 id="李四同学：v1-1版本开发到上线"><a href="#李四同学：v1-1版本开发到上线" class="headerlink" title="李四同学：v1.1版本开发到上线"></a>李四同学：v1.1版本开发到上线</h3><ul>
<li>从develop新建一个用于开发登录功能的分支</li>
<li>命名为feature_login</li>
<li>本地拉取分支代码，开发登录功能，测试，修改再测试等流程</li>
<li>开发完成，提交到develop，此时feature_login可以删除</li>
<li>从develop新建一个预发布分支release-v1.0</li>
<li>从release-v1.0打包发布到测试环境</li>
<li>测试修复bug，测试通过更新到master以及develop</li>
<li>master打包，打tag，tag信息为v1.0相关信息</li>
</ul>
<blockquote>
<p>注：hotfix-xxx分支主要是针对master上bug的修复，修复完成之后需要把hotfix合并到maser，master打包，打tag，tag信息为hotfix相关信息，并发布生产，同时合并到develop分支，使develop和master一致，此时hotfix可删除。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA-Stram调试</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA-Stram%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>JAVA8的lambda的stream编程，给我们带来了很流畅(牛逼)的编程体验，但带来的问题也很明显：</p>
<p>下面粘贴一张博猪一个日常的代码片段：</p>
<p><img src="https://i.loli.net/2021/05/16/GMO19Rr65Uykbad.png" alt="image-20210516222157802.png"></p>
</blockquote>
<p>上面代码看着很简洁(zhaungbi)，但是带来的问题也很直接：</p>
<ul>
<li>方法可读性不好</li>
<li>调试困难，无法知道流程周转</li>
</ul>
<p>下面博猪给大家介绍一个博猪日常写stream时常用的一个神器：&#x3D;&#x3D;Stream-Trance&#x3D;&#x3D;,一个IDEA自带的调试神器，这个工具可以详细看到每一步操作的关系、结果，非常方便进行调试。</p>
<h1 id="Stream调试"><a href="#Stream调试" class="headerlink" title="Stream调试"></a>Stream调试</h1><p>下面通过一个Demo，让博猪给你演示一下神器是如何使用的。首先给大家贴一下没有注释的代码（很装逼的代码）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">45</span>,<span class="hljs-number">56</span>,<span class="hljs-number">23</span>,<span class="hljs-number">89</span>,<span class="hljs-number">34</span>,<span class="hljs-number">78</span>,<span class="hljs-number">56</span>);<br>Map&lt;Boolean, List&lt;Integer&gt;&gt; collect = list.stream()<br>        .filter(i -&gt; i * <span class="hljs-number">2</span> &gt; <span class="hljs-number">60</span>)<br>        .sorted()<br>        .map(i -&gt; i - <span class="hljs-number">10</span>)<br>        .distinct()<br>        .collect(Collectors.groupingBy(i -&gt; i &gt;= <span class="hljs-number">50</span>, Collectors.toList()));<br>System.out.println(collect);<br></code></pre></td></tr></table></figure>

<p>下面博猪贴一下有注释的代码，顺便理一下这一块的代码的流程：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//初始化数组</span><br>List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">45</span>, <span class="hljs-number">56</span>, <span class="hljs-number">23</span>, <span class="hljs-number">89</span>, <span class="hljs-number">34</span>, <span class="hljs-number">78</span>, <span class="hljs-number">56</span>);<br>Map&lt;Boolean, List&lt;Integer&gt;&gt; collect = list.stream()<br>        <span class="hljs-comment">//过滤 当前数字*2后大于60的,结果：[45,56,89,34,78,56]</span><br>        .filter(i -&gt; i * <span class="hljs-number">2</span> &gt; <span class="hljs-number">60</span>)<br>        <span class="hljs-comment">//默认排序,结果:[34,45,56,56,78,89]</span><br>        .sorted()<br>        <span class="hljs-comment">//每个值-10，成一个map：结果：&#123;24,35,46,46,68,79&#125;</span><br>        .map(i -&gt; i - <span class="hljs-number">10</span>)<br>        <span class="hljs-comment">//去重,结果：&#123;24,35,46,68,79&#125;</span><br>        .distinct()<br>        <span class="hljs-comment">//大于五十的分组，输出一个Map&lt;Boolean,Collection&gt;,结果：&#123;false=[24, 35, 46], true=[68, 79]&#125;</span><br>        .collect(Collectors.groupingBy(i -&gt; i &gt;= <span class="hljs-number">50</span>, Collectors.toList()));<br>System.out.println(collect);<br></code></pre></td></tr></table></figure>

<p>上面这段代码算是流程比较长的了，当然实际工作中可能遇到比这个还要复杂的，那博猪演示一下日常是怎么调试Stream流程的。</p>
<ul>
<li>在Stream那行打上断点。点击debug运行。</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/H9D6AIBzpVuUO1J.png" alt="image-20210516224707120.png"></p>
<ul>
<li>点击下方按钮</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/kCfM9RescBSY56T.png" alt="image-20210516224817756.png"></p>
<ul>
<li><p>然后自动进入当前 <code>Stream ​</code>跟踪调试窗口，默认Split 模式显示，上面会展示每个链式调用的选项卡，点击各个选项卡可以看对应每步的跟踪结果。如下面所示：</p>
<ul>
<li>初始流</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/irG98MsoLcwWK7j.png" alt="image-20210516224947403.png"></p>
<ul>
<li>过滤</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/pdXOtZ1eg3fEmCA.png" alt="image-20210516225139631.png"></p>
<ul>
<li>排序</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/KTpAJVIzayqiM7h.png" alt="image-20210516225158100.png"></p>
<ul>
<li>转map</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/uSknG6vzfbgQyEl.png" alt="image-20210516225215527.png"></p>
<ul>
<li>去重</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/sBdW1lf2NxVLUmg.png" alt="image-20210516225230717.png"></p>
<ul>
<li>结果</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/y6EzCFpfOjNmwo5.png" alt="image-20210516225249902.png"></p>
</li>
<li><p>还可以点击<code>Flat Mode</code>，查看完整的流程的运转</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/05/16/dNqs9ZXwrbgi4De.png" alt="image-20210516225407829.png"></p>
<h1 id="链式调试"><a href="#链式调试" class="headerlink" title="链式调试"></a>链式调试</h1><p>上方详细介绍了一下Stream的调试，但是平时也是使用一些Lambda的链式编程，那上述方法是否支持呢？</p>
<p>比如下方代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> Optional.of(<span class="hljs-string">&quot;will&quot;</span>)<br>        .map(s -&gt; s + <span class="hljs-string">&quot; hello&quot;</span>)<br>        .map(s -&gt; s + <span class="hljs-string">&quot; world!&quot;</span>).get();<br>System.out.println(str);<br></code></pre></td></tr></table></figure>

<p>OK，我们按照上方进行调试，调试图如下方所示：</p>
<p><img src="https://i.loli.net/2021/05/16/VKAsE5YGah8SIT2.png" alt="image-20210516230237419.png"></p>
<p>可惜， <code>Trace Current Stream Chain ​</code>按钮是灰色状态，不能进入，因为那个按钮只能被 <code>Stream ​</code>调试所用。</p>
<p><strong>那像这种非 Stream 链式调用怎么调试呢？</strong></p>
<p>断点进入后，可以选中需要调试的部分链式代码片断，然后右键选中 <code>Evaluate Expression ​</code>菜单（ALT + F8）进入表达式计算窗口，点击 <code>Evaluate ​</code>按钮开始计算：</p>
<p><img src="https://i.loli.net/2021/05/16/vNV6iIde2qsDzlC.png" alt="image-20210516230402779.png"></p>
<p><img src="https://i.loli.net/2021/05/16/lqGKfRJrHC7XojM.png" alt="image-20210516230429818.png"></p>
<p>计算无误，该表达式还可以自由编辑，非常强大。虽然没有像 <code>Stream ​</code>这样专属的调试面板，使用 <code>Evaluate Expression ​</code>也能达到调试链式调用的目的</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>安装Java8</title>
    <url>/2023/12/24/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/%E5%AE%89%E8%A3%85Java8/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>JAVA</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>信息安全等级保护认证</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E7%B3%BB%E7%BB%9F%E8%AE%A4%E8%AF%81/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AD%89%E7%BA%A7%E4%BF%9D%E6%8A%A4%E8%AE%A4%E8%AF%81/</url>
    <content><![CDATA[<blockquote>
<p>随着国内对网络安全的逐步重视，以及《网络安全法》的出台， 在金融、电力、广电、医疗、教育等行业，主管单位明确要求从业机构的信息系统（APP）要开展等级保护工作。落实到企业，包含等级保护认证和每年的护网活动等。</p>
</blockquote>
<h1 id="什么是等级保护？"><a href="#什么是等级保护？" class="headerlink" title="什么是等级保护？"></a>什么是等级保护？</h1><p>在中国，信息安全等级保护广义上为涉及到该工作的标准、产品、系统、信息等均依据等级保护思想的安全工作；狭义上一般指信息系统（APP）安全等级保护。</p>
<p>信息安全等级保护：</p>
<ul>
<li>对信息系统分等级进行安全保护和监管；</li>
<li>对信息安全产品的使用实行分等级管理；</li>
<li>对信息安全事件实行分等级响应、处置。</li>
</ul>
<h1 id="为什么要做等级保护？"><a href="#为什么要做等级保护？" class="headerlink" title="为什么要做等级保护？"></a>为什么要做等级保护？</h1><ul>
<li><strong>法律法规要求</strong></li>
</ul>
<p>《网络安全法》明确规定信息系统运营、使用单位应当按照网络安全等级保护制度要求，履行安全保护义务，如果拒不履行，将会受到相应处罚。</p>
<p>第二十一条：国家实行网络安全等级保护制度。网络运营者应当按照网络安全等级保护制度的要求，履行下列安全保护义务，保障网络免受干扰、破坏或者未经授权的访问，防止网络数据泄露或者被窃取、篡改。</p>
<ul>
<li><strong>行业要求</strong></li>
</ul>
<p>在金融、电力、广电、医疗、教育等行业，主管单位明确要求从业机构的信息系统（APP）要开展等级保护工作。</p>
<ul>
<li><strong>企业系统安全的需求</strong></li>
</ul>
<p>信息系统运营、使用单位通过开展等级保护工作可以发现系统内部的安全隐患与不足之处，可通过安全整改提升系统的安全防护能力，降低被攻击的风险。</p>
<h1 id="等级保护的分类"><a href="#等级保护的分类" class="headerlink" title="等级保护的分类"></a>等级保护的分类</h1><p>《信息安全等级保护管理办法》规定，国家信息安全等级保护坚持自主定级、自主保护的原则。信息系统的安全保护等级应当根据信息系统在国家安全、经济建设、社会生活中的重要程度，信息系统遭到破坏后对国家安全、社会秩序、公共利益以及公民、法人和其他组织的合法权益的危害程度等因素确定。信息系统的安全保护等级分为以下五级，一至五级等级逐级增高：</p>
<p>第一级，信息系统受到破坏后，会对公民、法人和其他组织的合法权益造成损害，但不损害国家安全、社会秩序和公共利益。第一级信息系统运营、使用单位应当依据国家有关管理规范和技术标准进行保护。</p>
<p><strong>第二级</strong>，信息系统受到破坏后，会对公民、法人和其他组织的合法权益产生严重损害，或者对社会秩序和公共利益造成损害，但不损害国家安全。国家信息安全监管部门对该级信息系统安全等级保护工作进行指导。</p>
<p><strong>第三级</strong>，信息系统受到破坏后，会对社会秩序和公共利益造成严重损害，或者对国家安全造成损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行监督、检查。</p>
<p>第四级，信息系统受到破坏后，会对社会秩序和公共利益造成特别严重损害，或者对国家安全造成严重损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行强制监督、检查。</p>
<p>第五级，信息系统受到破坏后，会对国家安全造成特别严重损害。国家信息安全监管部门对该级信息系统安全等级保护工作进行专门监督、检查。</p>
<h1 id="申请等级保护的流程"><a href="#申请等级保护的流程" class="headerlink" title="申请等级保护的流程"></a>申请等级保护的流程</h1><blockquote>
<p>如何申请等级保护认证呢？</p>
</blockquote>
<h2 id="总体申请流程"><a href="#总体申请流程" class="headerlink" title="总体申请流程"></a>总体申请流程</h2><p>等级保护通常需要5个步骤：</p>
<p>1.定级（企业自主定级-专家评审-主管部门审核-公安机关审核）<br>2.备案（企业提交备案材料-公安机关审核-发放备案证明）<br>3.测评（等级测评-三级每年测评一次）<br>4.建设整改（安全建设-安全整改）<br>5.监督检查（公安机关每年监督检查）</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/08/06/c99370996aa338ad.png"></p>
<h2 id="企业自己申请的流程"><a href="#企业自己申请的流程" class="headerlink" title="企业自己申请的流程"></a>企业自己申请的流程</h2><p>1.在定级备案的步骤，一级不需要备案仅需企业自主定级。二级、三级是大部分普通企业的信息系统定级。四级、五级普通企业不会涉及，通常是与国家相关（如等保四级-涉及民生的，如铁路、能源、电力等）的重要系统。根据地区不同备案文件修改递交通常需要1个月左右的时间。</p>
<p>2.定级备案后，寻找本地区测评机构进行等级测评。</p>
<p>3.根据测评评分(GBT22239-2019信息安全技术网络安全等级保护基本要求。具体分数需要测评后才能给出)对信息系统（APP）进行安全整改，如果企业没有专业的安全团队，需要寻找安全公司进行不同项目的整改。等级保护2.0三级有211项内容，通常企业需要根据自身情况采购安全产品完成整改。</p>
<p>4.进行安全建设整改后，通过测评。当地公安机关会进行监督检查包含定级备案测评、测评后抽查。</p>
<p>整个流程企业自行做等级保护，顺利的话3-4个月完成，如果不熟悉需要半年甚至更久。优势：与第三方企业对比几乎没有优势劣势：时间长、消耗人力成本高、技术人员不足还可能增加安全建设成本</p>
<h2 id="寻找第三方机构做等级保护"><a href="#寻找第三方机构做等级保护" class="headerlink" title="寻找第三方机构做等级保护"></a>寻找第三方机构做等级保护</h2><p>1.在定级备案步骤，有些等保机构会提出指导性意见协助企业提交定级报告。</p>
<p>2.第三方等保机构可以协助企业找到专业测评机构，测评机构提出整改意见，企业根据整改意见购买安全产品，完成测评。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>系统认证</category>
      </categories>
      <tags>
        <tag>信息安全等级保护认证</tag>
        <tag>系统认证</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA自定义目录</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h1 id="自定义IntelliJ-IDEA配置和插件的存放目录"><a href="#自定义IntelliJ-IDEA配置和插件的存放目录" class="headerlink" title="自定义IntelliJ IDEA配置和插件的存放目录"></a>自定义IntelliJ IDEA配置和插件的存放目录</h1><blockquote>
<p>因为个人电脑配置和个人习惯，不太习惯把配置相关的放到C盘，所以本次特地记录一下IDEA的配置和插件目录的自定义</p>
</blockquote>
<ul>
<li>下载安装IDEA</li>
<li>关闭IDEA</li>
<li>进入IDEA的安装目录</li>
</ul>
<blockquote>
<p>举个栗子：</p>
<p>本人安装目录：<code>D:\Program Files\IntelliJ IDEA 2021.2.1\bin\</code></p>
</blockquote>
<ul>
<li>打开<code>idea.properties</code>文件</li>
<li>修改配置存储路径</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Uncomment this option if you want to customize a path to the settings directory.</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</span><br></code></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>把上方注释的<code># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</code>复制一行</li>
<li>放开注释</li>
<li>更改成你自己配置的文件路径就行</li>
</ul>
<p>&#x3D;&#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&#x3D;&#x3D;</p>
</blockquote>
<ul>
<li>修改插件配置路径</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># Uncomment this option if you want to customize a path to the caches directory.</span><br><span class="hljs-comment">#---------------------------------------------------------------------</span><br><span class="hljs-comment"># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</span><br></code></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>把上方注释的<code># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</code>复制一行</li>
<li>放开注释</li>
<li>更改成你自己配置的文件路径就行</li>
</ul>
<p>&#x3D;&#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&#x3D;&#x3D;</p>
</blockquote>
<ul>
<li>保存后，再次运行idea，所有配置和插件都将保存在指定的目录；</li>
<li>后续再次重装系统或者重装idea只需要更改这个配置就行，相关配置还在，岂不美滋滋。</li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>追风筝的人观后感</title>
    <url>/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E8%A7%82%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<blockquote>
<p>为你，千千万万遍！For you，a thousand times over！</p>
</blockquote>
<blockquote>
<p>“许多年过去了，人们说陈年旧事可以被埋葬，然而我终于明白这是错的，因为往事会自行爬上来。”</p>
</blockquote>
<p>有没有那么一些人，一些事，停留在你的脑海深处，你不想要去回忆？你曾用尽全力把它们遗忘，埋葬，封印，超度……然而，当你以为已经可以遗忘到不再去想的时候，往事却又毫无征兆的在你生命某个瞬间，像电影放映一般，真实再现，一帧都没有落下……<br>最近又重温了一下高中的看过的追风筝的人，可能时过境迁，心境不同，感受颇多，特此记录一下。</p>
<hr>
<p><code>一个不能为自己挺身而出的孩子，长大后只能是个懦夫</code><br>阿米尔，生性懦弱，却又一直生活在自我欺骗的强大中。他怂恿哈桑做的很多不善的恶作剧，统统都由哈桑帮他无偿的背黑锅；就连最后看到哈桑为了帮他保护追到的风筝而被人侮辱强暴的时候，他仍然懦弱的跑开了；而后，为了逃避内心的谴责和独占父亲的宠爱，阿米尔想让父亲把哈桑父子赶出家门，在被拒绝之后，又导演了一出监守自盗栽赃诬陷的把戏，企图让哈桑永远的消失在面前。<br>哈桑，虽出身低微，却勤劳勇敢，朴实忠贞。他以一生兑现着对阿米尔少爷的忠诚，从小为他出头，为他被黑锅，为他追风筝，为他挣名声，就连洞悉了阿米尔的诬陷把戏后，仍然一声不吭的甘愿背负。一个虽卑微，虽没有太多文化，却无限完美的男孩儿形象。</p>
<p>是的，曾几何时，我们都是孩子，我们都有着自己内心深处小心呵护的自尊与懦弱，我们或贫穷或富裕或懦弱或勇敢或虚伪或真实，在大人们的眼中，这或许都是小孩子的把戏，小孩子的无知，小孩子的不懂事，小孩子的无心之失。</p>
<p>然而事实真的是这样吗？如果一个孩子从小就不能为自己和自己的伙伴挺身而出一次，那么长大之后，他就真的只能是一个懦夫。</p>
<p>如果你曾经是阿米尔，你会为自己的懦弱而给自己的忠诚玩伴带来的伤害而忏悔，并勇敢面对，自我救赎吗？<br>如果你曾经是哈桑，你会为自己有这样一个懦弱，自私，见死不救的玩伴却忠诚到底不离不弃吗？</p>
<p>答案或许不言自明，做阿米尔难，做哈桑更难。但哪一个才是你自己？<br><strong>为你，千千万万次！</strong></p>
<hr>
<p><code>你从我身上看到什么?     一辈子！</code><br>没有读过书的哈桑，或许讲不出什么经典的语句，但每一句质朴的话，都是他用一生兑现的承诺。</p>
<p>哈桑从出生起叫的第一个人名就是阿米尔，一生干的最多的事，就是为阿米尔追风筝，直到最后，也是被塔利班杀害在了为阿米尔家驻守的大房子里面。</p>
<p>我常常在想，哈桑临死的那一刻是安然的么？是可以瞑目的么？书中没有讲，但我觉得他应该是安然的，因为以哈桑的性格，他在生命的最后一刻都坚守在了自己少爷家的祖宅前面，虽然那一刻，他的少爷可能已在千里之外享受这他的另一种人生，可能祖宅对他而言也没有那么的重要，但是，至少对于哈桑，他是重要的，也是这一生当中或许唯一的重要。</p>
<p>我们的人生有多少次承诺没有兑现？或许，是我们找了种种理由去解释它的无法兑现，以此消除我们内心的亏欠，以此自我欺骗的说服自己没有兑现的理所当然，好在以后的日子里悠然生活，安然入睡。为此，我们可能一次又一次的撒谎，骗别人也骗自己，好让自己在未来的故事里，活得坦然一些。</p>
<p>然而，真相就在那里，它不会因为你的无视、掩盖、编造和涂抹就变得不再真实，它永远印刻在岁月里，拷问着你的灵魂。不要以那时还小作为最好的理由，因为有人为你将承诺放在了心上，你却将它踩在脚下。</p>
<p>一日是一生的缩影。</p>
<p><strong>再次成为好人的路！</strong></p>
<hr>
<p><code>“我知道电话线连着的，并不只是拉辛汗，还有我过去那些未曾赎还的罪行。”</code></p>
<p>阿米尔虽然幸运的从战乱中的阿富汗逃了出去，再后来的日子里过着平静而殷实的生活，然而他并没有能够逃过灵魂的拷问，至此以后的半生，他都反复的被自责和愧疚所煎熬着。<br>也许，在自责和煎熬中，阿米尔其实已经踏出了自我救赎的第一步，意识的自我救赎，至少童年的那段阴影能够笼罩他后来万里之外的人生，就证明了阿米尔骨子里的善其实一直都在，只是在懦弱和患得患失中，始终被他人性的恶所胁迫着，无法展露真容。</p>
<p>没有良心，没有美德的人，不会痛苦。</p>
<p>因此，阿米尔的痛苦便来自于他灵魂深处潜藏着的良心与美德，它们一直在折磨着他，也在督促着他，尽快走上自我救赎的道路。  </p>
<p>我的离开很久远了，久远的足以遗忘，也足以被遗忘。</p>
<p>终于，阿米尔冒着战火硝烟回到了阿富汗，为的只是去寻找已故童年玩伴哈桑的儿子索拉博，并排除万难，将他带回到了自己的身边。</p>
<p>时过境迁，阿米尔回到了故土，早已物是人非，曾经那个为他千千万万次追风筝的人早已逝去，有些东西，人生中错过了，就不会再得到。那些被风吹落的风筝，那些见证了你过往的人，还有那些被岁月封存的记忆，会在晨曦中拔地而起，而后飘然远去。</p>
<p>故事到这里，或许该结尾了，阿米尔终于在经过几十年的良心拷问和灵魂煎熬之后，冲破了那个曾经懦弱逃避的自我，重新坚强的面对自己的不堪过往，并勇敢的穿越烽火硝烟，回到那个故事最初的地方，获得了重新改写人生的机会，完成了自我的救赎。</p>
<p>我不知道，每个人的一生中，是否都有这样的机会，找到那条重新成为好人的路，或许我们都不认为自己是坏人，当然阿米尔也不是，但是，不可否认的，我们都有那个不敢面对的自己，如果可以，我说如果可以的话，你敢像阿米尔那样回到最初，翻出那个曾经不敢面对的自己，将它带出尘埃，让结局重新改写吗？</p>
<p><strong>你想要我追那只风筝给你吗？</strong></p>
<hr>
<p><code>“我很高兴终于有人识破我的真面目，我装得太累了！”</code></p>
<p>阿米尔的前半生都在斗风筝，也是斗风筝的高手，却从未有一次去追过风筝，因为前半生，他不需要追，有他的哈桑为他去追，千千万万次。</p>
<p>这一次，在他的后半生里，他第一次追风筝，为哈桑的儿子索拉博而追。</p>
<p>我们可以相信，追回的，不只是风筝，还有那许许多多承载浸透在风筝里的说了和没有说的过往，还有那许许多多完成了和未完成的心愿。</p>
<p>人生上半场，我们都在拼命往前，在匆忙赶路中，不断的接受现实和丢失那个最初的自己，但我们却总是自我安慰说，这就是生活，我也是被逼无奈，于是继续伪装，继续逃避，继续自我麻醉。</p>
<p>我们怕回头，我们不敢回头，于是，一个个装作没有遗憾，也没有缺失一样的继续生活。</p>
<p>我们或多或少的，都在自己的人生中追逐着自己的那一枚风筝，为此，我们奔跑着，跳跃着，翻滚着，哭闹着，厮打着，只知向前，眼中心里想的都是得到它。 或许我们还曾为此选择放弃、背叛、欺骗、隐忍、牺牲，可是那些得到是否真是生命中的必须，而那些失去是否才真的弥足珍贵呢？</p>
<p>或许，人到中年，很多人已经觉得见惯了生活的残忍从而学会了自我的保护，很多人已经对自我之外的其他任何不再感兴趣，即使再有哈桑为我们无条件付出，他也觉得是理所当然；再有牺牲和背叛，他也觉得是顺理成章。</p>
<p>如果，之前你没有觉得这是一种负罪需要自我的救赎，你觉得不少人也都这样，所以我这样也是被逼无奈；那么之后，请你明白，你就是你，你的决定也就只是你的决定，与他人无关，即使你可以声称是受了他人的影响，是受了社会的胁迫，但请记住，你的人生最终只由你个人书写。</p>
<p>所以，如果在某一天里，或是读了这篇文章过后，无论是为谁，就当是为我们自己，为那些生命里为你默默付出过，你却还没来得及感谢的人，回到那里，别只顾着斗风筝，为他们追一次风筝，哪怕就一次！</p>
]]></content>
      <categories>
        <category>拥抱世界吧</category>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>感言</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA常用功能</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>记录一下我IDEA常用配置，便于安装配置。</p>
<p>快捷键摘自：<a href="https://blog.csdn.net/qq_38963960">D离歌</a></p>
</blockquote>
<h1 id="常用配置"><a href="#常用配置" class="headerlink" title="常用配置"></a>常用配置</h1><h2 id="设置字体样式及大小"><a href="#设置字体样式及大小" class="headerlink" title="设置字体样式及大小"></a>设置字体样式及大小</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li>Font</li>
</ul>
<blockquote>
<p>个人常用字体：Font:<code>Courier New</code>,Size”:<code>15</code>,Line spacing:<code>1.2</code>,Fallback Font:<code>Consolas</code></p>
</blockquote>
<h2 id="取消打开项目默认配置"><a href="#取消打开项目默认配置" class="headerlink" title="取消打开项目默认配置"></a>取消打开项目默认配置</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li>System Settings</li>
<li>取消<code>Reopen last project on startup</code></li>
</ul>
<h2 id="鼠标更改窗口字体大小"><a href="#鼠标更改窗口字体大小" class="headerlink" title="鼠标更改窗口字体大小"></a>鼠标更改窗口字体大小</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li><code>Editor</code></li>
<li><code>General</code></li>
<li>取消<code>Reopen last project on startup</code></li>
</ul>
<h2 id="方法线"><a href="#方法线" class="headerlink" title="方法线"></a>方法线</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li><code>Editor</code></li>
<li><code>Apperance</code></li>
<li>勾选<code>Show method separators</code></li>
</ul>
<h2 id="提示不区分大小写"><a href="#提示不区分大小写" class="headerlink" title="提示不区分大小写"></a>提示不区分大小写</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li><code>Editor</code></li>
<li><code>Code Completion</code></li>
<li>取消勾选<code>Match case</code></li>
</ul>
<h2 id="自动导入"><a href="#自动导入" class="headerlink" title="自动导入"></a>自动导入</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li><code>Editor</code></li>
<li><code>General</code></li>
<li><code>Auto Import</code></li>
<li>勾选<code>Add unambiguous imports on the fly</code></li>
<li>勾选<code>Optimize imports on the fly (for current project)</code></li>
</ul>
<h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><ul>
<li><code>CTRL+ALT+S</code>进入设置</li>
<li><code>Editor</code></li>
<li><code>File Encodings</code></li>
<li>相关编码设置成<code>UTF-8</code></li>
<li><code>BOM for new UTF-8 files</code>选择<code>Create UTF-8 files:</code>中的<code>with NO BOM</code></li>
</ul>
<h1 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h1><ul>
<li>.ignore												<code>（Git 忽略文件)</code></li>
<li>Alibaba Java Coding Guidelines     <code>（阿里编码规范代码检查）</code></li>
<li>Free MyBatis plugin                         <code>（Mybatis/Mybatis Plus 快速dao到xml工具）</code></li>
<li>GitToolBox                                         <code>Git工具箱</code></li>
<li>Lombok                                              <code>小辣椒工具</code></li>
<li>Protocol Buffer Editor                     <code>Protocol Buffer 工具</code></li>
<li>sequenceDiagram                           <code>Java方法调用时序图</code></li>
<li>Translation                                        <code>谷歌翻译工具</code></li>
</ul>
<h1 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h1><blockquote>
<p>对于快捷键我推荐使用默认用IDEA默认的快捷键</p>
</blockquote>
<h2 id="Ctrl"><a href="#Ctrl" class="headerlink" title="Ctrl"></a>Ctrl</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + F</td>
<td align="left">在当前文件进行文本查找 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + R</td>
<td align="left">在当前文件进行文本替换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Z</td>
<td align="left">撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Y</td>
<td align="left">删除光标所在行 或 删除选中的行 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + X</td>
<td align="left">剪切光标所在行 或 剪切选择内容<code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + C</td>
<td align="left">复制光标所在行 或 复制选择内容</td>
</tr>
<tr>
<td align="left">Ctrl + D</td>
<td align="left">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + W</td>
<td align="left">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + E</td>
<td align="left">显示最近打开的文件记录列表</td>
</tr>
<tr>
<td align="left">Ctrl + N</td>
<td align="left">根据输入的 <strong>类名</strong> 查找类文件</td>
</tr>
<tr>
<td align="left">Ctrl + G</td>
<td align="left">在当前文件跳转到指定行处</td>
</tr>
<tr>
<td align="left">Ctrl + J</td>
<td align="left">插入自定义动态代码模板</td>
</tr>
<tr>
<td align="left">Ctrl + P</td>
<td align="left">方法参数提示显示</td>
</tr>
<tr>
<td align="left">Ctrl + Q</td>
<td align="left">光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>
</tr>
<tr>
<td align="left">Ctrl + U</td>
<td align="left">前往当前光标所在的方法的父类的方法 &#x2F; 接口定义</td>
</tr>
<tr>
<td align="left">Ctrl + B</td>
<td align="left">进入光标所在的方法&#x2F;变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td>
</tr>
<tr>
<td align="left">Ctrl + K</td>
<td align="left">版本控制提交项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="left">Ctrl + T</td>
<td align="left">版本控制更新项目，需要此项目有加入到版本控制才可用</td>
</tr>
<tr>
<td align="left">Ctrl + H</td>
<td align="left">显示当前类的层次结构</td>
</tr>
<tr>
<td align="left">Ctrl + O</td>
<td align="left">选择可重写的方法</td>
</tr>
<tr>
<td align="left">Ctrl + I</td>
<td align="left">选择可继承的方法</td>
</tr>
<tr>
<td align="left">Ctrl + +</td>
<td align="left">展开代码</td>
</tr>
<tr>
<td align="left">Ctrl + -</td>
<td align="left">折叠代码</td>
</tr>
<tr>
<td align="left">Ctrl + &#x2F;</td>
<td align="left">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + [</td>
<td align="left">移动光标到当前所在代码的花括号开始位置</td>
</tr>
<tr>
<td align="left">Ctrl + ]</td>
<td align="left">移动光标到当前所在代码的花括号结束位置</td>
</tr>
<tr>
<td align="left">Ctrl + F1</td>
<td align="left">在光标所在的错误代码出显示错误信息</td>
</tr>
<tr>
<td align="left">Ctrl + F3</td>
<td align="left">调转到所选中的词的下一个引用位置</td>
</tr>
<tr>
<td align="left">Ctrl + F4</td>
<td align="left">关闭当前编辑文件</td>
</tr>
<tr>
<td align="left">Ctrl + F8</td>
<td align="left">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>
</tr>
<tr>
<td align="left">Ctrl + F9</td>
<td align="left">执行 Make Project 操作</td>
</tr>
<tr>
<td align="left">Ctrl + F11</td>
<td align="left">选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签</td>
</tr>
<tr>
<td align="left">Ctrl + F12</td>
<td align="left">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>
</tr>
<tr>
<td align="left">Ctrl + Tab</td>
<td align="left">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>
</tr>
<tr>
<td align="left">Ctrl + Enter</td>
<td align="left">智能分隔行</td>
</tr>
<tr>
<td align="left">Ctrl + End</td>
<td align="left">跳到文件尾</td>
</tr>
<tr>
<td align="left">Ctrl + Home</td>
<td align="left">跳到文件头</td>
</tr>
<tr>
<td align="left">Ctrl + Space</td>
<td align="left">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Delete</td>
<td align="left">删除光标后面的单词或是中文句</td>
</tr>
<tr>
<td align="left">Ctrl + BackSpace</td>
<td align="left">删除光标前面的单词或是中文句</td>
</tr>
<tr>
<td align="left">Ctrl + 1,2,3…9</td>
<td align="left">定位到对应数值的书签位置</td>
</tr>
<tr>
<td align="left">Ctrl + 左键单击</td>
<td align="left">在打开的文件标题上，弹出该文件路径</td>
</tr>
<tr>
<td align="left">Ctrl + 光标定位</td>
<td align="left">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>
</tr>
<tr>
<td align="left">Ctrl + 左方向键</td>
<td align="left">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置</td>
</tr>
<tr>
<td align="left">Ctrl + 右方向键</td>
<td align="left">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置</td>
</tr>
<tr>
<td align="left">Ctrl + 前方向键</td>
<td align="left">等效于鼠标滚轮向前效果</td>
</tr>
<tr>
<td align="left">Ctrl + 后方向键</td>
<td align="left">等效于鼠标滚轮向后效果</td>
</tr>
</tbody></table>
<h2 id="Alt"><a href="#Alt" class="headerlink" title="Alt"></a>Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Alt + &#96;</td>
<td align="left">显示版本控制常用操作菜单弹出层</td>
</tr>
<tr>
<td align="left">Alt + Q</td>
<td align="left">弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td>
</tr>
<tr>
<td align="left">Alt + F1</td>
<td align="left">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>
</tr>
<tr>
<td align="left">Alt + F2</td>
<td align="left">对于前面页面，显示各类浏览器打开目标选择弹出层</td>
</tr>
<tr>
<td align="left">Alt + F3</td>
<td align="left">选中文本，逐个往下查找相同文本，并高亮显示</td>
</tr>
<tr>
<td align="left">Alt + F7</td>
<td align="left">查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td>
</tr>
<tr>
<td align="left">Alt + F8</td>
<td align="left">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>
</tr>
<tr>
<td align="left">Alt + Home</td>
<td align="left">定位 &#x2F; 显示到当前文件的 <code>Navigation Bar</code></td>
</tr>
<tr>
<td align="left">Alt + Enter</td>
<td align="left">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Alt + Insert</td>
<td align="left">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</td>
</tr>
<tr>
<td align="left">Alt + 左方向键</td>
<td align="left">按左方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td align="left">Alt + 右方向键</td>
<td align="left">按右方向切换当前已打开的文件视图</td>
</tr>
<tr>
<td align="left">Alt + 前方向键</td>
<td align="left">当前光标跳转到当前文件的前一个方法名位置</td>
</tr>
<tr>
<td align="left">Alt + 后方向键</td>
<td align="left">当前光标跳转到当前文件的后一个方法名位置</td>
</tr>
<tr>
<td align="left">Alt + 1,2,3…9</td>
<td align="left">显示对应数值的选项卡，其中 1 是 Project 用得最多</td>
</tr>
</tbody></table>
<h2 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Shift + F1</td>
<td align="left">如果有外部文档可以连接外部文档</td>
</tr>
<tr>
<td align="left">Shift + F2</td>
<td align="left">跳转到上一个高亮错误 或 警告位置</td>
</tr>
<tr>
<td align="left">Shift + F3</td>
<td align="left">在查找模式下，查找匹配上一个</td>
</tr>
<tr>
<td align="left">Shift + F4</td>
<td align="left">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>
</tr>
<tr>
<td align="left">Shift + F6</td>
<td align="left">对文件 &#x2F; 文件夹 重命名</td>
</tr>
<tr>
<td align="left">Shift + F7</td>
<td align="left">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>
</tr>
<tr>
<td align="left">Shift + F8</td>
<td align="left">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>
</tr>
<tr>
<td align="left">Shift + F9</td>
<td align="left">等效于点击工具栏的 <code>Debug</code> 按钮</td>
</tr>
<tr>
<td align="left">Shift + F10</td>
<td align="left">等效于点击工具栏的 <code>Run</code> 按钮</td>
</tr>
<tr>
<td align="left">Shift + F11</td>
<td align="left">弹出书签显示层</td>
</tr>
<tr>
<td align="left">Shift + Tab</td>
<td align="left">取消缩进</td>
</tr>
<tr>
<td align="left">Shift + ESC</td>
<td align="left">隐藏当前 或 最后一个激活的工具窗口</td>
</tr>
<tr>
<td align="left">Shift + End</td>
<td align="left">选中光标到当前行尾位置</td>
</tr>
<tr>
<td align="left">Shift + Home</td>
<td align="left">选中光标到当前行头位置</td>
</tr>
<tr>
<td align="left">Shift + Enter</td>
<td align="left">开始新一行。光标所在行下空出一行，光标定位到新行位置</td>
</tr>
<tr>
<td align="left">Shift + 左键单击</td>
<td align="left">在打开的文件名上按此快捷键，可以关闭当前打开文件</td>
</tr>
<tr>
<td align="left">Shift + 滚轮前后滚动</td>
<td align="left">当前文件的横向滚动轴滚动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Alt"><a href="#Ctrl-Alt" class="headerlink" title="Ctrl + Alt"></a>Ctrl + Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Alt + L</td>
<td align="left">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + O</td>
<td align="left">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + I</td>
<td align="left">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + T</td>
<td align="left">对选中的代码弹出环绕选项弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + J</td>
<td align="left">弹出模板选择窗口，讲选定的代码加入动态模板中</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + H</td>
<td align="left">调用层次</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + B</td>
<td align="left">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + V</td>
<td align="left">快速引进变量</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Y</td>
<td align="left">同步、刷新</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + S</td>
<td align="left">打开 IntelliJ IDEA 系统设置</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F7</td>
<td align="left">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + F11</td>
<td align="left">切换全屏模式</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Enter</td>
<td align="left">光标所在行上空出一行，光标定位到新行</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Home</td>
<td align="left">弹出跟当前文件有关联的文件弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + Space</td>
<td align="left">类名自动完成</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 左方向键</td>
<td align="left">退回到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 右方向键</td>
<td align="left">前进到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 前方向键</td>
<td align="left">在查找模式下，跳到上个查找的文件</td>
</tr>
<tr>
<td align="left">Ctrl + Alt + 后方向键</td>
<td align="left">在查找模式下，跳到下个查找的文件</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift"><a href="#Ctrl-Shift" class="headerlink" title="Ctrl + Shift"></a>Ctrl + Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Shift + F</td>
<td align="left">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + R</td>
<td align="left">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + J</td>
<td align="left">自动将下一行合并到当前行末尾 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Z</td>
<td align="left">取消撤销 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + W</td>
<td align="left">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + N</td>
<td align="left">通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + U</td>
<td align="left">对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + T</td>
<td align="left">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + C</td>
<td align="left">复制当前文件磁盘路径到剪贴板</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + V</td>
<td align="left">弹出缓存的最近拷贝的内容管理器弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + E</td>
<td align="left">显示最近修改的文件列表的弹出层</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + H</td>
<td align="left">显示方法层次结构</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + B</td>
<td align="left">跳转到类型声明处</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + I</td>
<td align="left">快速查看光标所在的方法 或 类的定义</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + A</td>
<td align="left">查找动作 &#x2F; 设置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + &#x2F;</td>
<td align="left">代码块注释 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + [</td>
<td align="left">选中从光标所在位置到它的顶部中括号位置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + ]</td>
<td align="left">选中从光标所在位置到它的底部中括号位置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + +</td>
<td align="left">展开所有代码</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + -</td>
<td align="left">折叠所有代码</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F7</td>
<td align="left">高亮显示所有该选中文本，按Esc高亮消失</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F8</td>
<td align="left">在 Debug 模式下，指定断点进入条件</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F9</td>
<td align="left">编译选中的文件 &#x2F; 包 &#x2F; Module</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + F12</td>
<td align="left">编辑器最大化</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Space</td>
<td align="left">智能代码提示</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Enter</td>
<td align="left">自动结束代码，行末自动添加分号 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Backspace</td>
<td align="left">退回到上次修改的地方</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 1,2,3…9</td>
<td align="left">快速添加指定数值的书签</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 左方向键</td>
<td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 右方向键</td>
<td align="left">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 左方向键</td>
<td align="left">在光标焦点是在工具选项卡上，缩小选项卡区域</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 右方向键</td>
<td align="left">在光标焦点是在工具选项卡上，扩大选项卡区域</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 前方向键</td>
<td align="left">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + 后方向键</td>
<td align="left">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>
</tr>
</tbody></table>
<h2 id="Alt-Shift"><a href="#Alt-Shift" class="headerlink" title="Alt + Shift"></a>Alt + Shift</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Alt + Shift + N</td>
<td align="left">选择 &#x2F; 添加 task</td>
</tr>
<tr>
<td align="left">Alt + Shift + F</td>
<td align="left">显示添加到收藏夹弹出层</td>
</tr>
<tr>
<td align="left">Alt + Shift + C</td>
<td align="left">查看最近操作项目的变化情况列表</td>
</tr>
<tr>
<td align="left">Alt + Shift + F</td>
<td align="left">添加到收藏夹</td>
</tr>
<tr>
<td align="left">Alt + Shift + I</td>
<td align="left">查看项目当前文件</td>
</tr>
<tr>
<td align="left">Alt + Shift + F7</td>
<td align="left">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>
</tr>
<tr>
<td align="left">Alt + Shift + F9</td>
<td align="left">弹出 <code>Debug</code> 的可选择菜单</td>
</tr>
<tr>
<td align="left">Alt + Shift + F10</td>
<td align="left">弹出 <code>Run</code> 的可选择菜单</td>
</tr>
<tr>
<td align="left">Alt + Shift + 左键双击</td>
<td align="left">选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句</td>
</tr>
<tr>
<td align="left">Alt + Shift + 前方向键</td>
<td align="left">移动光标所在行向上移动</td>
</tr>
<tr>
<td align="left">Alt + Shift + 后方向键</td>
<td align="left">移动光标所在行向下移动</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift-Alt"><a href="#Ctrl-Shift-Alt" class="headerlink" title="Ctrl + Shift + Alt"></a>Ctrl + Shift + Alt</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Ctrl + Shift + Alt + V</td>
<td align="left">无格式黏贴</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + N</td>
<td align="left">前往指定的变量 &#x2F; 方法</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + S</td>
<td align="left">打开当前项目设置</td>
</tr>
<tr>
<td align="left">Ctrl + Shift + Alt + C</td>
<td align="left">复制参考信息</td>
</tr>
</tbody></table>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><table>
<thead>
<tr>
<th align="left">快捷键</th>
<th align="left">介绍</th>
</tr>
</thead>
<tbody><tr>
<td align="left">F2</td>
<td align="left">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td>
</tr>
<tr>
<td align="left">F3</td>
<td align="left">在查找模式下，定位到下一个匹配处</td>
</tr>
<tr>
<td align="left">F4</td>
<td align="left">编辑源</td>
</tr>
<tr>
<td align="left">F7</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>
</tr>
<tr>
<td align="left">F8</td>
<td align="left">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>
</tr>
<tr>
<td align="left">F9</td>
<td align="left">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>
</tr>
<tr>
<td align="left">F11</td>
<td align="left">添加书签</td>
</tr>
<tr>
<td align="left">F12</td>
<td align="left">回到前一个工具窗口</td>
</tr>
<tr>
<td align="left">Tab</td>
<td align="left">缩进</td>
</tr>
<tr>
<td align="left">ESC</td>
<td align="left">从工具窗口进入代码文件窗口</td>
</tr>
<tr>
<td align="left">连按两次Shift</td>
<td align="left">弹出 <code>Search Everywhere</code> 弹出层</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>BeetlSql</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Beetl&amp;BeetlSql/BeetlSql/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>因本人项目需要接触了一下国内一款ORM框架，感觉用着很爽，项目易于管理，特此介绍一下。详情请点解下方官网：</p>
<p><a href="http://ibeetl.com/">BeetlSql官网</a></p>
</blockquote>
<h1 id="BeetlSql是什么"><a href="#BeetlSql是什么" class="headerlink" title="BeetlSql是什么"></a>BeetlSql是什么</h1><p>BeetlSQL 是一个全功能 DAO 工具，同时具有 Hibernate 优点 &amp; Mybatis 优点功能，适用于承认以 SQL 为中心，同时又需求工具能自动能生成大量常用的 SQL 的应用。</p>
<h1 id="BeetlSql优点"><a href="#BeetlSql优点" class="headerlink" title="BeetlSql优点"></a>BeetlSql优点</h1><p>BeetSql是一个全功能DAO工具， 同时具有Hibernate 优点 &amp; Mybatis优点功能，适用于承认以SQL为中心，同时又需求工具能自动能生成大量常用的SQL的应用。</p>
<ul>
<li><p>开发效率高</p>
<blockquote>
<p>无需注解，自动使用大量内置SQL，轻易完成增删改查功能，节省50%的开发工作量。 数据模型支持Pojo，也支持Map&#x2F;List这种快速模型，也支持混合模型。 SQL 模板基于Beetl实现，更容易写和调试，以及扩展。 可以针对单个表(或者视图）代码生成pojo类和sql模版，甚至是整个数据库。能减少代码编写工作量。</p>
</blockquote>
</li>
<li><p>易于维护</p>
<blockquote>
<p>SQL 以更简洁的方式，Markdown方式集中管理，同时方便程序开发和数据库SQL调试。可以自动将sql文件映射为dao接口类。灵活直观的支持支持一对一，一对多，多对多关系映射而不引入复杂的OR Mapping概念和技术。具备Interceptor功能，可以调试，性能诊断SQL，以及扩展其他功能</p>
</blockquote>
</li>
<li><p>其他特色</p>
<blockquote>
<p>内置支持主从数据库支持的开源工具，支持跨数据库平台，开发者所需工作减少到最小，目前跨数据库支持MySql、Postgres、Oracle、SQLServer、h2、SQLite、DB2。</p>
</blockquote>
<hr>
<p>以上来自官网介绍。一下为本人感受：</p>
</li>
<li><p>中文文档全面</p>
<blockquote>
<ul>
<li>中文官网解析非常全面清晰，API解释非常清晰，易于理解。</li>
<li>方法内部参数解析清晰、完成，可随时观看</li>
</ul>
</blockquote>
</li>
<li><p>SQL默认debug，输出打印美化，方便排查问题和SQL分析</p>
<blockquote>
<ul>
<li>相对于复杂SQL分析排查我觉得BeetlSql自带的console日志打印输出非常好用。</li>
<li>SQLconsole打印优雅。</li>
</ul>
</blockquote>
</li>
</ul>
<h1 id="BeetlSql缺点"><a href="#BeetlSql缺点" class="headerlink" title="BeetlSql缺点"></a>BeetlSql缺点</h1><ul>
<li>小众，使用数量较少</li>
<li>社区不够活跃</li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Beetl&amp;BeetlSql</category>
      </categories>
      <tags>
        <tag>BeetlSql</tag>
        <tag>Beetl</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA8-字符串</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java 8 相对于之前的版本，添加了许多新的字符串相关特性，并对现有的 API 进行了优化。</p>
<h1 id="StringJoiner"><a href="#StringJoiner" class="headerlink" title="StringJoiner"></a>StringJoiner</h1><h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><p>拼接字符串</p>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//不指定前缀和后缀</span><br><span class="hljs-type">StringJoiner</span> <span class="hljs-variable">stringJoiner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringJoiner</span>(<span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-comment">//指定前缀和后缀</span><br><span class="hljs-comment">//StringJoiner stringJoiner = new StringJoiner(&quot;,&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;);</span><br>List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>);<br>list.forEach(str-&gt;stringJoiner.add(str));<br></code></pre></td></tr></table></figure>
<h1 id="String-join"><a href="#String-join" class="headerlink" title="String.join"></a>String.join</h1><h2 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h2><p>拼接字符串，缺点是无法指定前缀和后缀</p>
<h2 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;c&quot;</span>);<br>System.out.println(String.join(<span class="hljs-string">&quot;,&quot;</span>, list));<br></code></pre></td></tr></table></figure>
<h1 id="字符串实例方法"><a href="#字符串实例方法" class="headerlink" title="字符串实例方法"></a>字符串实例方法</h1><p>Java 8 向 <code>String</code> 类中添加了许多实例方法，包括：</p>
<ul>
<li><code>isEmpty()</code>：判断字符串是否为空。</li>
<li><code>chars()</code>：返回一个 IntStream，其中包含此字符串中的字符。</li>
<li><code>codePoints()</code>：返回一个 IntStream，其中包含此字符串中的 Unicode 代码点。</li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>JAVA特性</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA8-Date Time API</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-Date%20Time%20API/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>该文章仅仅记录Java 8 新增日期相关的API文档。</p>
</blockquote>
<h1 id="时区概念"><a href="#时区概念" class="headerlink" title="时区概念"></a>时区概念</h1><p>Java8中日期和时间类的设计中,把相关API分成了两个包:</p>
<ul>
<li>java.time:该包中的日期和时间类是不具有时区的,比如LocalDate、LocalTime、LocalDateTime等。  </li>
<li>java.time.zone:该包中的日期和时间类则是带时区的,比如ZonedDateTime、OffsetDateTime等。这样的设计有以下几个重要<br>原因:</li>
</ul>
<ol>
<li>方便不同场景使用对于不需要时区信息的场景,使用java.time中的类足够,简单易用。<br> 对于需要时区功能的场景,使用java.time.zone中的类,可以很好地完成不同时区的转换和处理。</li>
<li>避免在不需要时区信息的情况下携带时区,影响程序性能如果所有日期时间类都内置时区信息,则在不需要时区的场景下,多余的时区数据也会被加载和携带,浪费资源。</li>
<li>实现互操作java.time中的无时区类可以很容易地和java.time.zone中的有时区类互操作,相互转换。  这样可以在两种场景间灵活切换。</li>
<li>实现隔离并减少依赖通过包的划分,java.time和java.time.zone具有了一定的隔离度,互不依赖。  如果没有这个划分,那么利用不到时区信息的类也不得不依赖所有的时区数据库数据,会增加Java SE的大小。</li>
<li>方便未来拓展如果未来需要扩展新的日期时间相关功能,也可以通过包的划分加以区隔,同时又能够与现有类方便地互操作。 这种设计更具有可扩展性。<br>所以,总体来说,Java 8之所以采用有时区和无时区两套 API 的设计,主要还是基于性能、 interchangeability、可扩展性等方面的考量。<br>这种设计解耦了不同的需求场景,使得日期时间类组更为灵活和高效。<br>同时,两套 API 又可以很好地协作,这为我们在不同的场景下选择恰当的工具提供了可能。<br>OK，接下来记录一下Java8中常用的几个日期类。</li>
</ol>
<h2 id="Clock"><a href="#Clock" class="headerlink" title="Clock"></a>Clock</h2><h3 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h3><p>可以取代<code>System.currentTimeMillis()</code>,时区敏感，带有时区信息。</p>
<h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Clock</span> <span class="hljs-variable">clock</span> <span class="hljs-operator">=</span> Clock.systemDefaultZone();<br><span class="hljs-type">long</span> <span class="hljs-variable">millis</span> <span class="hljs-operator">=</span> clock.millis();<br><br><span class="hljs-type">Instant</span> <span class="hljs-variable">instant</span> <span class="hljs-operator">=</span> clock.instant();<br><span class="hljs-comment">// 可用历史日期类进行解析，legacy java.util.Date</span><br><span class="hljs-type">Date</span> <span class="hljs-variable">legacyDate</span> <span class="hljs-operator">=</span> Date.from(instant);<br></code></pre></td></tr></table></figure>
<h2 id="ZoneId"><a href="#ZoneId" class="headerlink" title="ZoneId"></a>ZoneId</h2><h3 id="详解-1"><a href="#详解-1" class="headerlink" title="详解"></a>详解</h3><p>新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。 ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区。</p>
<h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 打印所有有效的时区标识 available timezone ids</span><br>System.out.println(ZoneId.getAvailableZoneIds());<br><span class="hljs-comment">// 指定上海时区，ZoneRules[currentStandardOffset=+08:00]</span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">shanghaiZoneId</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br></code></pre></td></tr></table></figure>
<p>有了 ZoneId，我们就可以将一个 LocalDate、LocalTime 或 LocalDateTime 对象转化为 ZonedDateTime 对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 当前时间</span><br><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">localDateTime</span> <span class="hljs-operator">=</span> LocalDateTime.now();<br><span class="hljs-comment">// 把不带有时区时间转变成带有时区的时间</span><br><span class="hljs-type">ZonedDateTime</span> <span class="hljs-variable">zonedDateTime</span> <span class="hljs-operator">=</span> ZonedDateTime.of(localDateTime, shanghaiZoneId);<br></code></pre></td></tr></table></figure>
<p>ZonedDateTime 对象由两部分构成：LocalDateTime 和 ZoneId，其中 2018-03-03T15:26:56.147 部分为 LocalDateTime，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p>
<h2 id="LocalTime"><a href="#LocalTime" class="headerlink" title="LocalTime"></a>LocalTime</h2><h3 id="详解-2"><a href="#详解-2" class="headerlink" title="详解"></a>详解</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）</p>
<h3 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 定义两个时区,东八区、东七区，东八区比东七区早(快)一个点  </span><br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">systemDefault</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);  <br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">laosZone</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Asia/Vientiane&quot;</span>);  <br>  <br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">systemLdt</span> <span class="hljs-operator">=</span> LocalTime.now(systemDefault);  <br><span class="hljs-type">LocalTime</span> <span class="hljs-variable">laosLdt</span> <span class="hljs-operator">=</span> LocalTime.now(laosZone);  <br>  <br>System.out.println(<span class="hljs-string">&quot;systemLdt = &quot;</span> + systemLdt);  <br>System.out.println(<span class="hljs-string">&quot;laosLdt = &quot;</span> + laosLdt);  <br>  <br><span class="hljs-comment">// true  </span><br>System.out.println(<span class="hljs-string">&quot;laosLdt.isBefore(systemLdt) = &quot;</span> + laosLdt.isBefore(systemLdt));  <br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(laosLdt, systemLdt);  <br><span class="hljs-comment">// 1  </span><br>System.out.println(<span class="hljs-string">&quot;duration.toHours() = &quot;</span> + duration.toHours());  <br><span class="hljs-comment">// 60  </span><br>System.out.println(<span class="hljs-string">&quot;duration.toMinutes() = &quot;</span> + duration.toMinutes());<br></code></pre></td></tr></table></figure>
<h2 id="LocalDate"><a href="#LocalDate" class="headerlink" title="LocalDate"></a>LocalDate</h2><h3 id="详解-3"><a href="#详解-3" class="headerlink" title="详解"></a>详解</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。 可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间</p>
<h3 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDate</span> <span class="hljs-variable">localDate</span> <span class="hljs-operator">=</span> LocalDate.now();  <br><span class="hljs-comment">// localDate = 2023-05-29  </span><br>System.out.println(<span class="hljs-string">&quot;localDate = &quot;</span> + localDate);  <br><span class="hljs-comment">// tomorrow = 2023-05-30  </span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">tomorrow</span> <span class="hljs-operator">=</span> localDate.plusDays(<span class="hljs-number">1</span>);  <br>System.out.println(<span class="hljs-string">&quot;tomorrow = &quot;</span> + tomorrow);  <br><span class="hljs-comment">// yesterday = 2023-05-28  </span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">yesterday</span> <span class="hljs-operator">=</span> tomorrow.minus(<span class="hljs-number">2</span>, ChronoUnit.DAYS);  <br>System.out.println(<span class="hljs-string">&quot;yesterday = &quot;</span> + yesterday);  <br>  <br><span class="hljs-comment">// birthDay = 2023-08-26,星期6  </span><br><span class="hljs-type">LocalDate</span> <span class="hljs-variable">birthDay</span> <span class="hljs-operator">=</span> LocalDate.of(<span class="hljs-number">2023</span>, Month.AUGUST, <span class="hljs-number">26</span>);  <br>System.out.println(<span class="hljs-string">&quot;birthDay = &quot;</span> + birthDay);  <br><span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">dayOfWeek</span> <span class="hljs-operator">=</span> birthDay.getDayOfWeek();  <br>System.out.println(<span class="hljs-string">&quot;dayOfWeek = &quot;</span> + dayOfWeek.getValue());<br></code></pre></td></tr></table></figure>
<h2 id="LocalDateTime"><a href="#LocalDateTime" class="headerlink" title="LocalDateTime"></a>LocalDateTime</h2><h3 id="详解-4"><a href="#详解-4" class="headerlink" title="详解"></a>详解</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p>
<h3 id="用法-4"><a href="#用法-4" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">LocalDateTime</span> <span class="hljs-variable">ldt</span> <span class="hljs-operator">=</span> LocalDateTime.of(LocalDate.now(), LocalTime.now());  <br><span class="hljs-comment">// 1  </span><br>System.out.println(<span class="hljs-string">&quot;ldt.getDayOfWeek().getValue() = &quot;</span> + ldt.getDayOfWeek().getValue());  <br><span class="hljs-comment">// 29  </span><br>System.out.println(<span class="hljs-string">&quot;ldt.getDayOfMonth() = &quot;</span> + ldt.getDayOfMonth());  <br><span class="hljs-comment">// 1  </span><br>System.out.println(<span class="hljs-string">&quot;ldt.getLong(ChronoField.DAY_OF_WEEK) = &quot;</span> + ldt.getLong(ChronoField.DAY_OF_WEEK));<br></code></pre></td></tr></table></figure>
<h2 id="ZonedDateTime"><a href="#ZonedDateTime" class="headerlink" title="ZonedDateTime"></a>ZonedDateTime</h2><h3 id="详解-5"><a href="#详解-5" class="headerlink" title="详解"></a>详解</h3><p>ZonedDateTime类是Java 8中日期时间功能里，<code>用于表示带时区的日期与时间信息的类</code>。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p>
<h3 id="用法-5"><a href="#用法-5" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ZonedDateTime.now() = 2023-05-29T14:38:14.527+08:00[Asia/Shanghai]  </span><br>System.out.println(<span class="hljs-string">&quot;ZonedDateTime.now() = &quot;</span> + ZonedDateTime.now());  <br><span class="hljs-type">ZoneId</span> <span class="hljs-variable">laosZone</span> <span class="hljs-operator">=</span> ZoneId.of(<span class="hljs-string">&quot;Asia/Vientiane&quot;</span>);  <br><span class="hljs-comment">// ZonedDateTime.of(LocalDateTime.now(), laosZone) = 2023-05-29T14:38:14.528+07:00[Asia/Vientiane]  </span><br>System.out.println(<span class="hljs-string">&quot;ZonedDateTime.of(LocalDateTime.now(), laosZone) = &quot;</span> + ZonedDateTime.of(LocalDateTime.now(), laosZone));<br></code></pre></td></tr></table></figure>
<h2 id="Duration"><a href="#Duration" class="headerlink" title="Duration"></a>Duration</h2><h3 id="详解-6"><a href="#详解-6" class="headerlink" title="详解"></a>详解</h3><p>一个Duration对象表示两个Instant间的一段时间</p>
<h3 id="用法-6"><a href="#用法-6" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Instant</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> Instant.now();<br><span class="hljs-comment">// wait some time while something happens</span><br><span class="hljs-type">Instant</span> <span class="hljs-variable">second</span> <span class="hljs-operator">=</span> Instant.now();<br><span class="hljs-type">Duration</span> <span class="hljs-variable">duration</span> <span class="hljs-operator">=</span> Duration.between(first, second);<br></code></pre></td></tr></table></figure>
<h2 id="DateTimeFormatter"><a href="#DateTimeFormatter" class="headerlink" title="DateTimeFormatter"></a>DateTimeFormatter</h2><h3 id="详解-7"><a href="#详解-7" class="headerlink" title="详解"></a>详解</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，线程安全。用于解析和格式化日期时间的类。</p>
<h3 id="用法-7"><a href="#用法-7" class="headerlink" title="用法"></a>用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//pattern.format(LocalDateTime.now()) = 2023/05/29 14:46:25  </span><br><span class="hljs-type">DateTimeFormatter</span> <span class="hljs-variable">pattern</span> <span class="hljs-operator">=</span> DateTimeFormatter.ofPattern(<span class="hljs-string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);  <br>System.out.println(<span class="hljs-string">&quot;pattern.format(LocalDateTime.now()) = &quot;</span> + pattern.format(LocalDateTime.now()));<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>JAVA特性</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>异常处理及思考</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<blockquote>
<p>Java中应该如何处理异常，这个话题看似简单，不就是<code>try...catch</code>嘛，但是往往BUG更容易出现在一些简单地、我们更容易忽略的地方。</p>
<p>一个好的异常处理能让开发人员快速定位异常信息和修复问题，同时也能更好的让使用人员进进行捕获和处理异常信息。</p>
</blockquote>
<h1 id="使用finally或try…with…resource关闭资源"><a href="#使用finally或try…with…resource关闭资源" class="headerlink" title="使用finally或try…with…resource关闭资源"></a>使用finally或try…with…resource关闭资源</h1><p>如果我们在try代码块中需要使用到一些资源，比如<code>InputStream</code>，在使用完之后我们需要将资源关闭。</p>
<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">incorrectRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\a.txt&quot;</span>);<br>        inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// read something</span><br>        inputStream.close();<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class="hljs-string">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在上面这段代码中，只要在文件读取时没有出现异常，这段代码是可以正常工作的，但是只要在try块中的close()方法中抛出异常，资源就不会被关闭。</p>
<p>所以这种情况我们应该将资源关闭的代码放在finally中或者使用try…with…resource语句。</p>
<p>应该使用finally，在finally块中的代码不管是否出现异常，都会被执行，因此可以确保资源对象被关闭。</p>
<p>正确示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">correctRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:\\a.txt&quot;</span>);<br>        inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file);<br>        <span class="hljs-comment">// read something</span><br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class="hljs-string">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        log.error(<span class="hljs-string">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<span class="hljs-keyword">finally</span>&#123;<br>        inputStream.close();<br>        <span class="hljs-comment">//或者使用IoUtil工具等关闭流，eg:IoUtil.close(inputStream);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="使用try…with…resource"><a href="#使用try…with…resource" class="headerlink" title="使用try…with…resource"></a>使用try…with…resource</h1><blockquote>
<p>随着资源使用的增多，当打开多个资源是对应的资源关闭也是一个问题。因为资源打开的越多，finally中嵌套的次数越多，这将导致大量的无用代码，从而导致代码的臃肿。</p>
<p>try…with…resource正是java 1.7中新增的语法糖功能，而通过这个语法糖功能，无需我们手动的关闭资源，程序会自动关闭我们打开的资源。</p>
<p>对应的条件：</p>
<ul>
<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭</strong>​**&lt;&#x2F;font&gt;**</li>
<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源</strong>​**&lt;&#x2F;font&gt;**</li>
<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>越晚声明的对象，会越早被close掉,即先开后闭原则</strong>​**&lt;&#x2F;font&gt;**</li>
</ul>
</blockquote>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">correctRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(javaFile);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">fileLen</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>) file.length();<br>    <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[fileLen];<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file)) &#123;<br>        is.read(bytes);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bytes, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;content = \n&quot;</span> + content);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ioException) &#123;<br>        log.error(<span class="hljs-string">&quot;流关闭异常&quot;</span>, ioException);<br>        ioException.printStackTrace();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="使用更明确的异常"><a href="#使用更明确的异常" class="headerlink" title="使用更明确的异常"></a>使用更明确的异常</h1><p>如果我们的方法需要向外抛出异常，那么异常类型越具体越好。因为在外部调用你代码的其他人对你内部的实现逻辑可能并不清楚，所以要确保能提供给他尽可能多的信息，可以让别人在使用你的方法时更容易理解，这样调用方可以更好地处理抛出的异常。</p>
<p>比如，在你的方法内容抛出<code>NumberFormatException</code>比抛出<code>IllegalArgumentException</code>或者直接抛出<code>Exception</code>，所代表的含义就会更明确。</p>
<h1 id="方法注释中对异常进行说明"><a href="#方法注释中对异常进行说明" class="headerlink" title="方法注释中对异常进行说明"></a>方法注释中对异常进行说明</h1><p>如果你的方法声明了可能会抛出异常，那么在方法的文档注释中，应该对异常进行说明。这和上一条的目的一样，都是为了让方法的调用者能提前获得更多的信息，方便他避免在调用你方法时出现异常，或者更明确如果进行异常处理。</p>
<p>所以，我们应该在方法的文档注释中添加@throws声明，并说明什么情况下会抛出对应的异常。</p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取数据库连接</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> cfg                     数据库信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>                        数据库连接信息</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> ClassNotFoundException 数据库驱动获取异常</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> SQLException           数据库连接异常</span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnect</span><span class="hljs-params">(DataSourceConfig cfg)</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, SQLException &#123;<br>    Class.forName(cfg.getDriverClass());<br>    <span class="hljs-keyword">return</span> DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUserName(), cfg.getPassword());<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="在异常中携带足够的描述信息"><a href="#在异常中携带足够的描述信息" class="headerlink" title="在异常中携带足够的描述信息"></a>在异常中携带足够的描述信息</h1><p>这一点和前两条做法的目的类似。在异常中携带足够的描述信息，是为了在出现该异常时，能够在日志文件中查看异常信息时，能看到更有用的信息。</p>
<p>所以我们应该尽可能准确地描述出为什么抛出了这个异常，并提供最相关的数据信息让别人定位。</p>
<p>当然这里也不能太极端，你洋洋洒洒写一篇小作文，应该使用简短的一段信息描述，让运维同事能了解到这个问题的严重性，更轻松地分析问题所在。</p>
<p>也不用提供一堆额外的冗余信息，尽量做到足够精准。比如当你再创建一个Long对象时如果传入一个字符串，就会抛出<code>NumberFormatException</code>。</p>
<p><code>NumberFormatException</code>的类名已经告诉我们出现的是数字格式化异常，所以在<code>message</code>中只需要提供输入的字符串。如果你定义的异常类名不能很明确的表达出是什么异常，比如<code>BusinessException</code>，你就应该在<code>message</code>中表达出更多的信息。</p>
<p>示例如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Long</span> <span class="hljs-variable">sss</span> <span class="hljs-operator">=</span> Long.valueOf(<span class="hljs-string">&quot;sss&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-string">&quot;数字格式化异常&quot;</span>, e);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * 自定义异常</span><br><span class="hljs-comment">  */</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomException</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomException</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">CustomException</span><span class="hljs-params">(String message, Throwable cause)</span> &#123;<br>        <span class="hljs-built_in">super</span>(message, cause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>控制台打印信息如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Exception in thread <span class="hljs-string">&quot;main&quot;</span> ExceptionTest$CustomException: 数字格式化异常<br>	at ExceptionTest.main(ExceptionTest.java:<span class="hljs-number">77</span>)<br>Caused by: java.lang.NumberFormatException: For input string: <span class="hljs-string">&quot;sss&quot;</span><br>	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class="hljs-number">65</span>)<br>	at java.lang.Long.parseLong(Long.java:<span class="hljs-number">589</span>)<br>	at java.lang.Long.valueOf(Long.java:<span class="hljs-number">803</span>)<br>	at ExceptionTest.main(ExceptionTest.java:<span class="hljs-number">75</span>)<br></code></pre></td></tr></table></figure>

<h1 id="先捕获更明确的异常"><a href="#先捕获更明确的异常" class="headerlink" title="先捕获更明确的异常"></a>先捕获更明确的异常</h1><p>一般在我们使用的IDE中，如果当你在做异常捕获时，先捕获了不太具体的异常比如<code>Exception</code>，然后再捕获更具体的异常如<code>IOException</code>，都会提示我们后面的catch块无法到达。所以我们应该先捕获最具体的异常类，将不太具体的异常类的捕获放在最后。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        doSomthing(...)<br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class="hljs-string">&quot;格式异常&quot;</span>, e);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException e) &#123;<br>        log.error(<span class="hljs-string">&quot;非法参数&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="不要捕获Throwable"><a href="#不要捕获Throwable" class="headerlink" title="不要捕获Throwable"></a>不要捕获<code>Throwable</code></h1><blockquote>
<p><code>Throwable</code>是所有<code>Exception</code>和<code>Error</code>的父类。</p>
</blockquote>
<p>虽然可以在<code>catch</code>块中捕获它，但是我们不应该这样去做。因为如果使用了<code>Throwable</code>，那么不仅会对所有抛出的<code>Exception</code>进行捕获，还会捕获所有的<code>Error</code>。</p>
<p>而当我们的程序抛出<code>Error</code>时表示是一个无法处理的严重问题，例如典型的<code>OutofMemoryError</code>，<code>StackOverflowError</code>等，这两个<code>Error</code>都是由程序无法控制并且不能处理的情况引起的。所以说，最好不要在你的<code>catch</code>中捕获<code>Throwable</code>，除非你非常确定<code>try</code>块中的代码抛出的是可以处理的异常情况。</p>
<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchThrowable</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 一些业务代码</span><br>    &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>        <span class="hljs-comment">// 不要这样做</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="不要将异常忽略"><a href="#不要将异常忽略" class="headerlink" title="不要将异常忽略"></a>不要将异常忽略</h1><p>在你开发的时候可能非常确定不会抛出异常，并且在你开发时确实没有发生过抛出异常的情况，所以你在<code>catch</code>块中没有对异常做任何处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doNotIgnoreExceptions</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>		<span class="hljs-comment">// 一些业务代码</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        <span class="hljs-comment">// 认为永远不会执行到这里</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>但是，你其实不确定在将来会不会有人在你的try块中添加新的代码，并且他可能也不会意识到他添加的代码会导致有异常抛出，这将会导致在线上真的有异常产生，但是没有一个人知道。</p>
<p>所以，你至少应该在catch中打印一行日志，告诉同事，“警报，这里出现了一个不可能会出现的异常”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doNotIgnoreExceptions</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>		<span class="hljs-comment">// 一些业务代码</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>		log.error(<span class="hljs-string">&quot;警报，这里出现了一个不可能会出现的异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="不要打印日志后又将异常抛出"><a href="#不要打印日志后又将异常抛出" class="headerlink" title="不要打印日志后又将异常抛出"></a>不要打印日志后又将异常抛出</h1><p>这一条可能绝大多数人都会犯过，我见过非常多别人的代码在异常处理时，先打印了一行异常日志，然后将异常抛出，或者转成一个<code>RuntimeException</code>抛出。</p>
<p>甚至在一些开源框架中都有出现过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCatchEx</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(<span class="hljs-string">&quot;will&quot;</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class="hljs-string">&quot;数字格式异常&quot;</span>, e);<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>你可能会认为这样做很直观，也没什么错，让调用你方法的人去处理就好了。但是这样一来，在日志中会对抛出的一个异常打印多条错误信息。</p>
<p>重复的日志并没有带来任何有价值的信息，参考上面第4条中描述，在异常信息中应该携带足够的信息，并且要做到精准。如果需要在添加其他信息，你应该将捕获到的异常封装在你的自定义异常中再进行抛出。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String input)</span> <span class="hljs-keyword">throws</span> CustomException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-string">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>所以，我们应该只有在想对异常进行处理时捕获，否则就应该在抛出去，并且在方法前面上加以说明，让调用方去处理。</p>
<h1 id="在包装异常时使用原始异常"><a href="#在包装异常时使用原始异常" class="headerlink" title="在包装异常时使用原始异常"></a>在包装异常时使用原始异常</h1><p>通常在项目开发时，都会有一套自定义的异常，用于将API中的标准异常封装到自定义异常中，可以用于在外层做一些统一的异常处理。</p>
<p>但是我们在使用自定义异常对原始异常进行封装时，需要确保将原始异常作为cause保存在自定义异常中，否则你在外层将会丢失原始异常的堆栈跟踪信息，到你你无法通过异常信息分析抛出异常的具体原因。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">wrapException</span><span class="hljs-params">(String input)</span> <span class="hljs-keyword">throws</span> CustomException &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// do something</span><br>    &#125; <span class="hljs-keyword">catch</span> (NumberFormatException e) &#123;<br>        <span class="hljs-comment">// 将e作为构造参数中的cause</span><br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomException</span>(<span class="hljs-string">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在抛出或者捕获异常时，我们应该考虑很多不同的事情，上面所说的大多数都是为了提高代码的可读性和提供给别人的API更易用。</p>
<p>通常异常不光是一种错误处理机制，同时还具备一定的信息媒介作用。我们应该遵循这些异常处理的规则和最佳实践，写出更规范，不让别人吐槽的好代码。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>JAVA特性</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO-初识IO</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/IO&amp;NIO&amp;AIO/Java%20IO-%E5%88%9D%E8%AF%86IO/</url>
    <content><![CDATA[<h1 id="知识体系"><a href="#知识体系" class="headerlink" title="知识体系"></a>知识体系</h1><p><img src="https://s3.bmp.ovh/imgs/2023/06/23/f10285a1ab40fb85.png"></p>
<h1 id="IO理解分类-从传输方式上"><a href="#IO理解分类-从传输方式上" class="headerlink" title="IO理解分类 - 从传输方式上"></a>IO理解分类 - 从传输方式上</h1><p>从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:</p>
<ul>
<li>字节流</li>
<li>字符流</li>
</ul>
<p><code>字节</code>是个计算机看的，<code>字符</code>才是给人看的</p>
<h1 id="字节流和字符流的区别"><a href="#字节流和字符流的区别" class="headerlink" title="字节流和字符流的区别"></a>字节流和字符流的区别</h1><ul>
<li>字节流读取单个字节，字符流读取单个字符(一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK编码中文汉字是 2 个字节。)</li>
<li>字节流用来处理二进制文件(图片、MP3、视频文件)，字符流用来处理文本文件(可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。</li>
</ul>
<blockquote>
<p>简而言之，字节是给计算机看的，字符才是给人看的。</p>
</blockquote>
<h3 id="字节转字符Input-x2F-OutputStreamReader-x2F-Writer"><a href="#字节转字符Input-x2F-OutputStreamReader-x2F-Writer" class="headerlink" title="字节转字符Input&#x2F;OutputStreamReader&#x2F;Writer"></a>字节转字符Input&#x2F;OutputStreamReader&#x2F;Writer</h3><p>编码就是把字符转换为字节，而解码是把字节重新组合成字符。</p>
<p>如果编码和解码过程使用不同的编码方式那么就出现了乱码。</p>
<ul>
<li>GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；</li>
<li>UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；</li>
<li>UTF-16be 编码中，中文字符和英文字符都占 2 个字节。</li>
</ul>
<p>UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。</p>
<p>Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。</p>
<h1 id="设计模式-装饰器模式"><a href="#设计模式-装饰器模式" class="headerlink" title="设计模式-装饰器模式"></a>设计模式-装饰器模式</h1><blockquote>
<p>在原有Java的IO操作中使用了特别</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>IO&amp;NIO&amp;AIO</category>
      </categories>
      <tags>
        <tag>Java IO-初识IO</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(1)-大话Spring Cloud</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(1)-%E5%A4%A7%E8%AF%9DSpring%20Cloud/</url>
    <content><![CDATA[<h1 id="微服务介绍"><a href="#微服务介绍" class="headerlink" title="微服务介绍"></a>微服务介绍</h1><h2 id="微服务架构介绍"><a href="#微服务架构介绍" class="headerlink" title="微服务架构介绍"></a>微服务架构介绍</h2><p>微服务架构， 简单的说就是将单体应用进一步拆分，拆分成更小的服务，每个服务都是一个可以独立运行的项目。</p>
<h2 id="微服务架构的常见问题"><a href="#微服务架构的常见问题" class="headerlink" title="微服务架构的常见问题"></a>微服务架构的常见问题</h2><p>一旦采用微服务系统架构，就势必会遇到这样几个问题：</p>
<ul>
<li>这么多小服务，如何管理他们？(服务治理 注册中心[服务注册 发现 剔除])</li>
<li>这么多小服务，他们之间如何通讯？(restful rpc)</li>
<li>这么多小服务，客户端怎么访问他们？(网关)</li>
<li>这么多小服务，一旦出现问题了，应该如何自处理？(容错)</li>
<li>这么多小服务，一旦出现问题了，应该如何排错? (链路追踪)</li>
</ul>
<p>对于上面的问题，是任何一个微服务设计者都不能绕过去的，因此大部分的微服务产品都针对每一个问题提供了相应的组件来解决它们。</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710114705.jpg"></p>
<h2 id="微服务架构的常见概念"><a href="#微服务架构的常见概念" class="headerlink" title="微服务架构的常见概念"></a>微服务架构的常见概念</h2><h3 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h3><p>服务治理就是进行服务的自动化管理，其核心是服务的自动注册与发现。</p>
<ul>
<li>服务注册：服务实例将自身服务信息注册到注册中心。</li>
<li>服务发现：服务实例通过注册中心，获取到注册到其中的服务实例的信息，通过这些信息去请求它们提供的服务。</li>
<li>服务剔除：服务注册中心将出问题的服务自动剔除到可用列表之外，使其不会被调用到。</li>
</ul>
<h3 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h3><p>在微服务架构中，通常存在多个服务之间的远程调用的需求。目前主流的远程调用技术有基于HTTP的RESTful接口以及基于TCP的RPC协议。</p>
<ul>
<li><p>REST(Representational State Transfer)这是一种HTTP调用的格式，更标准，更通用，无论哪种语言都支持http协议</p>
</li>
<li><p>RPC（Remote Promote Call）一种进程间通信方式。允许像调用本地服务一样调用远程服务。RPC框架的主要目标就是让远程服务调用更简单、透明。RPC框架负责屏蔽底层的传输方式、序列化方式和通信细节。开发人员在使用的时候只需要了解谁在什么位置提供了什么样的远程服务接口即可，并不需要关心底层通信细节和调用过程。</p>
<p><strong>区别与联系</strong></p>
<table>
<thead>
<tr>
<th>比较项</th>
<th>RESTful</th>
<th>RPC</th>
</tr>
</thead>
<tbody><tr>
<td>通讯协议</td>
<td>HTTP</td>
<td>一般使用TCP</td>
</tr>
<tr>
<td>性能</td>
<td>略低</td>
<td>较高</td>
</tr>
<tr>
<td>灵活度</td>
<td>高</td>
<td>低</td>
</tr>
<tr>
<td>应用</td>
<td>微服务架构</td>
<td>SOA架构</td>
</tr>
</tbody></table>
</li>
</ul>
<h3 id="服务网关"><a href="#服务网关" class="headerlink" title="服务网关"></a>服务网关</h3><p>随着微服务的不断增多，不同的微服务一般会有不同的网络地址，而外部客户端可能需要调用多个服务的接口才能完成一个业务需求，如果让客户端直接与各个微服务通信可能出现：</p>
<ul>
<li>客户端需要调用不同的url地址，增加难度</li>
<li>在一定的场景下，存在跨域请求的问题</li>
<li>每个微服务都需要进行单独的身份认证</li>
</ul>
<p>针对这些问题，API网关顺势而生。<br>API网关直面意思是将所有API调用统一接入到API网关层，由网关层统一接入和输出。一个网关的基本功能有：统一接入、安全防护、协议适配、流量管控、长短链接支持、容错能力。有了网关之后，各个API服务提供团队可以专注于自己的的业务逻辑处理，而API网关更专注于安全、流量、路由等问题。</p>
<h3 id="服务容错"><a href="#服务容错" class="headerlink" title="服务容错"></a>服务容错</h3><p>在微服务当中，一个请求经常会涉及到调用几个服务，如果其中某个服务不可用，没有做服务容错的话，极有可能会造成一连串的服务不可用，这就是雪崩效应。<br>我们没法预防雪崩效应的发生，只能尽可能去做好容错。服务容错的三个核心思想是：</p>
<ul>
<li>不被外界环境影响</li>
<li>不被上游请求压垮</li>
<li>不被下游响应拖垮</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710114704.png"></p>
<h3 id="链路追踪"><a href="#链路追踪" class="headerlink" title="链路追踪"></a>链路追踪</h3><p>随着微服务架构的流行，服务按照不同的维度进行拆分，一次请求往往需要涉及到多个服务。互联网应用构建在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实现、有可能布在了几千台服务器，横跨多个不同的数据中心。因此，就需要对一次请求涉及的多个服务链路进行日志记录，性能监控即链路追踪。</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710141312.png"></p>
<h2 id="微服务架构的常见解决方案"><a href="#微服务架构的常见解决方案" class="headerlink" title="微服务架构的常见解决方案"></a>微服务架构的常见解决方案</h2><h3 id="ServiceComb"><a href="#ServiceComb" class="headerlink" title="ServiceComb"></a>ServiceComb</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710141736.png" alt="image-20200710141731679"></p>
<p>Apache ServiceComb，前身是华为云的微服务引擎 CSE (Cloud Service Engine) 云服务，是全球首个Apache微服务顶级项目。它提供了一站式的微服务开源解决方案，致力于帮助企业、用户和开发者将企业应用轻松微服务化上云，并实现对微服务应用的高效运维管理。</p>
<h3 id="SpringCloud"><a href="#SpringCloud" class="headerlink" title="SpringCloud"></a>SpringCloud</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710143511.png" alt="image-20200710143509327"></p>
<p>Spring Cloud是一系列框架的集合。它利用Spring Boot的开发便利性巧妙地简化了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路器、数据监控等，都可以用Spring Boot的开发风格做到一键启动和部署。<br>Spring Cloud并没有重复制造轮子，它只是将目前各家公司开发的比较成熟、经得起实际考验的服务框架组合起来，通过Spring Boot风格进行再封装屏蔽掉了复杂的配置和实现原理，最终给开发者留出了一套简单易懂、易部署和易维护的分布式系统开发工具包。</p>
<h3 id="SpringCloud-Alibaba"><a href="#SpringCloud-Alibaba" class="headerlink" title="SpringCloud Alibaba"></a>SpringCloud Alibaba</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20200710143714.png" alt="image-20200710143710723"></p>
<p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。</p>
<h2 id="SpringCloud-Alibaba介绍"><a href="#SpringCloud-Alibaba介绍" class="headerlink" title="SpringCloud Alibaba介绍"></a>SpringCloud Alibaba介绍</h2><p>Spring Cloud Alibaba 致力于提供微服务开发的一站式解决方案。此项目包含开发分布式应用微服务的必需组件，方便开发者通过 Spring Cloud 编程模型轻松使用这些组件来开发分布式应用服务。<br>依托 Spring Cloud Alibaba，您只需要添加一些注解和少量配置，就可以将 Spring Cloud 应用接入阿里微服务解决方案，通过阿里中间件来迅速搭建分布式应用系统。</p>
<h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ul>
<li><strong>服务限流降级：默认支持 WebServlet、WebFlux， OpenFeign、RestTemplate、Spring CloudGateway， Zuul， Dubbo 和 RocketMQ 限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则，还支持查看限流降级 Metrics 监控。</strong></li>
<li><strong>服务注册与发现：适配 Spring Cloud 服务注册与发现标准，默认集成了 Ribbon 的支持。</strong></li>
<li><strong>分布式配置管理：支持分布式系统中的外部化配置，配置更改时自动刷新。</strong></li>
<li><strong>消息驱动能力：基于 Spring Cloud Stream 为微服务应用构建消息驱动能力。</strong></li>
<li><strong>分布式事务：使用 @GlobalTransactional 注解， 高效并且对业务零侵入地解决分布式事务问题。</strong></li>
<li><strong>阿里云对象存储：阿里云提供的海量、安全、低成本、高可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</strong></li>
<li><strong>分布式任务调度：提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker（schedulerx-client）上执行。</strong></li>
<li><strong>阿里云短信服务：覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</strong></li>
</ul>
<h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><ul>
<li><strong>Sentinel：把流量作为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</strong></li>
<li><strong>Nacos：一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。</strong></li>
<li><strong>RocketMQ：一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</strong></li>
<li><strong>Dubbo：Apache Dubbo™ 是一款高性能 Java RPC 框架。</strong></li>
<li><strong>Seata：阿里巴巴开源产品，一个易于使用的高性能微服务分布式事务解决方案。</strong></li>
<li><strong>Alibaba Cloud ACM：一款在分布式架构环境中对应用配置进行集中管理和推送的应用配置中心产品。</strong></li>
<li><strong>Alibaba Cloud OSS: 阿里云对象存储服务（Object Storage Service，简称 OSS），是阿里云提供的海量、安全、低成本、高可靠的云存储服务。您可以在任何应用、任何时间、任何地点存储和访问任意类型的数据。</strong></li>
<li><strong>Alibaba Cloud SchedulerX: 阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务。</strong></li>
<li><strong>Alibaba Cloud SMS: 覆盖全球的短信服务，友好、高效、智能的互联化通讯能力，帮助企业迅速搭建客户触达通道。</strong></li>
</ul>
<blockquote>
<p>（注：后四项都是收费产品）</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA_浅析枚举</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA_%E6%B5%85%E6%9E%90%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p>&#x3D;&#x3D;<font color="red">Enum 一般用来表示<strong>一组相同类型的常量</strong></font>&#x3D;&#x3D;。如：性别、日期、月份、颜色等。对这些属性用常量的好处是显而易见的，不仅可以保证单例，且在比较的时候可以用 ”&#x3D;&#x3D;” 来替换 equals。在 JDK1.5 之前是没有 Enum 这个类型的，那时候一般用接口常量来替代。</p>
<h1 id="2-Enum究竟是啥"><a href="#2-Enum究竟是啥" class="headerlink" title="2.Enum究竟是啥"></a>2.Enum究竟是啥</h1><p>你是否被问到过以下的问题：</p>
<ul>
<li>枚举允许继承类吗？</li>
<li>枚举允许实现接口吗？</li>
<li>枚举可以用等号比较吗？</li>
<li>可以继承枚举吗？</li>
<li>枚举是单例吗？</li>
<li>当使用compareTo()比较枚举时，比较的是什么？</li>
<li>当使用equals()比较枚举的时候，比较的是什么？</li>
</ul>
<p>面试官的问题五花八门，但归根结底都是在考察同一个问题：枚举的本质。</p>
<p>那么枚举究竟是啥?</p>
<p>废话不说,先看源代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Enum</span>&lt;E <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span>&lt;E&gt;&gt;<br>        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;E&gt;, Serializable &#123;<br>		<span class="hljs-comment">//*******        </span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>从源代码可以看出Enum的本质是一个抽象类,所以上述问题基本上都迎刃而解了.</p>
<h1 id="3-Enum的特性"><a href="#3-Enum的特性" class="headerlink" title="3.Enum的特性"></a>3.Enum的特性</h1><ul>
<li>Enum常量隐式的加上了static和final，一旦被创建就无法修改</li>
<li>Enum提供了是类型安全的(type-safe)</li>
<li>Enum隐式的加上了values()方法，返回一个数组包含所有的Enum常量</li>
<li>两个Enum常量可以使用 <code>==</code>或<code>equals()</code>方法比较</li>
<li>Enum可以用在switch语句中，就像int，String。</li>
<li>Enum有自己的名称空间</li>
<li>Enum可以实现Java接口</li>
<li>可以在Enum中定义构造器</li>
</ul>
<h1 id="4-Enum的注意事项"><a href="#4-Enum的注意事项" class="headerlink" title="4.Enum的注意事项"></a>4.Enum的注意事项</h1><h3 id="Enum的用法"><a href="#Enum的用法" class="headerlink" title="Enum的用法"></a>Enum的用法</h3><p>1 . Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。</p>
<h3 id="Enum的用法-1"><a href="#Enum的用法-1" class="headerlink" title="Enum的用法"></a>Enum的用法</h3><ol>
<li>Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。</li>
<li>&#x3D;&#x3D;<strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>在创建Enum常量的时候可以指定值，但是这个时候你需要定义一个成员变量构造器。构造器必须是private的，不然会报编译错误.<strong>​</strong>&lt;&#x2F;font&gt;</strong>&#x3D;&#x3D;</li>
</ol>
<h1 id="5-EumDemo"><a href="#5-EumDemo" class="headerlink" title="5.EumDemo"></a>5.EumDemo</h1><p>1)创建一个水果相关的枚举</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Fruit</span> &#123;  <br>    APPLE, PEAR, PEACH, ORANGE;  <br>&#125; <br></code></pre></td></tr></table></figure>

<p>再看看Fruit反编译的结果:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> test;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> i)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(s, i);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Fruit[] values() &#123;  <br>        Fruit afruit[];  <br>        <span class="hljs-type">int</span> i;  <br>        Fruit afruit1[];  <br>        System.arraycopy(afruit = ENUM$VALUES, <span class="hljs-number">0</span>, afruit1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>[i = afruit.length], <span class="hljs-number">0</span>, i);  <br>        <span class="hljs-keyword">return</span> afruit1;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Fruit <span class="hljs-title function_">valueOf</span><span class="hljs-params">(String s)</span> &#123;  <br>        <span class="hljs-keyword">return</span> (Fruit)Enum.valueOf(test/Fruit, s);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit APPLE;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEAR;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEACH;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit ORANGE;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit ENUM$VALUES[];  <br>    <span class="hljs-keyword">static</span> &#123;  <br>        APPLE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;APPLE&quot;</span>, <span class="hljs-number">0</span>);  <br>        PEAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEAR&quot;</span>, <span class="hljs-number">1</span>);  <br>        PEACH = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEACH&quot;</span>, <span class="hljs-number">2</span>);  <br>        ORANGE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;ORANGE&quot;</span>, <span class="hljs-number">3</span>);  <br>        ENUM$VALUES = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>[] &#123;  <br>            APPLE, PEAR, PEACH, ORANGE  <br>        &#125;);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>

<p>注意这几行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit APPLE;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEAR;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEACH;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit ORANGE;  <br></code></pre></td></tr></table></figure>

<p>可以看到我们定义的几个成员变量,JVM底层把它转换成Eunm类型.</p>
<p>我们还是再写点代码看看:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Fruit</span> &#123;  <br>    APPLE &#123;   <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>            System.out.println(<span class="hljs-string">&quot;I am an apple.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    PEAR &#123;   <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>            System.out.println(<span class="hljs-string">&quot;I am a pear.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    PEACH &#123;   <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>            System.out.println(<span class="hljs-string">&quot;I am a peach.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    ORANGE;  <br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;I am a fruit.&quot;</span>);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>

<p>其中，只有Orange没有Overide test()方法；</p>
<p>在main方法里面调用:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        Fruit.APPLE.test();  <br>        Fruit.PEAR.test();  <br>        Fruit.PEACH.test();  <br>        Fruit.ORANGE.test();  <br>&#125;  <br></code></pre></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">I</span> am an apple. <br><span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">a</span> pear. <br><span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">a</span> peach. <br><span class="hljs-selector-tag">I</span> am <span class="hljs-selector-tag">a</span> fruit.<br></code></pre></td></tr></table></figure>

<p>可以看到，重新定义了test方法的APPLE,PEAR,PEACH覆盖了从父类继承过来的默认行为，而未从新定义test方法的ORANGE却沿袭了父类的行为，多态性在这里展现出来了。</p>
<p>再看看反编译后的文件:</p>
<p><img src="https://img-blog.csdn.net/20160413220702331"></p>
<p>发现多了几个内部类的字节码文件,看看反编译后的代码:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.  </span><br><span class="hljs-comment">// Jad home page: http://www.geocities.com/kpdus/jad.html  </span><br><span class="hljs-comment">// Decompiler options: packimports(3)   </span><br><span class="hljs-comment">// Source File Name:   Fruit.java  </span><br><span class="hljs-keyword">package</span> test;  <br><span class="hljs-keyword">import</span> java.io.PrintStream;  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Enum</span> &#123;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Fruit</span><span class="hljs-params">(String s, <span class="hljs-type">int</span> i)</span> &#123;  <br>        <span class="hljs-built_in">super</span>(s, i);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;I am a fruit.&quot;</span>);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Fruit[] values() &#123;  <br>        Fruit afruit[];  <br>        <span class="hljs-type">int</span> i;  <br>        Fruit afruit1[];  <br>        System.arraycopy(afruit = ENUM$VALUES, <span class="hljs-number">0</span>, afruit1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>[i = afruit.length], <span class="hljs-number">0</span>, i);  <br>        <span class="hljs-keyword">return</span> afruit1;  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Fruit <span class="hljs-title function_">valueOf</span><span class="hljs-params">(String s)</span> &#123;  <br>        <span class="hljs-keyword">return</span> (Fruit)Enum.valueOf(test/Fruit, s);  <br>    &#125;  <br>    Fruit(String s, <span class="hljs-type">int</span> i, Fruit fruit) &#123;  <br>        <span class="hljs-built_in">this</span>(s, i);  <br>    &#125;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit APPLE;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEAR;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit PEACH;  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit ORANGE;  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Fruit ENUM$VALUES[];  <br><br>    <span class="hljs-keyword">static</span> &#123;  <br>        APPLE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;APPLE&quot;</span>, <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am an apple.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEAR&quot;</span>, <span class="hljs-number">1</span>) &#123;  <br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am a pear.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEACH = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEACH&quot;</span>, <span class="hljs-number">2</span>) &#123;  <br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am a peach.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        ORANGE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;ORANGE&quot;</span>, <span class="hljs-number">3</span>);  <br>        ENUM$VALUES = (<span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>[] &#123;  <br>            APPLE, PEAR, PEACH, ORANGE  <br>        &#125;);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>

<p>注意这段代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span>   <br>    &#123;  <br>        APPLE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;APPLE&quot;</span>, <span class="hljs-number">0</span>) &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am an apple.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEAR = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEAR&quot;</span>, <span class="hljs-number">1</span>) &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am a pear.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEACH = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;PEACH&quot;</span>, <span class="hljs-number">2</span>) &#123;  <br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>  <br>            &#123;  <br>                System.out.println(<span class="hljs-string">&quot;I am a peach.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        ORANGE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>(<span class="hljs-string">&quot;ORANGE&quot;</span>, <span class="hljs-number">3</span>);  <br></code></pre></td></tr></table></figure>

<p>　这个时候的APPLE，PEAR，PEACH已经以匿名内部类的方式对Fruit进行了Overide，自然体现出了多态，多出的那三个疑似内部类的class文件也就是它们！而ORANGE，没有重写test方法，仍然以一个Fruit实例的形式出现。</p>
<h1 id="6-反思-Enum多态体现的好处"><a href="#6-反思-Enum多态体现的好处" class="headerlink" title="6.反思-Enum多态体现的好处"></a>6.反思-Enum多态体现的好处</h1><p>其实通过上面我们可以通过Enum(枚举类)实现单例工厂模式,这样就能省去多余的判断步骤和不必要的父类和其他的相关类,大大提高我们的代码效率.</p>
<h2 id="lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt"><a href="#lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt" class="headerlink" title="&lt;font color&#x3D;&quot;red&quot;&gt;​练习小Demo​**&lt;&#x2F;font&gt;**"></a><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>练习小Demo</strong>​**&lt;&#x2F;font&gt;**</h2><p><strong>1.创建Dog和Persion类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com._521it.Enum.Model;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yangxiangnan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/7/17 14:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗狗的无参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name, String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;狗狗的有参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bark</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;汪汪&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com._521it.Enum.Model;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yangxiangnan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/7/17 14:51</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Persion</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;人的无参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Persion</span><span class="hljs-params">(String name, String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.age = age;<br>        System.out.println(<span class="hljs-string">&quot;人的有参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;说话&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(String age)</span> &#123;<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>2.创建单例工厂类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com._521it.Enum.Singletion;<br><br><span class="hljs-keyword">import</span> com._521it.Enum.Model.Dog;<br><span class="hljs-keyword">import</span> com._521it.Enum.Model.Persion;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yangxiangnan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/7/17 14:52</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SingletonInstanceFactory</span> &#123;<br><br>    INSTANCE_FACTORY;<br><br>    <span class="hljs-keyword">private</span> Persion persion;<br>    <span class="hljs-keyword">private</span> Dog dog;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SingletonInstanceFactory</span><span class="hljs-params">()</span>&#123;<br>        persion = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Persion</span>();<br>        dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Persion <span class="hljs-title function_">getPersion</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> persion;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Dog <span class="hljs-title function_">getDog</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> dog;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>3.进行测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com._521it.Enum;<br><br><span class="hljs-keyword">import</span> com._521it.Enum.Model.Dog;<br><span class="hljs-keyword">import</span> com._521it.Enum.Model.Persion;<br><span class="hljs-keyword">import</span> com._521it.Enum.Singletion.SingletonInstanceFactory;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yangxiangnan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/7/17 17:18</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog1</span> <span class="hljs-operator">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getDog();<br>        <span class="hljs-type">Dog</span> <span class="hljs-variable">dog2</span> <span class="hljs-operator">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getDog();<br>        System.out.println(<span class="hljs-string">&quot;dog1 = &quot;</span> + dog1);<br>        System.out.println(<span class="hljs-string">&quot;dog2 = &quot;</span> + dog2);<br>        dog1.bark();<br>        dog2.bark();<br>        System.out.println(dog1 == dog2);<br><br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">persion1</span> <span class="hljs-operator">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();<br>        <span class="hljs-type">Persion</span> <span class="hljs-variable">persion2</span> <span class="hljs-operator">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();<br>        System.out.println(<span class="hljs-string">&quot;persion1 = &quot;</span> + persion1);<br>        System.out.println(<span class="hljs-string">&quot;persion2 = &quot;</span> + persion2);<br>        persion1.speak();<br>        persion2.speak();<br>        System.out.println(persion1 == persion2);<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><strong>4.运行结果</strong></p>
<p>结果如下:</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190717172845.png"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>JAVA特性</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>JAVA</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>Excel生成建表语句</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/Excel%E7%94%9F%E6%88%90%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h1 id="Excel生成建表语句"><a href="#Excel生成建表语句" class="headerlink" title="Excel生成建表语句"></a>Excel生成建表语句</h1><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近公司开展新项目，由于项目进度紧急，部分项目负责人不在现在，建表相关的使用的是Excel，由于Excel拼接过于麻烦，博猪COPY了一下大神的代码，修改了部分代码，以便适用于我们项目。</p>
<p>参照博客地址：<a href="https://blog.csdn.net/u014624447/article/details/111690418">博客地址</a></p>
</blockquote>
<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="Excel模板"><a href="#Excel模板" class="headerlink" title="Excel模板"></a>Excel模板</h2><blockquote>
<p>模板可以根据自己的习惯来创建，需要注意的是建表时我们需要的参数有：数据库名，表名，表注释，列名，列注释，列类型，列长度，列精度，是否主键，是否非空。</p>
</blockquote>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210224163817.png" alt="image-20210224163802424"></p>
<table>
<thead>
<tr>
<th>Database Name</th>
<th>your database name</th>
<th>Table Name (physical name)</th>
<th>your table name</th>
<th>Table Name (logical name)</th>
<th>你的表名</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Column Name (physical name)</td>
<td>Column Name (logical name)</td>
<td>Type</td>
<td>Length</td>
<td>Decimal</td>
<td>PK</td>
<td>NOT NULL</td>
</tr>
<tr>
<td>column 1</td>
<td>列 1</td>
<td>VARCHAR</td>
<td>255</td>
<td></td>
<td>*</td>
<td>*</td>
</tr>
</tbody></table>
<h1 id="撸代码"><a href="#撸代码" class="headerlink" title="撸代码"></a>撸代码</h1><h2 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h2><p>首先新建maven项目，并导入poi（用于操作excel）、lombok（简化实体类代码）依赖：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.poi<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>poi-ooxml<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.15<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>因为我们只需要控制台输入，并且输出sql语句，所以只需要这3个依赖即可。</p>
<h2 id="相关实体类"><a href="#相关实体类" class="headerlink" title="相关实体类"></a>相关实体类</h2><h3 id="数据类型常量类TableTypeConstant-java"><a href="#数据类型常量类TableTypeConstant-java" class="headerlink" title="数据类型常量类TableTypeConstant.java"></a>数据类型常量类TableTypeConstant.java</h3><p>定义MySQL的数据类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableTypeConstant</span> &#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">INT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;int&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">VARCHAR</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;varchar&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;date&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DATE_TIME=<span class="hljs-string">&quot;datetime&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TEXT</span> <span class="hljs-operator">=</span><span class="hljs-string">&quot;text&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LONG_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;longtext&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CHAR</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;char&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">LONG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;long&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TIME_STAMP</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;timestamp&quot;</span>;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String DECIMAL=<span class="hljs-string">&quot;decimal&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="字段信息ColumnEntity-java"><a href="#字段信息ColumnEntity-java" class="headerlink" title="字段信息ColumnEntity.java"></a>字段信息ColumnEntity.java</h3><p>定义我们关注的字段的关键信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ColumnEntity</span> &#123;<br>	<span class="hljs-comment">/*物理列名*/</span><br>	<span class="hljs-keyword">private</span> String physicalColumnName;<br>	<span class="hljs-comment">/*逻辑列名*/</span><br>	<span class="hljs-keyword">private</span> String logicalColumnName;<br>	<span class="hljs-comment">/*类型*/</span><br>	<span class="hljs-keyword">private</span> String type;<br>	<span class="hljs-comment">/*长度*/</span><br>	<span class="hljs-keyword">private</span> String length;<br>	<span class="hljs-comment">/*精度*/</span><br>	<span class="hljs-keyword">private</span> String decimal;<br>	<span class="hljs-comment">/*是否主键*/</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isPrimaryKey;<br>	<span class="hljs-comment">/*是否非空*/</span><br>	<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isNotNull;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="表信息TableEntity-java"><a href="#表信息TableEntity-java" class="headerlink" title="表信息TableEntity.java"></a>表信息TableEntity.java</h3><p>定义建表语句需要的信息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableEntity</span> &#123;<br>	<span class="hljs-comment">/*列信息*/</span><br>	<span class="hljs-keyword">private</span> List&lt;ColumnEntity&gt; entities;<br>	<span class="hljs-comment">/*表物理名*/</span><br>	<span class="hljs-keyword">private</span> String physicalTableName;<br>	<span class="hljs-comment">/*表逻辑名*/</span><br>	<span class="hljs-keyword">private</span> String logicalTableName;<br>	<span class="hljs-comment">/*数据库名*/</span><br>	<span class="hljs-keyword">private</span> String databaseName;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="业务类"><a href="#业务类" class="headerlink" title="业务类"></a>业务类</h2><h3 id="生成SQL语句Excel-java"><a href="#生成SQL语句Excel-java" class="headerlink" title="生成SQL语句Excel.java"></a>生成SQL语句Excel.java</h3><p>包含3个方法</p>
<ul>
<li><code>TableEntity readExcel(String excelPath)</code> 解析Excel并返回TableEntity</li>
<li><code>void convertSQL(TableEntity tableEntity)</code> 根据TableEntity生成SQL语句并写入txt</li>
<li><code>void writeTXT(String path, String value, String fileName)</code> 将字符串写入txt文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.bossYang.myBatisTest.bean.ColumnEntity;<br><span class="hljs-keyword">import</span> com.bossYang.myBatisTest.bean.TableEntity;<br><span class="hljs-keyword">import</span> com.bossYang.myBatisTest.bean.TableTypeConstant;<br><span class="hljs-keyword">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Row.MissingCellPolicy;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class="hljs-keyword">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class="hljs-keyword">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Excel</span> &#123;<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 读取excel并转换为表实体</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@param</span> excelPath</span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-keyword">public</span> TableEntity <span class="hljs-title function_">readExcel</span><span class="hljs-params">(String excelPath)</span> &#123;<br>		<span class="hljs-comment">// 解析模板对象List</span><br>		List&lt;ColumnEntity&gt; entities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ColumnEntity&gt;();<br>		<span class="hljs-comment">// 表物理名</span><br>		<span class="hljs-type">String</span> <span class="hljs-variable">physicalTableName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>		<span class="hljs-comment">// 表逻辑名</span><br>		<span class="hljs-type">String</span> <span class="hljs-variable">logicalTableName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>		<span class="hljs-comment">// 数据库名</span><br>		<span class="hljs-type">String</span> <span class="hljs-variable">databaseName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>		<span class="hljs-keyword">try</span> &#123;<br>			<span class="hljs-comment">// String encoding = &quot;GBK&quot;;</span><br>			<span class="hljs-type">File</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(excelPath);<br>			<span class="hljs-keyword">if</span> (excel.isFile() &amp;&amp; excel.exists()) &#123; <span class="hljs-comment">// 判断文件是否存在</span><br><br>				String[] split = excel.getName().split(<span class="hljs-string">&quot;\\.&quot;</span>); <span class="hljs-comment">// .是特殊字符，需要转义！！！！！</span><br>				Workbook wb;<br>				<span class="hljs-comment">// 根据文件后缀（xls/xlsx）进行判断</span><br>				<span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;xls&quot;</span>.equals(split[<span class="hljs-number">1</span>])) &#123;<br>					<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(excel); <span class="hljs-comment">// 文件流对象</span><br>					wb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HSSFWorkbook</span>(fis);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;xlsx&quot;</span>.equals(split[<span class="hljs-number">1</span>])) &#123;<br>					wb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XSSFWorkbook</span>(excel);<br>				&#125; <span class="hljs-keyword">else</span> &#123;<br>					System.out.println(<span class="hljs-string">&quot;文件类型错误!&quot;</span>);<br>					<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>				&#125;<br><br>				<span class="hljs-comment">// 开始解析</span><br>				<span class="hljs-type">Sheet</span> <span class="hljs-variable">sheet</span> <span class="hljs-operator">=</span> wb.getSheetAt(<span class="hljs-number">0</span>); <span class="hljs-comment">// 读取sheet 0</span><br><br>				<span class="hljs-type">int</span> <span class="hljs-variable">firstRowIndex</span> <span class="hljs-operator">=</span> sheet.getFirstRowNum() + <span class="hljs-number">2</span>; <span class="hljs-comment">// 第一、二行是列名，所以不读，从第三行开始读</span><br>				<span class="hljs-type">int</span> <span class="hljs-variable">lastRowIndex</span> <span class="hljs-operator">=</span> sheet.getLastRowNum();<br>				<span class="hljs-comment">// System.out.println(&quot;firstRowIndex: &quot;+firstRowIndex);</span><br>				<span class="hljs-comment">// System.out.println(&quot;lastRowIndex: &quot;+lastRowIndex);</span><br><br>				<span class="hljs-comment">// 解析模板对象List</span><br>				entities = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ColumnEntity&gt;();<br>				<span class="hljs-comment">// 数据库名</span><br>				databaseName = sheet.getRow(<span class="hljs-number">0</span>).getCell(<span class="hljs-number">1</span>).getStringCellValue();<br>				<span class="hljs-comment">// 表物理名</span><br>				physicalTableName = sheet.getRow(<span class="hljs-number">0</span>).getCell(<span class="hljs-number">3</span>).getStringCellValue();<br>				<span class="hljs-comment">// 表逻辑名</span><br>				logicalTableName = sheet.getRow(<span class="hljs-number">0</span>).getCell(<span class="hljs-number">5</span>).getStringCellValue();<br><br>				<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rIndex</span> <span class="hljs-operator">=</span> firstRowIndex; rIndex &lt;= lastRowIndex; rIndex++) &#123; <span class="hljs-comment">// 遍历行</span><br>					<span class="hljs-comment">// System.out.println(&quot;rIndex: &quot; + rIndex);</span><br>					<span class="hljs-type">ColumnEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ColumnEntity</span>();<br>					<span class="hljs-type">Row</span> <span class="hljs-variable">row</span> <span class="hljs-operator">=</span> sheet.getRow(rIndex);<br>					<span class="hljs-keyword">if</span> (row != <span class="hljs-literal">null</span>) &#123;<br>						<span class="hljs-keyword">if</span> (row.getCell(<span class="hljs-number">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue() == <span class="hljs-literal">null</span> || row<br>								.getCell(<span class="hljs-number">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue().isEmpty()) &#123;<br>							<span class="hljs-keyword">continue</span>;<br>						&#125;<br>						<span class="hljs-comment">/*</span><br><span class="hljs-comment">						 * int firstCellIndex = row.getFirstCellNum(); int lastCellIndex =</span><br><span class="hljs-comment">						 * row.getLastCellNum(); for (int cIndex = firstCellIndex; cIndex &lt;</span><br><span class="hljs-comment">						 * lastCellIndex; cIndex++) &#123; //遍历列 Cell cell = row.getCell(cIndex); if (cell !=</span><br><span class="hljs-comment">						 * null) &#123; System.out.println(cell.toString()); &#125; &#125;</span><br><span class="hljs-comment">						 */</span><br>						<br>						<span class="hljs-comment">// 解析对象</span><br>						entity.setPhysicalColumnName(<br>								row.getCell(<span class="hljs-number">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class="hljs-comment">// 列物理名</span><br>						entity.setLogicalColumnName(<br>								row.getCell(<span class="hljs-number">1</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class="hljs-comment">// 列逻辑名</span><br>						entity.setType(row.getCell(<span class="hljs-number">2</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class="hljs-comment">// 类型</span><br>						entity.setLength(row.getCell(<span class="hljs-number">3</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class="hljs-comment">// 长度</span><br>						entity.setDecimal(row.getCell(<span class="hljs-number">4</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class="hljs-comment">// 精度</span><br>						entity.setPrimaryKey(<span class="hljs-string">&quot;*&quot;</span><br>								.equals(row.getCell(<span class="hljs-number">5</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue()));<span class="hljs-comment">// 是否主键</span><br>						entity.setNotNull(<span class="hljs-string">&quot;*&quot;</span><br>								.equals(row.getCell(<span class="hljs-number">6</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue()));<span class="hljs-comment">// 是否非空</span><br>						<span class="hljs-comment">// 存入list</span><br>						entities.add(entity);<br>					&#125;<br>				&#125;<br>			&#125; <span class="hljs-keyword">else</span> &#123;<br>				System.out.println(<span class="hljs-string">&quot;找不到指定的文件&quot;</span>);<br>				<span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>			&#125;<br>		&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>			e.printStackTrace();<br>		&#125;<br><br>		<span class="hljs-type">TableEntity</span> <span class="hljs-variable">tableEntity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableEntity</span>();<br>		tableEntity.setEntities(entities);<br>		tableEntity.setDatabaseName(databaseName);<br>		tableEntity.setLogicalTableName(logicalTableName);<br>		tableEntity.setPhysicalTableName(physicalTableName);<br>		<span class="hljs-keyword">return</span> tableEntity;<br>	&#125;<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 将表实体转换为sql并输出为txt</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@param</span> tableEntity</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">convertSQL</span><span class="hljs-params">(TableEntity tableEntity)</span> &#123;<br>		<span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>		sql.append(<span class="hljs-string">&quot;CREATE TABLE `&quot;</span>);<br>		sql.append(tableEntity.getDatabaseName());<br>		sql.append(<span class="hljs-string">&quot;`.`&quot;</span>);<br>		sql.append(tableEntity.getPhysicalTableName());<br>		sql.append(<span class="hljs-string">&quot;` (&quot;</span>);<br>		<span class="hljs-comment">// CREATE TABLE `databaseName`.`tablePhysicalName` (</span><br>		List&lt;ColumnEntity&gt; cellEnties = tableEntity.getEntities();<br>		<span class="hljs-comment">// 主键</span><br>		<span class="hljs-type">String</span> <span class="hljs-variable">primaryKey</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>		<span class="hljs-comment">// 获取主键</span><br>		<span class="hljs-keyword">for</span> (ColumnEntity item : cellEnties) &#123;<br>			<span class="hljs-comment">// 将pk为true的设为主键</span><br>			<span class="hljs-keyword">if</span> (item.isPrimaryKey()) &#123;<br>				primaryKey = item.getPhysicalColumnName();<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>		&#125;<br>		<span class="hljs-comment">// 循环列</span><br>		<span class="hljs-keyword">for</span> (ColumnEntity item : cellEnties) &#123;<br>			sql.append(<span class="hljs-string">&quot; `&quot;</span>);<br>			sql.append(item.getPhysicalColumnName().trim());<br>			sql.append(<span class="hljs-string">&quot;` &quot;</span>);<br>			<span class="hljs-comment">// `physicalColumnName`</span><br><br>			<span class="hljs-comment">// 根据NOT NULL 来拼接</span><br>			<span class="hljs-keyword">if</span> (item.isNotNull()) &#123; <span class="hljs-comment">// 如果不允许为空，则拼接NOT NULL</span><br>				<span class="hljs-comment">//类型</span><br>				<span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> item.getType().toLowerCase();<br>				<span class="hljs-comment">//类型转换</span><br>				<span class="hljs-keyword">if</span>(type.indexOf(<span class="hljs-string">&quot;varchar&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type= TableTypeConstant.VARCHAR;<br>				&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.indexOf(<span class="hljs-string">&quot;number&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type=TableTypeConstant.INT;<br>					<span class="hljs-comment">//默认长度</span><br>					<span class="hljs-keyword">if</span>(item.getLength()==<span class="hljs-literal">null</span>||item.getLength().isEmpty()) &#123;<br>						item.setLength(<span class="hljs-string">&quot;11&quot;</span>);<br>					&#125;<br>				&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.indexOf(<span class="hljs-string">&quot;char&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type=TableTypeConstant.CHAR;<br>				&#125;<br><br>				<br>				<span class="hljs-comment">// 根据类型选择是否拼接长度</span><br>				<span class="hljs-keyword">if</span> (TableTypeConstant.CHAR.equals(type) || TableTypeConstant.VARCHAR.equals(type)) &#123; <span class="hljs-comment">// 文本需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(&quot;</span>);<br>					sql.append(item.getLength());<br>					sql.append(<span class="hljs-string">&quot;) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.TEXT.equals(type) || TableTypeConstant.LONG_TEXT.equals(type)) &#123; <span class="hljs-comment">// 文本不需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.DATE.equals(type)) &#123; <span class="hljs-comment">// 时间不需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot; NOT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.DATE_TIME.equals(type)||TableTypeConstant.TIME_STAMP.equals(type)) &#123; <span class="hljs-comment">// 时间需要拼接长度 并且长度为0</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(0) NOT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.INT.equals(type)) &#123; <span class="hljs-comment">// 数字需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(&quot;</span>);<br>					sql.append(item.getLength());<br>					sql.append(<span class="hljs-string">&quot;)  NOT NULL COMMENT &#x27;&quot;</span>);<br>				&#125;<br>			&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果允许为空，则拼接 NULL DEFAULT NULL</span><br>				<br>				<span class="hljs-type">String</span> <span class="hljs-variable">type</span> <span class="hljs-operator">=</span> item.getType().toLowerCase();<br>				<span class="hljs-comment">//类型转换</span><br>				<span class="hljs-keyword">if</span>(type.indexOf(<span class="hljs-string">&quot;varchar&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type=TableTypeConstant.VARCHAR;<br>				&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (type.indexOf(<span class="hljs-string">&quot;number&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type=TableTypeConstant.INT;<br>					<span class="hljs-comment">//默认长度</span><br>					<span class="hljs-keyword">if</span>(item.getLength()==<span class="hljs-literal">null</span>||item.getLength().isEmpty()) &#123;<br>						item.setLength(<span class="hljs-string">&quot;11&quot;</span>);<br>					&#125;<br>				&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(type.indexOf(<span class="hljs-string">&quot;char&quot;</span>)!=-<span class="hljs-number">1</span>) &#123;<br>					type=TableTypeConstant.CHAR;<br>				&#125;<br>				<br>				<span class="hljs-comment">// 根据类型选择是否拼接长度</span><br>				<span class="hljs-keyword">if</span> (TableTypeConstant.CHAR.equals(type) || TableTypeConstant.VARCHAR.equals(type)) &#123; <span class="hljs-comment">// 文本需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(&quot;</span>);<br>					sql.append(item.getLength());<br>					sql.append(<span class="hljs-string">&quot;) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.TEXT.equals(type) || TableTypeConstant.LONG_TEXT.equals(type)) &#123; <span class="hljs-comment">// 文本不需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.DATE.equals(type)) &#123; <span class="hljs-comment">// 时间不需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot; NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.DATE_TIME.equals(type)||TableTypeConstant.TIME_STAMP.equals(type)) &#123; <span class="hljs-comment">// 时间需要拼接长度 并且长度为0</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(0) NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (TableTypeConstant.INT.equals(type) || TableTypeConstant.BIG_INT.equals(type) || TableTypeConstant.LONG.equals(type)) &#123; <span class="hljs-comment">// 数字需要拼接长度</span><br>					sql.append(type);<br>					sql.append(<span class="hljs-string">&quot;(&quot;</span>);<br>					sql.append(item.getLength());<br>					sql.append(<span class="hljs-string">&quot;)  NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>				&#125;<br>			&#125;<br><br>			<span class="hljs-comment">// 拼接逻辑列名</span><br>			sql.append(item.getLogicalColumnName());<br>			sql.append(<span class="hljs-string">&quot;&#x27;,&quot;</span>);<br>		&#125;<br><br>		<span class="hljs-comment">// 拼接主键</span><br>		sql.append(<span class="hljs-string">&quot; PRIMARY KEY (`&quot;</span>);<br>		sql.append(primaryKey);<br>		sql.append(<span class="hljs-string">&quot;`) USING BTREE ) &quot;</span>);<br>		<span class="hljs-comment">// 拼接引擎和逻辑表名</span><br>		sql.append(<span class="hljs-string">&quot;ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#x27;&quot;</span>);<br>		sql.append(tableEntity.getLogicalTableName());<br>		sql.append(<span class="hljs-string">&quot;&#x27;  ROW_FORMAT = Compact;&quot;</span>);<br>		System.err.println(sql);<br>		<span class="hljs-keyword">try</span> &#123;<br>			writeTXT(<span class="hljs-string">&quot;&quot;</span>, sql.toString(), tableEntity.getPhysicalTableName() + tableEntity.getLogicalTableName());<br>			System.out<br>					.println(<span class="hljs-string">&quot;已导出:&quot;</span> + tableEntity.getPhysicalTableName() + tableEntity.getLogicalTableName() + <span class="hljs-string">&quot;.txt!&quot;</span>);<br>		&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>			e.printStackTrace();<br>			System.err.println(<span class="hljs-string">&quot;导出文件失败&quot;</span>);<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">/**</span><br><span class="hljs-comment">	 * 将字符串写入txt并导出</span><br><span class="hljs-comment">	 * </span><br><span class="hljs-comment">	 * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment">	 */</span><br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">writeTXT</span><span class="hljs-params">(String path, String value, String fileName)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>		<span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path + fileName + <span class="hljs-string">&quot;.txt&quot;</span>);<br>		<span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(f);<br>		<span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">dos1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(fos1);<br>		dos1.write(value);<br>		dos1.close();<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="主入口"><a href="#主入口" class="headerlink" title="主入口"></a>主入口</h2><p>通过控制台输入Excel路径，会在jar包同级目录下生成包含建表SQL的TXT文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainApplication</span> &#123;<br>	<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>		<span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>			<span class="hljs-type">Excel</span> <span class="hljs-variable">excel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Excel</span>();<br>			<span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>			System.err.println(<span class="hljs-string">&quot;请输入Excel的路径：&quot;</span>);<br>			<span class="hljs-type">String</span> <span class="hljs-variable">excelPath</span> <span class="hljs-operator">=</span> scanner.nextLine();<br>			<span class="hljs-type">TableEntity</span> <span class="hljs-variable">tEntity</span> <span class="hljs-operator">=</span> excel.readExcel(excelPath);<br>			<span class="hljs-keyword">if</span>(tEntity==<span class="hljs-literal">null</span>) &#123;<br>				<span class="hljs-keyword">continue</span>;<br>			&#125;<br>			excel.convertSQL(tEntity);<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>基本上就是解析EXCEL，然后根据数据类型拼接SQL语句。</p>
<p>目前支持情况：</p>
<ul>
<li><input checked="" disabled="" type="checkbox"> VARCHAR</li>
<li><input checked="" disabled="" type="checkbox"> INT</li>
<li><input checked="" disabled="" type="checkbox"> LONG</li>
<li><input checked="" disabled="" type="checkbox"> DATE</li>
<li><input checked="" disabled="" type="checkbox"> DATETIME</li>
<li><input checked="" disabled="" type="checkbox"> TIMESTAMP</li>
<li><input checked="" disabled="" type="checkbox"> TEXT</li>
<li><input checked="" disabled="" type="checkbox"> LONGTEXT</li>
<li><input checked="" disabled="" type="checkbox"> CHAR</li>
<li><input checked="" disabled="" type="checkbox"> 是否为空</li>
<li><input checked="" disabled="" type="checkbox"> 单主键</li>
<li><input checked="" disabled="" type="checkbox"> BIGINT</li>
<li><input disabled="" type="checkbox"> FLOAT</li>
<li><input disabled="" type="checkbox"> DOUBLE</li>
<li><input disabled="" type="checkbox"> DECIMAL</li>
<li><input disabled="" type="checkbox"> 联合主键</li>
<li><input disabled="" type="checkbox"> 自定义字符集编码</li>
</ul>
<blockquote>
<p>较原文没啥改动，只是增加了部分字段，处理了部分默认值问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>POI</category>
      </categories>
      <tags>
        <tag>POI</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(6)-链路追踪</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(6)-%E9%93%BE%E8%B7%AF%E8%BF%BD%E8%B8%AA/</url>
    <content><![CDATA[<h1 id="链路追踪介绍"><a href="#链路追踪介绍" class="headerlink" title="链路追踪介绍"></a>链路追踪介绍</h1><p>在大型系统的微服务化构建中，一个系统被拆分成了许多模块。这些模块负责不同的功能，组合成 系统，最终可以提供丰富的功能。在这种架构中，一次请求往往需要涉及到多个服务。互联网应用构建 在不同的软件模块集上，这些软件模块，有可能是由不同的团队开发、可能使用不同的编程语言来实 现、有可能布在了几千台服务器，横跨多个不同的数据中心，也就意味着这种架构形式也会存在一些问 题：</p>
<ul>
<li>如何快速发现问题？</li>
<li>如何判断故障影响范围？</li>
<li>如何梳理服务依赖以及依赖的合理性？</li>
<li>如何分析链路性能问题以及实时容量规划？</li>
</ul>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Finews.gtimg.com%2Fnewsapp_match%2F0%2F2796324795%2F0.jpg&refer=http%3A%2F%2Finews.gtimg.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641301857&t=92fce1c5245626e18aefe3fc370870a0" alt="img"></p>
<p>分布式链路追踪（Distributed Tracing），就是将一次分布式请求还原成调用链路，进行日志记 录，性能监控并将一次分布式请求的调用情况集中展示。比如各个服务节点上的耗时、请求具体到达哪 台机器上、每个服务节点的请求状态等等。</p>
<p>常见的链路追踪技术有下面这些：</p>
<ul>
<li><p>cat</p>
<p>由大众点评开源，基于Java开发的实时应用监控平台，包括实时应用监控，业务监控 。 集成 方案是通过代码埋点的方式来实现监控，比如： 拦截器，过滤器等。 对代码的侵入性很大，集成成本较高。风险较大。</p>
</li>
<li><p>zipkin</p>
<p>由Twitter公司开源，开放源代码分布式的跟踪系统，用于收集服务的定时数据，以解决微 服务架构中的延迟问题，包括：数据的收集、存储、查找和展现。该产品结合spring-cloud-sleuth 使用较为简单， 集成很方便， 但是功能较简单。</p>
</li>
<li><p>pinpoint</p>
<p>Pinpoint是韩国人开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点 是支持多种插件，UI功能强大，接入端无代码侵入。</p>
</li>
<li><p>skywalking</p>
<p>SkyWalking是本土开源的基于字节码注入的调用链分析，以及应用监控分析工具。特点是支持多 种插件，UI功能较强，接入端无代码侵入。目前已加入Apache孵化器。</p>
</li>
<li><p>Sleuth</p>
<p>SpringCloud 提供的分布式系统中链路追踪解决方案。</p>
</li>
</ul>
<blockquote>
<p>注意：SpringCloud alibaba技术栈中并没有提供自己的链路追踪技术的，我们可以采用Sleuth + Zinkin来做链路追踪解决方案</p>
</blockquote>
<h1 id="Sleuth入门"><a href="#Sleuth入门" class="headerlink" title="Sleuth入门"></a>Sleuth入门</h1><h2 id="Sleuth介绍"><a href="#Sleuth介绍" class="headerlink" title="Sleuth介绍"></a>Sleuth介绍</h2><p>SpringCloud Sleuth主要功能就是在分布式系统中提供追踪解决方案。它大量借用了Google Dapper的设计，  先来了解一下Sleuth中的术语和相关概念。</p>
<ul>
<li><p>Trace<br>由一组Trace Id相同的Span串联形成一个树状结构。为了实现请求跟踪，当请求到达分布式系统的 入口端点时，只需要服务跟踪框架为该请求创建一个唯一的标识（即TraceId），同时在分布式系 统内部流转的时候，框架始终保持传递该唯一值，直到整个请求的返回。那么我们就可以使用该唯 一标识将所有的请求串联起来，形成一条完整的请求链路。</p>
</li>
<li><p>Span</p>
<p>代表了一组基本的工作单元。为了统计各处理单元的延迟，当请求到达各个服务组件的时 候，也通过一个唯一标识（SpanId）来标记它的开始、具体过程和结束。通过SpanId的开始和结 束时间戳，就能统计该span的调用时间，除此之外，我们还可以获取如事件的名称。请求信息等<br>元数据。</p>
</li>
<li><p>Annotation<br>用它记录一段时间内的事件，内部使用的重要注释：<br>cs（Client Send）客户端发出请求，开始一个请求的生命<br>sr（Server Received）服务端接受到请求开始进行处理， sr－cs &#x3D; 网络延迟（服务调用的时间）<br>ss（Server Send）服务端处理完毕准备发送到客户端，ss - sr &#x3D; 服务器上的请求处理时间<br>cr（Client Reveived）客户端接受到服务端的响应，请求结束。 cr - sr &#x3D; 请求的总时间</p>
</li>
</ul>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2F20200324200951328.png%3Fx-oss-process%3Dimage%2Fwatermark%2Ctype_ZmFuZ3poZW5naGVpdGk%2Cshadow_10%2Ctext_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyODk3NDI3%2Csize_16%2Ccolor_FFFFFF%2Ct_70&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641302195&t=1525c90d9956807e8679a9e0afdf3b59" alt="img"></p>
<h2 id="Sleuth入门-1"><a href="#Sleuth入门-1" class="headerlink" title="Sleuth入门"></a>Sleuth入门</h2><p>微服务名称, traceId, spanid,是否将链路的追踪结果输出到第三方平台<br>[api-gateway,3977125f73391553,3977125f73391553,false]<br>[service-order,3977125f73391553,57547b5bf71f8242,false]<br>[service-product,3977125f73391553,449f5b3f3ef8d5c5,false]</p>
<p>接下来通过之前的项目案例整合Sleuth，完成入门案例的编写。<br>修改父工程引入Sleuth依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 链路追踪 sleuth --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-sleuth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>启动微服务，调用之后，我们可以在控制台观察到sleuth的日志输出</p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Egy1gx3bfihq8zj315j07y1bc.jpg" alt="image.png"></p>
<p>其中 [0]是TraceId， [1]是SpanId，依次调用有一个全局的 TraceId，将调用链路串起来。仔细分析每个微服务的日志，不难看出请求的具体过程。<br>查看日志文件并不是一个很好的方法，当微服务越来越多日志文件也会越来越多，通过Zipkin可以 将日志聚合，并进行可视化展示和全文检索。</p>
<h2 id="Zipkin的集成"><a href="#Zipkin的集成" class="headerlink" title="Zipkin的集成"></a>Zipkin的集成</h2><h3 id="ZipKin介绍"><a href="#ZipKin介绍" class="headerlink" title="ZipKin介绍"></a>ZipKin介绍</h3><p>Zipkin 是 Twitter 的一个开源项目，它基于Google Dapper实现，它致力于收集服务的定时数据， 以解决微服务架构中的延迟问题，包括数据的收集、存储、查找和展现。我们可以使用它来收集各个服务器上请求链路的跟踪数据，并通过它提供的REST API接口来辅助我<br>们查询跟踪数据以实现对分布式系统的监控程序，从而及时地发现系统中出现的延迟升高问题并找出系 统性能瓶颈的根源。除了面向开发的 API 接口之外，它也提供了方便的UI组件来帮助我们直观的搜索跟踪信息和分析请 求链路明细，比如：可以查询某段时间内各用户请求的处理时间等。<br>Zipkin 提供了可插拔数据存储方式：In-Memory、MySql、Cassandra 以及 Elasticsearch。</p>
<p><img src="https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fwww.uml.org.cn%2Fwfw%2Fimages%2F2020041729.png&refer=http%3A%2F%2Fwww.uml.org.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1641305915&t=d45b1222d254b719574d2cf605e93ff9" alt="img"></p>
<p>上图展示了 Zipkin 的基础架构，它主要由 4 个核心组件构成：</p>
<ul>
<li><p>Collector：</p>
<p>收集器组件，它主要用于处理从外部系统发送过来的跟踪信息，将这些信息转换为 Zipkin内部处理的 Span 格式，以支持后续的存储、分析、展示等功能。</p>
</li>
<li><p>Storage：</p>
<p>存储组件，它主要对处理收集器接收到的跟踪信息，默认会将这些信息存储在内存中， 我们也可以修改此存储策略，通过使用其他存储组件将跟踪信息存储到数据库中。</p>
</li>
<li><p>RESTful API：</p>
<p>API 组件，它主要用来提供外部访问接口。比如给客户端展示跟踪信息，或是外接 系统访问以实现监控等。</p>
</li>
<li><p>Web UI：</p>
<p>UI 组件，  基于API组件实现的上层应用。通过UI组件用户可以方便而有直观地查询和分 析跟踪信息。</p>
</li>
</ul>
<p>Zipkin分为两端，一个是 Zipkin服务端，一个是 Zipkin客户端，客户端也就是微服务的应用。 客户端会 配置服务端的 URL 地址，一旦发生服务间的调用的时候，会被配置在微服务里面的 Sleuth 的监听器监 听，并生成相应的 Trace 和 Span 信息发送给服务端。</p>
<h3 id="ZipKin服务端安装"><a href="#ZipKin服务端安装" class="headerlink" title="ZipKin服务端安装"></a>ZipKin服务端安装</h3><blockquote>
<p><a href="https://zipkin.io/pages/quickstart">ZpinKin官网地址</a></p>
<p>本文只用官网提供的Java方式进行下载。</p>
</blockquote>
<h4 id="下载压缩包"><a href="#下载压缩包" class="headerlink" title="下载压缩包"></a>下载压缩包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">curl -sSL https://zipkin.io/quickstart.sh | bash -s<br></code></pre></td></tr></table></figure>

<h4 id="运行jar包"><a href="#运行jar包" class="headerlink" title="运行jar包"></a>运行jar包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -jar zipkin.jar<br></code></pre></td></tr></table></figure>

<p><img src="http://tva1.sinaimg.cn/large/006seI3Ely1gy6bic4jbpj31h20m2b29.jpg" alt="image-20220103222204858.png"></p>
<blockquote>
<p>由于博主在Linux上运行的，所以需要进行开放一下端口。</p>
<ul>
<li>查看防火墙是否开启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl status firewalld<br></code></pre></td></tr></table></figure>

<ul>
<li>若没有开启则是开启状态</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl start firewalld  #关闭则start改为stop<br></code></pre></td></tr></table></figure>

<ul>
<li>查看所有开启的端口</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">firewall-cmd --list-ports<br><span class="hljs-meta prompt_"># </span><span class="language-bash">注：启动防火墙后，默认没有开启任何端口，需要手动开启端口</span><br></code></pre></td></tr></table></figure>

<ul>
<li>防火墙开启端口访问</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">firewall-cmd --zone=public --add-port=80/tcp --permanent<br><span class="hljs-meta prompt_"># </span><span class="language-bash">命令含义：</span>  <br><span class="hljs-meta prompt_"># </span><span class="language-bash">      --zone               作用域</span>   <br><span class="hljs-meta prompt_"># </span><span class="language-bash">      --add-port=80/tcp    添加端口，格式为：端口/通讯协议</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">      --permanent          永久生效，没有此参数重启后失效</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">注：开启后需要重启防火墙才生效</span>   <br></code></pre></td></tr></table></figure>

<ul>
<li>重启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">firewall-cmd --reload<br></code></pre></td></tr></table></figure>

<blockquote>
<p>再执行 firewall-cmd –list-ports查看一次，则发现已开启.</p>
</blockquote>
</blockquote>
<h4 id="访问测试"><a href="#访问测试" class="headerlink" title="访问测试"></a>访问测试</h4><p>输入地址<code>http://192.168.56.121:9411/</code>进行访问</p>
<h3 id="Zipkin客户端集成"><a href="#Zipkin客户端集成" class="headerlink" title="Zipkin客户端集成"></a>Zipkin客户端集成</h3><p>ZipKin客户端和Sleuth的集成非常简单，只需要在微服务中添加其依赖和配置即可。</p>
<h4 id="在每个微服务上添加依赖"><a href="#在每个微服务上添加依赖" class="headerlink" title="在每个微服务上添加依赖"></a>在每个微服务上添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- zipkin 链路追踪 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-zipkin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">zipkin:</span><br>  <span class="hljs-attr">base-url:</span> <span class="hljs-string">http://192.168.56.121:9411/</span> <span class="hljs-comment">#zipkin server的请求地址</span><br>  <span class="hljs-attr">discovery-client-enabled:</span> <span class="hljs-literal">false</span> <span class="hljs-comment">#让nacos把它当成一个URL，而不要当做服务名</span><br><span class="hljs-attr">sleuth:</span><br>  <span class="hljs-attr">sampler:</span><br>    <span class="hljs-attr">probability:</span> <span class="hljs-number">1.0</span> <span class="hljs-comment">#采样的百分比</span><br></code></pre></td></tr></table></figure>

<h4 id="访问端口测试"><a href="#访问端口测试" class="headerlink" title="访问端口测试"></a>访问端口测试</h4><p><code>curl -H &quot;ACCESS_TOKEN:1&quot; http://localhost:7000/shop-order/order/save/1</code></p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Ely1gy6bjwgp63j31ax03wdmu.jpg" alt="image-20220103223804116.png"></p>
<h4 id="访问Zipkin"><a href="#访问Zipkin" class="headerlink" title="访问Zipkin"></a>访问Zipkin</h4><p><img src="http://tva1.sinaimg.cn/large/006seI3Ely1gy6bkh1cbyj31gg0h1q97.jpg" alt="image-20220103224022982.png"></p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Ely1gy6bkx1rebj31h60hxagr.jpg" alt="image-20220103223853918.png"></p>
<h3 id="ZipKin数据持久化"><a href="#ZipKin数据持久化" class="headerlink" title="ZipKin数据持久化"></a>ZipKin数据持久化</h3><p>Zipkin Server默认会将追踪数据信息保存到内存，但这种方式不适合生产环境。Zipkin支持将追踪 数据持久化到mysql数据库或elasticsearch中。</p>
<h4 id="使用mysql实现数据持久化"><a href="#使用mysql实现数据持久化" class="headerlink" title="使用mysql实现数据持久化"></a>使用mysql实现数据持久化</h4><h5 id="创建mysql数据环境"><a href="#创建mysql数据环境" class="headerlink" title="创建mysql数据环境"></a>创建mysql数据环境</h5><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Copyright 2015-2019 The OpenZipkin Authors</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Licensed under the Apache License, Version 2.0 (the &quot;License&quot;); you may not use this file except</span><br><span class="hljs-comment">-- in compliance with the License. You may obtain a copy of the License at</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- http://www.apache.org/licenses/LICENSE-2.0</span><br><span class="hljs-comment">--</span><br><span class="hljs-comment">-- Unless required by applicable law or agreed to in writing, software distributed under the License</span><br><span class="hljs-comment">-- is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express</span><br><span class="hljs-comment">-- or implied. See the License for the specific language governing permissions and limitations under</span><br><span class="hljs-comment">-- the License.</span><br><span class="hljs-comment">--</span><br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> zipkin_spans (<br>  `trace_id_high` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,<br>  `trace_id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `remote_service_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>),<br>  `parent_id` <span class="hljs-type">BIGINT</span>,<br>  `debug` BIT(<span class="hljs-number">1</span>),<br>  `start_ts` <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;Span.timestamp(): epoch micros used for endTs query and to implement TTL&#x27;</span>,<br>  `duration` <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;Span.duration(): micros used for minDuration and maxDuration query&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`trace_id_high`, `trace_id`, `id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB ROW_FORMAT<span class="hljs-operator">=</span>COMPRESSED <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_spans <span class="hljs-keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="hljs-string">&#x27;for getTracesByIds&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_spans <span class="hljs-keyword">ADD</span> INDEX(`name`) COMMENT <span class="hljs-string">&#x27;for getTraces and getSpanNames&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_spans <span class="hljs-keyword">ADD</span> INDEX(`remote_service_name`) COMMENT <span class="hljs-string">&#x27;for getTraces and getRemoteServiceNames&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_spans <span class="hljs-keyword">ADD</span> INDEX(`start_ts`) COMMENT <span class="hljs-string">&#x27;for getTraces ordering and range&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> zipkin_annotations (<br>  `trace_id_high` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">DEFAULT</span> <span class="hljs-number">0</span> COMMENT <span class="hljs-string">&#x27;If non zero, this means the trace uses 128 bit traceIds instead of 64 bit&#x27;</span>,<br>  `trace_id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;coincides with zipkin_spans.trace_id&#x27;</span>,<br>  `span_id` <span class="hljs-type">BIGINT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;coincides with zipkin_spans.id&#x27;</span>,<br>  `a_key` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;BinaryAnnotation.key or Annotation.value if type == -1&#x27;</span>,<br>  `a_value` <span class="hljs-type">BLOB</span> COMMENT <span class="hljs-string">&#x27;BinaryAnnotation.value(), which must be smaller than 64KB&#x27;</span>,<br>  `a_type` <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;BinaryAnnotation.type() or -1 if Annotation&#x27;</span>,<br>  `a_timestamp` <span class="hljs-type">BIGINT</span> COMMENT <span class="hljs-string">&#x27;Used to implement TTL; Annotation.timestamp or zipkin_spans.timestamp&#x27;</span>,<br>  `endpoint_ipv4` <span class="hljs-type">INT</span> COMMENT <span class="hljs-string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,<br>  `endpoint_ipv6` <span class="hljs-type">BINARY</span>(<span class="hljs-number">16</span>) COMMENT <span class="hljs-string">&#x27;Null when Binary/Annotation.endpoint is null, or no IPv6 address&#x27;</span>,<br>  `endpoint_port` <span class="hljs-type">SMALLINT</span> COMMENT <span class="hljs-string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span>,<br>  `endpoint_service_name` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) COMMENT <span class="hljs-string">&#x27;Null when Binary/Annotation.endpoint is null&#x27;</span><br>) ENGINE<span class="hljs-operator">=</span>InnoDB ROW_FORMAT<span class="hljs-operator">=</span>COMPRESSED <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">UNIQUE</span> KEY(`trace_id_high`, `trace_id`, `span_id`, `a_key`, `a_timestamp`) COMMENT <span class="hljs-string">&#x27;Ignore insert on duplicate&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`, `span_id`) COMMENT <span class="hljs-string">&#x27;for joining with zipkin_spans&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`trace_id_high`, `trace_id`) COMMENT <span class="hljs-string">&#x27;for getTraces/ByIds&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`endpoint_service_name`) COMMENT <span class="hljs-string">&#x27;for getTraces and getServiceNames&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`a_type`) COMMENT <span class="hljs-string">&#x27;for getTraces and autocomplete values&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`a_key`) COMMENT <span class="hljs-string">&#x27;for getTraces and autocomplete values&#x27;</span>;<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> zipkin_annotations <span class="hljs-keyword">ADD</span> INDEX(`trace_id`, `span_id`, `a_key`) COMMENT <span class="hljs-string">&#x27;for dependencies job&#x27;</span>;<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> IF <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> zipkin_dependencies (<br>  `<span class="hljs-keyword">day</span>` <span class="hljs-type">DATE</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `parent` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `child` <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">255</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>  `call_count` <span class="hljs-type">BIGINT</span>,<br>  `error_count` <span class="hljs-type">BIGINT</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`<span class="hljs-keyword">day</span>`, `parent`, `child`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB ROW_FORMAT<span class="hljs-operator">=</span>COMPRESSED <span class="hljs-type">CHARACTER</span> <span class="hljs-keyword">SET</span><span class="hljs-operator">=</span>utf8 <span class="hljs-keyword">COLLATE</span> utf8_general_ci;<br></code></pre></td></tr></table></figure>

<h5 id="启动Zipkin"><a href="#启动Zipkin" class="headerlink" title="启动Zipkin"></a>启动Zipkin</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -jar zipkin.jar --STORAGE_TYPE=mysql --MYSQL_HOST=192.168.56.120 --MYSQL_TCP_PORT=3306 --MYSQL_DB=zipkin --MYSQL_USER=root --MYSQL_PASS=123456<br></code></pre></td></tr></table></figure>

<h4 id="使用elasticsearch实现数据持久化"><a href="#使用elasticsearch实现数据持久化" class="headerlink" title="使用elasticsearch实现数据持久化"></a>使用elasticsearch实现数据持久化</h4><h5 id="下载elasticsearch"><a href="#下载elasticsearch" class="headerlink" title="下载elasticsearch"></a>下载elasticsearch</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">wget https://mirrors.huaweicloud.com/elasticsearch/7.10.1/elasticsearch-7.10.1-linux-x86_64.tar.gz<br></code></pre></td></tr></table></figure>

<h5 id="启动elasticsearch"><a href="#启动elasticsearch" class="headerlink" title="启动elasticsearch"></a>启动elasticsearch</h5><blockquote>
<p>注意：ES5以后LINUX系统只能允许非ROOT用户进行启动</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">groupadd elasticsearch<br>useradd elasticsearch -g elasticsearch<br>passwd elasticsearch<br>chown -R elasticsearch:elasticsearch elasticsearch-7.10.1<br>./elasticsearch<br></code></pre></td></tr></table></figure>

<h5 id="启动Zipkin-1"><a href="#启动Zipkin-1" class="headerlink" title="启动Zipkin"></a>启动Zipkin</h5><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -jar zipkin.jar STORAGE_TYPE=elasticsearch ES_HOST=http://192.168.56.121:9200<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot-多配置项处理</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/SpringBoot-%E5%A4%9A%E9%85%8D%E7%BD%AE%E9%A1%B9%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="背景简介"><a href="#背景简介" class="headerlink" title="背景简介"></a>背景简介</h1><blockquote>
<p>因为博猪最近在开发一个sass平台，牵扯到一些常用的第三方的对接，自己也实现了一些第三方的对接，但是由于业务的需要，系统平台可能不太满足同一种类型的第三方，所以特此记录一下。</p>
<p>本文以常用的短信平台来举例，只是涉及设计思维，并不进行代码实现，相关第三方实现请参考第三方的API文档或者相关资料。</p>
<p>项目假设：系统需同时满足三个短信运营商的使用。</p>
</blockquote>
<h1 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h1><h2 id="项目依赖"><a href="#项目依赖" class="headerlink" title="项目依赖"></a>项目依赖</h2><h3 id="父项目"><a href="#父项目" class="headerlink" title="父项目"></a>父项目</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.4.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="运营商枚举"><a href="#运营商枚举" class="headerlink" title="运营商枚举"></a>运营商枚举</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">SmsISPEnum</span> &#123;<br><br>    TENCENT(<span class="hljs-string">&quot;Tencent&quot;</span>, <span class="hljs-string">&quot;腾讯云短信&quot;</span>),<br>    GENLAN(<span class="hljs-string">&quot;GenLan&quot;</span>, <span class="hljs-string">&quot;创蓝253&quot;</span>),<br>    ZYYX(<span class="hljs-string">&quot;Zyyx&quot;</span>, <span class="hljs-string">&quot;卓越云想&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-keyword">private</span> String  name;<br><br>    SmsISPEnum(String code, String name) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> code;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="定义短信接口"><a href="#定义短信接口" class="headerlink" title="定义短信接口"></a>定义短信接口</h2><blockquote>
<p>定义统一短信接口，任何短信相关的都必须实现该接口！！</p>
<p>该接口存在的目的：定义一套基本的短信接口行为，第三方特性功能由接口实现类进行拓展。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> SmsManager</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:45</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">SmsManager</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异步发送短信</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> phone 手机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 短信内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">asyncSendSms</span><span class="hljs-params">(String phone, String content)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 发送短信</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> phone 手机号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> content 短信内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phone, String content)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="腾讯短信"><a href="#腾讯短信" class="headerlink" title="腾讯短信"></a>腾讯短信</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> TencentSmsManagerImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>  腾讯短信</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TencentSmsManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsManager</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">asyncSendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;TencentSmsManagerImpl.asyncSendSms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;TencentSmsManagerImpl.sendSms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="253创蓝短信"><a href="#253创蓝短信" class="headerlink" title="253创蓝短信"></a>253创蓝短信</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> GenLanSmsManagerImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>   253创蓝短信</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GenLanSmsManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsManager</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">asyncSendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;GenLanSmsManagerImpl.asyncSendSms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;GenLanSmsManagerImpl.asyncSendSms&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="卓越云想"><a href="#卓越云想" class="headerlink" title="卓越云想"></a>卓越云想</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ZyyxSmsManagerImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>  卓越云想</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:52</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ZyyxSmsManagerImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SmsManager</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">asyncSendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;ZyyxSmsManagerImpl.asyncSendSms&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendSms</span><span class="hljs-params">(String phone, String content)</span> &#123;<br>        <span class="hljs-comment">//发送短信实现</span><br>        System.out.println(<span class="hljs-string">&quot;ZyyxSmsManagerImpl.asyncSendSms&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="初步实现-单一版"><a href="#初步实现-单一版" class="headerlink" title="初步实现-单一版"></a>初步实现-单一版</h1><p>前期博猪只能使用进行使用单一的运营商，当然前期只有两家运营商，但实际使用的只有一家运营商，具体代码实现如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MessageEngineApplication</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SmsManager <span class="hljs-title function_">smsManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SmsManager</span> <span class="hljs-variable">smsManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TencentSmsManagerImpl</span>();<br>        <span class="hljs-keyword">return</span> smsManager;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(MessageEngineApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>以上代码其实很好理解，其实就是在项目启动时，手动创建一个指定的实例，注入进去，但是这种方式的弊端也就出现了：由于腾讯云短信或者阿里大于（阿里云短信）等是面向大众或者面向大多数用户的，所以他们的短信比较适用于模板化，所以非模板话的话是不能实现的，下面举个栗子：</p>
<ul>
<li>发送短信验证码</li>
<li>取件码</li>
<li>相关通知</li>
</ul>
<p>通过上面我们发现，针对需求量大，且要求稳定的时候，我们使用以上平台的运营商是可以的，但是针对一下场景那就只能一个模板定义一套了：</p>
<ul>
<li>针对某些快捷操作，比如下载电子订单等，发送还有短连接的短信</li>
<li>针对某些模板我们可以共用一套，然后通过我们一些工具或者配置实现我们短信模板的复用</li>
</ul>
<p>。。。。虽然针对以上场景大多数是运营商各种不兼容导致的，但是业务场景也是摆在这里，所以我们还是需要进行去实现的，我看了一下我们大拿写的Redis根据模板发送站内信的代码实现，照葫芦画瓢，实现了一个简易版的兼容多配置的短信发送。</p>
<h1 id="最终实现-我全都要"><a href="#最终实现-我全都要" class="headerlink" title="最终实现-我全都要"></a>最终实现-我全都要</h1><h2 id="定义启动配置类"><a href="#定义启动配置类" class="headerlink" title="定义启动配置类"></a>定义启动配置类</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> SmsConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsConfiguration</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Map&lt;String, SmsManager&gt; smsManagerMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">3</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SmsManager <span class="hljs-title function_">getSmsManager</span><span class="hljs-params">(String ispType)</span> &#123;<br>        <span class="hljs-keyword">return</span> smsManagerMap.get(ispType);<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initServices</span><span class="hljs-params">()</span> &#123;<br>        smsManagerMap.put(SmsISPEnum.TENCENT.getCode(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">TencentSmsManagerImpl</span>());<br>        smsManagerMap.put(SmsISPEnum.GENLAN.getCode(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">GenLanSmsManagerImpl</span>());<br>        smsManagerMap.put(SmsISPEnum.ZYYX.getCode(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZyyxSmsManagerImpl</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="调用方式案例"><a href="#调用方式案例" class="headerlink" title="调用方式案例"></a>调用方式案例</h2><blockquote>
<p>具体相关配置我全部搞到数据库中了，这里为了记录核心思想，暂时写死！！！</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> SmsBootStrap</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/10/6 20:54</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SmsBootStrap</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationConfigApplicationContext</span>(SmsConfiguration.class);<br><br>        <span class="hljs-type">SmsManager</span> <span class="hljs-variable">smsManager</span> <span class="hljs-operator">=</span> SmsConfiguration.getSmsManager(SmsISPEnum.TENCENT.getCode());<br>        smsManager.sendSms(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过上方案例其实不难发现，只是运用了SpringBoot启动加载时配置优先级的问题，<code>@Configuration</code>配置类会在所有实例注入后，在进行实现，所以他的优先级是最低的。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(7)-消息驱动</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(7)-%E6%B6%88%E6%81%AF%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<p>‍</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>VinUtil</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B7%A5%E5%85%B7%E7%B1%BB/VinUtil/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.collections.CollectionUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.collections.ListUtils;<br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> VinUtil</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/19 10:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Company</span> 天津易和信息科技有限公司</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VinUtil</span> &#123;<br>    <span class="hljs-comment">/**车架号地区代码数组*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String areaArray[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>&#125;;<br><br>    <span class="hljs-comment">/**车架号中可能出现的字符数组*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String charArray[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-string">&quot;A&quot;</span>, <span class="hljs-string">&quot;B&quot;</span>, <span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;D&quot;</span>, <span class="hljs-string">&quot;E&quot;</span>, <span class="hljs-string">&quot;F&quot;</span>, <span class="hljs-string">&quot;G&quot;</span>, <span class="hljs-string">&quot;H&quot;</span>, <span class="hljs-string">&quot;J&quot;</span>, <span class="hljs-string">&quot;K&quot;</span>, <span class="hljs-string">&quot;L&quot;</span>, <span class="hljs-string">&quot;M&quot;</span>, <span class="hljs-string">&quot;N&quot;</span>, <span class="hljs-string">&quot;P&quot;</span>, <span class="hljs-string">&quot;R&quot;</span>, <span class="hljs-string">&quot;S&quot;</span>, <span class="hljs-string">&quot;T&quot;</span>, <span class="hljs-string">&quot;V&quot;</span>, <span class="hljs-string">&quot;W&quot;</span>, <span class="hljs-string">&quot;X&quot;</span>, <span class="hljs-string">&quot;Y&quot;</span>&#125;;<br><br>    <span class="hljs-comment">/**车架号校验位计算数组*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Object[][] KVMACTHUP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[][]&#123;&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-number">7</span>&#125;, &#123;<span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-number">9</span>&#125;, &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-number">3</span>&#125;, &#123;<span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-number">4</span>&#125;, &#123;<span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-number">5</span>&#125;, &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-number">6</span>&#125;, &#123;<span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-number">7</span>&#125;,&#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-number">8</span>&#125;, &#123;<span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-number">9</span>&#125;&#125;;<br>    <span class="hljs-comment">/**车架号数据加权数组*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] WEIGHTVALUE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">0</span>, <span class="hljs-number">9</span>, <span class="hljs-number">8</span>, <span class="hljs-number">7</span>, <span class="hljs-number">6</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 计算车架号的校验位</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIsuredCode</span><span class="hljs-params">(String vin)</span> &#123;<br>        <span class="hljs-type">char</span>[] Vin = vin.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>,tempValue = <span class="hljs-number">0</span>;<br>        <span class="hljs-type">char</span> temp;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">17</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (Vin[i] &gt;= <span class="hljs-string">&#x27;a&#x27;</span> &amp;&amp; Vin[i] &lt;= <span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>                temp = (<span class="hljs-type">char</span>) (Vin[i] - <span class="hljs-number">32</span>);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((Vin[i] &gt;= <span class="hljs-string">&#x27;A&#x27;</span>) &amp;&amp; (Vin[i] &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)) &#123;<br>                temp = Vin[i];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((Vin[i] &gt;= <span class="hljs-string">&#x27;0&#x27;</span>) &amp;&amp; (Vin[i] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)) &#123;<br>                tempValue = Integer.parseInt(String.valueOf(Vin[i]));<br>                temp = Vin[i];<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;ERROR&quot;</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> ((temp &gt;= <span class="hljs-string">&#x27;A&#x27;</span>) &amp;&amp; (temp &lt;= <span class="hljs-string">&#x27;Z&#x27;</span>)) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">26</span>; j++) &#123;<br>                    <span class="hljs-keyword">if</span> (temp == (<span class="hljs-type">char</span>)KVMACTHUP[j][<span class="hljs-number">0</span>]) &#123;<br>                        tempValue = (<span class="hljs-type">int</span>) KVMACTHUP[j][<span class="hljs-number">1</span>];<br>                    &#125;<br>                &#125;<br>            &#125;<br>            sum += tempValue * WEIGHTVALUE[i];<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">reslt</span> <span class="hljs-operator">=</span> sum % <span class="hljs-number">11</span>;<br>        <span class="hljs-keyword">if</span> (reslt != <span class="hljs-number">10</span>) &#123;<br>            <span class="hljs-keyword">return</span> String.valueOf(reslt);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;X&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 判断vin是否正确</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> vin</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isVin</span><span class="hljs-params">(String vin)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">isuredCode</span> <span class="hljs-operator">=</span> getIsuredCode(vin);<br>        <span class="hljs-keyword">if</span> (vin.substring(<span class="hljs-number">8</span>, <span class="hljs-number">9</span>).equals(isuredCode)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 拼接车架号</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> beforeStr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> afterStr</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">spellVin</span><span class="hljs-params">(String beforeStr, String afterStr)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">vinBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">preVin</span> <span class="hljs-operator">=</span> vinBuffer.append(beforeStr).append(<span class="hljs-string">&quot;X&quot;</span>).append(afterStr).toString();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">isuredCode</span> <span class="hljs-operator">=</span> getIsuredCode(preVin);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">vin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(beforeStr).append(isuredCode).append(afterStr).toString();<br>        <span class="hljs-keyword">if</span> (isVin(vin)) &#123;<br>            <span class="hljs-keyword">return</span> vin;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> spellVin(beforeStr, afterStr);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机前缀</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">prepareBeforeStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        stringBuffer.append(<span class="hljs-string">&quot;VNN&quot;</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            stringBuffer.append(getRandomChar(areaArray));<br>        &#125;<br>        <span class="hljs-keyword">return</span> stringBuffer.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机后缀</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">prepareAfterStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">stringBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            stringBuffer.append(getRandomChar(charArray));<br>        &#125;<br>        stringBuffer.append(prepareNo());<br>        <span class="hljs-keyword">return</span> stringBuffer.toString();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机的生产序号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">prepareNo</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">numStrBuff</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>            numStrBuff.append(Integer.toHexString(random.nextInt(<span class="hljs-number">16</span>)).toUpperCase());<br>        &#125;<br>        <span class="hljs-keyword">return</span> numStrBuff.toString();<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 返回随机字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRandomChar</span><span class="hljs-params">(Object array[])</span> &#123;<br>        <span class="hljs-keyword">return</span> charArray[(<span class="hljs-type">int</span>) (Math.random() * <span class="hljs-number">100</span> % array.length)];<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取随机的车架号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRandomVin</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">beforeStr</span> <span class="hljs-operator">=</span> prepareBeforeStr();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">afterStr</span> <span class="hljs-operator">=</span> prepareAfterStr();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">vin</span> <span class="hljs-operator">=</span> spellVin(beforeStr, afterStr);<br>        <span class="hljs-keyword">return</span> vin;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取对应数量的随机车架号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> num</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">getVinList</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span>&#123;<br>        List&lt;String&gt; vinList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span><span class="hljs-number">0</span>;i&lt;num;i++)&#123;<br>            vinList.add(getRandomVin());<br>        &#125;<br>        <span class="hljs-keyword">return</span> vinList;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>VinUtil</tag>
      </tags>
  </entry>
  <entry>
    <title>VerificationCodeUtil</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B7%A5%E5%85%B7%E7%B1%BB/VerificationCodeUtil/</url>
    <content><![CDATA[<blockquote>
<p>因最近系统等保三级改造中使用到了随机生成高强度密码(包含大写、小写英文字母、数字、特殊字符且不少于八位)并发送短信至客户手机，博猪基于<code>apache-common-lang3</code>二次包装了一个工具类。</p>
</blockquote>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>  <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.9<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>  <br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="JAVA工具类"><a href="#JAVA工具类" class="headerlink" title="JAVA工具类"></a>JAVA工具类</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.lang3.RandomStringUtils;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span>     VerificationCode</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>   密码、验证码工具类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span>        will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>          2022/8/17 9:33</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Company</span>       北京惠科互联科技有限公司</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VerificationCodeUtil</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">VerificationCodeUtil</span><span class="hljs-params">()</span>&#123;&#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 默认特殊字符</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] DEFAULT_SYMBOL = &#123;<span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;$&#x27;</span>, <span class="hljs-string">&#x27;%&#x27;</span>, <span class="hljs-string">&#x27;^&#x27;</span>, <span class="hljs-string">&#x27;&amp;&#x27;</span>, <span class="hljs-string">&#x27;*&#x27;</span>&#125;;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorNumber(len, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机大写字母</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorUpperCase</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorUpperCase(len, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机小写字母</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorLowerCase</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorLowerCase(len, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机特殊字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len               生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag       二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorNotDefaultSymbol</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorSymbol(len, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机默认特殊字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len                生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorDefaultSymbol</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorSymbol(len, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的随机数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag   二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorNumber</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomNumeric</span> <span class="hljs-operator">=</span> RandomStringUtils.randomNumeric(len);<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomNumeric);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomNumeric;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的大写字母</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag   二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorUpperCase</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> RandomStringUtils.random(len, <span class="hljs-number">65</span>, <span class="hljs-number">90</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">if</span>(shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的小写字母</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len           生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag   二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorLowerCase</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> RandomStringUtils.random(len, <span class="hljs-number">97</span>, <span class="hljs-number">122</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>        <span class="hljs-keyword">if</span>(shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度的特殊字符</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len                生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultSymbolFlag  是否使用默认特殊字符标识（默认即常用特殊字符键盘SHIFT+【1-0】)，true-默认使用/false-不使用默认字符即随机生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag        二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorSymbol</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> defaultSymbolFlag, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (defaultSymbolFlag) &#123;<br>            randomStr = RandomStringUtils.random(len, DEFAULT_SYMBOL);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            randomStr = RandomStringUtils.random(len, <span class="hljs-number">33</span>, <span class="hljs-number">47</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  根据自定义字符串生成随机数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len             生成长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag     二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> chars           字符串可变参数</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorCustom</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">boolean</span> shuffleFlag, <span class="hljs-type">char</span>... chars)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> RandomStringUtils.random(len, chars);<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> upperCount         大写字符串数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> lowerCount         小写字符串数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> numberCount        数字字符串数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbolCount        特殊字符串数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultSymbolFlag  是否使用默认特殊字符标识（默认即常用特殊字符键盘SHIFT+【1-0】)，true-默认使用/false-不使用默认字符即随机生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag        二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> upperCount, <span class="hljs-type">int</span> lowerCount</span><br><span class="hljs-params">            , <span class="hljs-type">int</span> numberCount, <span class="hljs-type">int</span> symbolCount, <span class="hljs-type">boolean</span> defaultSymbolFlag , <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">zero</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (zero &gt;= upperCount &amp;&amp; zero &gt;= lowerCount &amp;&amp; zero &gt;= numberCount &amp;&amp; zero &gt;= symbolCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationCodeException</span>(<span class="hljs-string">&quot;生成密码长度不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">upperRandomStr</span> <span class="hljs-operator">=</span> generatorUpperCase(upperCount);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">lowerRandomStr</span> <span class="hljs-operator">=</span> generatorLowerCase(lowerCount);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">numberRandomStr</span> <span class="hljs-operator">=</span> generatorNumber(numberCount);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">symbolRandomStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (symbolCount &gt; <span class="hljs-number">0</span>) &#123;<br>            symbolRandomStr = generatorSymbol(symbolCount, defaultSymbolFlag, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> upperRandomStr<br>                .concat(lowerRandomStr)<br>                .concat(numberRandomStr)<br>                .concat(symbolRandomStr);<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> partCount         每种类型数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> containSymbolFlag 是否包含特殊字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultSymbolFlag 是否使用默认特殊字符标识（默认即常用特殊字符键盘SHIFT+【1-0】)，true-默认使用/false-不使用默认字符即随机生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag       二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> partCount, <span class="hljs-type">boolean</span> containSymbolFlag, <span class="hljs-type">boolean</span> defaultSymbolFlag, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">zero</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (zero &gt;= partCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationCodeException</span>(<span class="hljs-string">&quot;生成密码长度不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (containSymbolFlag) &#123;<br>            randomStr = generatorRandomStr(partCount, partCount, partCount, partCount, defaultSymbolFlag, <span class="hljs-literal">false</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            randomStr = generatorRandomStr(partCount, partCount, partCount, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> partCount         大写、小写字母、数字数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbolCount       特殊字符数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultSymbolFlag 是否使用默认特殊字符标识（默认即常用特殊字符键盘SHIFT+【1-0】)，true-默认使用/false-不使用默认字符即随机生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag       二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> partCount, <span class="hljs-type">int</span> symbolCount, <span class="hljs-type">boolean</span> defaultSymbolFlag, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">zero</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (zero &gt;= partCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationCodeException</span>(<span class="hljs-string">&quot;生成密码长度不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> generatorRandomStr(partCount, partCount, partCount, symbolCount, defaultSymbolFlag, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机字符串，特殊字符使用默认特殊字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> partCount         大写、小写字母、数字数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbolCount       特殊字符数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag       二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> partCount, <span class="hljs-type">int</span> symbolCount, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">zero</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (zero &gt;= partCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationCodeException</span>(<span class="hljs-string">&quot;生成密码长度不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">randomStr</span> <span class="hljs-operator">=</span> generatorRandomStr(partCount, partCount, partCount, symbolCount, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (shuffleFlag) &#123;<br>            <span class="hljs-keyword">return</span> shuffleRandomStr(randomStr);<br>        &#125;<br>        <span class="hljs-keyword">return</span> randomStr;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成随机字符串，特殊字符使用默认特殊字符,生成后会二次打乱</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> partCount         大写、小写字母、数字数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbolCount       特殊字符数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> partCount, <span class="hljs-type">int</span> symbolCount)</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">zero</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (zero &gt;= partCount) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VerificationCodeException</span>(<span class="hljs-string">&quot;生成密码长度不能为空！&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> generatorRandomStr(partCount, partCount, partCount, symbolCount, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度随机字符串，且特殊字符固定，类型数量固定，如有多余则自动补足数字类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len                   随机字符串长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> symbolCount           固定特殊字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> defaultSymbolFlag     是否使用默认特殊字符</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> shuffleFlag           二次打乱标识 true-需要二次打乱，false-默认生成</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorDefaultRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> len, <span class="hljs-type">int</span> symbolCount, <span class="hljs-type">boolean</span> defaultSymbolFlag, <span class="hljs-type">boolean</span> shuffleFlag)</span> &#123;<br>        <span class="hljs-comment">//生成类型数量</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">typeNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">excludeSymbolCount</span> <span class="hljs-operator">=</span> len - symbolCount;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> (symbolCount &gt; <span class="hljs-number">0</span>) ? excludeSymbolCount / typeNum : len / typeNum;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">numberCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 如果是类型的倍数则平均分，如果不是则补足一个大写字母</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (len % typeNum == <span class="hljs-number">0</span>) &#123;<br>            numberCount = count;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            numberCount += count + excludeSymbolCount % typeNum;<br>        &#125;<br>        <span class="hljs-keyword">return</span> generatorRandomStr(count, count, numberCount, symbolCount, defaultSymbolFlag, shuffleFlag);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成指定长度随机字符串，且特殊字符固定一位，默认使用固定字符串，默认二次打乱，类型数量固定，如有多余则自动补足数字类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> len                   随机字符串长度</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorDefaultRandomStr</span><span class="hljs-params">(<span class="hljs-type">int</span> len)</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorDefaultRandomStr(len, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成八位随机字符串，且特殊字符固定一位，默认使用固定字符串，默认二次打乱，类型数量固定，如有多余则自动补足数字类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generatorDefaultRandomStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> generatorDefaultRandomStr(<span class="hljs-number">8</span>, <span class="hljs-number">1</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 二次打乱字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> randomStr   随机字符串</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">shuffleRandomStr</span><span class="hljs-params">(String randomStr)</span> &#123;<br>        List&lt;Character&gt; numberList = randomStr.chars().mapToObj(c -&gt; (<span class="hljs-type">char</span>) c).collect(Collectors.toList());<br>        Collections.shuffle(numberList);<br>        <span class="hljs-keyword">return</span> numberList<br>                .stream()<br>                .collect(StringBuilder::<span class="hljs-keyword">new</span>, StringBuilder::append, StringBuilder::append).toString();<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 异常信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VerificationCodeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RuntimeException</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">VerificationCodeException</span><span class="hljs-params">(String message)</span> &#123;<span class="hljs-built_in">super</span>(message);&#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">VerificationCodeException</span><span class="hljs-params">(String message,Throwable throwable)</span> &#123;<br>            <span class="hljs-built_in">super</span>(message, throwable);<br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>VerificationCode</tag>
      </tags>
  </entry>
  <entry>
    <title>SOAR基础教程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%85%B6%E4%BB%96/SOAR%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>因博猪最近负责报表模块的相关的开发，虽然类似润乾、帆软这种报表工具对于大型SQL的运行做了一定的优化，但是具体优化还是需要书写者的上去了功底的，由于报表的SQL一般很复杂，再加上有一部分的因为历史原因建表的时候没有太多的关联关系，导致相关统计的时候不得不使用子查询，所以导致最后的SQL有可能会运行很久，所以博猪最近不得不的每次都在<code>EXPLIAN</code>的道路上摸索，理解和转化SQL分析的过程很枯燥很机械，这个是博猪经朋友推荐使用的，感觉对于SQL分析挺方便的，特此记录一下，原因无他，唯懒而已。</p>
</blockquote>
<h1 id="软件介绍"><a href="#软件介绍" class="headerlink" title="软件介绍"></a>软件介绍</h1><p>SOAR(SQL Optimizer And Rewriter)是一个对SQL进行优化和改写的自动化工具。 由小米人工智能与云平台的数据库团队开发与维护。</p>
<h2 id="功能特点"><a href="#功能特点" class="headerlink" title="功能特点"></a>功能特点</h2><ul>
<li>跨平台支持（支持Linux, Mac环境，Windows环境理论上也支持，不过未全面测试）</li>
<li>目前只支持 MySQL 语法族协议的SQL优化</li>
<li>支持基于启发式算法的语句优化</li>
<li>支持复杂查询的多列索引优化（UPDATE, INSERT, DELETE, SELECT）</li>
<li>支持EXPLAIN信息丰富解读</li>
<li>支持SQL指纹、压缩和美化</li>
<li>支持同一张表多条ALTER请求合并</li>
<li>支持自定义规则的SQL改写</li>
</ul>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="安装基本环境"><a href="#安装基本环境" class="headerlink" title="安装基本环境"></a>安装基本环境</h2><p><a href="https://studygolang.com/dl">下载Go</a></p>
<p>选择windows版本下载，安装。</p>
<p>安装完成后，cmd中输入 go version ，出现版本信息。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2xcjbah2xj30b902x74h.jpg" alt="image.png"></p>
<h2 id="soar下载"><a href="#soar下载" class="headerlink" title="soar下载"></a>soar下载</h2><blockquote>
<p><a href="https://github.com/XiaoMi/soar">GitHub地址</a></p>
</blockquote>
<p><a href="https://github.com/XiaoMi/soar/releases">点击下载选择windows版本下载</a></p>
<blockquote>
<p>eg:我放到了<code>D:\Program Files\soar</code>目录下面，将soar.windows-amd64重命名为soar.exe</p>
</blockquote>
<p>添加环境变量，方便往后使用。</p>
<p>cmd中 输入 soar -version命令，出行版本信息为安装成功。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2xcrq99pej30g503mjs3.jpg" alt="image.png"></p>
<p>soar —help 查看帮助手册</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2xcse7fc1j30ma0mbaht.jpg" alt="image.png"></p>
<h1 id="进阶使用"><a href="#进阶使用" class="headerlink" title="进阶使用"></a>进阶使用</h1><h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><blockquote>
<p>在<code>soar</code>软件目录下面创建<code>etc</code>文件夹，并建立<code>soar.yaml</code>文件,并复制一下内容</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 线上环境配置</span><br><span class="hljs-attr">online-dsn:</span><br>  <span class="hljs-attr">addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3306</span><br>  <span class="hljs-attr">schema:</span> <span class="hljs-string">soar-test</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 测试环境配置</span><br><span class="hljs-attr">test-dsn:</span><br>  <span class="hljs-attr">addr:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span><span class="hljs-string">:3306</span><br>  <span class="hljs-attr">schema:</span> <span class="hljs-string">soar-test</span><br>  <span class="hljs-attr">user:</span> <span class="hljs-string">root</span><br>  <span class="hljs-attr">password:</span> <span class="hljs-string">admin</span><br>  <span class="hljs-attr">disable:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 是否允许测试环境与线上环境配置相同</span><br><span class="hljs-attr">allow-online-as-test:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 是否清理测试时产生的临时文件</span><br><span class="hljs-attr">drop-test-temporary:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment"># 语法检查小工具</span><br><span class="hljs-attr">only-syntax-check:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">sampling-statistic-target:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">sampling:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># 日志级别，[0:Emergency, 1:Alert, 2:Critical, 3:Error, 4:Warning, 5:Notice, 6:Informational, 7:Debug]</span><br><span class="hljs-attr">log-level:</span> <span class="hljs-number">7</span><br><span class="hljs-attr">log-output:</span> <span class="hljs-string">etc/soar.log</span><br><span class="hljs-comment"># 优化建议输出格式</span><br><span class="hljs-attr">report-type:</span> <span class="hljs-string">markdown</span><br><span class="hljs-attr">ignore-rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-comment"># 黑名单中的 SQL 将不会给评审意见。一行一条 SQL，可以是正则也可以是指纹，填写指纹时注意问号需要加反斜线转义。</span><br><span class="hljs-attr">blacklist:</span> <span class="hljs-string">etc/soar.blacklist</span><br><span class="hljs-comment"># 启发式算法相关配置</span><br><span class="hljs-attr">max-join-table-count:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">max-group-by-cols-count:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">max-distinct-count:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">max-index-cols-count:</span> <span class="hljs-number">5</span><br><span class="hljs-attr">max-total-rows:</span> <span class="hljs-number">9999999</span><br><span class="hljs-attr">spaghetti-query-length:</span> <span class="hljs-number">2048</span><br><span class="hljs-attr">allow-drop-index:</span> <span class="hljs-literal">false</span><br><span class="hljs-comment"># EXPLAIN相关配置</span><br><span class="hljs-attr">explain-sql-report-type:</span> <span class="hljs-string">pretty</span><br><span class="hljs-attr">explain-type:</span> <span class="hljs-string">extended</span><br><span class="hljs-attr">explain-format:</span> <span class="hljs-string">traditional</span><br><span class="hljs-attr">explain-warn-select-type:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">explain-warn-access-type:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">ALL</span><br><span class="hljs-attr">explain-max-keys:</span> <span class="hljs-number">3</span><br><span class="hljs-attr">explain-min-keys:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">explain-max-rows:</span> <span class="hljs-number">10000</span><br><span class="hljs-attr">explain-warn-extra:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">explain-max-filtered:</span> <span class="hljs-number">100</span><br><span class="hljs-attr">explain-warn-scalability:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">O(n)</span><br><span class="hljs-attr">query:</span> <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-attr">list-heuristic-rules:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">list-test-sqls:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">verbose:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">soar -query renewal_six_first_track.sql &gt; ./renewal_six_first_track.md -test-dsn=&quot;root:admin@127.0.0.0:3306/soar-test&quot; -allow-online-as-test<br></code></pre></td></tr></table></figure>

<h2 id="查看生成报告"><a href="#查看生成报告" class="headerlink" title="查看生成报告"></a>查看生成报告</h2><blockquote>
<p>SQL代码分析报告会生成一个Markdown文件，可通过Markdown文件查看SQL性能分析情况。</p>
</blockquote>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGgy1h2xcvilni2j31eo0qu7ea.jpg" alt="image.png"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>SOAR</tag>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>ProtoBuffer笔记</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%85%B6%E4%BB%96/ProtoBuffer%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="Protobuf学习"><a href="#Protobuf学习" class="headerlink" title="Protobuf学习"></a>Protobuf学习</h1><h2 id="Protobuf是什么"><a href="#Protobuf是什么" class="headerlink" title="Protobuf是什么"></a>Protobuf是什么</h2><p>Protobuf是一种平台无关、语言无关、可扩展且轻便高效的序列化数据结构的协议，可以用于<strong>网络通信</strong>和<strong>数据存储</strong>。</p>
<h3 id="为什么要使用Protobuf"><a href="#为什么要使用Protobuf" class="headerlink" title="为什么要使用Protobuf"></a>为什么要使用Protobuf</h3><p><img src="D:/images4note/2608075-1e8b5b166e9d9fee.png"></p>
<p>使用方法也比较简单:</p>
<ul>
<li><p>定义用于消息文件.proto</p>
</li>
<li><p>使用protobuf的编译器编译消息文件</p>
</li>
<li><p>使用编译好对应语言的类文件进行消息的序列化与反序列化</p>
<p>先来定义一个简单的消息:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">message </span><span class="hljs-title class_">Person</span> &#123;<br>   <span class="hljs-type">int32</span> id = <span class="hljs-number">1</span>;<span class="hljs-comment">//24</span><br>   <span class="hljs-type">string</span> name = <span class="hljs-number">2</span>;<span class="hljs-comment">//wujingchao</span><br>   <span class="hljs-type">string</span> email = <span class="hljs-number">3</span>;<span class="hljs-comment">//wujingchao92@gmail.com</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>实际的二进制消息为:</p>
<p>08 18 12 0a 77 75 6a 69 6e 67 63 68 61 6f 1a 16 77 75 6a 69 6e 67 63 68 61 6f 39 32 40 67 6d 61 69 6c 2e 63 6f 6d</p>
<p>其实Protobuffer就是把数据转换成2进制的数据，这样传输效率会大大提高！！</p>
<p>使用步骤：</p>
<p>先在Java的同级目录下新建一个名为proto的文件夹专门用于存放proto文件，编写proto文件后编译模块会根据proto文件内容生成java文件。</p>
<p><img src="D:/images4note/2608075-1e8f6b397107fd56.png"></p>
</li>
</ul>
<p>来看一下名为Test.proto的文件内容:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf"><span class="hljs-comment">//指定protobuf语法版本</span><br>syntax = <span class="hljs-string">&quot;proto2&quot;</span>;<br><br><span class="hljs-comment">//包名</span><br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;com.lhc.protobuf&quot;</span>;<br><span class="hljs-comment">//源文件类名</span><br><span class="hljs-keyword">option</span> java_outer_classname = <span class="hljs-string">&quot;AddressBookProtos&quot;</span>;<br><br><span class="hljs-comment">// class Person</span><br><span class="hljs-keyword">message </span><span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-comment">//required 必须设置（不能为null）</span><br>  <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> name = <span class="hljs-number">1</span>;<br>  <span class="hljs-comment">//int32 对应java中的int</span><br>  <span class="hljs-keyword">required</span> <span class="hljs-type">int32</span> id = <span class="hljs-number">2</span>;<br>  <span class="hljs-comment">//optional 可以为空</span><br>  <span class="hljs-keyword">optional</span> <span class="hljs-type">string</span> email = <span class="hljs-number">3</span>;<br><br>  <span class="hljs-keyword">enum </span><span class="hljs-title class_">PhoneType</span> &#123;<br>    MOBILE = <span class="hljs-number">0</span>;<br>    HOME = <span class="hljs-number">1</span>;<br>    WORK = <span class="hljs-number">2</span>;<br>  &#125;<br><br>  <span class="hljs-keyword">message </span><span class="hljs-title class_">PhoneNumber</span> &#123;<br>    <span class="hljs-keyword">required</span> <span class="hljs-type">string</span> number = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">optional</span> PhoneType type = <span class="hljs-number">2</span> [default = HOME];<br>  &#125;<br>   <span class="hljs-comment">//repeated 重复的 （集合）</span><br>  <span class="hljs-keyword">repeated</span> PhoneNumber phones = <span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-keyword">message </span><span class="hljs-title class_">AddressBook</span> &#123;<br>  <span class="hljs-keyword">repeated</span> Person people = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Protobuf应用——网络传输"><a href="#Protobuf应用——网络传输" class="headerlink" title="Protobuf应用——网络传输"></a>Protobuf应用——网络传输</h2><h5 id="http传输"><a href="#http传输" class="headerlink" title="http传输"></a>http传输</h5><p>通常在应用层我们使用的都是Http协议，Http的本质是一次socket请求的连接与断开。传输数据时将protobuf对象转换为byte[]传输即可</p>
<h5 id="自定义TCP通信协议"><a href="#自定义TCP通信协议" class="headerlink" title="自定义TCP通信协议"></a>自定义TCP通信协议</h5><p>当我们自定义TCP通信协议的时候，将面临粘包与分包的问题</p>
<p>分包：</p>
<ul>
<li>要发送的数据大于TCP缓冲剩余空间</li>
<li>待发送数据大于MSS（最大报文长度）</li>
</ul>
<p><img src="D:/images4note/2608075-120dfd45169eb074.webp" alt="img"></p>
<p>粘包：</p>
<ul>
<li>要发送的数据小于TCP缓冲区，将多次写入缓冲区的数据一起发送</li>
<li>接收端的应用层没有及时读取缓冲区的数据</li>
</ul>
<p>自定义通信协议的两种方式</p>
<ul>
<li>定义数据包包头</li>
</ul>
<p><img src="D:/images4note/2608075-43774effe82958aa-1553651810415.png" alt="img"></p>
<ul>
<li>在数据包之间设置边界</li>
</ul>
<p><img src="D:/images4note/2608075-4ae26be105ab8167.webp" alt="img"></p>
<p>​            大家可以参考 JT808协议 ——交通部808协议（车联网），也是采用类似的方式定义通信协议</p>
<hr>
<h1 id="小细节："><a href="#小细节：" class="headerlink" title="小细节："></a>小细节：</h1><h3 id="枚举enum类型："><a href="#枚举enum类型：" class="headerlink" title="枚举enum类型："></a>枚举enum类型：</h3><h4 id="1、不支持一个proto文件中，多个枚举中定义相同的枚举常量名。"><a href="#1、不支持一个proto文件中，多个枚举中定义相同的枚举常量名。" class="headerlink" title="1、不支持一个proto文件中，多个枚举中定义相同的枚举常量名。"></a>1、不支持一个proto文件中，多个枚举中定义相同的枚举常量名。</h4><figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">enum </span><span class="hljs-title class_">Enum1</span> &#123;<br>    IDLE = <span class="hljs-number">0</span>;<br>    RUNNING = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">enum </span><span class="hljs-title class_">Enum2</span> &#123;<br>    IDLE = <span class="hljs-number">5</span>;<br>    RUNNING = <span class="hljs-number">6</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;编译不通过，会报错！！！&#x3D;&#x3D;</p>
<h4 id="2、枚举第一个常量的值必须是0"><a href="#2、枚举第一个常量的值必须是0" class="headerlink" title="2、枚举第一个常量的值必须是0"></a>2、枚举第一个常量的值必须是0</h4><p>eg:</p>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf"><span class="hljs-keyword">enum </span><span class="hljs-title class_">BallTypeEnum</span> &#123;<br>    BALL_TYPE_UNSPECIFIED = <span class="hljs-number">0</span>;<br>    BASKETBALL = <span class="hljs-number">1</span>;<br>    FOOTBALL = <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
        <tag>ProtoBuffer</tag>
      </tags>
  </entry>
  <entry>
    <title>博客园优化</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%85%B6%E4%BB%96/%E5%8D%9A%E5%AE%A2%E5%9B%AD%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h1 id="博客园美化"><a href="#博客园美化" class="headerlink" title="博客园美化"></a>博客园美化</h1><blockquote>
<p>由于博猪最近网络比较坑爹，又不满足于CSDN这个坑爹的社区，所以博猪的瞄向了博客园，但是博客园的主题太丑了，所以这里提供一个美化的解决方案：<a href="https://www.yuque.com/awescnb/user/tmpomo">awescnb</a>,由于官方文档比较完整这里不提供教程了。</p>
</blockquote>
<h1 id="博客园Markdown上传"><a href="#博客园Markdown上传" class="headerlink" title="博客园Markdown上传"></a>博客园Markdown上传</h1><blockquote>
<p>首先需要电脑内置Python3的环境！！！！</p>
<p>功能很香！！！！</p>
</blockquote>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">git clone git@github.com:dongfanger/pycnblog.git<br></code></pre></td></tr></table></figure>

<blockquote>
<p>或者直接手动下载：<a href="https://github.com/dongfanger/pycnblog">github</a></p>
</blockquote>
<h2 id="安装依赖库"><a href="#安装依赖库" class="headerlink" title="安装依赖库"></a>安装依赖库</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">pip install pyyaml<br></code></pre></td></tr></table></figure>

<h2 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h2><blockquote>
<p>在config.yaml中，填写博客配置信息。</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">blog_url:</span> <span class="hljs-string">https://rpc.cnblogs.com/metaweblog/testblog</span><br><span class="hljs-attr">blog_id:</span> <span class="hljs-string">&quot;testblog&quot;</span><br><span class="hljs-attr">username:</span> <span class="hljs-string">&quot;zhangsan&quot;</span><br><span class="hljs-attr">password:</span> <span class="hljs-string">&quot;123456&quot;</span><br></code></pre></td></tr></table></figure>

<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># blog_url在博客后台&gt;设置，页面最下方的MetaWeblog访问地址。 https://rpc.cnblogs.com/metaweblog/testblog</span><br><span class="hljs-comment"># blog_id就是访问地址的尾巴， testblog。</span><br><span class="hljs-comment"># username是登录用户名，跟blog_id不一定是同一个。</span><br><span class="hljs-comment"># 是否生成图片替换后本地文件,默认False关闭</span><br><span class="hljs-comment"># 上传后是否发布，默认未发布，设置True为发布</span><br><span class="hljs-comment"># 图片自定义显示格式，默认不设置</span><br><span class="hljs-comment"># 如设置width和居中，&lt;center&gt;&lt;img src=&quot;&#123;&#125;&quot; style=&quot;width:100%&quot; /&gt;&lt;/center&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="运行脚本"><a href="#运行脚本" class="headerlink" title="运行脚本"></a>运行脚本</h2><p>打开 <code>cnblog_markdown.cmd</code>（windows里面双击此文件即可），提示<code>Please input file path:</code>把文件往里一拖，回车就完事了。</p>
<blockquote>
<p>最后别忘了，博客后台看一下，没问题就确认发布草稿。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>其他</category>
      </categories>
      <tags>
        <tag>其他</tag>
        <tag>博客园</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>基于MongoDB实现自增ID</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B7%A5%E5%85%B7%E7%B1%BB/%E5%9F%BA%E4%BA%8EMongoDB%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%A2%9EID/</url>
    <content><![CDATA[<blockquote>
<p>因最近需要有个业务需要实现一个自增的流水号，其中细节值得学习，故记录下，以便反思总结。</p>
<p>因为项目问题，故优先考虑在已存在的技术上进行实现，所以博猪优先想到的是：</p>
<p>&#x3D;&#x3D;在MongoDB中，使用单独的集合来存放指定key对应的最大值，然后每次生成流水号时默认查询指定key对应的最大值，取出对应的主键的最大值+1，然后更新即可。博猪使用<code>AtomicInteger</code>来进行对应主键更新的原子性操作，但是在多线程测试时发现博猪对应MongoDB的数据操作有问题，造成了幻读现象，所以这个方案PASS掉了。&#x3D;&#x3D;</p>
<p>最终方案博猪基于了Redis自增后实现的，下面直接上代码。</p>
</blockquote>
<h1 id="创建自增ID流水池"><a href="#创建自增ID流水池" class="headerlink" title="创建自增ID流水池"></a>创建自增ID流水池</h1><h2 id="定义集合"><a href="#定义集合" class="headerlink" title="定义集合"></a>定义集合</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Document(collection = &quot;MAKEUP_SERIAL_NUM_POOL&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUpSerialNumPool</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@JsonIgnore</span><br>    <span class="hljs-keyword">private</span> ObjectId _id;<br>    <span class="hljs-comment">/** key值，业务组装，保持唯一 */</span><br>    <span class="hljs-keyword">private</span> String key;<br>    <span class="hljs-comment">/** 当前基数 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">countNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="创建DAO"><a href="#创建DAO" class="headerlink" title="创建DAO"></a>创建DAO</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MakeUpSerialNumPoolRepository</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>   自增ID记录池</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> @2022/2/9 15:48</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Company</span> </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MakeUpSerialNumPoolRepository</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MongoRepository</span>&lt;MakeUpSerialNumPool, ObjectId&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="创建Service"><a href="#创建Service" class="headerlink" title="创建Service"></a>创建Service</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MakeUpSerialNumPoolService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存或更新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Integer <span class="hljs-title function_">getSerialNum</span><span class="hljs-params">(String key)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存或更新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    MakeUpSerialNumPool <span class="hljs-title function_">findAndModify</span><span class="hljs-params">(String key)</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAndRemove</span><span class="hljs-params">(String key)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MakeUpSerialNumPoolServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">MakeUpSerialNumPoolService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MakeUpSerialNumPoolRepository makeUpSerialNumPoolRepository;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MongoTemplate mongoTemplate;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getSerialNum</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;key&quot;</span>).is(key));<br>        <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>        update.inc(<span class="hljs-string">&quot;countNum&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">FindAndModifyOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FindAndModifyOptions</span>();<br>        options.upsert(<span class="hljs-literal">true</span>);<br>        options.returnNew(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">MakeUpSerialNumPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> mongoTemplate.findAndModify(query, update, options, MakeUpSerialNumPool.class);<br>        <span class="hljs-keyword">return</span> pool.getCountNum();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MakeUpSerialNumPool <span class="hljs-title function_">findAndModify</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;key&quot;</span>).is(key));<br>        <span class="hljs-type">Update</span> <span class="hljs-variable">update</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Update</span>();<br>        update.inc(<span class="hljs-string">&quot;countNum&quot;</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-type">FindAndModifyOptions</span> <span class="hljs-variable">options</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FindAndModifyOptions</span>();<br>        options.upsert(<span class="hljs-literal">true</span>);<br>        options.returnNew(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">MakeUpSerialNumPool</span> <span class="hljs-variable">pool</span> <span class="hljs-operator">=</span> mongoTemplate.findAndModify(query, update, options, MakeUpSerialNumPool.class);<br>        <span class="hljs-keyword">return</span> pool;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">findAndRemove</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>(Criteria.where(<span class="hljs-string">&quot;key&quot;</span>).is(key));<br>        mongoTemplate.findAndRemove(query, MakeUpSerialNumPool.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="封装ID自增工具类"><a href="#封装ID自增工具类" class="headerlink" title="封装ID自增工具类"></a>封装ID自增工具类</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自增主键类型</span><br><span class="hljs-comment"> *  业务主键前缀（含表达式）+length为自增</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoIncSeqType</span> &#123;<br>    <span class="hljs-comment">/* 前缀表达式 */</span><br>    <span class="hljs-keyword">private</span> String keyPrefix;<br>    <span class="hljs-comment">/* 序列长度 */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> length;<br>    <span class="hljs-comment">/* 日期格式化 */</span><br>    <span class="hljs-keyword">private</span> String format;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AutoIncSeqType</span><span class="hljs-params">(String keyPrefix, <span class="hljs-type">int</span> length, String format)</span> &#123;<br>        <span class="hljs-built_in">this</span>.keyPrefix = keyPrefix;<br>        <span class="hljs-built_in">this</span>.length = length;<br>        <span class="hljs-built_in">this</span>.format = format;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyGenerator</span> &#123;<br><br>    <span class="hljs-comment">/*【&quot;SN:&quot;, &quot;FBDZ&#123;yyyyMM&#125;&quot;, 4, &quot;yyyyMM&quot;, RedisExpireTypeEnum.NON】*/</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">YYMM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyMM&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">YYYYMM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyyMM&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">YYYYMMDD</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;yyyyMMdd&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MakeUpSerialNumPoolService makeUpSerialNumPoolService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> incrSeqType</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIncrSeq</span><span class="hljs-params">(AutoIncSeqType incrSeqType)</span> &#123;<br>        <span class="hljs-keyword">return</span> getIncrSeq(<span class="hljs-string">&quot;&quot;</span>, incrSeqType, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> incrSeqType</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orgCode</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIncrSeq</span><span class="hljs-params">(AutoIncSeqType incrSeqType, String orgCode)</span> &#123;<br>        <span class="hljs-keyword">return</span> getIncrSeq(<span class="hljs-string">&quot;&quot;</span>, incrSeqType, orgCode);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生成日期 自增序号</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> prefix 前缀，为空则不加</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> incrSeqType 业务配置</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> orgCode 经销商、机构等代码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getIncrSeq</span><span class="hljs-params">(String prefix, AutoIncSeqType incrSeqType, String orgCode)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dateInfo</span> <span class="hljs-operator">=</span> DateUtils.formatDate(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), incrSeqType.getFormat());<br>        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> incrSeqType.getKeyPrefix().replaceAll(<span class="hljs-string">&quot;\\&#123;&quot;</span> + incrSeqType.getFormat() + <span class="hljs-string">&quot;\\&#125;&quot;</span>, dateInfo);<br>        key = key.replaceAll(<span class="hljs-string">&quot;\\&#123;orgCode\\&#125;&quot;</span>, orgCode);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">keyInfo</span> <span class="hljs-operator">=</span> StringUtils.isNotEmpty(prefix) ? prefix + key : key;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Integer</span> <span class="hljs-variable">incr</span> <span class="hljs-operator">=</span> getIncr(keyInfo);<br>            <span class="hljs-keyword">if</span>(incr == <span class="hljs-number">0</span>) &#123;<br>                incr = getIncr(keyInfo);<span class="hljs-comment">//从001开始</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> keyInfo.replace(<span class="hljs-string">&quot;:&quot;</span>,<span class="hljs-string">&quot;&quot;</span>) + String.format(<span class="hljs-string">&quot;%0&quot;</span> + incrSeqType.getLength() +<span class="hljs-string">&quot;d&quot;</span>, incr);<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;MongoDB生成自增异常：&quot;</span>, e);<br><br>            <span class="hljs-comment">/* 异常时自动生成随机序列号，E结尾*/</span><br>            <span class="hljs-keyword">return</span> keyInfo + RandomUtils.getRandomNumbers(incrSeqType.getLength()) + <span class="hljs-string">&quot;E&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getIncr</span><span class="hljs-params">(String key)</span> &#123;<br>        <span class="hljs-type">MakeUpSerialNumPool</span> <span class="hljs-variable">makeUpSerialNumPool</span> <span class="hljs-operator">=</span> makeUpSerialNumPoolService.findAndModify(key);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> key.split(<span class="hljs-string">&quot;:&quot;</span>)[<span class="hljs-number">1</span>];<br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentMonth</span> <span class="hljs-operator">=</span> String.valueOf(DateUtil.format(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(), YYYYMM));<br>        <span class="hljs-keyword">if</span> (makeUpSerialNumPool == <span class="hljs-literal">null</span> || !month.equals(currentMonth)) &#123;<br>            makeUpSerialNumPoolService.findAndRemove(key);<br>        &#125;<br>        <span class="hljs-keyword">return</span> makeUpSerialNumPool.getCountNum();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomUtils</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] codeSequence = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] numSequence = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[]&#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">SecureRandom</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SecureRandom</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">RandomUtils</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomChars</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">14</span>; ++i) &#123;<br>            sBuffer.append(codeSequence[random.nextInt(<span class="hljs-number">62</span>)]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sBuffer.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomChars</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">1</span>) &#123;<br>            length = <span class="hljs-number">14</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            sBuffer.append(codeSequence[random.nextInt(<span class="hljs-number">62</span>)]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sBuffer.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRandomNumbers</span><span class="hljs-params">(<span class="hljs-type">int</span> length)</span> &#123;<br>        <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sBuffer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        <span class="hljs-keyword">if</span> (length &lt; <span class="hljs-number">1</span>) &#123;<br>            length = <span class="hljs-number">14</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; length; ++i) &#123;<br>            sBuffer.append(numSequence[random.nextInt(<span class="hljs-number">10</span>)]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> sBuffer.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">generateRandomString</span><span class="hljs-params">(<span class="hljs-type">int</span> numBytes)</span> &#123;<br>        <span class="hljs-keyword">if</span> (numBytes &lt; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(String.format(<span class="hljs-string">&quot;numBytes argument must be a positive integer (1 or larger)&quot;</span>, (<span class="hljs-type">long</span>)numBytes));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[numBytes];<br>            random.nextBytes(bytes);<br>            <span class="hljs-keyword">return</span> Hex.encodeHexString(bytes);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="使用Demo"><a href="#使用Demo" class="headerlink" title="使用Demo"></a>使用Demo</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> KeyGenerator keyGenerator;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> agentCode + <span class="hljs-string">&quot;:&quot;</span> + currentMonth;<br><span class="hljs-type">AutoIncSeqType</span> <span class="hljs-variable">autoIncSeqType</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AutoIncSeqType</span>(key, <span class="hljs-number">4</span>, dateFormat);<br><span class="hljs-type">String</span> <span class="hljs-variable">incrSeq</span> <span class="hljs-operator">=</span> keyGenerator.getIncrSeq(<span class="hljs-literal">null</span>, autoIncSeqType, agentCode);<br></code></pre></td></tr></table></figure>

<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><blockquote>
<p>上述方法博猪本地测试了一下单次循环，5k的线程没有问题，由于博猪电脑配置较低就没有再进行深入的测试，反正使用是没有太大的问题。</p>
<p>下面说一下博猪的心得：</p>
<ul>
<li><p>上面的方法其实和博猪第一的思考方式是一样的，但是博猪之前考虑的是从Java层面解决并发导致的事务问题，所以没有仔细的研究MongoDB</p>
</li>
<li><p>mongodb不支持事务，所以，在你的项目中应用时，要注意这点。无论什么设计，都不要要求mongodb保证数据的完整性。但是mongodb提供了许多原子操作，比如文档的保存，修改，删除等，都是原子操作。</p>
<p>所谓原子操作就是要么这个文档保存到Mongodb，要么没有保存到Mongodb，不会出现查询到的文档没有保存完整的情况。</p>
</li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>工具类</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>MongoDb</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok工具库详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Lombok%E5%B7%A5%E5%85%B7%E5%BA%93%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>Lombok是一款非常实用Java工具，可用来帮助开发人员消除Java的冗长代码，尤其是对于简单的Java对象（POJO）。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>博猪日常最多的也就是CRUD,对于这个网上争议最多的插件来说，网上说的一些争议点没有遇到过，当然归根结底的原因基本上仅仅用到了getter&#x2F;setter方法，同时也让我的对象显得简洁而已，toString和equals没什么用到。<br>另外说一个很重要的原因就是，博猪感觉就是技术是时代的产物，既然存在，那必然也有它存在的道理。所以我并不认为网上说的都对，也不全错，做技术嘛，要有个辩论思维，不要人云亦云嘛。</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>Lombok 是一个开源的项目，它提供了一系列的代码生成工具，用于简化 Java 代码的开发。<br>Lombok 的工作原理是通过使用 Java 的反射机制，在编译时生成代码，从而实现自动生成 Setter 和 Getter 方法、toString、equals、hashCode 等方法。<br>具体来说，Lombok 使用了 Java 的注解来标识需要生成的代码，然后在编译时通过反射机制解析这些注解，生成相应的代码。<br>例如，使用 Lombok 的 @Getter 和 @Setter 注解可以生成 Setter 和 Getter 方法，使用 Lombok 的 @ToString 注解可以生成 toString 方法，使用 Lombok 的 @EqualsAndHashCode 注解可以生成 equals 和 hashCode 方法。<br>Lombok 还提供了一些其他的功能，例如生成构造函数、getters 和 setters 的组合、链式设置等。这些功能都可以通过使用 Lombok 的注解来实现。<br>Lombok 的工作原理是基于 Java 的反射机制，在编译时生成代码，从而简化 Java 代码的开发。</p>
<h1 id="Lombok-安装"><a href="#Lombok-安装" class="headerlink" title="Lombok 安装"></a>Lombok 安装</h1><p>IDEA搜索Lombok插件</p>
<p class="note note-info">
<span class="label label-primary"><b>提示</b></span>
另外需要注意的是，在使用lombok注解的时候记得要导入lombok.jar包到工程，如果使用的是Maven的工程项目的话，要在其pom.xml中添加依赖如下:
</p>

<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="Lombok注解说明"><a href="#Lombok注解说明" class="headerlink" title="Lombok注解说明"></a>Lombok注解说明</h1><ul>
<li><code>val</code>：用在局部变量前面，相当于将变量声明为final</li>
<li><code>@NonNull</code>：给方法参数增加这个注解会自动在方法内对该参数进行是否为空的校验，如果为空，则抛出<code>NPE</code>（NullPointerException）</li>
<li><code>@Cleanup</code>：自动管理资源，用在局部变量之前，在当前变量范围内即将执行完毕退出之前会自动清理资源，自动生成<code>try-finally</code>这样的代码来关闭流</li>
<li><code>@Getter/@Setter</code>：用在属性上，再也不用自己手写<code>setter</code>和<code>getter</code>方法了，还可以指定访问范围</li>
<li><code>@ToString</code>：用在类上，可以自动覆写<code>toString</code>方法，当然还可以加其他参数，例如<code>@ToString(exclude=”id”)</code>排除id属性，或者<code>@ToString(callSuper=true, includeFieldNames=true)</code>调用父类的<code>toString</code>方法，包含所有属性</li>
<li><code>@EqualsAndHashCode</code>：用在类上，自动生成<code>equals</code>方法和<code>hashCode</code>方法</li>
<li><code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code> and <code>@AllArgsConstructor</code>：用在类上，自动生成无参构造和使用所有参数的构造函数以及把所有+ <code>@NonNull属性作为参数的构造函数，如果指定</code>staticName &#x3D; “of”&#96;参数，同时还会生成一个返回类对象的静态工厂方法，比使用构造函数方便很多</li>
<li><code>@Data</code>：注解在类上，相当于同时使用了<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code>和<code>@RequiredArgsConstrutor</code>这些注解，对于POJO类十分有用</li>
<li><code>@Value</code>：用在类上，是<code>@Data</code>的不可变形式，相当于为属性添加final声明，只提供getter方法，而不提供setter方法</li>
<li><code>@Builder</code>：用在类、构造器、方法上，为你提供复杂的builder APIs，让你可以像如下方式一样调用<code>Person.builder().name(&quot;Adam Savage&quot;).city(&quot;San Francisco&quot;).job(&quot;Mythbusters&quot;).job(&quot;Unchained Reaction&quot;).build()</code>;更多说明参考Builder</li>
<li><code>@SneakyThrows</code>：自动抛受检异常，而无需显式在方法上使用throws语句</li>
<li><code>@Synchronized</code>：用在方法上，将方法声明为同步的，并自动加锁，而锁对象是一个私有的属性<code>$lock</code>或<code>$LOCK</code>，而java中的synchronized关键字锁对象是this，锁在this或者自己的类对象上存在副作用，就是你不能阻止非受控代码去锁this或者类对象，这可能会导致竞争条件或者其它线程错误</li>
<li><code>@Getter(lazy=true)</code>：可以替代经典的Double Check Lock样板代码</li>
<li><code>@Log</code>：根据不同的注解生成不同类型的log对象，但是实例名称都是log，有六种可选实现类</li>
<li><code>@CommonsLog</code> Creates log &#x3D; org.apache.commons.logging.LogFactory.getLog(LogExample.class);</li>
<li><code>@Log</code> Creates log &#x3D; java.util.logging.Logger.getLogger(LogExample.class.getName());</li>
<li><code>@Log4j</code> Creates log &#x3D; org.apache.log4j.Logger.getLogger(LogExample.class);</li>
<li><code>@Log4j2</code> Creates log &#x3D; org.apache.logging.log4j.LogManager.getLogger(LogExample.class);</li>
<li><code>@Slf4j</code> Creates log &#x3D; org.slf4j.LoggerFactory.getLogger(LogExample.class);</li>
<li><code>@XSlf4j</code> Creates log &#x3D; org.slf4j.ext.XLoggerFactory.getXLogger(LogExample.class);</li>
</ul>
<h1 id="Lombok代码示例"><a href="#Lombok代码示例" class="headerlink" title="Lombok代码示例"></a>Lombok代码示例</h1><h2 id="val示例"><a href="#val示例" class="headerlink" title="val示例"></a>val示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">val</span> <span class="hljs-variable">sets</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    <span class="hljs-type">val</span> <span class="hljs-variable">lists</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    <span class="hljs-type">val</span> <span class="hljs-variable">maps</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, String&gt;();<br>    <span class="hljs-comment">//=&gt;相当于如下</span><br>    <span class="hljs-keyword">final</span> Set&lt;String&gt; sets2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-keyword">final</span> List&lt;String&gt; lists2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-keyword">final</span> Map&lt;String, String&gt; maps2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="NonNull示例"><a href="#NonNull示例" class="headerlink" title="@NonNull示例"></a><code>@NonNull</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notNullExample</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> String string)</span> &#123;<br>    string.length();<br>&#125;<br><span class="hljs-comment">//=&gt;相当于</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notNullExample</span><span class="hljs-params">(String string)</span> &#123;<br>    <span class="hljs-keyword">if</span> (string != <span class="hljs-literal">null</span>) &#123;<br>        string.length();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;null&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Cleanup示例"><a href="#Cleanup示例" class="headerlink" title="@Cleanup示例"></a><code>@Cleanup</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-meta">@Cleanup</span> <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(args[<span class="hljs-number">0</span>]);<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125;<br>    <span class="hljs-comment">//=&gt;相当于</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        inputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(args[<span class="hljs-number">0</span>]);<br>    &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Getter-Setter示例"><a href="#Getter-Setter示例" class="headerlink" title="@Getter/@Setter示例"></a><code>@Getter/@Setter</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Setter(AccessLevel.PUBLIC)</span><br><span class="hljs-meta">@Getter(AccessLevel.PROTECTED)</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> String shape;<br></code></pre></td></tr></table></figure>

<h2 id="ToString示例"><a href="#ToString示例" class="headerlink" title="@ToString示例"></a><code>@ToString</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ToString(exclude = &quot;id&quot;, callSuper = true, includeFieldNames = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LombokDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//输出LombokDemo(super=LombokDemo@48524010, name=null, age=0)</span><br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LombokDemo</span>());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="EqualsAndHashCode示例"><a href="#EqualsAndHashCode示例" class="headerlink" title="@EqualsAndHashCode示例"></a><code>@EqualsAndHashCode</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EqualsAndHashCode(exclude = &#123;&quot;id&quot;, &quot;shape&quot;&#125;, callSuper = false)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LombokDemo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String shape;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor示例"><a href="#NoArgsConstructor-RequiredArgsConstructor-and-AllArgsConstructor示例" class="headerlink" title="@NoArgsConstructor, @RequiredArgsConstructor and @AllArgsConstructor示例"></a><code>@NoArgsConstructor</code>, <code>@RequiredArgsConstructor</code> and <code>@AllArgsConstructor</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@RequiredArgsConstructor(staticName = &quot;of&quot;)</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LombokDemo</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> String shape;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">LombokDemo</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;circle&quot;</span>);<br>        <span class="hljs-comment">//使用静态工厂方法</span><br>        LombokDemo.of(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;circle&quot;</span>);<br>        <span class="hljs-comment">//无参构造</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">LombokDemo</span>();<br>        <span class="hljs-comment">//包含所有参数</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">LombokDemo</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;circle&quot;</span>, <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Data示例"><a href="#Data示例" class="headerlink" title="@Data示例"></a><code>@Data</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Menu</span> &#123;<br>    <span class="hljs-keyword">private</span> String shopId;<br>    <span class="hljs-keyword">private</span> String skuMenuId;<br>    <span class="hljs-keyword">private</span> String skuName;<br>    <span class="hljs-keyword">private</span> String normalizeSkuName;<br>    <span class="hljs-keyword">private</span> String dishMenuId;<br>    <span class="hljs-keyword">private</span> String dishName;<br>    <span class="hljs-keyword">private</span> String dishNum;<br>    <span class="hljs-comment">//默认阈值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">thresHold</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//新阈值</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">newThresHold</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//总得分</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">float</span> <span class="hljs-variable">totalScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Value示例"><a href="#Value示例" class="headerlink" title="@Value示例"></a><code>@Value</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Value</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LombokDemo</span> &#123;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-keyword">private</span> String shap;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-comment">//相当于</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.id;<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Builder示例"><a href="#Builder示例" class="headerlink" title="@Builder示例"></a><code>@Builder</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Builder</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuilderExample</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br>    <span class="hljs-meta">@Singular</span><br>    <span class="hljs-keyword">private</span> Set&lt;String&gt; occupations;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">LombokDemo3</span> <span class="hljs-variable">test</span> <span class="hljs-operator">=</span> LombokDemo3.builder().age(<span class="hljs-number">11</span>).name(<span class="hljs-string">&quot;test&quot;</span>)<br>                .occupation(<span class="hljs-string">&quot;1&quot;</span>)<br>                .occupation(<span class="hljs-string">&quot;2&quot;</span>)<br>                .build();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>@Singular可以为集合类型的参数或字段生成一种特殊的方法, 它采用修改列表中一个元素而不是整个列表的方式，可以是增加一个元素，也可以是删除一个元素。</p>
<p>在使用@Singular注释注释一个集合字段（使用@Builder注释类），lombok会将该构建器节点视为一个集合，并生成两个adder方法而不是setter方法。</p>
<p>生成代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> LombokDemo3.LombokDemo3Builder <span class="hljs-title function_">occupation</span><span class="hljs-params">(String occupation)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.occupations == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.occupations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.occupations.add(occupation);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> LombokDemo3.LombokDemo3Builder <span class="hljs-title function_">occupations</span><span class="hljs-params">(Collection&lt;? extends String&gt; occupations)</span> &#123;<br>    <span class="hljs-keyword">if</span> (occupations == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;occupations cannot be null&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.occupations == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-built_in">this</span>.occupations = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>        &#125;<br><br>        <span class="hljs-built_in">this</span>.occupations.addAll(occupations);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> LombokDemo3.LombokDemo3Builder <span class="hljs-title function_">clearOccupations</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.occupations != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-built_in">this</span>.occupations.clear();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Builder-Default"><a href="#Builder-Default" class="headerlink" title="Builder.Default"></a>Builder.Default</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BuilderDefaultExample</span> &#123;<br><br>    <span class="hljs-meta">@Builder</span>.Default<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> UUID.randomUUID().toString();<br>    <br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@Builder</span>.Default<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">long</span> <span class="hljs-variable">insertTime</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="SneakyThrows示例"><a href="#SneakyThrows示例" class="headerlink" title="@SneakyThrows示例"></a><code>@SneakyThrows</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.SneakyThrows;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><span class="hljs-keyword">import</span> java.io.UnsupportedEncodingException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br>    <span class="hljs-meta">@SneakyThrows()</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-meta">@SneakyThrows</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedEncodingException</span>();<br>    &#125;<br>    <span class="hljs-comment">//相当于</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">read</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> FileNotFoundException &#123;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">write</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> UnsupportedEncodingException &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedEncodingException</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Synchronized示例"><a href="#Synchronized示例" class="headerlink" title="@Synchronized示例"></a><code>@Synchronized</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedDemo</span> &#123;<br>    <span class="hljs-meta">@Synchronized</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;world&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//相当于</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Object</span> <span class="hljs-variable">$LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> ($LOCK) &#123;<br>            System.out.println(<span class="hljs-string">&quot;world&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Getter-lazy-true-示例"><a href="#Getter-lazy-true-示例" class="headerlink" title="@Getter(lazy = true)示例"></a><code>@Getter(lazy = true)</code>示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetterLazyExample</span> &#123;<br>    <span class="hljs-meta">@Getter(lazy = true)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[] cached = expensive();<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] expensive() &#123;<br>        <span class="hljs-type">double</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">1000000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;<br>            result[i] = Math.asin(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 相当于如下所示: </span><br><br><span class="hljs-keyword">import</span> java.util.concurrent.atomic.AtomicReference;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GetterLazyExample</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> AtomicReference&lt;java.lang.Object&gt; cached = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AtomicReference</span>&lt;&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span>[] getCached() &#123;<br>        java.lang.<span class="hljs-type">Object</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.cached.get();<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>.cached) &#123;<br>                value = <span class="hljs-built_in">this</span>.cached.get();<br>                <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-keyword">final</span> <span class="hljs-type">double</span>[] actualValue = expensive();<br>                    value = actualValue == <span class="hljs-literal">null</span> ? <span class="hljs-built_in">this</span>.cached : actualValue;<br>                    <span class="hljs-built_in">this</span>.cached.set(value);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> (<span class="hljs-type">double</span>[]) (value == <span class="hljs-built_in">this</span>.cached ? <span class="hljs-literal">null</span> : value);<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span>[] expensive() &#123;<br>        <span class="hljs-type">double</span>[] result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[<span class="hljs-number">1000000</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; result.length; i++) &#123;<br>            result[i] = Math.asin(i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>Lombok工具库详解</tag>
        <tag>常用开发库</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON类库详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/JSON%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>JSON应用非常广泛，对于Java常用的JSON库要完全掌握; 其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。</p>
</blockquote>
<h1 id="JSON简介"><a href="#JSON简介" class="headerlink" title="JSON简介"></a>JSON简介</h1><h2 id="JSON是什么"><a href="#JSON是什么" class="headerlink" title="JSON是什么"></a>JSON是什么</h2><ul>
<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>
<li>JSON 是轻量级的文本数据交换格式</li>
<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>
<li>JSON 具有自我描述性，更易理解</li>
</ul>
<h2 id="结构与类型"><a href="#结构与类型" class="headerlink" title="结构与类型"></a>结构与类型</h2><ul>
<li>只有两种结构：对象内的键值对集合结构和数组，对象用<code>&#123;&#125;</code>表示、内部是<code>”key”:”value”</code>，数组用<code>[]</code>表示，不同值用逗号分开</li>
<li>基本数值有7个： <ul>
<li>false </li>
<li>null </li>
<li>true </li>
<li>object </li>
<li>array </li>
<li>number </li>
<li>string</li>
</ul>
</li>
<li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li>
</ul>
<p>结构实例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>   <span class="hljs-attr">&quot;Image&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>       <span class="hljs-attr">&quot;Width&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-number">800</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;Height&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">600</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;Title&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-string">&quot;View from 15th Floor&quot;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;Thumbnail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>           <span class="hljs-attr">&quot;Url&quot;</span><span class="hljs-punctuation">:</span>    <span class="hljs-string">&quot;http://www.example.com/image/481989943&quot;</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;Height&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">125</span><span class="hljs-punctuation">,</span><br>           <span class="hljs-attr">&quot;Width&quot;</span><span class="hljs-punctuation">:</span>  <span class="hljs-string">&quot;100&quot;</span><br>       <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>       <span class="hljs-attr">&quot;IDs&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">116</span><span class="hljs-punctuation">,</span> <span class="hljs-number">943</span><span class="hljs-punctuation">,</span> <span class="hljs-number">234</span><span class="hljs-punctuation">,</span> <span class="hljs-number">38793</span><span class="hljs-punctuation">]</span><br>     <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<h2 id="JSON在线解析工具"><a href="#JSON在线解析工具" class="headerlink" title="JSON在线解析工具"></a>JSON在线解析工具</h2><p><a href="https://www.bejson.com/">BeJson</a></p>
<h1 id="JSON类库"><a href="#JSON类库" class="headerlink" title="JSON类库"></a>JSON类库</h1><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p>
<p>下面是几个常用的 JSON 解析类库：</p>
<ul>
<li>FastJson: 阿里巴巴开发的 JSON 库，性能优秀。</li>
<li>Jackson: 社区十分活跃且更新速度很快。</li>
<li>Gson: 谷歌开发的 JSON 库，功能十分全面。</li>
</ul>
<h2 id="性能测试对比"><a href="#性能测试对比" class="headerlink" title="性能测试对比"></a>性能测试对比</h2><p><a href="https://www.xncoding.com/java/basic/jsons.html">参考文章</a></p>
<p>根据序列化次数比较小的时候，Gson性能最好，当不断增加的时候到了100000，Gson明细弱于Jackson和FastJson， 这时候FastJson性能是真的牛，另外还可以看到不管数量少还是多，Jackson一直表现优异。而那个Json-lib可以直接忽略。</p>
<h1 id="FastJSON"><a href="#FastJSON" class="headerlink" title="FastJSON"></a>FastJSON</h1><p>先泼一盆冷水，个人非常不推荐使用FastJson, 为什么？</p>
<ul>
<li>FastJson 源码质量较低</li>
<li>FastJson Bug、漏洞较多</li>
<li>FastJson 牺牲多数场景下的稳定性而提高的效率</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>
<p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>
<ul>
<li><a href="https://github.com/alibaba/fastjson">Fastjson Github</a> </li>
<li><a href="https://github.com/alibaba/fastjson/wiki/Quick-Start-CN">Fastjson 中文 Wiki</a></li>
</ul>
<h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul>
<li>提供服务器端、安卓客户端两种解析工具，性能表现较好。</li>
<li>提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换。调用toJSONString方 法即可将对象转换成 JSON 字符串，parseObject 方法则反过来将 JSON 字符串转换成对象。</li>
<li>允许转换预先存在的无法修改的对象（只有class、无源代码）。</li>
<li>Java泛型的广泛支持。</li>
<li>允许对象的自定义表示、允许自定义序列化类。</li>
<li>支持任意复杂对象（具有深厚的继承层次和广泛使用的泛型类型）。</li>
</ul>
<h2 id="下载-amp-amp-使用"><a href="#下载-amp-amp-使用" class="headerlink" title="下载&amp;&amp;使用"></a>下载&amp;&amp;使用</h2><p>你可以在 maven 中央仓库中直接下载：<a href="http://repo1.maven.org/maven2/com/alibaba/fastjson/">http://repo1.maven.org/maven2/com/alibaba/fastjson</a></p>
<p>配置 maven 依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>x.x.x<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>其中 x.x.x 是版本号，根据需要使用特定版本，建议使用最新版本。</p>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>user.setName(<span class="hljs-string">&quot;校长&quot;</span>);<br>user.setAge(<span class="hljs-number">3</span>);<br>user.setSalary(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;123456789.0123&quot;</span>));<br><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> JSON.toJSONString(user);<br>System.out.println(jsonString);<br><span class="hljs-comment">// 输出 &#123;&quot;age&quot;:3,&quot;name&quot;:&quot;校长&quot;,&quot;old&quot;:false,&quot;salary&quot;:123456789.0123&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">jsonString</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;age\&quot;:3,\&quot;birthdate\&quot;:1496738822842,\&quot;name\&quot;:\&quot;校长\&quot;,\&quot;old\&quot;:true,\&quot;salary\&quot;:123456789.0123&#125;&quot;</span>;<br> <span class="hljs-type">User</span> <span class="hljs-variable">u</span> <span class="hljs-operator">=</span> JSON.parseObject(jsonString ,User.class);<br> System.out.println(u.getName());<br> <span class="hljs-comment">// 输出 校长</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">jsonStringArray</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;[&#123;\&quot;age\&quot;:3,\&quot;birthdate\&quot;:1496738822842,\&quot;name\&quot;:\&quot;校长\&quot;,\&quot;old\&quot;:true,\&quot;salary\&quot;:123456789.0123&#125;]&quot;</span>;<br>List&lt;User&gt; userList = JSON.parseArray(jsonStringArray, User.class);<br>System.out.println(userList.size());<br><span class="hljs-comment">// 输出 1</span><br></code></pre></td></tr></table></figure>

<h3 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h3><p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">JSON.defaultTimeZone = TimeZone.getTimeZone(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br>JSON.defaultLocale = Locale.US;<br>        <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span> &#123;<br>    <span class="hljs-meta">@JSONField(format = &quot;MMM dd, yyyy h:mm:ss aa&quot;)</span><br>    <span class="hljs-keyword">private</span> java.util.Date date;<br><br>    <span class="hljs-keyword">public</span> java.util.Date <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> date;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(java.util.Date date)</span> &#123;<br>        <span class="hljs-built_in">this</span>.date = date;<br>    &#125;<br><br>    <span class="hljs-meta">@JSONField(format = &quot;MMM-dd-yyyy h:mm:ss aa&quot;)</span><br>    <span class="hljs-keyword">public</span> java.sql.Date date2;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Bean和数组转换"><a href="#Bean和数组转换" class="headerlink" title="Bean和数组转换"></a>Bean和数组转换</h3><ul>
<li><a href="https://github.com/alibaba/fastjson/wiki/BeanToArray_cn">官方例子 - BeanToArray_cn</a></li>
</ul>
<h3 id="设置指定字段为特定字段名"><a href="#设置指定字段为特定字段名" class="headerlink" title="设置指定字段为特定字段名"></a>设置指定字段为特定字段名</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@JSONField(name=&quot;ID&quot;)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<span class="hljs-keyword">return</span> id;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> value)</span> &#123;<span class="hljs-built_in">this</span>.id = id;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="设置是否不序列化某字段"><a href="#设置是否不序列化某字段" class="headerlink" title="设置是否不序列化某字段"></a>设置是否不序列化某字段</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@JSONField(serialize=false)</span><br>    <span class="hljs-keyword">public</span> Date date;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-meta">@JSONField(deserialize=false)</span><br>    <span class="hljs-keyword">public</span> Date date;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="设置字段顺序"><a href="#设置字段顺序" class="headerlink" title="设置字段顺序"></a>设置字段顺序</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VO</span> &#123;<br>    <span class="hljs-meta">@JSONField(ordinal = 3)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> f0;<br><br>    <span class="hljs-meta">@JSONField(ordinal = 2)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> f1;<br><br>    <span class="hljs-meta">@JSONField(ordinal = 1)</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> f2;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="自定义序列化和反序列化"><a href="#自定义序列化和反序列化" class="headerlink" title="自定义序列化和反序列化"></a>自定义序列化和反序列化</h3><ul>
<li><a href="https://blog.csdn.net/u010246789/article/details/52539576">fastjson SerializerFeature详解</a></li>
<li><a href="https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn">ObjectDeserializer_cn</a></li>
</ul>
<h3 id="FastJson漏洞问题"><a href="#FastJson漏洞问题" class="headerlink" title="FastJson漏洞问题"></a>FastJson漏洞问题</h3><ul>
<li><a href="http://blog.nsfocus.net/analysis-protection-fastjson-remote-code-execution-vulnerability/">fastjson远程代码执行漏洞技术分析与防护方案</a></li>
<li><a href="https://github.com/alibaba/fastjson/issues">alibaba&#x2F;fastjson</a></li>
<li><a href="https://www.zhihu.com/question/44199956/answer/112224034">fastjson这么快老外为啥还是热衷 jackson?</a></li>
</ul>
<p class="note note-warning">
<span class="label label-primary">警告</span>
尽量使用最新版本。
</p>

<h1 id="JackSon"><a href="#JackSon" class="headerlink" title="JackSon"></a>JackSon</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><ul>
<li><a href="https://github.com/FasterXML/jackson">Jackson Github</a> </li>
<li><a href="http://wiki.fasterxml.com/JacksonHome">Jackson Wiki</a></li>
<li><a href="https://github.com/FasterXML/jackson-docs">Jackson 文档</a></li>
</ul>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><h3 id="3个核心模块："><a href="#3个核心模块：" class="headerlink" title="3个核心模块："></a>3个核心模块：</h3><ul>
<li><strong>Streaming</strong>: jackson-core jar，定义了底层的streaming API和实现了Json特性。</li>
<li><strong>Annotations</strong>: jackson-annotations jar，包含了标准的Jackson注解。本文暂不介绍。</li>
<li><strong>Databind</strong>: jackson-databind jar，实现了数据绑定和对象序列化，它依赖于streaming和annotations的包。</li>
</ul>
<h3 id="第三方数据类型模块"><a href="#第三方数据类型模块" class="headerlink" title="第三方数据类型模块"></a>第三方数据类型模块</h3><p>这些扩展是插件式的Jackson模块，用<code>ObjectMapper.registerModule()</code>注册，并且通过添加<code>serializers</code>和<code>deserializers</code>以便Databind包（ObjectMapper &#x2F; ObjectReader &#x2F; ObjectWriter）可以读写这些类型，来增加对各种常用的Java库的数据类型的支持。</p>
<h3 id="数据格式模块"><a href="#数据格式模块" class="headerlink" title="数据格式模块"></a>数据格式模块</h3><p>Jackson也有处理程序对JAX-RS标准实现者例如Jersey, RESTeasy, CXF等提供了数据格式支持。处理程序实现了MessageBodyReader和MessageBodyWriter，目前支持的数据格式包括JSON, Smile, XML, YAML和CBOR。</p>
<p>数据格式提供了除了Json之外的数据格式支持，它们绝大部分仅仅实现了streaming API abstractions，以便数据绑定组件可以按照原来的方式使用。另一些（几乎不需要）提供了databind标准功能来处理例如schemas。</p>
<h2 id="下载-amp-amp-使用-1"><a href="#下载-amp-amp-使用-1" class="headerlink" title="下载&amp;&amp;使用"></a>下载&amp;&amp;使用</h2><p>引用maven jar包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-databind<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jackson-annotations<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.10.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h2><h3 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toJson</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br><br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><br>    <span class="hljs-type">City</span> <span class="hljs-variable">case1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">City</span>();<br>    case1.setCity(<span class="hljs-string">&quot;SD&quot;</span>);<br>    case1.setAge(<span class="hljs-number">123</span>);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">jsonStr</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(case1);<br>    System.out.println(<span class="hljs-string">&quot;JSON:&quot;</span> + jsonStr);<br>&#125;<br><span class="hljs-comment">// 输出：JSON:&#123;&quot;city&quot;:&quot;SD&quot;,&quot;age&quot;:123&#125;</span><br></code></pre></td></tr></table></figure>

<h3 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toObj</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonParseException, JsonMappingException, IOException &#123;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">inputjsonstr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;city\&quot;:\&quot;SZ\&quot;,\&quot;age\&quot;:123&#125;&quot;</span>;<br>    <br>    <span class="hljs-type">City</span> <span class="hljs-variable">readcase</span> <span class="hljs-operator">=</span> mapper.readValue(inputjsonstr, City.class);<br><br>    System.out.println(<span class="hljs-string">&quot;city info:&quot;</span> + readcase);<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>如果里面有未知属性，比如json中有<code>desc</code>字段，但是City中没有相应字段，会报错, 需要设置如下：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs JAVA">mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br></code></pre></td></tr></table></figure>

<h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><table>
<thead>
<tr>
<th>注解</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>@JsonProperty(&quot;xxx&quot;)</code></td>
<td>将当前的属性名在<code>json</code>字符串中重新命名为当前设置的这个值，比如在示例中，将<code>age</code>–&gt;<code>mAge</code></td>
</tr>
<tr>
<td><code>@JsonIgnore</code></td>
<td>将被标注的属性在生成<code>json</code>字符串的时候，直接忽略</td>
</tr>
<tr>
<td><code>@JsonInclude</code></td>
<td>是一个类级别的设置，<code>sonInclude.Include.NON_EMPTY</code>标识只有非NULL的值才会被纳入<code>json string</code>之中，其余的都被忽略，比如这里的<code>location</code>属性，并没有出现在最终的结果字符串中。</td>
</tr>
<tr>
<td><code>@JsonSerialize</code></td>
<td>使用自定义的类来实现自定义的字段转换。写入操作。</td>
</tr>
<tr>
<td><code>@JsonDeserialize</code></td>
<td>解析的时候，自定义的转换器；读取操作。</td>
</tr>
<tr>
<td><code>@JsonAutoDetect</code></td>
<td>设置类的访问策略，是否所有的属性都可以，还是按照一定的方式来提取。</td>
</tr>
<tr>
<td><code>@JsonRawValue</code></td>
<td>无转换的将属性值写入到<code>json</code> 字符串中。 写入操作</td>
</tr>
<tr>
<td><code>@JsonValue</code></td>
<td>标注方法，用以替代缺省的方法，由该方法来完成<code>json</code>的字符输出。</td>
</tr>
</tbody></table>
<h1 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h1><h2 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h2><p>Gson是这样一个Java类库，它可以将Java对象转换为相应的JSON形式，也可以将JSON字符串转换为对应的Java对象。 Gson可以使用任意Java对象，包括哪些预先存在的、不在你的源代码中的对象（因此，你并不知道对象的属性）。</p>
<ul>
<li><a href="https://www.jianshu.com/p/1e20b28c39d1">Gson用户指南（中文翻译）</a></li>
</ul>
<h2 id="Gson的目标"><a href="#Gson的目标" class="headerlink" title="Gson的目标"></a>Gson的目标</h2><ul>
<li>提供一种机制，使得将Java对象转换为JSON或相反如使用toString()以及构造器（工厂方法）一样简单。</li>
<li>允许预先存在的不可变的对象转换为JSON或与之相反。</li>
<li>允许自定义对象的表现形式</li>
<li>支持任意复杂的对象</li>
<li>输出轻量易读的JSON</li>
</ul>
<h2 id="下载-amp-amp-使用-2"><a href="#下载-amp-amp-使用-2" class="headerlink" title="下载&amp;&amp;使用"></a>下载&amp;&amp;使用</h2><p>使用Gson的首要类是Gson类，你可以仅仅通过new Gson()的方式创建它。你也可以通过GsonBuilder类去创建Gson实例，这个类允许你进行一系列配置，例如版本控制等等。</p>
<p>Gson实例不会保存任何进行Json操作时的状态。因此，你可以自由的服用相同的Gson对象进行诸多的Json序列化和反序列化操作。</p>
<p>引用maven jar包：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>28.2-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="操作-2"><a href="#操作-2" class="headerlink" title="操作"></a>操作</h2><h3 id="序列化-2"><a href="#序列化-2" class="headerlink" title="序列化"></a>序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基础类型</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>gson.toJson(<span class="hljs-number">1</span>);            ==&gt; prints <span class="hljs-number">1</span><br>gson.toJson(<span class="hljs-string">&quot;abcd&quot;</span>);       ==&gt; prints <span class="hljs-string">&quot;abcd&quot;</span><br>gson.toJson(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Long</span>(<span class="hljs-number">10</span>)); ==&gt; prints <span class="hljs-number">10</span><br><span class="hljs-type">int</span>[] values = &#123; <span class="hljs-number">1</span> &#125;;<br>gson.toJson(values);       ==&gt; prints [<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">// 对象</span><br><span class="hljs-type">BagOfPrimitives</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BagOfPrimitives</span>();<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(obj);  <br>==&gt; json is &#123;<span class="hljs-string">&quot;value1&quot;</span>:<span class="hljs-number">1</span>,<span class="hljs-string">&quot;value2&quot;</span>:<span class="hljs-string">&quot;abc&quot;</span>&#125;<br><br><span class="hljs-comment">// 数组</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">int</span>[] ints = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;;<br>String[] strings = &#123;<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>&#125;;<br>gson.toJson(ints);     ==&gt; prints [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br>gson.toJson(strings);  ==&gt; prints [<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;def&quot;</span>, <span class="hljs-string">&quot;ghi&quot;</span>]<br><br><span class="hljs-comment">// 集合</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>Collection&lt;Integer&gt; ints = Lists.immutableList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> gson.toJson(ints); ==&gt; json is [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>]<br></code></pre></td></tr></table></figure>

<p>其中的对象代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BagOfPrimitives</span> &#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">value1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">value2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br>  <span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> <span class="hljs-variable">value3</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>  BagOfPrimitives() &#123;<br>    <span class="hljs-comment">// no-args constructor</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="反序列化-2"><a href="#反序列化-2" class="headerlink" title="反序列化"></a>反序列化</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基础类型</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-type">int</span>.class);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;1&quot;</span>, Integer.class);<br><span class="hljs-type">Long</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;1&quot;</span>, Long.class);<br><span class="hljs-type">Boolean</span> <span class="hljs-variable">false</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;false&quot;</span>, Boolean.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;\&quot;abc\&quot;&quot;</span>, String.class);<br><span class="hljs-type">String</span> <span class="hljs-variable">anotherStr</span> <span class="hljs-operator">=</span> gson.fromJson(<span class="hljs-string">&quot;[\&quot;abc\&quot;]&quot;</span>, String.class);<br><br><span class="hljs-comment">// 对象</span><br><span class="hljs-type">BagOfPrimitives</span> <span class="hljs-variable">obj2</span> <span class="hljs-operator">=</span> gson.fromJson(json, BagOfPrimitives.class);   <br>==&gt; obj2 is just like obj<br><br><span class="hljs-comment">// 数组</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">int</span>[] ints2 = gson.fromJson(<span class="hljs-string">&quot;[1,2,3,4,5]&quot;</span>, <span class="hljs-type">int</span>[].class); <br>==&gt; ints2 will be same as ints<br><br><span class="hljs-comment">// 集合</span><br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">Type</span> <span class="hljs-variable">collectionType</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeToken</span>&lt;Collection&lt;Integer&gt;&gt;()&#123;&#125;.getType();<br>Collection&lt;Integer&gt; ints2 = gson.fromJson(json, collectionType);<br>ints2 is same as ints<br></code></pre></td></tr></table></figure>

<h3 id="自定义序列化和反序列化机制"><a href="#自定义序列化和反序列化机制" class="headerlink" title="自定义序列化和反序列化机制"></a>自定义序列化和反序列化机制</h3><p>有时候，默认的实现并不是你想要的。这在处理类库时常常发生（例如DateTime）。Gson允许你注册自己自定义的序列化器和反序列化器。该过程分为两部分：</p>
<ul>
<li>Json序列化器：需要为一个对象自定义序列化机制。</li>
<li>Json反序列化器：需要为一个类型自定义反序列化机制。</li>
</ul>
<p>实例构造者：并不需要，如果无参构造器是可用的或者注册了一个反序列化器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">GsonBuilder</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GsonBuilder</span>();<br>gson.registerTypeAdapter(MyType2.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyTypeAdapter</span>());<br>gson.registerTypeAdapter(MyType.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MySerializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDeserializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInstanceCreator</span>());<br></code></pre></td></tr></table></figure>

<p>registerTypeAdapter会检查类型适配器是否实现了上面三个接口中的一个以上并且它们都注册了类型适配器。</p>
<h3 id="中文文档"><a href="#中文文档" class="headerlink" title="中文文档"></a>中文文档</h3><p>更多请参考：<a href="https://www.jianshu.com/p/1e20b28c39d1">Gson用户指南（中文翻译）</a></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>JSON类库详解</tag>
      </tags>
  </entry>
  <entry>
    <title>Hutool</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Hutool/</url>
    <content><![CDATA[<blockquote>
<p>Hutool作为后起之秀，功能上也比较全。但是要注意一点，它的开源协议是：中国第一个开源协议<a href="http://license.coscl.org.cn/MulanPSL">木兰宽松许可证, 第1版</a>，对此在商业项目中需要谨慎些，在个人项目无所谓。</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。</p>
<p>Hutool中的工具方法来自于每个用户的精雕细琢，它涵盖了Java开发底层代码中的方方面面，它既是大型项目开发中解决小问题的利器，也是小型项目中的效率担当；</p>
<p>Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。</p>
<h2 id="Hutool名称的由来"><a href="#Hutool名称的由来" class="headerlink" title="Hutool名称的由来"></a>Hutool名称的由来</h2><p>Hutool &#x3D; Hu + tool，是原公司项目底层代码剥离后的开源库，“Hu”是公司名称的表示，tool表示工具。Hutool谐音“糊涂”，一方面简洁易懂，一方面寓意“难得糊涂”。</p>
<h2 id="Hutool如何改变我们的coding方式"><a href="#Hutool如何改变我们的coding方式" class="headerlink" title="Hutool如何改变我们的coding方式"></a>Hutool如何改变我们的coding方式</h2><p>Hutool的目标是使用一个工具方法代替一段复杂代码，从而最大限度的避免“复制粘贴”代码的问题，彻底改变我们写代码的方式。</p>
<p>以计算MD5为例：</p>
<ul>
<li>【以前】打开搜索引擎 -&gt; 搜“Java MD5加密” -&gt; 打开某篇博客-&gt; 复制粘贴 -&gt; 改改好用</li>
<li>【现在】引入Hutool -&gt; SecureUtil.md5()</li>
</ul>
<p>Hutool的存在就是为了减少代码搜索成本，避免网络上参差不齐的代码出现导致的bug。</p>
<h1 id="包含组件"><a href="#包含组件" class="headerlink" title="包含组件"></a>包含组件</h1><p>一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：</p>
<table>
<thead>
<tr>
<th>模块</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>hutool-aop</td>
<td>JDK动态代理封装，提供非IOC下的切面支持</td>
</tr>
<tr>
<td>hutool-bloomFilter</td>
<td>布隆过滤，提供一些Hash算法的布隆过滤</td>
</tr>
<tr>
<td>hutool-cache</td>
<td>简单缓存实现</td>
</tr>
<tr>
<td>hutool-core</td>
<td>核心，包括Bean操作、日期、各种Util等</td>
</tr>
<tr>
<td>hutool-cron</td>
<td>定时任务模块，提供类Crontab表达式的定时任务</td>
</tr>
<tr>
<td>hutool-crypto</td>
<td>加密解密模块，提供对称、非对称和摘要算法封装</td>
</tr>
<tr>
<td>hutool-db</td>
<td>JDBC封装后的数据操作，基于ActiveRecord思想</td>
</tr>
<tr>
<td>hutool-dfa</td>
<td>基于DFA模型的多关键字查找</td>
</tr>
<tr>
<td>hutool-extra</td>
<td>扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）</td>
</tr>
<tr>
<td>hutool-http</td>
<td>基于HttpUrlConnection的Http客户端封装</td>
</tr>
<tr>
<td>hutool-log</td>
<td>自动识别日志实现的日志门面</td>
</tr>
<tr>
<td>hutool-script</td>
<td>脚本执行封装，例如Javascript</td>
</tr>
<tr>
<td>hutool-setting</td>
<td>功能更强大的Setting配置文件和Properties封装</td>
</tr>
<tr>
<td>hutool-system</td>
<td>系统参数调用封装（JVM信息等）</td>
</tr>
<tr>
<td>hutool-json</td>
<td>JSON实现</td>
</tr>
<tr>
<td>hutool-captcha</td>
<td>图片验证码实现</td>
</tr>
<tr>
<td>hutool-poi</td>
<td>针对POI中Excel的封装</td>
</tr>
<tr>
<td>hutool-socket</td>
<td>基于Java的NIO和AIO的Socket封装</td>
</tr>
</tbody></table>
<p>可以根据需求对每个模块单独引入，也可以通过引入<code>hutool-all</code>方式引入所有模块。</p>
<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><ul>
<li><a href="https://www.hutool.cn/docs/">中文文档</a> 看这里</li>
<li><a href="https://www.hutool.club/docs/">中文文档（备用）</a></li>
<li><a href="https://apidoc.gitee.com/loolly/hutool/">参考API</a></li>
</ul>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h2><p>在项目的pom.xml的dependencies中加入以下内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.hutool<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>hutool-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>              <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="Gradle"><a href="#Gradle" class="headerlink" title="Gradle"></a>Gradle</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">compile</span> <span class="hljs-string">&#x27;cn.hutool:hutool-all:5.1.0&#x27;</span><br></code></pre></td></tr></table></figure>

<h2 id="非Maven项目"><a href="#非Maven项目" class="headerlink" title="非Maven项目"></a>非Maven项目</h2><p>点击以下任一链接，下载<code>hutool-all-X.X.X.jar</code>即可：</p>
<ul>
<li><a href="https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.1.0/">Maven中央库1</a></li>
<li><a href="http://repo2.maven.org/maven2/cn/hutool/hutool-all/5.1.0/">Maven中央库2</a></li>
</ul>
<blockquote>
<p>注意 Hutool 5.x支持JDK8+，对Android平台没有测试，不能保证所有工具类获工具方法可用。 如果你的项目使用JDK7，请使用Hutool 4.x版本</p>
</blockquote>
<h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><p>访问Hutool的码云主页：<a href="https://gitee.com/loolly/hutool">https://gitee.com/loolly/hutool在新窗口打开</a> 下载整个项目源码（v5-master或v5-dev分支都可）然后进入Hutool项目目录执行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">./hutool.sh install<br></code></pre></td></tr></table></figure>

<p>然后就可以使用Maven引入了。</p>
<hr>
<p>著作权归@pdai所有 原文链接：<a href="https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html">https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html</a></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>Hutool</tag>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring常用工具类</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>Spring作为常用的开发框架，在Spring框架应用中，排在ApacheCommon，Guava, Huool等通用库后，第二优先级可以考虑使用Spring-core-xxx.jar中的util包。<br>另外对于工具类，要站在高一点的角度知道有哪些，而不是只看到代码… 用的时候具体看下即可)。</p>
</blockquote>
<h1 id="内置的resouce类型"><a href="#内置的resouce类型" class="headerlink" title="内置的resouce类型"></a>内置的resouce类型</h1><ul>
<li>UrlResource</li>
<li>ClassPathResource</li>
<li>FileSystemResource</li>
<li>ServletContextResource</li>
<li>InputStreamResource</li>
<li>ByteArrayResource</li>
<li>EncodedResource 也就是Resource加上encoding, 可以认为是有编码的资源</li>
<li>VfsResource(在jboss里经常用到, 相应还有 工具类 VfsUtils)</li>
<li>org.springframework.util.xml.ResourceUtils 用于处理表达资源字符串前缀描述资源的工具. 如: “classpath:”. 有 getURL, getFile, isFileURL, isJarURL, extractJarFileURL</li>
</ul>
<h1 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h1><ul>
<li>org.springframework.core.annotation.AnnotationUtils 处理注解</li>
<li>org.springframework.core.io.support.PathMatchingResourcePatternResolver 用 于处理 ant 匹配风格,找出所有的资源, 结合上面的resource的概念一起使用,对于遍历文件很有用. 具体请详细查看javadoc</li>
<li>org.springframework.core.io.support.PropertiesLoaderUtils 加载Properties资源工具类,和Resource结合</li>
<li>org.springframework.core.BridgeMethodResolver 桥接方法分析器. 关于桥接方法请参考: <a href="http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5">http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5</a></li>
<li>org.springframework.core.GenericTypeResolver 范型分析器, 在用于对范型方法, 参数分析.</li>
<li>org.springframework.core.NestedExceptionUtils</li>
</ul>
<h2 id="xml工具"><a href="#xml工具" class="headerlink" title="# xml工具"></a><a href="#xml%E5%B7%A5%E5%85%B7">#</a> xml工具</h2><ul>
<li>org.springframework.util.xml.AbstractStaxContentHandler</li>
<li>org.springframework.util.xml.AbstractStaxXMLReader</li>
<li>org.springframework.util.xml.AbstractXMLReader</li>
<li>org.springframework.util.xml.AbstractXMLStreamReader</li>
<li>org.springframework.util.xml.DomUtils</li>
<li>org.springframework.util.xml.SimpleNamespaceContext</li>
<li>org.springframework.util.xml.SimpleSaxErrorHandler</li>
<li>org.springframework.util.xml.SimpleTransformErrorListener</li>
<li>org.springframework.util.xml.StaxUtils</li>
<li>org.springframework.util.xml.TransformerUtils</li>
</ul>
<h2 id="其它工具集"><a href="#其它工具集" class="headerlink" title="# 其它工具集"></a><a href="#%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7%E9%9B%86">#</a> 其它工具集</h2><ul>
<li>org.springframework.util.AntPathMatcherant风格的处理</li>
<li>org.springframework.util.AntPathStringMatcher</li>
<li>org.springframework.util.Assert断言,在我们的参数判断时应该经常用</li>
<li>org.springframework.util.CachingMapDecorator</li>
<li>org.springframework.util.ClassUtils用于Class的处理</li>
<li>org.springframework.util.CollectionUtils用于处理集合的工具</li>
<li>org.springframework.util.CommonsLogWriter</li>
<li>org.springframework.util.CompositeIterator</li>
<li>org.springframework.util.ConcurrencyThrottleSupport</li>
<li>org.springframework.util.CustomizableThreadCreator</li>
<li>org.springframework.util.DefaultPropertiesPersister</li>
<li>org.springframework.util.DigestUtils摘要处理, 这里有用于md5处理信息的</li>
<li>org.springframework.util.FileCopyUtils文件的拷贝处理, 结合Resource的概念一起来处理, 真的是很方便</li>
<li>org.springframework.util.FileSystemUtils</li>
<li>org.springframework.util.LinkedCaseInsensitiveMap key值不区分大小写的LinkedMap</li>
<li>org.springframework.util.LinkedMultiValueMap一个key可以存放多个值的LinkedMap</li>
<li>org.springframework.util.Log4jConfigurer一个log4j的启动加载指定配制文件的工具类</li>
<li>org.springframework.util.NumberUtils处理数字的工具类, 有parseNumber 可以把字符串处理成我们指定的数字格式, 还支持format格式, convertNumberToTargetClass 可以实现Number类型的转化.</li>
<li>org.springframework.util.ObjectUtils有很多处理null object的方法. 如nullSafeHashCode, nullSafeEquals, isArray, containsElement, addObjectToArray, 等有用的方法</li>
<li>org.springframework.util.PatternMatchUtilsspring里用于处理简单的匹配. 如 Spring’s typical “xxx”, “xxx” and “xxx” pattern styles</li>
<li>org.springframework.util.PropertyPlaceholderHelper用于处理占位符的替换</li>
<li>org.springframework.util.ReflectionUtils反映常用工具方法. 有 findField, setField, getField, findMethod, invokeMethod等有用的方法</li>
<li>org.springframework.util.SerializationUtils用于java的序列化与反序列化. serialize与deserialize方法</li>
<li>org.springframework.util.StopWatch一个很好的用于记录执行时间的工具类, 且可以用于任务分阶段的测试时间. 最后支持一个很好看的打印格式. 这个类应该经常用</li>
<li>org.springframework.util.StringUtils</li>
<li>org.springframework.util.SystemPropertyUtils</li>
<li>org.springframework.util.TypeUtils用于类型相容的判断. isAssignable</li>
<li>org.springframework.util.WeakReferenceMonitor弱引用的监控</li>
</ul>
<h2 id="和web相关的工具"><a href="#和web相关的工具" class="headerlink" title="# 和web相关的工具"></a><a href="#%E5%92%8Cweb%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B7%A5%E5%85%B7">#</a> 和web相关的工具</h2><ul>
<li>org.springframework.web.util.CookieGenerator</li>
<li>org.springframework.web.util.HtmlCharacterEntityDecoder</li>
<li>org.springframework.web.util.HtmlCharacterEntityReferences</li>
<li>org.springframework.web.util.HtmlUtils</li>
<li>org.springframework.web.util.HttpUrlTemplate<ul>
<li>这个类用于用字符串模板构建url, 它会自动处理url里的汉字及其它相关的编码. 在读取别人提供的url资源时, 应该经常用</li>
<li>String url &#x3D; “<a href="http://localhost/myapp/%7Bname%7D/%7Bid%7D">http://localhost/myapp/{name}/{id}</a>“;</li>
</ul>
</li>
<li>org.springframework.web.util.JavaScriptUtils</li>
<li>org.springframework.web.util.Log4jConfigListener<ul>
<li>用listener的方式来配制log4j在web环境下的初始化</li>
</ul>
</li>
<li>org.springframework.web.util.UriTemplate</li>
<li>org.springframework.web.util.UriUtils处理uri里特殊字符的编码</li>
<li>org.springframework.web.util.WebUtils</li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>工具类</tag>
        <tag>Spring常用工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编程(1)-初识异步</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>近期博猪在负责一个风险测算的模块，其中的具体过程博猪就不细说了，但是总体的感觉就是心中有无数个草泥马在奔腾，但是现在仔细感觉还是值得写个博客来记录一下的。<br>具体场景为有些业务导入牵扯到一些计算，业务那边说是导入数据量比较庞大，所以博猪就用异步+多线程的方式处理了这个业务，本地和Linux环境跑了几遍，20个字段，2w数据，5个线程，总体耗时也就三秒左右，还是挺可观的。</p>
</blockquote>
<h1 id="什么异步编程"><a href="#什么异步编程" class="headerlink" title="什么异步编程"></a>什么异步编程</h1><p>Java 异步编程是一种让程序并行运行的方式，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且等工作单元运行结束后通知主应用程序线程它的运行结果或者失败原因。使用异步编程有许多好处，例如可以提高应用程序的性能和响应能力，提高线程的利用率，减少线程间的通信开销等。<br>Java 异步编程的核心是线程池，程序员可以通过提交任务到线程池来实现异步编程。<br>Java 异步编程在现实生活中有很多应用，例如网络 IO 请求、日志打印、异步打日志、异步消息处理等。<br>具体来说,Java异步编程包括以下几个要点:</p>
<ul>
<li>启动异步任务:通过某种机制启动一个与主程序分离的异步任务,比如线程、Future、CompletableFuture等。</li>
<li>异步任务独立执行:一旦异步任务启动,主程序可以继续执行,而异步任务将在后台独立运行。</li>
<li>获取异步执行的结果(可选):主程序如果需要异步任务的结果,可以通过某种方式获取其结果,比如调用Future的get方法或给CompletionHandler传递结果。但这不是异步执行的必要条件,有的异步任务不需要返回结果。</li>
<li>异常处理(可选):通过 completion handlers 或其他异常处理机制对异步任务可能抛出的异常进行处理。</li>
<li>线程管理(可选):有的异步方式需要手动管理执行线程,有的则通过线程池等机制自动管理。<br>所以,总体来说,Java异步编程的关键就是启动一个与主程序分离的异步任务,并让其在后台运行,而主程序可以继续流程,不等待其完成。在需要结果或异常时,再通过相应机制获取或处理。<br>这一模式允许程序同时处理多个任务,提高了程序的并发能力和响应性。线程的自动管理也简化了手动管理线程的难度。Java提供了多种实现异步编程的方式,比如线程、Future、CompletableFuture、响应式框架等。随着Java的发展,这些方式越来越简便高效。<br>但其核心思想仍然是让异步任务独立于主程序执行,以实现并发和提高响应性。</li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>异步编程</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>JAVA</tag>
        <tag>异步编程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>常见软件开源协议详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E6%96%B9%E6%B3%95%E8%AE%BA/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/%E5%B8%B8%E8%A7%81%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>开源不等于免费！为了加速我们的开发，我们会使用开源的软件和源码； 为避免商业风险，需要在使用时了解第三方如软件协议，版本，和已知CVE风险(CVE高危漏洞)等；本文旨在从开源软件再发布过程使用权限的角度入手，总结各个常见开源协议的异同，方便理解。</p>
</blockquote>
<h1 id="什么是开源协议"><a href="#什么是开源协议" class="headerlink" title="什么是开源协议"></a>什么是开源协议</h1><p>大部分人都希望作品能够被多数人分享查阅。这样不仅提高自己业界的知名度，同时也方便了需要的人为开源做出了贡献。但是代码一旦被贴出来，任何人都可以看到并获取，之后发生的事情你就无法控制了。所以为了公开分享你的代码，同时又让你对代码保留一定权利，在作品中声明一个许可协议是非常有必要的。有协议和没声明协议的裸代码是有非常重要区别的，一般作品当中没声明协议的默认为Copy right的，也就是版权保留。此种情况表明他人没有任何授权，不得复制分发修改使用等等。有了协议的声明，在未来你的维权上面会方便很多，让你的作品在分享的同时保留了自身的一些权利。</p>
<p>License是软件的授权许可，里面详尽表述了你获得代码后拥有的权利，可以对别人的作品进行何种操作，何种操作又是被禁止的。</p>
<p><em>软件协议可分为开源和商业</em></p>
<ul>
<li>对于商业协议，或者叫法律声明、许可协议，每个软件会有自己的一套行文，由软件作者或专门律师撰写。因为涉及到以后侵权打官司这种事情，这种商业条款的行文是非常严谨而讲究的，读起来很晦涩难懂。</li>
<li>对于开源协议，要知道开源不等于免费，也不等于没有约束。虽然相对商业协议要更加简明，但对于很多人来说还是像在看天书一样。</li>
</ul>
<h1 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h1><p>首先一共有哪些公开的协议:</p>
<p><a href="https://opensource.org/licenses/alphabetical">https://opensource.org/licenses/alphabetical</a></p>
<h1 id="常用协议"><a href="#常用协议" class="headerlink" title="常用协议"></a>常用协议</h1><blockquote>
<p>最流行的六种—-GPL、BSD、MIT、Mozilla、Apache和LGPL。</p>
</blockquote>
<p>这里引用阮一峰大神制作的中文版的分析图：</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/06/25/14d31fc400958163.jpg"></p>
<h2 id="Apache-许可协议"><a href="#Apache-许可协议" class="headerlink" title="Apache 许可协议"></a>Apache 许可协议</h2><blockquote>
<p>Apache许可证(Apache License)，是一个在Apache软件基金会发布的自由软件许可证，最初为Apache http服务器而撰写。Apache许可证要求被授权者保留版权和放弃权利的申明，但它不是一个反版权的许可证。 此许可证最新版本为“版本2”，于2004年1月发布。 Apache许可证在Apache社区内外被广泛使用。Apache基金会下属所有项目都使用Apache许可证，许多非Apache基金会项目也使用了Apache许可证: 据统计，截至2008年4月，在sourceforge上有超过3000个项目使用了Apache许可证。</p>
</blockquote>
<p>Apache 许可协议, 2.0 版本, 授予了用户大量的权利。这些权利可以应用于拷贝权，也可以用于专利权。因为很多许可协议只能适用于拷贝权，不适用于专利权，所以这个灵活性就成了让有专利的开发者们选择许可协议时的一个显著参考因素 (要想明白两者之间的不同，请参考 How Stuff Works 上的这篇文章 )。</p>
<p>下面是关于 Apache 许可协议所允许的事项的详细说明:</p>
<ul>
<li>权利永恒。 一旦被授权，权利永久不失。</li>
<li>权利无疆界。 在一个国家里被授权，形同于在所有国家被授权。例如，你在美国，但许可权最初在印度被授予，你同样可以使用这个被授权的程序。 </li>
<li>授权无需付费和支付酬劳。 你既不需要在使用之前支付任何的费用，也无需在每次使用时支付任何的费用，或者其它类似情况。</li>
<li>权利不排他。 使用这种许可协议下的软件时，不妨碍你使用其它软件。</li>
<li>权利不可变更。 权利一旦授予，不可剥夺。也就是说，你在使用这个软件的过程中，你无需担心这种情况: 当你开发出了令人羡慕的基于这种授权软件的衍生产品时，有人突然跳出来对你说，抱歉，你将不再被允许使用这个程序。(在这个协议里有个条款声明: 如果你控告别人在这个许可协议下的产品有侵犯专利的行为，那你的授权将会自动终止，但这只是适用于有专利权的作品。只要你不搞有专利作品的诉讼，你永远无需担心这种问题。)</li>
<li>对再分发的作品还有个特殊要求，总的就是说要给予这些程序的作者和许可协议的维护者适当的名誉。</li>
</ul>
<h2 id="MIT-许可协议"><a href="#MIT-许可协议" class="headerlink" title="MIT 许可协议"></a>MIT 许可协议</h2><blockquote>
<p>MIT 协议应该是在流行的开源协议中最简短的、使用最广泛的一种协议。它的条款非常的宽松，而且跟其它协议相比更自由。 MIT 协议是目前最少限制的协议。它基本上就是任何人可以对这个协议下的软件的做任何的事情，只要你能认可这个协议。这种协议最基本的条款 ( the information that it is provided without warranty, which comprises the final paragraph)如下:</p>
</blockquote>
<p>特此授权，任何人都可免费获得这个软件以及相关文档(the Software)的拷贝，可以无限制的使用这个软件，包括无限制的权利去使用、复制、修改、合并、发布、附加从属协议，以及&#x2F;或者出售软件的拷贝， 同时，为了让软件的提供者有权利做到这些，下面的条件必须遵守:</p>
<p>上面的拷贝权声明和许可声明必须包含在所有的这个软件拷贝里和实际分署部分里。</p>
<p>这也就是说:</p>
<ul>
<li>你可以随意使用，复制，修改这个软件。没有人能够阻止你在任何工程里使用它，你可以复制任意次数、以任何形式，或按你的愿望修改它。</li>
<li>你可以向外免费发放，或出售。你可以随意的分发它，没有任何限制。</li>
<li>唯一的限制是你必须接受协议条款。</li>
</ul>
<h2 id="BSD-许可协议"><a href="#BSD-许可协议" class="headerlink" title="BSD 许可协议"></a>BSD 许可协议</h2><blockquote>
<p>BSD 协议有很多分支，它们都代表了一种宽松的自由软件协议，相对其它协议，例如GPL，来说，它们对软件的传播给予了更少的限制。 在这种协议的各种版本中，有两个版本格外的重要: 新 BSD 协议&#x2F;修订版 BSD 协议和简化 BSD 协议&#x2F;FreeBSD 协议。这两类协议都实现的对 GPL 兼容的自由软件协议，而且被 Open Source Initiative 认可为开源软件协议。</p>
</blockquote>
<blockquote>
<p>新 BSD 协议(3-clause license)无任何限制的允许你以任何目的二次分发这种软件，唯一的要求是必须保留拷贝权的声明和协议里的软件权利放弃条款。这种协议还有一个限制，未经许可不得使用这个作品的所有曾经捐助者的署名。 新 BSD 协议和简化 BSD 协议的最主要的区别是后者删除了署名条款。</p>
</blockquote>
<p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”，可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>
<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件:</p>
<ul>
<li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li>
<li>如果再发布的只是二进制类库&#x2F;软件，则需要在类库&#x2F;软件的文档和版权声明中包含原来代码中的BSD协议。</li>
<li>不可以用开源代码的作者&#x2F;机构名字和原来产品的名字做市场推广。</li>
<li>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发</li>
</ul>
<h2 id="GPL"><a href="#GPL" class="headerlink" title="GPL"></a>GPL</h2><blockquote>
<p>我们很熟悉的Linux就是采用了GPL。GPL协议和BSD， Apache License等鼓励代码重用的许可很不一样。GPL的出发点是代码的开源&#x2F;免费使用和引用&#x2F;修改&#x2F;衍生代码的开源&#x2F;免费使用，但不允许修改后和衍生的代 码做为闭源的商业软件发布和销售。这也就是为什么我们能用免费的各种linux，包括商业公司的linux和linux上各种各样的由个人，组织，以及商 业软件公司开发的免费软件了。</p>
</blockquote>
<p>GPL协议的主要内容是只要在一个软件中使用(”使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题， 还可以享受免费的优势。</p>
<p>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成&#x2F;采用作为类库和二次开发的基础。</p>
<p>其它细节如再发布的时候需要伴随GPL协议等和BSD&#x2F;Apache等类似。</p>
<h2 id="LGPL"><a href="#LGPL" class="headerlink" title="LGPL"></a>LGPL</h2><blockquote>
<p>LGPL 是GPL的一个为主要为类库使用设计的开源协议。和GPL要求任何使用&#x2F;修改&#x2F;衍生之GPL类库的的软件必须采用GPL协议不同。LGPL 允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>
</blockquote>
<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>
<p>GPL&#x2F;LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品。</p>
<h2 id="MPL"><a href="#MPL" class="headerlink" title="MPL"></a>MPL</h2><blockquote>
<p>MPL是The Mozilla Public License的简写，是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可证出现的最重要原因就是，Netscape公司认为GPL许可证没有很好地平衡开发者对源代码的需求和他们利用源代码获得的利益。同著名的GPL许可证和BSD许可证相比，MPL在许多权利与义务的约定方面与它们相同(因为都是符合OSIA认定的开源软件许可证)。</p>
</blockquote>
<p>但是，相比而言MPL还有以下几个显著的不同之处:</p>
<ul>
<li>MPL虽然要求对于经MPL许可证发布的源代码的修改也要以MPL许可证的方式再许可出来，以保证其他人可以在MPL的条款下共享源代码。但是，在MPL许可证中对“发布”的定义是“以源代码方式发布的文件”，这就意味着MPL允许一个企业在自己已有的源代码库上加一个接口，除了接口程序的源代码以MPL许可证的形式对外许可外，源代码库中的源代码就可以不用MPL许可证的方式强制对外许可。这些，就为借鉴别人的源代码用做自己商业软件开发的行为留了一个豁口。</li>
<li>MPL许可证第三条第7款中允许被许可人将经过MPL许可证获得的源代码同自己其他类型的代码混合得到自己的软件程序。</li>
<li>对软件专利的态度，MPL许可证不像GPL许可证那样明确表示反对软件专利，但是却明确要求源代码的提供者不能提供已经受专利保护的源代码(除非他本人是专利权人，并书面向公众免费许可这些源代码)，也不能在将这些源代码以开放源代码许可证形式许可后再去申请与这些源代码有关的专利。</li>
</ul>
<p><em>对源代码的定义</em></p>
<ul>
<li>而在MPL(1.1版本)许可证中，对源代码的定义是:“源代码指的是对作品进行修改最优先择取的形式，它包括:所有模块的所有源程序，加上有关的接口的定义，加上控制可执行作品的安装和编译的‘原本’(原文为‘Script’)，或者不是与初始源代码显著不同的源代码就是被源代码贡献者选择的从公共领域可以得到的程序代码。”</li>
<li>MPL许可证第3条有专门的一款是关于对源代码修改进行描述的规定，就是要求所有再发布者都得有一个专门的文件就对源代码程序修改的时间和修改的方式有描述。</li>
</ul>
<h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul>
<li>GPL协议、LGPL协议与BSD协议的法律区别。</li>
</ul>
<p>简而言之，GPL协议就是一个开放源代码协议，软件的初始开发者使用了GPL协议并公开软件的源程序后，后续使用该软件源程序开发软件者亦应当根据GPL协议把自己编写的源程序进行公开。GPL协议要求的关键在于开放源程序，但并不排斥软件作者向用户收费。虽然如此，很多大公司对GPL协议还是又爱又恨，爱的是这个协议项下的软件历经众多程序员千锤百炼的修改，已经非常成熟完善，恨的是必须开放自己后续的源程序，导致竞争对手也可以根据自己修改的源程序开发竞争产品。</p>
<p>正因大公司对GPL协议在商业上存在顾虑，因此，另两种协议被采用的更多，第一种是LGPL(亦称GPL V2)协议，可以翻译为更宽松的GPL协议。与GPL协议的区别为，后者如果只是对LGPL软件的程序库的程序进行调用而不是包含其源代码时，相关的源程序无需开源。调用和包含的区别类似在互联网网网页上对他人网页内容的引用: 如果把他人的内容全部或部分复制到自己的网页上，就类似包含，如果只是贴一个他人网页的网址链接而不引用内容，就类似调用。有了这个协议，很多大公司就可以把很多自己后续开发内容的源程序隐藏起来。</p>
<p>第二种是BSD协议(类似的还有MIT协议)。BSD协议鼓励软件的作者公开自己后续开发的源代码，但不强求。在BSD协议项下开发的软件，原始的源程序是开放源代码的，但使用者修改以后，可以自行选择发布源程序或者二进制程序(即目标程序)，当然，使用者有义务把自己原来使用的源程序与BSD协议在软件对外发布时一并发布。因为比较灵活，所以BSD深受大公司的欢迎。</p>
<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><ul>
<li>常用开源软件许可协议简介 <a href="https://www.cnblogs.com/yefengmeander/p/4173673.html">https://www.cnblogs.com/yefengmeander/p/4173673.html</a></li>
<li>开源协议在再发布过程中的授权总结 <a href="http://blog.csdn.net/bqlyj/article/details/60322655">http://blog.csdn.net/bqlyj/article/details/60322655</a></li>
<li>如何为你的代码选择一个开源协议 - 刘哇勇的部落格 <a href="http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html">http://www.cnblogs.com/Wayou/p/how_to_choose_a_license.html</a></li>
<li>重要开源协议的比较(BSD,Apache,GPL,LGPL,MIT) – TechBirds在路上 <a href="http://blog.csdn.net/techbirds_bao/article/details/8785413">http://blog.csdn.net/techbirds_bao/article/details/8785413</a></li>
<li>游云庭律师的回答 - 主流开源协议之间有何异同? - 知乎 <a href="https://www.zhihu.com/question/19568896/answer/12284793">https://www.zhihu.com/question/19568896/answer/12284793</a></li>
<li>Choose a license <a href="https://choosealicense.com/licenses/">https://choosealicense.com/licenses/</a></li>
<li>Understanding Copyright And License <a href="https://www.smashingmagazine.com/2011/06/understanding-copyright-and-licenses/">https://www.smashingmagazine.com/2011/06/understanding-copyright-and-licenses/</a></li>
<li>开源协议 - 百度百科 <a href="http://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE">http://baike.baidu.com/item/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE</a></li>
<li>如何选择开源许可证? <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses</a></li>
<li>常见软件开源协议详解 <a href="https://www.pdai.tech/md/dev-spec/opensource/dev-opensource.html">https://www.pdai.tech/md/dev-spec/opensource/dev-opensource.html</a></li>
</ul>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>方法论</category>
        <category>开源协议</category>
      </categories>
      <tags>
        <tag>方法论</tag>
        <tag>开源协议</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-MongoDB</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-MongoDB/</url>
    <content><![CDATA[<h1 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h1><h2 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h2><p>根据自己的要求下载tar包，<a href="https://www.mongodb.com/try/download/community2">点击此链接选择进行下载</a></p>
<p>博猪下载版本为<code>mongodb-linux-x86_64-rhel70-4.4.17.tgz</code></p>
<h2 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h2><h2 id="解压压缩包"><a href="#解压压缩包" class="headerlink" title="解压压缩包"></a>解压压缩包</h2><p>解压到 &#x2F;opt 目录下，并重命名</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">tar zxvf mongodb-linux-x86_64-rhel70-4.4.17.tgz -C /opt<br><br>mv mongodb-linux-x86_64-rhel70-6.0.0 mongodb<br></code></pre></td></tr></table></figure>

<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>在 &#x2F;etc&#x2F;profile 中加入下面一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">export PATH=/opt/mongodb/bin:$PATH<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">刷新配置</span><br>source /etc/profile<br></code></pre></td></tr></table></figure>

<h2 id="创建数据库目录和日志目录"><a href="#创建数据库目录和日志目录" class="headerlink" title="创建数据库目录和日志目录"></a>创建数据库目录和日志目录</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /opt/mongodb/logs  # 日志目录<br>mkdir -p /opt/mongodb/db  # 数据库目录<br><br>touch /opt/mongodb/logs/mongodb.log  # 创建日志文件<br>chmod 777 /opt/mongodb/logs<br>chmod 777 /opt/mongodb/db<br></code></pre></td></tr></table></figure>

<h2 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi /opt/mongodb/mongodb.conf<br></code></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">port</span>= <span class="hljs-string">27017</span><br><span class="hljs-attr">dbpath</span>=<span class="hljs-string">/opt/mongodb/db  # 指定数据库路径</span><br><span class="hljs-attr">logpath</span>=<span class="hljs-string">/opt/mongodb/logs/mongodb.log # 指定日志文件路径</span><br><span class="hljs-attr">logappend</span>=<span class="hljs-string">true  # 使用追加方式写日志</span><br><span class="hljs-attr">fork</span>=<span class="hljs-string">true  # 以守护进程的方式运行</span><br><span class="hljs-attr">maxConns</span>=<span class="hljs-string">100  # 最大同时连接数</span><br><span class="hljs-attr">noauth</span>=<span class="hljs-string">true  # 不启用验证</span><br><span class="hljs-attr">journal</span>=<span class="hljs-string">true  # 每次写入会记录一条操作日志</span><br><span class="hljs-attr">storageEngine</span>=<span class="hljs-string">wiredTiger # 存储引擎</span><br><span class="hljs-attr">bind_ip</span>=<span class="hljs-string">0.0.0.0 # 服务绑定地址</span><br></code></pre></td></tr></table></figure>

<h2 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mongod --config /opt/mongodb/mongodb.conf<br></code></pre></td></tr></table></figure>

<h2 id="启用授权验证"><a href="#启用授权验证" class="headerlink" title="启用授权验证"></a>启用授权验证</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mongod --config /opt/mongodb/mongodb.conf --auth<br></code></pre></td></tr></table></figure>

<h2 id="停止-mongodb"><a href="#停止-mongodb" class="headerlink" title="停止 mongodb"></a>停止 mongodb</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mongod --config /opt/mongodb/mongodb.conf --shutdown<br></code></pre></td></tr></table></figure>

<h2 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/init.d/mongodb<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/sh</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash"></span><br><span class="language-bash"><span class="hljs-comment">#chkconfig: 2345 80 90</span></span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">description: mongodb</span><br>start() &#123;<br> /opt/mongodb/bin/mongod --config /opt/mongodb/mongodb.conf<br>&#125;<br> <br>stop() &#123;<br>  /opt/mongodb/bin/mongod --config /opt/mongodb/mongodb.conf --shutdown<br>&#125;<br> <br>case &quot;$1&quot; in<br>  start)<br> start<br> ;;<br>  stop)<br> stop<br> ;;<br>  restart)<br> stop<br> start<br> ;;<br>  *)<br> echo $&quot;Usage: $0 &#123;start|stop|restart&#125;&quot;<br> exit 1<br>esac<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /etc/init.d/<br><br>sudo chkconfig --add mongodb<br>sudo chmod +x  mongodb<br>sudo chkconfig mongodb on<br></code></pre></td></tr></table></figure>

<p>配置完成后可使用以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动mongodb：</span><br>service mongodb start<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止mongodb：</span><br>service mongodb stop<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意：上述启动为root账户启动，权限太大，如果需要启用验证，则需要将配置文件（&#x2F;opt&#x2F;mongodb&#x2F;mongodb.conf）中的 noauth 设置为 false</p>
</blockquote>
<h1 id="Yum源安装"><a href="#Yum源安装" class="headerlink" title="Yum源安装"></a>Yum源安装</h1><h2 id="创建存储源文件夹"><a href="#创建存储源文件夹" class="headerlink" title="创建存储源文件夹"></a>创建存储源文件夹</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">mkdir -p /opt/rpm_repo<br>cd /opt/rpm_repo	<br></code></pre></td></tr></table></figure>

<h2 id="下载MongoDBYum源"><a href="#下载MongoDBYum源" class="headerlink" title="下载MongoDBYum源"></a>下载MongoDBYum源</h2><blockquote>
<p>根据自己的要求下载tar包，<a href="https://www.mongodb.com/try/download/community2">点击此链接选择进行下载</a>,选择一下三个选项，右键<code>Download</code>,复制链接地址即可。</p>
<p><img src="http://tva1.sinaimg.cn/large/0086NgqGly1h7acvnupi8j313d0mp7ak.jpg" alt="image.png"></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">shell-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-shell-4.4.17-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">server-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-server-4.4.17-1.el7.x86_64.rpm<br><span class="hljs-meta prompt_"># </span><span class="language-bash">mongos-rpm</span><br>wget https://repo.mongodb.org/yum/redhat/7/mongodb-org/4.4/x86_64/RPMS/mongodb-org-mongos-4.4.17-1.el7.x86_64.rpm<br></code></pre></td></tr></table></figure>

<h2 id="使用Yum安装"><a href="#使用Yum安装" class="headerlink" title="使用Yum安装"></a>使用Yum安装</h2><blockquote>
<p>使用 yum 安装 mongodb，可以解决依赖包问题</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y mongodb-org-*.rpm<br></code></pre></td></tr></table></figure>

<h2 id="查询MongoDB状态"><a href="#查询MongoDB状态" class="headerlink" title="查询MongoDB状态"></a>查询MongoDB状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl status mongod<br></code></pre></td></tr></table></figure>

<p>如果启动，则需要停止运行，停止命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">systemctl stop mongod<br></code></pre></td></tr></table></figure>

<h2 id="修改MongoDB配置文件"><a href="#修改MongoDB配置文件" class="headerlink" title="修改MongoDB配置文件"></a>修改MongoDB配置文件</h2><ul>
<li>备份配置文件</li>
<li>备份配置文件</li>
<li>备份配置文件</li>
</ul>
<p>重要的事情说三遍！！！！</p>
<blockquote>
<p>一般yum安装配置信息都在<code>/etc</code></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /etc<br>cp mongod.conf mongod.conf.bak<br></code></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vi mongod.conf<br></code></pre></td></tr></table></figure>

<p>最终文件配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># mongod.conf</span><br><br><span class="hljs-comment"># for documentation of all options, see:</span><br><span class="hljs-comment">#   http://docs.mongodb.org/manual/reference/configuration-options/</span><br><br><span class="hljs-comment"># where to write logging data.</span><br><span class="hljs-attr">systemLog:</span><br>  <span class="hljs-attr">destination:</span> <span class="hljs-string">file</span><br>  <span class="hljs-attr">logAppend:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-comment"># 指定日志文件路径</span><br>  <span class="hljs-attr">path:</span> <span class="hljs-string">/opt/mongodb/logs/mongod.log</span><br><br><span class="hljs-comment"># Where and how to store data.</span><br><span class="hljs-attr">storage:</span><br>  <span class="hljs-comment"># 指定数据库路径</span><br>  <span class="hljs-attr">dbPath:</span> <span class="hljs-string">/opt/mongodb/db</span><br>  <span class="hljs-comment"># 每次写入会记录一条操作日志</span><br>  <span class="hljs-attr">journal:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-comment">#  engine:</span><br><span class="hljs-comment">#  wiredTiger:</span><br><br><span class="hljs-comment"># how the process runs</span><br><span class="hljs-attr">processManagement:</span><br>  <span class="hljs-comment"># 以守护进程的方式运行</span><br>  <span class="hljs-attr">fork:</span> <span class="hljs-literal">true</span>  <span class="hljs-comment"># fork and run in background</span><br>  <span class="hljs-attr">pidFilePath:</span> <span class="hljs-string">/var/run/mongodb/mongod.pid</span>  <span class="hljs-comment"># location of pidfile</span><br>  <span class="hljs-attr">timeZoneInfo:</span> <span class="hljs-string">/usr/share/zoneinfo</span><br><br><span class="hljs-comment"># network interfaces</span><br><span class="hljs-attr">net:</span><br>  <span class="hljs-comment"># 配置端口</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">37017</span><br>  <span class="hljs-comment"># 服务绑定地址</span><br>  <span class="hljs-comment"># 输入0.0.0.0，::绑定所有IPv4和IPv6地址，或者使用网络。bindIpAll设置</span><br>  <span class="hljs-attr">bindIp:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>  <span class="hljs-comment"># Enter 0.0.0.0,:: to bind to all IPv4 and IPv6 addresses or, alternatively, use the net.bindIpAll setting.</span><br><br><br><span class="hljs-comment">#security:</span><br><br><span class="hljs-comment">#operationProfiling:</span><br><br><span class="hljs-comment">#replication:</span><br><br><span class="hljs-comment">#sharding:</span><br><br><span class="hljs-comment">## Enterprise-Only Options</span><br><br><span class="hljs-comment">#auditLog:</span><br><br><span class="hljs-comment">#snmp:</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS7</tag>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7-Redis</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Centos7/Centos7-Redis/</url>
    <content><![CDATA[<h1 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h1><p>redis是由C语言开发，因此安装之前必须要确保服务器已经安装了gcc，可以通过如下命令查看机器是否安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">gcc -v<br></code></pre></td></tr></table></figure>

<p>如果没有安装则通过以下命令安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">yum install -y gcc<br></code></pre></td></tr></table></figure>

<h1 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h1><blockquote>
<p>下载redis安装包并解压，<a href="https://redis.io/download/#redis-downloads">点击此链接跳转到</a>​<a href="https://redis.io/download/#redis-downloads"><code>Redis</code></a>​<a href="https://redis.io/download/#redis-downloads">下载页面</a></p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /opt<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">下载，我是在opt下执行的下载，所以我的下载目录为：/opt/redis-&#123;version-number&#125;，这里按照自己的实际情况调整</span><br>wget https://github.com/redis/redis/archive/7.0.5.tar.gz<br>mv 7.0.5.tar.gz redis-7.0.5.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -zxvf redis-7.0.5.tar.gz<br></code></pre></td></tr></table></figure>

<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入解压目录</span><br>cd redis-7.0.5<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br>make<br></code></pre></td></tr></table></figure>

<h1 id="指定安装目录并进行安装"><a href="#指定安装目录并进行安装" class="headerlink" title="指定安装目录并进行安装"></a>指定安装目录并进行安装</h1><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">这里默认安装位置为:/usr/local/redis</span><br>make install PREFIX=/usr/local/redis<br></code></pre></td></tr></table></figure>

<h1 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h1><h2 id="直接启动（不建议使用）"><a href="#直接启动（不建议使用）" class="headerlink" title="直接启动（不建议使用）"></a>直接启动（不建议使用）</h2><blockquote>
<p>直接启动，使用的是redis的默认配置，不建议直接默认启动！！！！</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">进入redis安装目录</span><br>cd /usr/local/redis/bin/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动服务</span><br>./redis-server<br></code></pre></td></tr></table></figure>

<h2 id="通过守护进程方式启动"><a href="#通过守护进程方式启动" class="headerlink" title="通过守护进程方式启动"></a>通过守护进程方式启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">第一步：从 redis 的源码目录中复制 redis.conf 到 redis 的安装目录</span><br>cp /opt/redis-7.0.5/redis.conf /usr/local/redis/bin/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第二步：修改redis.conf配置文件</span><br>cd /usr/local/redis/bin/<br>vi redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">修改内容如下：</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">daemonize 的值从 no 修改成 <span class="hljs-built_in">yes</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">requirepass 123456 <span class="hljs-comment"># 设置密码</span></span> <br><span class="hljs-meta prompt_"># </span><span class="language-bash">127.0.0.1          <span class="hljs-comment">#注释掉这行代码,以便外网访问</span></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">第三步：启动服务</span><br>./redis-server redis.conf<br><span class="hljs-meta prompt_"># </span><span class="language-bash">第四步：查看进程来确定redis是否启动成功，非必须,建议查看</span><br>ps -ef |grep redis<br></code></pre></td></tr></table></figure>

<h1 id="停止Redis服务"><a href="#停止Redis服务" class="headerlink" title="停止Redis服务"></a>停止Redis服务</h1><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/local/redis/bin<br>./redis-cli shutdown<br></code></pre></td></tr></table></figure>

<h1 id="设置开机自动启动"><a href="#设置开机自动启动" class="headerlink" title="设置开机自动启动"></a>设置开机自动启动</h1><p>切换到&#x2F;lib&#x2F;systemd&#x2F;system&#x2F;目录，创建redis.service文件。命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">cd /lib/systemd/system/<br>vim redis.service<br></code></pre></td></tr></table></figure>

<p>文件内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">[Unit]<br>Description=redis-server<br>After=network.target<br><br>[Service]<br>Type=forking<br><span class="hljs-meta prompt_"># </span><span class="language-bash">ExecStart需要按照实际情况修改成自己的地址</span><br>ExecStart=/usr/local/redis/bin/redis-server /usr/local/redis/bin/redis.conf<br>PrivateTmp=true<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure>

<p>设置开启自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 开机自动启动</span><br>systemctl <span class="hljs-built_in">enable</span> redis.service<br><span class="hljs-comment"># 启动redis服务</span><br>systemctl start redis.service<br><span class="hljs-comment"># 查看服务状态</span><br>systemctl status redis.service<br><span class="hljs-comment"># 停止服务</span><br>systemctl stop redis.service<br><span class="hljs-comment"># 取消开机自动启动(卸载服务)</span><br>systemctl disabled redis.service<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
        <category>Centos7</category>
      </categories>
      <tags>
        <tag>CentOS7</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware-复制虚拟机&amp;克隆虚拟机</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%A4%8D%E5%88%B6%E8%99%9A%E6%8B%9F%E6%9C%BA&amp;%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<blockquote>
<p>关于虚拟机提示选择“我已移动该虚拟机”或“我已复制该虚拟机”</p>
</blockquote>
<ul>
<li>我已移动该虚拟机<blockquote>
<p>表示打开后，虚拟机的网卡的mac地址不变，如果复制的是本地的虚拟机，复制前的虚拟机和复制后的虚拟机同时开机会造成网络冲突。</p>
</blockquote>
</li>
<li>我已复制该虚拟机<blockquote>
<p>表示打开复制后的虚拟机的网卡的物理地址是新生成的，这样怎么开机都不会有网卡问题，所以VMware本身也是建议不知道的就选这个选项。</p>
</blockquote>
</li>
</ul>
<h1 id="复制虚拟机"><a href="#复制虚拟机" class="headerlink" title="复制虚拟机"></a>复制虚拟机</h1><p>VMware 上创建的虚拟机是可以重复使用的，安装好的虚拟机可以直接复制或者剪切到其它任意电脑上，然后使用 VMware 打开使用，两者的虚拟机设置以及登录密码都完全一样。</p>
<p>比如在某台电脑 A 上创建了 CentOS 7.2 的虚拟机（其它系统虚拟机如 windows、Red hat 也是同理），某一天在电脑 B 上也需要使用虚拟机，此时在电脑 B 上只需要安装 VMware 软件，然后从电脑 A 复制创建好的虚拟机文件目录到电脑 B，然后打开启动虚拟机即可。虚拟机的配置，如内存大小，处理器，磁盘大小等等，电脑 B 都会与电脑 A 中的保持一致，连登陆密码都是一致。</p>
<p>这样的情况其实挺多的，比如从自己的旧电脑复制到新电脑上，或者从家里的笔记本复制到公司的台式机等等，如下动图所示，就是将旧电脑上创建好了的 CentOS 虚拟机整个目录复制到了新电脑上，然后运行 VMware 打开即可运行。</p>
<p>注意：</p>
<ul>
<li>虽然虚拟机系统可以复制或者剪切重复使用，但是虚拟机系统内部安装的软件（比如 Java、mysql、docker等等）可能需要重新安装，造成原因如下：<ul>
<li>新旧电脑的环境不一致</li>
<li>因为旧电脑上使用的是 VMware 12，而新电脑使用的是 VMware 15</li>
<li>直接复制的系统里面的程序本身真的需要重新安装。</li>
</ul>
</li>
</ul>
<h1 id="克隆虚拟机"><a href="#克隆虚拟机" class="headerlink" title="克隆虚拟机"></a>克隆虚拟机</h1><p>平时开发的时候需要做集群，比如 Redis 集群、Kafka 集群、微服务集群等等，为了更贴实际，就需要多台虚拟机，使用一个 VMware 开启多个 虚拟机系统，此时固然可以重新创建虚拟机、或者复制虚拟机，但是都没有克隆虚拟机来的快。</p>
<p>克隆虚拟机只需简单几步，就能克隆一个一模一样的系统，虚拟机配置、登陆账户及密码等等完全一样、更重要的是连原系统安装的程序在新克隆的系统中都能继续使用。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p><font color="#c00000">无法为已经开启或者挂起的虚拟机克隆，所以克隆前需要关闭虚拟机。</font></p>
<h2 id="克隆步骤"><a href="#克隆步骤" class="headerlink" title="克隆步骤"></a>克隆步骤</h2><p>右键要克隆的虚拟机、选择管理 ——&gt; 克隆，进入克隆虚拟机向导，然后根据向导即可轻松创建。</p>
<ul>
<li>克隆源<ul>
<li>虚拟机中的当前状态</li>
<li>现有快照(仅限关闭的虚拟机)</li>
</ul>
</li>
<li>克隆类型<ul>
<li>创建链接克隆</li>
<li>创建完整克隆</li>
</ul>
</li>
</ul>
<h2 id="克隆后修改事项"><a href="#克隆后修改事项" class="headerlink" title="克隆后修改事项"></a>克隆后修改事项</h2><p>克隆后并不是直接能用，而是需要进行一些调试。 因为刚刚克隆完之后，克隆机和母机MAC地址一样，我们需要重新配置和删除网卡信息</p>
<h3 id="修改MAC地址"><a href="#修改MAC地址" class="headerlink" title="修改MAC地址"></a>修改MAC地址</h3><p>通过虚拟机设置进行修改，点击生成即可<br>虚拟机设置-&gt;网络适配器-&gt;高级-&gt;MAC地址-&gt;生成</p>
<h3 id="修改主机名"><a href="#修改主机名" class="headerlink" title="修改主机名"></a>修改主机名</h3><p>出于程序开发的需要，需要区别各个服务器的名称，所以修改新系统的主机名称，它默认是：localhost.localdomain</p>
<table>
<thead>
<tr>
<th>hostname</th>
<th>查看系统主机名称</th>
</tr>
</thead>
<tbody><tr>
<td>hostnamectl set-hostname xxx</td>
<td>修改系统主机名称<br/>1、主机名称中的特殊字符或空白字符都将会被移除，大写字母会自动转化成小写<br/>2、执行命令之后，会自动修改 &#x2F;etc&#x2F;hostname 文件<br/>3、执行命令之后，会立即生效，且重启系统也会生效</td>
</tr>
<tr>
<td>cat &#x2F;etc&#x2F;hostname</td>
<td>查看 &#x2F;etc&#x2F;hostname 文件内容，里面配置的就是系统主机名称</td>
</tr>
</tbody></table>
<h3 id="IP-地址修改"><a href="#IP-地址修改" class="headerlink" title="IP 地址修改"></a>IP 地址修改</h3><blockquote>
<p>如果是静态地址的话需要手动修改一下ip地址，如果是DHCP动态分配则无需配置。</p>
</blockquote>
<h4 id="查看网络信息"><a href="#查看网络信息" class="headerlink" title="查看网络信息"></a>查看网络信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">ifconfig<br></code></pre></td></tr></table></figure>

<p>假如是静态  ip，则可以手动修改 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F; 目录下的网卡文件，如 ifcfg-ens33（ifcfg-是前缀，ens33是网卡名称），网卡名称可以使用 ifconfig 命令查看。静态 ip 时，BOOTPROTO&#x3D;”static”，还会多一行 IPADDR&#x3D;x.x.x.x，修改此 IPADDR 即可修改 ip 地址。</p>
<p><font color="#c00000">特别提醒：如果克隆出来的新系统的网卡文件名称仍然和原系统的网卡名称一致，则需要手动修改文件名称为新系统的网卡名称，同时也要修改网卡文件内的 NAME、DEVICE 属性和新系统网卡名称一致。</font></p>
<h4 id="重启网络"><a href="#重启网络" class="headerlink" title="重启网络"></a>重启网络</h4><p>使用 nmcli c reload（centos 8） 命令或 service network restart (centos 7)命令重启虚拟网卡，查看本机 ip 如果不是设置的则重启虚拟机</p>
<h3 id="删除网卡信息"><a href="#删除网卡信息" class="headerlink" title="删除网卡信息"></a>删除网卡信息</h3><p>如果上述配置完了还有问题，就把网卡信息文件删掉重启，当然你也可以在配置的时候就直接删掉网卡信息，他在重启的时候会自动生成。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">rm</span> -rf /etc/udev/rules.d/70-persistent-ipoib.rules <br></code></pre></td></tr></table></figure>

<h3 id="重启虚拟机"><a href="#重启虚拟机" class="headerlink" title="重启虚拟机"></a>重启虚拟机</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">init 6<br></code></pre></td></tr></table></figure>

<p>此时就可以正常应用已经克隆好的虚拟机了。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>LINUX</tag>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker(5)-安装MySQL</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Docker/Docker(5)-%E5%AE%89%E8%A3%85MySQL/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本人文章均引用或者复制：</p>
<p>公众号：</p>
<p><img src="http://www.cicoding.cn/icons/wx.jpg"></p>
<p>QQ群：<a href="http://shang.qq.com/wpa/qunwpa?idkey=85cfa5c4c8fbe9859b7166a33d84c32f2def325c4d29f35f299a5756a955ab21">806951874</a></p>
</blockquote>
<h1 id="在Docker中安装Mysql"><a href="#在Docker中安装Mysql" class="headerlink" title="在Docker中安装Mysql"></a>在Docker中安装Mysql</h1><h2 id="前言-1"><a href="#前言-1" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>前言</p>
<p>此篇幅内容较多，讲解的很详细，也有很多知识点。能耐心认真的读完，就很不错了~</p>
</blockquote>
<blockquote>
<p>一般情况下，都会永久性的配置镜像加速，在Linux中修改 &#x2F;etc&#x2F;docker&#x2F;daemon.json 文件，填入以下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">&#123;<br>    &quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;]<br>&#125;<br></code></pre></td></tr></table></figure>
</blockquote>
<blockquote>
<p>如果daemon.json不存在的话，需要自己创建一下。</p>
<p>文件修改保存成功之后，记得重启一下Docker服务，以便让这个镜像加速生效。</p>
<p>重启Docker服务</p>
<p>我们在【在centos系统中安装Docker】一节中讲过Docker随着服务器重启自动启动的内容，正好可以通过命令service docker restart来实现Docker服务的重启。</p>
<p>具体详情请查看 <a href="https://yuque.com/zhoubang/docker/rqspmt#cuygcr">https://yuque.com/zhoubang/docker/rqspmt#cuygcr</a></p>
</blockquote>
<blockquote>
<p>然后我们在Linux中执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">service docker restart<br></code></pre></td></tr></table></figure>
</blockquote>
<p>出现下图所示结果，表明Docker服务已经重新启动了！这样就可以永久性的使用Docker加速服务了。</p>
<blockquote>
<p>如果不做特别的配置的话，之前处于运行状态的容器，随着Docker服务的重启也会停止运行。</p>
</blockquote>
<h2 id="下载mysql镜像"><a href="#下载mysql镜像" class="headerlink" title="下载mysql镜像"></a>下载mysql镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker pull mysql<br></code></pre></td></tr></table></figure>

<blockquote>
<p>如果配置了镜像加速，那么在下载mysql镜像或者其他比较大的文件的时候，会发现下载速度变得非常快！</p>
</blockquote>
<h2 id="启动mysql容器"><a href="#启动mysql容器" class="headerlink" title="启动mysql容器"></a>启动mysql容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name=mysql mysql<br></code></pre></td></tr></table></figure>

<blockquote>
<p>其中 -e 的作用是用于设置环境变量，mysql默认用户名为root，则MYSQL_ROOT_PASSWORD即为root设置密码，即123456</p>
</blockquote>
<h2 id="查看运行的mysql容器"><a href="#查看运行的mysql容器" class="headerlink" title="查看运行的mysql容器"></a>查看运行的mysql容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker ps<br></code></pre></td></tr></table></figure>

<p>如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015011544.png"></p>
<blockquote>
<p>mysql容器已经正常启动了！</p>
</blockquote>
<h2 id="进入mysql容器"><a href="#进入mysql容器" class="headerlink" title="进入mysql容器"></a>进入mysql容器</h2><blockquote>
<p>既然mysql服务启动了，如果我们想对mysql进行操作（比如进入命令行操作、客户端连接等操作），该怎么办？</p>
</blockquote>
<p><strong>通过 docker exec 命令进入mysql容器：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it c9 /bin/bash<br></code></pre></td></tr></table></figure>

<blockquote>
<p>其中的“c9”指的当前mysql容器ID的前面部分值（在上图就可以看出来mysql容器的ID是 c94faeed480a）。</p>
</blockquote>
<p>回车运行效果如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015011544.png" alt="img"></p>
<blockquote>
<p>其实这个时候，命令行控制台可以输入mysql相关的命令了。</p>
</blockquote>
<h2 id="连接mysql数据库"><a href="#连接mysql数据库" class="headerlink" title="连接mysql数据库"></a>连接mysql数据库</h2><blockquote>
<p>mysql -u root -p123456</p>
</blockquote>
<p>如下图：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015011544.png" alt="img"></p>
<p>这个就是我们非常熟悉的mysql命令行界面了！</p>
<p>我们可以在这里创建数据库、表等操作。再次印证了Docker的强大和方便！</p>
<p><img src="http://www.cicoding.cn/images/docker/1527527324223-e0be6ce6-e27b-4ba9-9eb0-821cb8f0509e.jpeg"></p>
<h2 id="查看当前所有的数据库"><a href="#查看当前所有的数据库" class="headerlink" title="查看当前所有的数据库"></a>查看当前所有的数据库</h2><p>在mysql命令行中执行命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">show databases;<br></code></pre></td></tr></table></figure>

<p>如下图所示：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015012343.png"></p>
<blockquote>
<p>完全就是和平常使用mysql一样。</p>
</blockquote>
<h2 id="创建数据库、表、新增测试数据"><a href="#创建数据库、表、新增测试数据" class="headerlink" title="创建数据库、表、新增测试数据"></a>创建数据库、表、新增测试数据</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">create database docker_test;<br></code></pre></td></tr></table></figure>

<p>效果如下图：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527527630068-b5963a1f-6e4b-4afb-90fa-6aff56bb5f2d.png"></p>
<blockquote>
<p>这里我就创建了一个数据库docker_test</p>
</blockquote>
<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><blockquote>
<p>首先需要<strong>选择具体的数据库</strong>，执行命令选择刚刚创建的数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">use docker_test<br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">create table test(name varchar(20),age int(11));<br></code></pre></td></tr></table></figure>

<blockquote>
<p>创建了test表，有2个字段：name、age</p>
</blockquote>
<h3 id="添加测试数据"><a href="#添加测试数据" class="headerlink" title="添加测试数据"></a>添加测试数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">insert into test values(&quot;Kitty&quot;,26),(&quot;Tom&quot;,18),(&quot;Jack&quot;,36);<br></code></pre></td></tr></table></figure>

<blockquote>
<p>这里就简单添加3条测试数据。</p>
</blockquote>
<blockquote>
<p>我们查询一下数据是否存在于数据库中：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">select * from test;<br></code></pre></td></tr></table></figure>

<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015013358.png"></p>
</blockquote>
<blockquote>
<p>一切OK！</p>
</blockquote>
<h2 id="客户端连接mysql数据库"><a href="#客户端连接mysql数据库" class="headerlink" title="客户端连接mysql数据库"></a>客户端连接mysql数据库</h2><blockquote>
<p>既然mysql成功启动并运行，除了能在命令行中操作mysql数据库之外，肯定也是必须要能在客户端上连接和操作数据库才行。</p>
</blockquote>
<blockquote>
<p>下面我就在我本地电脑上通过数据库客户端软件连接一下这个mysql数据库， 看看能不能正常连接和操作。</p>
</blockquote>
<blockquote>
<p>我使用的是IDEA自带的数据库软件</p>
</blockquote>
<h3 id="新建连接mysql数据库"><a href="#新建连接mysql数据库" class="headerlink" title="新建连接mysql数据库"></a>新建连接mysql数据库</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015035759.png"></p>
<ul>
<li>输入正确的mysql相关信息，连接数据库</li>
</ul>
<blockquote>
<p>输入完成之后，可以点击下方的 Test Connection 按钮，来测试连接是否正常。</p>
</blockquote>
<p><strong>查看创建的数据库和表：</strong></p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015040227.png"></p>
<blockquote>
<p>到此，mysql的相关服务已经正常访问和操作了。这和我们传统的使用mysql没有什么不同。</p>
</blockquote>
<h3 id="客户端中操作表数据"><a href="#客户端中操作表数据" class="headerlink" title="客户端中操作表数据"></a>客户端中操作表数据</h3><blockquote>
<p>我们通过DataGrip客户端，在test表中手动再添加一条数据，然后我们在docker中看看是否能查看到新增的数据：</p>
</blockquote>
<p><img src="http://www.cicoding.cn/images/docker/1527529149115-b76ddbb0-d5d6-47c2-994a-5e6b7c86b9aa.png" alt="在Docker中安装Mysql"></p>
<blockquote>
<p>【注意】：我这里添加了一条带有中文的数据。</p>
</blockquote>
<h3 id="进入mysql容器中查询表数据"><a href="#进入mysql容器中查询表数据" class="headerlink" title="进入mysql容器中查询表数据"></a>进入mysql容器中查询表数据</h3><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015040555.png"></p>
<blockquote>
<p>呀！是不是发现问题了~ 没错，中文乱码！怎么解决呢？</p>
</blockquote>
<h3 id="mysql容器中解决表数据中文乱码"><a href="#mysql容器中解决表数据中文乱码" class="headerlink" title="mysql容器中解决表数据中文乱码"></a>mysql容器中解决表数据中文乱码</h3><h4 id="查看mysql容器的ID"><a href="#查看mysql容器的ID" class="headerlink" title="查看mysql容器的ID"></a>查看mysql容器的ID</h4><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015011544.png" alt="img"></p>
<h4 id="进入mysql的docker容器"><a href="#进入mysql的docker容器" class="headerlink" title="进入mysql的docker容器"></a>进入mysql的docker容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker exec -it 20 /bin/bash<br></code></pre></td></tr></table></figure>

<h4 id="编辑mysql配置文件"><a href="#编辑mysql配置文件" class="headerlink" title="编辑mysql配置文件"></a>编辑mysql配置文件</h4><figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">vim /etc/mysql/my.cnf<br></code></pre></td></tr></table></figure>

<blockquote>
<p>如果提示 vim: command not found 的错误信息，需要安装相关依赖包，执行下面两个命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">apt-get update<br></code></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">apt-get install vim<br></code></pre></td></tr></table></figure>
</blockquote>
<h4 id="在my-cnf文件中加入以下配置"><a href="#在my-cnf文件中加入以下配置" class="headerlink" title="在my.cnf文件中加入以下配置"></a>在my.cnf文件中加入以下配置</h4><figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">[mysqld]<br>character-set-server=utf8 <br>[client]<br>default-character-set=utf8 <br>[mysql]<br>default-character-set=utf8<br></code></pre></td></tr></table></figure>

<p>最终修改结果为：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527530651772-65e37c7b-f8bd-4600-82d3-bbc899c75588.png" alt="在Docker中安装Mysql"></p>
<p><strong>重新进入mysql容器，查询表数据</strong> ，显示结果为：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015041908.png"></p>
<blockquote>
<p>可以看到，已经正常显示中文了！</p>
</blockquote>
<h4 id="停止并重启mysql容器，再次查看效果"><a href="#停止并重启mysql容器，再次查看效果" class="headerlink" title="停止并重启mysql容器，再次查看效果"></a>停止并重启mysql容器，再次查看效果</h4><p><img src="http://www.cicoding.cn/images/docker/1527531064156-dd3d8b97-58ea-45e1-a0a3-c197f1bf4053.png"></p>
<p><img src="http://www.cicoding.cn/images/docker/1527531133633-c2fa79b6-d15b-4339-b062-ef0514e77940.png" alt="在Docker中安装Mysql"></p>
<blockquote>
<p>客户端连接正常！</p>
</blockquote>
<h4 id="进入mysql容器，查看表数据"><a href="#进入mysql容器，查看表数据" class="headerlink" title="进入mysql容器，查看表数据"></a>进入mysql容器，查看表数据</h4><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201015085429.png"></p>
<blockquote>
<p>mysql容器重启之后，查询数据正常显示中文！一切没什么问题了~</p>
</blockquote>
<h2 id="通过commit命令提交新的镜像"><a href="#通过commit命令提交新的镜像" class="headerlink" title="通过commit命令提交新的镜像"></a>通过commit命令提交新的镜像</h2><blockquote>
<p>根据在mysql容器中所做的更改，创建新的mysql镜像。</p>
<p>回想一下，我们在mysql容器中做了什么更改？</p>
<p>创建数据库、表、新增数据、修改my.cnf配置文件，就是这些吧~</p>
</blockquote>
<p>使用<em><strong>commit</strong></em>命令提交新镜像</p>
<p>通过在Linux命令行中执行命令，提交新的镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker commit c9 mysql-new<br></code></pre></td></tr></table></figure>

<blockquote>
<p>其中，“c9”就是指的容器ID，新的镜像名称为“mysql-new”。</p>
</blockquote>
<p>如下图：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527531803451-9e5877e4-43d7-4661-a577-961c2332fe2d.png" alt="在Docker中安装Mysql"></p>
<p>查看所有镜像列表：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527532053082-2e7691e6-6219-455b-906d-f4534476b913.png" alt="在Docker中安装Mysql"></p>
<blockquote>
<p>是不是发现了我们创建的新的镜像mysql-new了。</p>
</blockquote>
<h3 id="启动新创建的mysql镜像"><a href="#启动新创建的mysql镜像" class="headerlink" title="启动新创建的mysql镜像"></a>启动新创建的mysql镜像</h3><p><img src="http://www.cicoding.cn/images/docker/1527532239704-6e772c1c-551f-42f6-9b45-39137f38bea5.png" alt="在Docker中安装Mysql"></p>
<blockquote>
<p>由于上面我们已经运行了一个mysql的容器了，端口是3306，所以我们新运行一个mysql容器的时候，端口号就不能是3306了，这里我指定为3307，且容器的别名是mysql-new，方便区分查看。</p>
</blockquote>
<h3 id="进入新创建的mysql容器"><a href="#进入新创建的mysql容器" class="headerlink" title="进入新创建的mysql容器"></a>进入新创建的mysql容器</h3><h4 id="查看mysql数据库信息"><a href="#查看mysql数据库信息" class="headerlink" title="查看mysql数据库信息"></a>查看mysql数据库信息</h4><p><img src="http://www.cicoding.cn/images/docker/1527532534611-7677fed8-a17e-463c-93bb-62a1f7dfbb21.png" alt="在Docker中安装Mysql"></p>
<h4 id="查看my-cnf配置文件内容"><a href="#查看my-cnf配置文件内容" class="headerlink" title="查看my.cnf配置文件内容"></a>查看my.cnf配置文件内容</h4><p><img src="http://www.cicoding.cn/images/docker/1527532760600-5a1830ab-633e-4d00-a15a-23b6c2e0d677.png" alt="在Docker中安装Mysql"></p>
<p>从上面2张图中，可以明显的看到，我们之前创建的数据库docker_test、表test，都没有了！但是修改的my.cnf配置文件的内容还是保留着的。</p>
<p>why？？？ 为什么会这样呢？</p>
<blockquote>
<p>官方文档在commit命令的介绍中，有这样一段话：</p>
<p><strong>The commit operation will not include any data contained in volumes mounted inside the container.</strong></p>
</blockquote>
<blockquote>
<p>意思是commit操作并不会包含容器内挂载数据卷中的数据。</p>
</blockquote>
<blockquote>
<p><strong>如果对于“数据卷”不了解的话，确实看不懂是什么意思。</strong></p>
</blockquote>
<h3 id="数据卷与数据卷容器"><a href="#数据卷与数据卷容器" class="headerlink" title="数据卷与数据卷容器"></a>数据卷与数据卷容器</h3><blockquote>
<p><strong>数据卷与数据卷容器</strong></p>
</blockquote>
<blockquote>
<p>生产环境中使用Docker的过程中，往往需要对数据进行持久化，或者需要在多个容器之间进行数据共享，这必然涉及容器的数据管理操作。</p>
<p>容器中管理数据主要有两种方式：</p>
<p>数据卷（Data Volumes）：数据卷是一个可供容器使用的特殊目录，它将主机操作系统目录直接映射进容器。</p>
<p>数据卷容器（Data Volume Containers）：数据卷容器也是一个容器，但是它的目的是专门用来提供数据卷，供其他容器挂载使用的。</p>
</blockquote>
<p>根据官方文档对于commit的介绍中，可以猜测到为何之前创建的数据库、表都不见了，原因是因为mysql容器的挂载数据卷引起的。</p>
<p>我们可以通过命令查看到别名是“mysql”的容器挂载数据卷的目录。</p>
<p>看一下我们的“mysql”容器的ID信息，方便查看。</p>
<p><img src="http://www.cicoding.cn/images/docker/1527546716034-2e7873e1-883c-4d60-bdd6-bd75962b403a.png" alt="在Docker中安装Mysql"></p>
<p>通过命令docker inspect查看mysql这个容器的数据卷挂载信息：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker inspect c9<br></code></pre></td></tr></table></figure>

<p>执行命令之后，由于显示的内容比较多，这里我们就贴一下重要的信息：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527546766842-6a1ebb25-6a86-4a67-b202-05382a3ca083.png" alt="在Docker中安装Mysql"></p>
<p>通过图中可以看到，mysql容器将容器内的&#x2F;var&#x2F;lib&#x2F;mysql路径作为volume挂载。真正的数据库相关数据文件所在的目录就是“Source”对应的目录，即：&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;1b0b17f6a4f78d357a187116d75991db8ee784213e67cc9b9988c8ef647fe563&#x2F;_data</p>
<p>我们可以进入mysql容器查看&#x2F;var&#x2F;lib&#x2F;mysql目录下的内容：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527546887058-112f86c9-f2ae-4cae-9540-6da58fe3e8aa.png" alt="在Docker中安装Mysql"></p>
<blockquote>
<p>发现的确是mysql数据库的数据文件（红色区域）。</p>
</blockquote>
<p>这时候，我们切换到Linux命令行，进入到mysql容器的数据挂载目录，看看该目录下有什么内容：</p>
<p>&#x2F;var&#x2F;lib&#x2F;docker&#x2F;volumes&#x2F;1b0b17f6a4f78d357a187116d75991db8ee784213e67cc9b9988c8ef647fe563&#x2F;_data</p>
<p>如下图所示：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527546977803-7124018a-3f0e-447b-88d8-80b442be4539.png" alt="在Docker中安装Mysql"></p>
<p>咦~ 是不是发现了什么！把黄色区域的内容与上图中红色区域内容进行对比，是不是内容一模一样！</p>
<p>这也就印证了，当初我们在mysql容器中创建的数据库、表等，真正的数据库文件存放的位置就是在宿主机下面，而不是存放在容器中。</p>
<p>到此，我们终于知道了为何mysql-new容器中的数据库、表都不见了，原来数据库文件是存放在宿主机上的。</p>
<p>那该如何解决这个问题呢？怎样才能让mysql-new容器启动之后可以正常加载我们之前创建的数据库、表等数据呢？这就引入了下面的正题 —— 数据挂载。</p>
<h2 id="数据挂载"><a href="#数据挂载" class="headerlink" title="数据挂载"></a>数据挂载</h2><p>docker的数据挂载分为三种，volume、bind mount和tmpfs，关于三种的具体说明，有兴趣了解的可以看一下官网的文档 <a href="https://docs.docker.com/storage/">https://docs.docker.com/storage/</a></p>
<p>参考文档 《基于docker部署mysql的数据持久化问题》 <a href="https://www.jianshu.com/p/530d00f97cbf">https://www.jianshu.com/p/530d00f97cbf</a></p>
<blockquote>
<p>上面的文章里面，把问题描述的非常详细清楚。我这里就不多做说明了。</p>
</blockquote>
<h3 id="使用-v-实现数据挂载（数据卷）"><a href="#使用-v-实现数据挂载（数据卷）" class="headerlink" title="使用 -v 实现数据挂载（数据卷）"></a>使用 <strong>-v 实现数据挂载（数据卷）</strong></h3><p>如果我们想在 run 一个新的mysql容器的时候，可以正常访问我们之前在mysql容器中创建的数据库、表数据，则在docker run命令启动容器的时候，就需要指定挂载目录。</p>
<p><strong>注意：要想让新的mysql容器能正常挂载名称是“mysql”容器，前提是需要先停止名称是“mysql”的容器</strong>，不然的话，即使run命令配置正确，容器启动的时候会一直报错：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527547243072-cf5029a8-3d60-434f-aeba-f314633d6b0b.png" alt="在Docker中安装Mysql"></p>
<p>上图就是因为没有事先停止mysql容器导致的。</p>
<p><strong>下面开始具体操作：</strong></p>
<ul>
<li>先停止mysql容器</li>
</ul>
<p><img src="http://www.cicoding.cn/images/docker/1527547465870-974cfc00-44b0-4a09-87a9-b6035b4adbf5.png" alt="在Docker中安装Mysql"></p>
<ul>
<li>重新启动一个新的mysql容器，命令如下：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 3308:3306 -e MYSQL_ROOT_PASSWORD=123456 --name mysql-v -v /var/lib/docker/volumes/1b0b17f6a4f78d357a187116d75991db8ee784213e67cc9b9988c8ef647fe563/_data:/var/lib/mysql mysql<br></code></pre></td></tr></table></figure>

<blockquote>
<p>最重要的一个参数 -v ：挂载数据卷。-v 后面的值中间有“：”号，前半部分指的是宿主机的目录（也就是我们上面的mysql容器的数据库存储的目录），后半部分指的是容器的目录。</p>
<p>实现的效果就是说：新启动的容器，挂载宿主机的目录，实现数据共享。</p>
</blockquote>
<p>运行结果：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527547916774-cd6487ee-4afc-42a6-b6bb-f2ce6cf71523.png" alt="在Docker中安装Mysql"></p>
<ul>
<li><strong>登录新的mysql-v容器，查看数据库信息</strong></li>
</ul>
<p>直接看下图的命令操作吧：</p>
<p><img src="http://www.cicoding.cn/images/docker/1527548344772-a86dd217-1ad4-4a19-b443-d51d2d45a80a.png" alt="在Docker中安装Mysql">       看到效果了吧！在这个mysql-v的新容器里面，已经可以看到我们一开始在“mysql”容器中创建的数据库和表了。</p>
<p>也就实现了容器之间的数据共享。</p>
<p>核心的实现就是在run命令里面加入了 -v 参数。如果不太明白-v的含义的，可以自行网上查询资料了解学习，加深印象。</p>
<blockquote>
<p><strong>上面我们解决了容器挂载数据卷的问题，但是细心的朋友，可能还有一个疑问：</strong></p>
</blockquote>
<p>为什么修改了my.cnf配置文件、以及运行mysql镜像时指定的MYSQL_ROOT_PASSWORD&#x3D;123456，却依然可以在新容器mysql-new中使用呢，为什么这俩样数据不会消失呢？</p>
<blockquote>
<p>官方文档对于commit命令还有这样一段描述：</p>
<p>It can be useful to commit a container’s file changes or settings into a new image.</p>
</blockquote>
<p>谷歌翻译过来的意思就是：将容器的文件更改或设置提交到新映像可能很有用。</p>
<p>还记得我们当初运行第一个mysql容器的时候，docker run 命令是怎样的，这里贴一下当时启动容器的命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --name=mysql mysql<br></code></pre></td></tr></table></figure>

<blockquote>
<p>其中，里面使用到了 -e 参数，设置了root用户的密码为123456。</p>
<p>所以，结合官方文档对commit的介绍（It can be useful to commit a container’s file changes or settings into a new image. ），就可以知道，通过 -e 设置的信息，在使用commit提交新镜像的时候，这些设置被容器保留了下来，commit命令使用这些设置构建了新的镜像，在新容器里面使用的是相同的设置。</p>
</blockquote>
<blockquote>
<p>这也印证了，我们在mysql-new容器中登录数据库的时候，登录密码写的是123456。因为在第一次启动mysql服务的时候，用户root密码是通过 -e 指定的，所以在commit提交新的镜像的时候，是被一同提交到了新镜像mysql-new中。</p>
</blockquote>
<h3 id="数据卷容器"><a href="#数据卷容器" class="headerlink" title="数据卷容器"></a>数据卷容器</h3><blockquote>
<p>通过数据卷容器也可以实现多个容器间的数据共享。</p>
</blockquote>
<blockquote>
<p>如果要授权一个容器访问另一个容器的数据卷，我们可以使用-volumes-from参数来执行docker run。</p>
</blockquote>
<p>（这里就不多做说明了，有兴趣的可以网上自行查阅资料研究）</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>LINUX</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora教程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Typora%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本篇介绍一下博猪经常使用的一个工具的教程，也是博猪用于总结开发和记录学习笔记的一个神器，说先说明一点，博猪纯纯的处女座，所以对于某些东西还是有较高的要求的，但是这款工具都满足了博猪的要求，最主要的事情就是开源（免费）和用着爽。废话不多说，下面博猪带给你史上Typora保姆级教程。</p>
<p>Typora 一直是我认为桌面端笔记应用应有的终极形态。用一句话概况话来说就是，「它的<strong>功能之强大、设计之冷静、体验之美妙、理念之先进</strong>，我认为值得所有笔记应用厂商学习。」</p>
<p>参考文章：</p>
<p><a href="https://sspai.com/post/54912/">少数派</a></p>
<p><a href="https://blog.csdn.net/qq_33159059/article/details/87910522">CSDN博客</a></p>
<p><a href="https://blog.csdn.net/tian_ci/article/details/85257667">CSDN博客</a></p>
</blockquote>
<h1 id="Typora简介"><a href="#Typora简介" class="headerlink" title="Typora简介"></a>Typora简介</h1><h2 id="Typora-是什么？"><a href="#Typora-是什么？" class="headerlink" title="Typora 是什么？"></a>Typora 是什么？</h2><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p>
<p>在这篇文章中，我希望以「Typora 是什么」这个问题为线索，向大家全面介绍这款令人爱不释手的笔记应用。</p>
<h2 id="一个-Markdown-文本编辑器"><a href="#一个-Markdown-文本编辑器" class="headerlink" title="一个 Markdown 文本编辑器"></a>一个 Markdown 文本编辑器</h2><p>Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 <a href="https://typora.io/">Typora 官网</a> 上他们将 Typora 描述为 「A truly <strong>minimal</strong> markdown editor. 」。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/49c4cdef47bf81018b9871a628523064.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img"></p>
<h3 id="关于-Markdown"><a href="#关于-Markdown" class="headerlink" title="关于 Markdown"></a>关于 Markdown</h3><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。</p>
<p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href="https://github.github.com/gfm/">GFM 标准</a>，它是由著名代码托管网站 <a href="https://github.com/">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href="http://support.typora.io/Strict-Mode/">这篇文档</a> 中查看。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/a35f8fd5e9d968edfe5a0b02b54d0881.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">严格模式</p>
<h3 id="写得舒服"><a href="#写得舒服" class="headerlink" title="写得舒服"></a>写得舒服</h3><p>一个文本编辑器，<strong>写得舒服</strong>是关键。我曾说过，「更有趣的是，一个笔记应用不会因为它支持 Markdown 语法而高级或易用很多。」，细枝末节处的人性化考虑才是最重要的。而 Typora 的编辑体验显然是经过深思熟虑设计的产物。</p>
<p>我认为：一个优秀的笔记应用应该给用户<strong>选择 Markdown 语法风格的权利</strong>。而 Typora 在这一点上是我目前见过所有 Markdown 笔记应用中做得最好的。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/ea30087c6f93d0fa3c5a313c8cdce357.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">文本编辑设置</p>
<p>通过打开 <code>文件 - 偏好设置</code> 你会发现 Typora 为编辑体验的考虑细致到了令人叹为观止的程度。Typora 中提供了大量有关 Markdown 偏好的设置，据此，你可以构建一个几乎完全适合自己的 Markdown 编辑器。下面我将依次介绍一些与文本编辑体验有关的功能亮点。</p>
<h4 id="智能标点"><a href="#智能标点" class="headerlink" title="智能标点"></a>智能标点</h4><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。具体内容你可以在官方的 <a href="http://support.typora.io/SmartyPants/">这篇文档</a> 中查看。关于直弯引号在 macOS 上如何输入你也可以看 <a href="https://sspai.com/post/38342">这篇文章</a>。</p>
<h4 id="图片插入"><a href="#图片插入" class="headerlink" title="图片插入"></a>图片插入</h4><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p>
<ul>
<li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li>
<li>拖动本地图片到文档中</li>
</ul>
<p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">复制图片</p>
<p>你也完全可以使用图床来保证文档在分享后图片仍能正常显示。</p>
<p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/717da653ad91e938c5f1f40555b9c057.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">图片插入</p>
<p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p>
<h4 id="打字机模式和专注模式"><a href="#打字机模式和专注模式" class="headerlink" title="打字机模式和专注模式"></a>打字机模式和专注模式</h4><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p>
<p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p>
<p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif" alt="img">两种模式</p>
<h4 id="实时预览"><a href="#实时预览" class="headerlink" title="实时预览"></a>实时预览</h4><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。<em>他们把这称为 Hybrid View。</em></p>
<p><img src="https://cdn.sspai.com/2019/05/24/f99c9ce02e2728ec6c64b443947fc67e.gif" alt="img">所见即所得</p>
<p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/bcda9c4e35725b7297a6b90d8745564e.gif" alt="img">源代码模式</p>
<h4 id="大纲-x2F-文件侧边栏"><a href="#大纲-x2F-文件侧边栏" class="headerlink" title="大纲 &#x2F; 文件侧边栏"></a>大纲 &#x2F; 文件侧边栏</h4><p><img src="https://cdn.sspai.com/2019/05/24/f2461efb5ac297facfcd9f72cc5da6be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">侧边栏</p>
<p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p>
<p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，因此我认为文件侧边栏这个功能还是很鸡肋的。</p>
<h4 id="空格与换行"><a href="#空格与换行" class="headerlink" title="空格与换行"></a>空格与换行</h4><p>Typora 在空格与换行部分主要是使用 <a href="http://www.commonmark.cn/w/">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p>
<ul>
<li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li>
<li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li>
<li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li>
<li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li>
<li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix &#x2F; Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</li>
</ul>
<p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href="http://support.typora.io/Line-Break/">这篇文档</a> 中查阅。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/5c2fbaa53b27666a7fd0b07ac3e100bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">空格、换行、换段</p>
<h4 id="emoji-表情"><a href="#emoji-表情" class="headerlink" title="emoji 表情"></a>emoji 表情</h4><p>如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：</p>
<ol>
<li><strong>输入法联想：</strong>优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。</li>
<li><strong>复制 emoji 符号：</strong>优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。</li>
</ol>
<p><img src="https://cdn.sspai.com/2019/05/24/b2601a694aba07b8a68615ca59bcc495.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">输入法联想</p>
<p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/ff26eeb5ff2d6fae16cab163ebfcd096.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">Typora 中输入 emoji</p>
<h2 id="一个学术文档编辑器"><a href="#一个学术文档编辑器" class="headerlink" title="一个学术文档编辑器"></a>一个学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p>
<h3 id="LaTeX"><a href="#LaTeX" class="headerlink" title="LaTeX"></a>LaTeX</h3><blockquote>
<p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p>
</blockquote>
<p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p>
<ol>
<li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li>
<li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li>
</ol>
<p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href="https://blog.csdn.net/happyday_d/article/details/83715440">这篇文章</a> 中查看。</p>
<h3 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p>
<ol>
<li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li>
<li>代码块：输入 &#96;&#96;&#96;&#96;&#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li>
</ol>
<p><img src="https://cdn.sspai.com/2019/05/24/a8c283ba4f1ba09d41331b87e2eef3b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">代码块</p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">| 左对齐 | 右对齐 | 居中对齐 |<br>| :-----| ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure>

<p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p>
<p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/51bf2f290592e1ddbadb95765c04f297.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">Typora 表格</p>
<h3 id="链接引用与脚注"><a href="#链接引用与脚注" class="headerlink" title="链接引用与脚注"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p>
<p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/5f82606e6d89fe1eb24705c4ca6b895d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">链接引用和脚注</p>
<h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p>
<ul>
<li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li>
<li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li>
<li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li>
<li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。</li>
</ul>
<p><img src="https://cdn.sspai.com/2019/05/24/ba295f21f0b71646bb36a0517e868ced.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">导出</p>
<h2 id="一个伪装成文本编辑器的浏览器"><a href="#一个伪装成文本编辑器的浏览器" class="headerlink" title="一个伪装成文本编辑器的浏览器"></a>一个伪装成文本编辑器的浏览器</h2><p>当我的一个朋友问我「Typora 有什么好写的？」时，我回答「Typora 是一个伪装成文本编辑器的浏览器」。是的，事实上如果你有一定的计算机基础，你可以找到许多有关于「Typora 其实是一个浏览器」的蛛丝马迹。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/13837bcdcded9ae406e8c4aac5f2d752.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">图片插入</p>
<p>在图片插入的选项中，Typora 用了「复制图片到 .&#x2F;${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p>
<p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p>
<p>当然，最明显的一点是当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/da8c9b305a222cb5fadb41c12da81a12.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">审查元素</p>
<h3 id="伪装从何而来？"><a href="#伪装从何而来？" class="headerlink" title="伪装从何而来？"></a>伪装从何而来？</h3><p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p>
<p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p>
<p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p>
<p>如果我说，我们每一篇文稿都是一个网页，那就很好理解了。Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p>
<h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p>
<p>你可以把一张网页想象成一幅数字油画，HTML 就是那个黑白线条的底，上面写满了数字标记，示意你哪一块区域要涂什么颜色。而 CSS 则负责在对应的区域涂上颜色，甚至加上一些装饰等。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/7ce3d9ed245eed902e833405b9464103.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">数字油画</p>
<h4 id="HTML-标签"><a href="#HTML-标签" class="headerlink" title="HTML 标签"></a>HTML 标签</h4><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">HTML 标签</p>
<p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href="http://support.typora.io/HTML/">官方文档</a> 中查阅。</p>
<p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p>
<h4 id="导出为-HTML"><a href="#导出为-HTML" class="headerlink" title="导出为 HTML"></a>导出为 HTML</h4><p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p>
<p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 <code>Ctrl +C</code> 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 <code>Ctrl + V</code> 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）</p>
<p><img src="https://cdn.sspai.com/2019/05/24/3d818c18934632b043fcf4ad9be1d046.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">公众号</p>
<p>具体如何用 Typora 完成公众号写作，你可以在 <a href="https://sspai.com/post/40524">这篇文章</a> 中进一步了解。</p>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/7d3cfbc92721733e16ed63d72a48a572.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题</p>
<p><img src="https://cdn.sspai.com/2019/05/24/98a04c4f9129e0f018d15bc790b376c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题文件夹</p>
<p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href="http://theme.typora.io/">官网</a> 下载更多的主题。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/efcf65ba993c4bb0b058d6eb8258df6f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">主题商店</p>
<p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。我自己就写了一份名为 WeChat 的 CSS 文件，来符合我公众号特定的排版需求，例如正文是 15px，页边距是 8，小标题是 18px 等等。</p>
<p><img src="https://cdn.sspai.com/2019/05/24/317ac1df25fcfc817c03f92d6086764e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" alt="img">CSS 文件</p>
<p>使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p>
<h3 id="YAML-front-matter"><a href="#YAML-front-matter" class="headerlink" title="YAML front-matter"></a>YAML front-matter</h3><p>Typora 支持在文档头部加上基于 YAML 的 front-matter 信息，这一特性适用于把 Markdown 文档分类归档上传到用 Hexo 框架搭建的博客中。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>如果你看过 Typora 的 <a href="https://typora.io/dev_release.html">更新日志</a> 你会发现它早在 2015 年 12 月 19 日就发布了 0.7.0 (alpha) 版本，但到目前为止它仍处于 beta 阶段。<em>截止到笔者写作这篇文章的初稿时，Typora 的版本号为 0.9.9.24.6 (beta)。</em></p>
<p>我想，能够潜心三年多打磨、测试一个产品，开发者们一定是倾注了极大的心血到这款笔记应用中。而在使用中，我也能体会到开发者的良苦用心。他们不想做知识的储备中心，不想做快速的草稿、笔记应用，也不想做任何和生产力无关的功能和特性。对于 Typora 的设计和构想，只有唯一的宗旨——<strong>「生产效率」</strong>。</p>
<p>因为移动端生产效率低，所以只有桌面端应用。因为左顾右盼的两栏式预览影响思路，所以他们甚至去掉了 Markdown 语法标记，只留下最终呈现的样式。因为 Markdown 是为了 HTML 呈现而设计的，所以他们提供了从入门到高级的一系列 Web 辅助功能…… 这一切都只是为了纯粹的<strong>生产效率</strong>。如果我们回头想想，Markdown 语言本身，当初不也是为了高效地生成简单网页而诞生的吗？</p>
<p>最后，让我们一起期待这款<strong>顶级桌面文本生产力工具</strong>的正式版的到来吧！😆</p>
<h1 id="快捷键操作"><a href="#快捷键操作" class="headerlink" title="快捷键操作"></a>快捷键操作</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>作用</th>
<th>快捷键</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + 1</td>
<td>一级 标题</td>
<td>Ctrl + B</td>
<td>字体加粗</td>
</tr>
<tr>
<td>Ctrl + 2</td>
<td>二级标题</td>
<td>Ctrl + I</td>
<td>字体倾斜</td>
</tr>
<tr>
<td>Ctrl + 3</td>
<td>三级标题</td>
<td>Ctrl + U</td>
<td>下划线</td>
</tr>
<tr>
<td>Ctrl + 4</td>
<td>四级标题</td>
<td>Ctrl + Home</td>
<td>返回顶部</td>
</tr>
<tr>
<td>Ctrl + 5</td>
<td>五级标题</td>
<td>Ctrl + End</td>
<td>返回底部</td>
</tr>
<tr>
<td>Ctrl + 6</td>
<td>六级标题</td>
<td>Ctrl + T</td>
<td>创建表格</td>
</tr>
<tr>
<td>Ctrl + L</td>
<td>选中一行</td>
<td>Ctrl + K</td>
<td>创造超链接</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>选择一个单词</td>
<td>Ctrl + F</td>
<td>搜索</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>选中相同格式的文字</td>
<td>Ctrl + H</td>
<td>搜索并替换</td>
</tr>
<tr>
<td>Alt + Shift + 5</td>
<td>删除线</td>
<td>Ctrl + Shift + I</td>
<td>插入图片</td>
</tr>
</tbody></table>
<h1 id="高级进阶"><a href="#高级进阶" class="headerlink" title="高级进阶"></a>高级进阶</h1><h2 id="优化标题排版（带序号）"><a href="#优化标题排版（带序号）" class="headerlink" title="优化标题排版（带序号）"></a>优化标题排版（带序号）</h2><blockquote>
<p><code>俗话说：“授之以鱼，不如授之以渔”。</code>在讲如何添加自动编号功能之前，我要先讲一下如何修改的，不能不明所以。</p>
</blockquote>
<p>Typora的底层是一个浏览器，或者说是一个Electron应用。不信，你可以按下快捷键<code>Shift + F12</code>，或者点击<code>视图</code>中的<code>打开开发者工具</code>按钮：<br><img src="https://img-blog.csdnimg.cn/20190225023640443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>就可以看到熟悉的浏览器控制台调试界面了：</p>
<p><img src="https://img-blog.csdnimg.cn/20190225023703930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>既然知道Typora的实现基于浏览器，那么就好办了。各个界面肯定都是HTML语言渲染出来的，那么，我们就可以通过添加CSS样式表，来添加自动编号的功能。好在Typora官方提前想到了这个事，专门出了篇官方文章来告诉我们怎么去添加自定义的样式文件。</p>
<p>知道了怎么添加自定义样式文件，还得知道怎么去定制样式表。语言吗，肯定是CSS。剩下的就差定位编辑区、导航窗格区和目录树区对应的元素了。最简洁的方法，就是使用元素选择键去定位，下图中的红色按钮就是：</p>
<p>三个区域的元素定位如下：</p>
<blockquote>
<ol>
<li>正文标题： #write</li>
<li>[TOC]目录树区: .md-toc-content</li>
<li>侧边栏的目录大纲区: .sidebar-content<br>到此，前菜都已准备好。</li>
</ol>
</blockquote>
<p>自动编号功能<br><strong>那么，开始准备主菜。</strong></p>
<p>编写css样式文件，命名为：<code>base.user.css</code>。要完成自动编号功能，必须借助CSS3中的如下特性：</p>
<blockquote>
<p>计数器：counter(基准计数器)，用于计算基准计数器的值<br>计数器增量：counter-increment，设置每次增长的量<br>重置计数器：counter-reset，用于将当前标题的计数器重置到指定的基准计数器<br>子代类型选择器：nth-of-type，可以从子代中选择出同一类型元素中的指定元素</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.sidebar-content</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h1<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h1</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h2<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h2</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h3<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h3</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h4<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h4</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h5<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h5</span> &#123;<br>    <span class="hljs-attribute">counter-reset</span>: h6<br>&#125;<br> <br><span class="hljs-selector-class">.outline-h1</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h1;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h2</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h2;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h3</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h3;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h4</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h4;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h5</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h5;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br> <br><span class="hljs-selector-class">.outline-h6</span>&gt;<span class="hljs-selector-class">.outline-item</span>&gt;<span class="hljs-selector-class">.outline-label</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>    <span class="hljs-attribute">counter-increment</span>: h6;<br>    <span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h6) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><br><br><span class="hljs-comment">/** initialize css counter */</span><br><span class="hljs-selector-id">#write</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h1<br>&#125;<br><span class="hljs-selector-tag">h1</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h2<br>&#125;<br><span class="hljs-selector-tag">h2</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h3<br>&#125;<br><span class="hljs-selector-tag">h3</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h4<br>&#125;<br><span class="hljs-selector-tag">h4</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h5<br>&#125;<br><span class="hljs-selector-tag">h5</span> &#123;<br><span class="hljs-attribute">counter-reset</span>: h6<br>&#125;<br><span class="hljs-comment">/** put counter result into headings */</span><br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h1</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h1;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot; &quot;</span><br>&#125;<span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h2</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h2;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h3</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-class">.md-heading</span><span class="hljs-selector-pseudo">:before</span> <span class="hljs-comment">/** override the default style for focused headings */</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h3;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h4</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h4</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-class">.md-heading</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h4;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h5</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h5</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-class">.md-heading</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h5;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><span class="hljs-selector-id">#write</span> <span class="hljs-selector-tag">h6</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h6</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-class">.md-heading</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">counter-increment</span>: h6;<br><span class="hljs-attribute">content</span>: <span class="hljs-built_in">counter</span>(h1) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h2) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h3) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h4) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h5) <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-built_in">counter</span>(h6) <span class="hljs-string">&quot; &quot;</span><br>&#125;<br><span class="hljs-comment">/** override the default style for focused headings */</span><br><span class="hljs-selector-id">#write</span>&gt;<span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-id">#write</span>&gt;<span class="hljs-selector-tag">h4</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-id">#write</span>&gt;<span class="hljs-selector-tag">h5</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-id">#write</span>&gt;<span class="hljs-selector-tag">h6</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h3</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h4</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h5</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span>,<br><span class="hljs-selector-tag">h6</span><span class="hljs-selector-class">.md-focus</span><span class="hljs-selector-pseudo">:before</span> &#123;<br><span class="hljs-attribute">color</span>: inherit;<br><span class="hljs-attribute">border</span>: inherit;<br><span class="hljs-attribute">border-radius</span>: inherit;<br><span class="hljs-attribute">position</span>: inherit;<br><span class="hljs-attribute">left</span>:initial;<br><span class="hljs-attribute">float</span>: none;<br><span class="hljs-attribute">top</span>:initial;<br><span class="hljs-attribute">font-size</span>: inherit;<br><span class="hljs-attribute">padding-left</span>: inherit;<br><span class="hljs-attribute">padding-right</span>: inherit;<br><span class="hljs-attribute">vertical-align</span>: inherit;<br><span class="hljs-attribute">font-weight</span>: inherit;<br><span class="hljs-attribute">line-height</span>: inherit;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Typora侧边栏的大纲视图折叠-win系统"><a href="#Typora侧边栏的大纲视图折叠-win系统" class="headerlink" title="Typora侧边栏的大纲视图折叠( win系统 )"></a>Typora侧边栏的大纲视图折叠( win系统 )</h2><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://img-blog.csdnimg.cn/20181226094905721.gif" alt="在这里插入图片描述"></p>
<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p><code>文件 ⇒ 偏好设置 ⇒ 勾选&quot;侧边栏&quot;</code><br><img src="https://img-blog.csdnimg.cn/20181226093929134.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181226093934973.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20181226101055865.gif" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>Typora</tag>
      </tags>
  </entry>
  <entry>
    <title>PostMan教程</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>推荐一款接口测试工具！POSTMAN！ 简单来说，四个词，简单实用大方美观！</p>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>用户在开发或者调试网络程序或者是网页B&#x2F;S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！<strong>Postman</strong>在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p>
<h1 id="操作环境"><a href="#操作环境" class="headerlink" title="操作环境"></a>操作环境</h1><p>postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><blockquote>
<p>postman在2018年之后就不再支持浏览器版本，所以，想要使用它就必须先下载客户端再安装使用，下面就以Windows系统为例进行安装 。</p>
</blockquote>
<h2 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h2><p>postman安装步骤：</p>
<ul>
<li>访问postman官方网站，下载最新版本，访问地址：<a href="https://links.jianshu.com/go?to=https://www.getpostman.com/downloads/">Postman | Download Postman App</a></li>
<li>postman分两个版本：稳定版和尝鲜版（Postman Canary）</li>
<li>进入到下载页面，根据自己电脑下载对应的版本</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180614.png" alt="img"></p>
<ul>
<li>双击下载的安装包，进入到安装界面，直到用户登录和注册界面。</li>
<li><ul>
<li>若个人使用，选择跳过即可，这时会进入到postman主界面，至此postman安装成功。</li>
</ul>
</li>
<li><ul>
<li>若团队使用，可以进行注册，注册后使用账号可以加入团队工作区</li>
</ul>
</li>
</ul>
<blockquote>
<p>成功进入postman页面后，接下来我们正式进行postman的系统教程吧</p>
</blockquote>
<h2 id="设置postman主题"><a href="#设置postman主题" class="headerlink" title="设置postman主题"></a>设置postman主题</h2><p>右上角的设置里可以设置postman的主题</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180553.png" alt="img"></p>
<p>这里，出于个人习惯，我把它设置成了黑色</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180542.png" alt="img"></p>
<hr>
<h2 id="postman基础功能介绍"><a href="#postman基础功能介绍" class="headerlink" title="postman基础功能介绍"></a>postman基础功能介绍</h2><p>首先，看一下它的基础功能：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180528.png" alt="img"></p>
<p>collection在postman里面相当于一个文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。</p>
<h2 id="发送第一个请求"><a href="#发送第一个请求" class="headerlink" title="发送第一个请求"></a>发送第一个请求</h2><p>这里我们做一个普通接口的简单的示例：</p>
<p>如果你是第一次使用postman发送请求，下面这个例子可以作为一个最基本的入门，可以帮我们建立一个初始印象 。</p>
<ol>
<li>打开postman，点击+加号打开一个新的请求页。</li>
<li>在请求的URL中输入请求地址：<a href="http://www.weather.com.cn/data/sk/101010100.html">http://www.weather.com.cn/data/sk/101010100.html</a></li>
<li>点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据。</li>
</ol>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104113814.png" alt="image-20210104113810137"></p>
<p>这样就完成了一次简单的天气查询接口的请求</p>
<h1 id="postman基础功能"><a href="#postman基础功能" class="headerlink" title="postman基础功能"></a>postman基础功能</h1><h2 id="常见类型的接口请求"><a href="#常见类型的接口请求" class="headerlink" title="常见类型的接口请求"></a>常见类型的接口请求</h2><p>常见的接口有如下四种类型，分别是含有查询参数的接口，表单类型的接口，json类型的接口以及含有上传文件的接口，以下就对这四种类型接口及如何在postman中请求进行说明 。</p>
<h3 id="查询参数的接口请求"><a href="#查询参数的接口请求" class="headerlink" title="查询参数的接口请求"></a>查询参数的接口请求</h3><h4 id="什么是查询参数"><a href="#什么是查询参数" class="headerlink" title="什么是查询参数?"></a>什么是查询参数?</h4><p>所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数，比如：<a href="http://cx.shouji.360.cn/phonearea.php?number=13012345678">http://cx.shouji.360.cn/phonearea.php?number=13012345678</a> 。在这个接口中，查询参数就是:<strong>number&#x3D;13012345678</strong> 。而这一部分是由有键值对组成，格式为：key1&#x3D;value1&amp;key2&#x3D;value2, 如果有多组键值对，要用&amp;隔开 。</p>
<h4 id="postman如何请求"><a href="#postman如何请求" class="headerlink" title="postman如何请求"></a>postman如何请求</h4><p>在postman中实现对这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。</p>
<p>针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。</p>
<p>具体实现步骤：</p>
<ul>
<li>打开postman，新建一个请求。</li>
<li>在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略</li>
<li>接口URL中输入地址，点击Send按钮就可以发送请求了 。</li>
</ul>
<blockquote>
<p>说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。</p>
</blockquote>
<h3 id="表单类型的接口请求"><a href="#表单类型的接口请求" class="headerlink" title="表单类型的接口请求"></a>表单类型的接口请求</h3><h4 id="什么是表单-？"><a href="#什么是表单-？" class="headerlink" title="什么是表单 ？"></a>什么是表单 ？</h4><p>我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。</p>
<p>不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，那么什么是表单类型呢 ？ 简单理解就是在请求头中查看<strong>Content-Type，它的值如果是:application&#x2F;x-www-form-urlencoded</strong> .那么就说明客户端提交的数据是以表单形式提交的 。</p>
<h4 id="postman中如何请求？"><a href="#postman中如何请求？" class="headerlink" title="postman中如何请求？"></a>postman中如何请求？</h4><p>如果在postman请求上图的接口，我们只需要填写四个参数，分别是(可以参考上图)：</p>
<ul>
<li>请求方法：POST</li>
<li>请求URL：<a href="http://localhost/index.php?m=Home&c=User&a=do_login&t=0.21942974229794432">http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432</a></li>
<li>请求头：Content-Type：application&#x2F;x-www-form-urlencode</li>
<li>请求体： username&#x3D;13088888888&amp;password&#x3D;123456&amp;verify_code&#x3D;8888</li>
</ul>
<p>实现步骤：</p>
<ol>
<li>打开postman，新建一个请求 。</li>
<li>在请求中设置以上四个参数，点击Send按钮。在postman中设置请求体类型为，需要<strong>选择body-&gt; x-www-form-urlencoded</strong></li>
<li>查看响应数据。</li>
</ol>
<h3 id="上传文件的表单请求"><a href="#上传文件的表单请求" class="headerlink" title="上传文件的表单请求"></a>上传文件的表单请求</h3><p>在做接口测试时，我们经常会遇到需要上传文件的接口，比如微信的更新头像。这就需要用到：multipart&#x2F;form-data。它也属于一种表单，但它既支持表单请求，也支持文件上传。 它的请求报文中数据往往是下面这样的。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>multipart/form-data<br><br><span class="language-abnf"><span class="hljs-attribute">file</span><span class="hljs-operator">=</span>a1.jpg</span><br></code></pre></td></tr></table></figure>

<p>这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。</p>
<ul>
<li>请求方法：POST</li>
<li>请求URL：<a href="http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</a></li>
<li>请求类型：multipart&#x2F;form-data</li>
<li>请求体：file&#x3D;a1.jpg</li>
</ul>
<p>实现步骤：</p>
<ol>
<li>打开postman，新建一个请求 。</li>
<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; form-data</strong> 。file中要选择File类型，然后上传本地的文件 。</li>
<li>查看响应数据。</li>
</ol>
<h3 id="json类型的接口请求"><a href="#json类型的接口请求" class="headerlink" title="json类型的接口请求"></a>json类型的接口请求</h3><p>这应该是接口测试中最常见的一种情况了 ， 也就是请求体类型为json,我们来看下这个请求报文 。</p>
<figure class="highlight http"><table><tr><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">http://xxx/api/sys/login</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json;charset=UTF-8<br><br><span class="language-json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;account&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;root&quot;</span><span class="hljs-punctuation">,</span><span class="hljs-attr">&quot;password&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-string">&quot;123456&quot;</span><span class="hljs-punctuation">&#125;</span></span><br></code></pre></td></tr></table></figure>

<p>根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：</p>
<ul>
<li>请求方法：POST</li>
<li>请求地址：<a href="http://xxx/api/sys/login">http://xxx/api/sys/login</a></li>
<li>请求体类型：json</li>
<li>请求体数据：{“account”:”root”,”password”:”123456”}</li>
</ul>
<p>实现步骤：</p>
<ol>
<li>打开postman，新建一个请求 。</li>
<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; raw -JSON</strong></li>
<li>查看响应数据。</li>
</ol>
<h2 id="接口响应数据解析"><a href="#接口响应数据解析" class="headerlink" title="接口响应数据解析"></a>接口响应数据解析</h2><p>响应数据是发送请求后经过服务器处理后返回的结果，响应由三部分组成，分别是状态行、响应头、响应体。我们来看下postman的响应数据展示。</p>
<p>在postman中的响应数据展示：</p>
<ul>
<li>状态行：Status：200 OK</li>
<li>响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示</li>
<li>响应体：Body</li>
</ul>
<p>那么这些数据对我们做接口测试有什么作用呢 ？</p>
<ul>
<li>Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码</li>
<li>Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。</li>
<li>Time 和Size 是我们做性能测试时，可以根据这两个参数来对所测接口的性能做一个简单的判断。</li>
</ul>
<p>接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .</p>
<ul>
<li>Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。</li>
<li>Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。</li>
<li>Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。</li>
</ul>
<h2 id="接口管理（Collection）"><a href="#接口管理（Collection）" class="headerlink" title="接口管理（Collection）"></a>接口管理（Collection）</h2><p>当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时还希望对这批用例做回归测试 。在postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。</p>
<p>先对Collection功能的使用场景做个简单总结 。</p>
<ul>
<li>用例分类管理，方便后期维护</li>
<li>可以进行批量用例回归测试 。</li>
</ul>
<p>那么Collection是如何去管理用例的呢 ？ 先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：</p>
<ul>
<li>点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）</li>
<li>选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）</li>
<li>选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><blockquote>
<p>通过上面的操作，我们实现了一个最简单的demo模型。但实际上，有了这个功能才是postman学习的开始，因为很多功能都是基础这个功能的基础上进行的，比如用例的批量执行，Mock ，接口文档等功能 。</p>
</blockquote>
<h1 id="postman高级功能"><a href="#postman高级功能" class="headerlink" title="postman高级功能"></a>postman高级功能</h1><h2 id="批量执行接口请求"><a href="#批量执行接口请求" class="headerlink" title="批量执行接口请求"></a>批量执行接口请求</h2><p>当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？</p>
<p>实现步骤：</p>
<ul>
<li>选中一个Collection，点击右三角，在弹出的界面点击RUN</li>
<li>这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选中 。</li>
<li>点击界面下方的RUN Collection，就会对Collection中选中的所有测试用例运行 。</li>
</ul>
<p>对上面的几个红框内的功能进行简单说明：</p>
<ul>
<li><strong>断言统计</strong>：左上角的两个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。</li>
<li>Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。Export Result：导出运行结果，默认导出的结果json文件 。</li>
<li>Retry: 重新运行，点击它会把该Collection重新运行一遍</li>
<li>New：返回到Runner，可以重新选择用例的组合 。</li>
</ul>
<p>总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。</p>
<h2 id="日志调试"><a href="#日志调试" class="headerlink" title="日志调试"></a>日志调试</h2><p>在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。</p>
<p>在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“我是一条日志”)</p>
<p>那么打印的日如何看呢 ？ 在postman中有俩个入口，第一个入口就是：view-show postman console 。第二个入口就是左下角Console 。</p>
<p>这里面有几个比较实用的功能：</p>
<ul>
<li>搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。</li>
<li>按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。</li>
<li>查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。</li>
<li>隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。</li>
</ul>
<p>总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。</p>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><h3 id="断言介绍"><a href="#断言介绍" class="headerlink" title="断言介绍"></a>断言介绍</h3><p>如果没有断言，我们只能做接口的功能测试，但有了断言后，就为我们做自动化提供了条件，并且在postman中的断言是非常方便和强大的 。</p>
<p>我们先来了解下postman断言的一些特点 ，具体如下</p>
<ul>
<li>断言编写位置：Tests标签</li>
<li>断言所用语言：JavaScript</li>
<li>断言执行顺序：在响应体数据返回后执行 。</li>
<li>断言执行结果查看：Test Results</li>
</ul>
<p>在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104120057.png" alt="image-20210104120050195"></p>
<blockquote>
<p>内置的断言功能，使用时点击对应的断言就可以自动生成到Tests文本框里面。</p>
</blockquote>
<p>接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。</p>
<p>状态行中又包括状态码，状态消息 。在postman也可以对这两个进行断言</p>
<h3 id="状态行中的断言"><a href="#状态行中的断言" class="headerlink" title="状态行中的断言"></a>状态行中的断言</h3><ul>
<li>断言状态码：<strong>Status code: code is 200</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);        <span class="hljs-comment">//这里填写的200是预期结果，实际结果是请求返回结果</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<ul>
<li>断言状态消息：<strong>Status code：code name has string</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Status code name has string&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-string">&quot;OK&quot;</span>);   <span class="hljs-comment">//断言响应状态消息包含OK</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="响应头中的断言"><a href="#响应头中的断言" class="headerlink" title="响应头中的断言"></a>响应头中的断言</h3><ul>
<li>断言响应头中包含：Response headers:Content-Type header check</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Content-Type is present&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">header</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>); <span class="hljs-comment">//断言响应头存在&quot;Content-Type&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<h3 id="断言响应体-重点"><a href="#断言响应体-重点" class="headerlink" title="断言响应体(重点)"></a>断言响应体(重点)</h3><ul>
<li>断言响应体中包含XXX字符串：Response body:Contains string</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Body matches string&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-title function_">expect</span>(pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">text</span>()).<span class="hljs-property">to</span>.<span class="hljs-title function_">include</span>(<span class="hljs-string">&quot;string_you_want_to_search&quot;</span>);<br>&#125;);     <br><span class="hljs-comment">//注解</span><br>pm.<span class="hljs-title function_">expect</span>(pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">text</span>()).<span class="hljs-property">to</span>.<span class="hljs-title function_">include</span>(<span class="hljs-string">&quot;string&quot;</span>)      <span class="hljs-comment">//获取响应文本中包含string</span><br></code></pre></td></tr></table></figure>

<ul>
<li>断言响应体等于XXX字符串：Response body : is equal to a string</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Body is correct&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">body</span>(<span class="hljs-string">&quot;response_body_string&quot;</span>);<br>&#125;);<br><span class="hljs-comment">//注解</span><br>pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">body</span>(<span class="hljs-string">&quot;response_body_string&quot;</span>);   <span class="hljs-comment">//获取响应体等于response_body_string</span><br></code></pre></td></tr></table></figure>

<ul>
<li>断言响应体(json)中某个键名对应的值：Response body : JSON value check</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Your test name&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>();<br>    pm.<span class="hljs-title function_">expect</span>(jsonData.<span class="hljs-property">value</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">eql</span>(<span class="hljs-number">100</span>);<br>&#125;);<br><span class="hljs-comment">//注解</span><br><span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>()   <span class="hljs-comment">//获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错</span><br>pm.<span class="hljs-title function_">expect</span>(jsonData.<span class="hljs-property">value</span>).<span class="hljs-property">to</span>.<span class="hljs-title function_">eql</span>(<span class="hljs-number">100</span>)  <span class="hljs-comment">//获取jsonData中键名为value的值，然后和100进行比较</span><br></code></pre></td></tr></table></figure>

<h3 id="响应时间-一般用于性能测试"><a href="#响应时间-一般用于性能测试" class="headerlink" title="响应时间(一般用于性能测试)"></a>响应时间(一般用于性能测试)</h3><ul>
<li>断言响应时间：Response time is less than 200ms</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Response time is less than 200ms&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-title function_">expect</span>(pm.<span class="hljs-property">response</span>.<span class="hljs-property">responseTime</span>).<span class="hljs-property">to</span>.<span class="hljs-property">be</span>.<span class="hljs-title function_">below</span>(<span class="hljs-number">200</span>);   <span class="hljs-comment">//断言响应时间&lt;200ms</span><br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>案例说明</strong>：</p>
<p>针对以下接口返回的数据进行断言：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;weatherinfo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>        <span class="hljs-attr">&quot;city&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;cityid&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;101010100&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;temp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;27.9&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;WD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;南风&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;WS&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;小于3级&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;SD&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;28%&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;AP&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1002hPa&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;njd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;暂无实况&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;WSE&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&lt;3&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;time&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;17:55&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;sm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;isRadar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;1&quot;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-attr">&quot;Radar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;JC_RADAR_AZ9010_JB&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>

<ul>
<li><p>断言响应状态码是否为200</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;断言响应状态码为200&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li>
<li><p>断言city是否等于北京</p>
</li>
<li><pre><code class="javascript">pm.test(&quot;断言city等于北京&quot;, function () &#123;
    var jsonData = pm.response.json();
    pm.expect(jsonData.weatherinfo.city).to.eql(&#39;北京&#39;);
&#125;);
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">- 断言返回字符串中是否包含南风<br><br>  ```javascript<br>  pm.test(&quot;断言返回字符串中是否包含南风&quot;, <span class="hljs-keyword">function</span> () &#123;<br>      pm.expect(pm.response.text()).<span class="hljs-keyword">to</span>.<span class="hljs-keyword">include</span>(&quot;南风&quot;);<br>  &#125;);<br></code></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104172943.png" alt="image-20210104172941982"></p>
<h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。</p>
<h1 id="变量（全局-x2F-集合-x2F-环境）"><a href="#变量（全局-x2F-集合-x2F-环境）" class="headerlink" title="变量（全局&#x2F;集合&#x2F;环境）"></a>变量（全局&#x2F;集合&#x2F;环境）</h1><p>变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。</p>
<p>对我们做接口测试来说，又是一个非常重要的功能 。</p>
<p>在postman常用的三种变量分别是全局变量，环境变量，集合变量 。</p>
<ul>
<li><strong>全局变量</strong>：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。</li>
<li><strong>环境变量</strong>：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。</li>
<li><strong>集合变量</strong>：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。</li>
</ul>
<p>其中，他们的作用域范围依次从大到小：全局变量&gt;集合变量&gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。</p>
<p>想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。</p>
<ul>
<li>定义变量（设置变量）</li>
<li>获取变量（访问变量）</li>
</ul>
<h2 id="定义变量"><a href="#定义变量" class="headerlink" title="定义变量"></a>定义变量</h2><p>定义全局变量和环境变量，点击右上角的小齿轮，就可以根据需求定义全局变量或者环境变量了。</p>
<h2 id="查看变量"><a href="#查看变量" class="headerlink" title="查看变量"></a>查看变量</h2><p>定义全局变量和环境变量，点击右上角的眼睛，已经定义的全局变量和环境变量，可以进行快速查看。</p>
<h2 id="定义集合变量"><a href="#定义集合变量" class="headerlink" title="定义集合变量"></a>定义集合变量</h2><p>选择一个集合，打开查看更多动作(<code>...</code>)菜单，然后点击<code>Edit</code> 。选择“变量”选项卡以编辑或添加到集合变量。</p>
<p>定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。</p>
<h3 id="在URL，Params-Authorization-Headers-Body中定义"><a href="#在URL，Params-Authorization-Headers-Body中定义" class="headerlink" title="在URL，Params , Authorization , Headers , Body中定义"></a>在URL，Params , Authorization , Headers , Body中定义</h3><ul>
<li>手工方式创建一个空的变量名</li>
<li>在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中</li>
</ul>
<h3 id="在Tests，Pre-requests-Script"><a href="#在Tests，Pre-requests-Script" class="headerlink" title="在Tests，Pre-requests Script"></a>在Tests，Pre-requests Script</h3><ul>
<li>定义全局变量：pm.collectionVariables.set(“变量名”,变量值)</li>
<li>定义环境变量：pm.environment.set(“变量名”，变量值)</li>
<li>定义集合变量：pm.variables.set(“变量名”,变量值)</li>
</ul>
<h2 id="获取变量"><a href="#获取变量" class="headerlink" title="获取变量"></a>获取变量</h2><p>定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。</p>
<p>如果在<strong>请求参数中</strong>获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则： 。</p>
<ul>
<li>请求参数指的是：URL，Params , Authorization , Headers , Body</li>
</ul>
<p>如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：</p>
<ul>
<li>获取环境变量：pm.environment.get(‘变量名’)</li>
<li>获取全局变量：pm.globals.get(‘变量名’)</li>
<li>获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)</li>
</ul>
<ol>
<li><blockquote>
<p>变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。</p>
</blockquote>
</li>
</ol>
<h2 id="请求前置脚本"><a href="#请求前置脚本" class="headerlink" title="请求前置脚本"></a>请求前置脚本</h2><p>前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。</p>
<p>可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？</p>
<p>主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。总体来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。</p>
<h2 id="接口关联"><a href="#接口关联" class="headerlink" title="接口关联"></a>接口关联</h2><p>在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？</p>
<p>实现思路：</p>
<ol>
<li>提取上一个接口的返回数据值，</li>
<li>将这个数据值保存到环境变量或全局变量中</li>
<li>在下一个接口获取环境变量或全局变量</li>
</ol>
<p>案例：</p>
<blockquote>
<p>登录获取Token</p>
</blockquote>
<p>实现思路：</p>
<ul>
<li>请求接口</li>
<li>解析返回值需要的字段</li>
<li>将需要的字段赋值保存到全局变量里面</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104175249.png" alt="image-20210104175246872"></p>
<p>代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">pm.<span class="hljs-title function_">test</span>(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    pm.<span class="hljs-property">response</span>.<span class="hljs-property">to</span>.<span class="hljs-property">have</span>.<span class="hljs-title function_">status</span>(<span class="hljs-number">200</span>);<br>&#125;);<br> <br><span class="hljs-comment">// 把responseBody转为json字符串</span><br><span class="hljs-keyword">var</span> data = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(responseBody);<br><span class="hljs-comment">// 设置环境变量token，供后面的接口引用</span><br>pm.<span class="hljs-property">environment</span>.<span class="hljs-title function_">set</span>(<span class="hljs-string">&quot;access_token&quot;</span>, <span class="hljs-string">&#x27;AfisAuth &#x27;</span>+data.<span class="hljs-property">token</span>);<br></code></pre></td></tr></table></figure>

<h1 id="常见返回值获取"><a href="#常见返回值获取" class="headerlink" title="常见返回值获取"></a>常见返回值获取</h1><p>在做接口测试时，请求接口返回的数据都是很复杂的json数据，有着多层嵌套，这样的数据层级在postman怎么获取呢 ？</p>
<h2 id="多层json嵌套-获取user-id的值"><a href="#多层json嵌套-获取user-id的值" class="headerlink" title="多层json嵌套, 获取user_id的值"></a>多层json嵌套, 获取user_id的值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;请求成功！&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-string">&quot;1252163151781167104&quot;</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//获取json体数据</span><br><span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>()<br><span class="hljs-comment">// 获取user_id的值,通过.获取</span><br><span class="hljs-keyword">var</span> user_id = jsonData.<span class="hljs-property">data</span>.<span class="hljs-property">user_id</span><br></code></pre></td></tr></table></figure>

<h2 id="json中存在列表，获取points中的第二个元素"><a href="#json中存在列表，获取points中的第二个元素" class="headerlink" title="json中存在列表，获取points中的第二个元素"></a>json中存在列表，获取points中的第二个元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;请求成功！&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;roles&quot;</span>: &#123;<br>            <span class="hljs-string">&quot;api&quot;</span>: [<br>                <span class="hljs-string">&quot;API-USER-DELETE&quot;</span><br>            ],<br>            <span class="hljs-string">&quot;points&quot;</span>: [<br>                <span class="hljs-string">&quot;point-user-delete&quot;</span>,<br>                <span class="hljs-string">&quot;POINT-USER-UPDATE&quot;</span>,<br>                <span class="hljs-string">&quot;POINT-USER-ADD&quot;</span><br>            ]<br>        &#125;,<br>        <span class="hljs-string">&quot;authCache&quot;</span>: <span class="hljs-literal">null</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//获取json体数据</span><br><span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>()<br><span class="hljs-comment">// 获取user_id的值,通过下标获取列表中某个元素</span><br><span class="hljs-keyword">var</span> user_id = jsonData.<span class="hljs-property">data</span>.<span class="hljs-property">roles</span>.<span class="hljs-property">points</span>[<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure>

<h2 id="列表中取最后一个元素"><a href="#列表中取最后一个元素" class="headerlink" title="列表中取最后一个元素"></a>列表中取最后一个元素</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;code&quot;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-string">&quot;message&quot;</span>: <span class="hljs-string">&quot;请求成功！&quot;</span>,<br>    <span class="hljs-string">&quot;data&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;total&quot;</span>: <span class="hljs-number">24</span>,<br>        <span class="hljs-string">&quot;rows&quot;</span>: [<br>           <br>            &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1066370498633486336&quot;</span>,<br>                <span class="hljs-string">&quot;mobile&quot;</span>: <span class="hljs-string">&quot;15812340003&quot;</span>,<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;zbz&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1071632760222810112&quot;</span>,<br>                <span class="hljs-string">&quot;mobile&quot;</span>: <span class="hljs-string">&quot;16612094236&quot;</span>,<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;llx&quot;</span><br>            &#125;,<br>            ...<br>            &#123;<br>                <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;1075383133106425856&quot;</span>,<br>                <span class="hljs-string">&quot;mobile&quot;</span>: <span class="hljs-string">&quot;13523679872&quot;</span>,<br>                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;test001&quot;</span>,<br>       <br>            &#125;,<br><span class="hljs-comment">//获取json体数据</span><br><span class="hljs-keyword">var</span> jsonData = pm.<span class="hljs-property">response</span>.<span class="hljs-title function_">json</span>()<br><span class="hljs-comment">// 获取id的值,通过slice(-1)获取列表中最后一个元素。</span><br><span class="hljs-keyword">var</span> id = jsonData.<span class="hljs-property">data</span>.<span class="hljs-property">rows</span>.<span class="hljs-title function_">slice</span>(-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>PostMan</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA8特性整理</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<h1 id="新特性简介"><a href="#新特性简介" class="headerlink" title="新特性简介"></a>新特性简介</h1><p><strong>速度更快</strong></p>
<p><strong>代码更少,更简洁(增加了新的语法支持:lambda表达式)</strong></p>
<p><strong>强大的Stream API</strong></p>
<p><strong>便于并行</strong></p>
<p><strong>最大化减少空指针异常(增加Optional类)</strong></p>
<p>&#x3D;&#x3D;其中最为核心的为 Lambda 表达式与Stream API&#x3D;&#x3D;</p>
<h1 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h1><h2 id="为啥使用lambda表达式"><a href="#为啥使用lambda表达式" class="headerlink" title="为啥使用lambda表达式?"></a>为啥使用lambda表达式?</h2><p>Lambda 是一个 匿名函数，我们可以把 Lambda表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>
<h2 id="重要体现——匿名内部类"><a href="#重要体现——匿名内部类" class="headerlink" title="重要体现——匿名内部类"></a>重要体现——匿名内部类</h2><h3 id="从匿名内部类到lambda的转换"><a href="#从匿名内部类到lambda的转换" class="headerlink" title="从匿名内部类到lambda的转换"></a>从匿名内部类到lambda的转换</h3><p><strong>匿名内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>       System.out.println(<span class="hljs-string">&quot;haha&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>

<p><strong>用lambda表达式表示匿名内部类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Runnable</span> <span class="hljs-variable">runnable1</span> <span class="hljs-operator">=</span> ()-&gt;&#123;<br>    System.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>

<p><strong>匿名内部类参数传递</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">TreeSet&lt;String&gt; treeSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;String&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(String o1, String o2)</span> &#123;<br>        <span class="hljs-keyword">return</span> Integer.compare(o1.length(),o2.length());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>

<p><strong>lambda表达式表示匿名内部类参数传递</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">TreeSet&lt;String&gt; treeSet1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>&lt;&gt;(<br>        (o1,o2)-&gt;&#123;<br>            <span class="hljs-keyword">return</span>  Integer.compare(o1.length(), o2.length());<br>        &#125;<br>);<br></code></pre></td></tr></table></figure>

<h2 id="lambda表达式语法"><a href="#lambda表达式语法" class="headerlink" title="lambda表达式语法"></a>lambda表达式语法</h2><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 “- -&gt; &gt;” ， 该操作符被称为Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：</p>
<p>​		<strong>左侧</strong>：指定了 Lambda 表达式需要的所有参数</p>
<p>​		<strong>右侧</strong>：指定了 Lambda 体，即 Lambda 表达式要执行的功能。</p>
<p>&#x3D;&#x3D;<strong>语法格式:</strong>&#x3D;&#x3D;</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709144314.png"></p>
<h2 id="类型推断"><a href="#类型推断" class="headerlink" title="类型推断"></a>类型推断</h2><p>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”.</p>
<h1 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h1><h2 id="啥是函数式接口"><a href="#啥是函数式接口" class="headerlink" title="啥是函数式接口"></a>啥是函数式接口</h2><ul>
<li>只包含一个抽象方法的接口，称为 函数式接口。</li>
<li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</li>
<li>我们可以在任意函数式接口上使用 &#x3D;&#x3D;@FunctionalInterface 注解&#x3D;&#x3D;，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li>
</ul>
<h2 id="自定义函数式接口"><a href="#自定义函数式接口" class="headerlink" title="自定义函数式接口"></a>自定义函数式接口</h2><p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png"></p>
<h2 id="作为参数传递lambda表达式"><a href="#作为参数传递lambda表达式" class="headerlink" title="作为参数传递lambda表达式"></a>作为参数传递lambda表达式</h2><p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709145553.png"></p>
<h2 id="Java-内置四大核心函数式接口"><a href="#Java-内置四大核心函数式接口" class="headerlink" title="Java  内置四大核心函数式接口"></a>Java  内置四大核心函数式接口</h2><table>
<thead>
<tr>
<th align="center">函数式接口</th>
<th>参数类型</th>
<th>返回类型</th>
<th>用途</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Consumer<T><br/>消费型接口</td>
<td>T</td>
<td>void</td>
<td>对类型为T的对象应用操作，包含方法：void accept(T t)</td>
</tr>
<tr>
<td align="center">Supplier<T><br/>供给型接口</td>
<td>无</td>
<td>T</td>
<td>返回类型为T的对象，包含方法：T get();</td>
</tr>
<tr>
<td align="center">Function&lt;T, R&gt;<br/>函数型接口</td>
<td>T</td>
<td>R</td>
<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t);</td>
</tr>
<tr>
<td align="center">Predicate<T><br/>断定型接口</td>
<td>T</td>
<td>boolean</td>
<td>确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法boolean test(T t);</td>
</tr>
</tbody></table>
<h1 id="3方法引用与构造器引用"><a href="#3方法引用与构造器引用" class="headerlink" title="3方法引用与构造器引用"></a>3方法引用与构造器引用</h1><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！）方法引用：使用操作符 “ ::” 将方法名和对象或类的名字分隔开来。<br>如下三种主要使用情况 ：</p>
<ul>
<li>&#x3D;&#x3D;对象 :: 实例方法&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;类 :: 静态方法&#x3D;&#x3D;</li>
<li>&#x3D;&#x3D;类 ::&#x3D;&#x3D;</li>
</ul>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150818.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150911.png"></p>
<h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p><strong>格式：</strong> <font color="red"><strong>ClassName :: new</strong></font><br>与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数<br>列表要与接口中抽象方法的参数列表一致！</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151215.png"></p>
<h2 id="数组引用"><a href="#数组引用" class="headerlink" title="数组引用"></a>数组引用</h2><p><strong>格式：</strong> <font color="red"><strong>type[] :: new</strong></font></p>
<h1 id="强大的-Stream-API"><a href="#强大的-Stream-API" class="headerlink" title="强大的 Stream API"></a>强大的 Stream API</h1><h2 id="了解-Stream"><a href="#了解-Stream" class="headerlink" title="了解 Stream"></a>了解 Stream</h2><p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API( java.util.stream .*) 。<br>&#x3D;&#x3D;Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。&#x3D;&#x3D;</p>
<h2 id="4-2什么是-Stream"><a href="#4-2什么是-Stream" class="headerlink" title="4.2什么是 Stream"></a>4.2什么是 Stream</h2><p><strong>流 (Stream)  到底是什么呢 ？</strong><br><strong>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</strong><br><font color="red"><strong>“集合讲的是数据，流讲的是计算！ ”</strong></font><br>注意：<br>①Stream 自己不会存储元素。<br>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151831.png"></p>
<h2 id="4-3创建Stream"><a href="#4-3创建Stream" class="headerlink" title="4.3创建Stream"></a>4.3创建Stream</h2><ul>
<li>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法 ：<ul>
<li>default Stream<E> stream() : 返回一个顺序流</li>
<li>default Stream<E> parallelStream() : 返回一个并行流</li>
</ul>
</li>
</ul>
<p>由数组创建流Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：<br> static <T> Stream<T> stream(T[] array): 返回一个流<br>重载形式，能够处理对应基本类型的数组：<br> public static IntStream stream(int[] array)<br> public static LongStream stream(long[] array)<br> public static DoubleStream stream(double[] array)</p>
<h2 id="4-4由值创建流"><a href="#4-4由值创建流" class="headerlink" title="4.4由值创建流"></a>4.4由值创建流</h2><p>可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。<br> public static<T> Stream<T> of(T… values) : 返回一个流</p>
<h2 id="4-5由函数创建流：创建无限流"><a href="#4-5由函数创建流：创建无限流" class="headerlink" title="4.5由函数创建流：创建无限流"></a>4.5由函数创建流：创建无限流</h2><p>可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流。<br> 迭代<br>public static<T> Stream<T> iterate(final T seed, finalUnaryOperator<T> f)<br> 生成<br>public static<T> Stream<T> generate(Supplier<T> s) ;</p>
<h2 id="4-6Stream-的中间操作"><a href="#4-6Stream-的中间操作" class="headerlink" title="4.6Stream  的中间操作"></a>4.6Stream  的中间操作</h2><p>&#x3D;&#x3D;多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的 处理！而在 终止操作时一次性全部 处理，称为“惰性求值”。&#x3D;&#x3D;</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709174819.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/QQ%E6%88%AA%E5%9B%BE20190709175115.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175205.png"></p>
<h2 id="4-7Stream的终止操作"><a href="#4-7Stream的终止操作" class="headerlink" title="4.7Stream的终止操作"></a>4.7Stream的终止操作</h2><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void.</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175351.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175450.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175603.png"></p>
<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175747.png"></p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175855.png"></p>
<h2 id="4-8并行-流与-串行-流"><a href="#4-8并行-流与-串行-流" class="headerlink" title="4.8并行 流与 串行 流"></a>4.8并行 流与 串行 流</h2><p>&#x3D;&#x3D;并行流 就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流&#x3D;&#x3D;。Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与sequential() 在并行流与顺序流之间进行切换。</p>
<h2 id="4-9练习Demo"><a href="#4-9练习Demo" class="headerlink" title="4.9练习Demo"></a>4.9练习Demo</h2><p><strong>创建Stream 的四种方式</strong></p>
<p>　　1）. 通过Collection得Stream（）方法（串行流）或者 parallelStream（）方法（并行流）创建Stream。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 1.通过Collection得Stream（）方法（串行流）</span><br><span class="hljs-comment">            或者 parallelStream（）方法（并行流）创建Stream</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span> <span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">//1. 通过Collection得Stream（）方法（串行流）</span><br>        <span class="hljs-comment">//或者 parallelStream（）方法（并行流）创建Stream</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        Stream&lt;String&gt; stream1 = list.stream();<br>        <br>        Stream&lt;String&gt; stream2 = list.parallelStream();<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>

<p>2）.通过Arrays中得静态方法stream（）获取数组流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 2. 通过Arrays中得静态方法stream（）获取数组流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span> <span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">//2. 通过Arrays中得静态方法stream（）获取数组流</span><br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>

<p>3). 通过Stream类中得 of（）静态方法获取流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 3. 通过Stream类中得 of（）静态方法获取流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span> <span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">//3. 通过Stream类中得 of（）静态方法获取流</span><br>        Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;4645&quot;</span>, <span class="hljs-string">&quot;huinnj&quot;</span>);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>

<p>4）. 创建无限流(迭代、生成)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 4. 创建无限流(迭代、生成)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span> <span class="hljs-params">()</span> &#123;<br>        <br>        <span class="hljs-comment">//4. 创建无限流</span><br>        <span class="hljs-comment">//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）</span><br>        Stream&lt;Integer&gt; stream1 = Stream.iterate(<span class="hljs-number">2</span>, (x) -&gt; x * <span class="hljs-number">2</span>);<br>        <br>        <span class="hljs-comment">//生成(无限产生对象)</span><br>        Stream&lt;Double&gt; stream2 = Stream.generate(() -&gt; Math.random());<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>

<p><strong>相关操作</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com._521it.StreamAPI;<br><span class="hljs-keyword">import</span> com._521it.StreamAPI.Person;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.IntStream;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Auther</span>: yangxiangnan</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span>: 2019/7/2 17:47</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>:</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StreamAPIDemo</span> &#123;<br>    List&lt;Person&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">20</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">30</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">30</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">40</span>),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-number">50</span>),<br>    &#125;);<br>    List&lt;Person&gt; persons = Arrays.asList(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;张三&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">76</span>, Status.FREE),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;李四&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">12</span>, Status.BUSY),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">35</span>, Status.BUSY),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;赵六&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">3</span>, Status.FREE),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;钱七&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">56</span>, Status.BUSY),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;翠花&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">34</span>, Status.VOCATION),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;翠花&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">34</span>, Status.FREE),<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;翠花&quot;</span>, <span class="hljs-string">&quot;女&quot;</span>, <span class="hljs-number">34</span>, Status.VOCATION)<br>    );<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 1.通过Collection得Stream（）方法（串行流）</span><br><span class="hljs-comment">     或者 parallelStream（）方法（并行流）创建Stream</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//1. 通过Collection得Stream（）方法（串行流）</span><br>        <span class="hljs-comment">//或者 parallelStream（）方法（并行流）创建Stream</span><br>        List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        Stream&lt;String&gt; stream1 = list.stream();<br>        Stream&lt;String&gt; stream2 = list.parallelStream();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 2. 通过Arrays中得静态方法stream（）获取数组流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//2. 通过Arrays中得静态方法stream（）获取数组流</span><br>        <span class="hljs-type">IntStream</span> <span class="hljs-variable">stream</span> <span class="hljs-operator">=</span> Arrays.stream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>&#125;);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 3. 通过Stream类中得 of（）静态方法获取流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//3. 通过Stream类中得 of（）静态方法获取流</span><br>        Stream&lt;String&gt; stream = Stream.of(<span class="hljs-string">&quot;4645&quot;</span>, <span class="hljs-string">&quot;huinnj&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建 Stream的四种方式</span><br><span class="hljs-comment">     * 4. 创建无限流(迭代、生成)</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//4. 创建无限流</span><br>        <span class="hljs-comment">//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）</span><br>        Stream&lt;Integer&gt; stream1 = Stream.iterate(<span class="hljs-number">2</span>, (x) -&gt; x * <span class="hljs-number">2</span>);<br>        <span class="hljs-comment">//生成(无限产生对象)</span><br>        Stream&lt;Double&gt; stream2 = Stream.generate(() -&gt; Math.random());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 筛选与切片</span><br><span class="hljs-comment">     *  filter —— 接收Lambda ，从流中排除某些元素。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test5</span> <span class="hljs-params">()</span> &#123;<br>        List&lt;Person&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">20</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">30</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">40</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-number">50</span>),<br>        &#125;);<br>        <span class="hljs-comment">//内部迭代：在此过程中没有进行过迭代，由Stream api进行迭代</span><br>        <span class="hljs-comment">//中间操作：不会执行任何操作</span><br>        Stream&lt;Person&gt; stream = list.stream().filter((e) -&gt; &#123;<br>            System.out.println(<span class="hljs-string">&quot;Stream API 中间操作&quot;</span>);<br>            <span class="hljs-keyword">return</span> e.getAge() &gt; <span class="hljs-number">20</span>;<br>        &#125;);<br>        <span class="hljs-comment">//终止操作：只有执行终止操作才会执行全部。即：延迟加载</span><br>        stream.forEach(System.out :: println);<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test6</span> <span class="hljs-params">()</span> &#123;<br>        List&lt;Person&gt; list = Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[]&#123;<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">10</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">20</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">30</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">40</span>),<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-number">50</span>),<br>        &#125;);<br>        <span class="hljs-comment">//外部迭代</span><br>        Iterator&lt;Person&gt; it = list.iterator();<br>        <span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> it.next();<br>           <span class="hljs-keyword">if</span>(person.getAge()&gt;<span class="hljs-number">20</span>)&#123;<br>               System.out.println(person);<br>           &#125;<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * limit —— 截断流，使其元素不超过给定数量。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test7</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//过滤之后取2个值</span><br>        list.stream()<br>                .filter((e)-&gt;e.getAge()&gt;<span class="hljs-number">30</span>)<br>                .limit(<span class="hljs-number">2</span>).forEach(System.out::println);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * skip（n）—— 跳过元素，返回一个扔掉了前n个元素的流。</span><br><span class="hljs-comment">     * 若流中元素不足n个，则返回一个空，与limit（n）互补。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test8</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//跳过前2个值</span><br>        list.stream().skip(<span class="hljs-number">2</span>).forEach(System.out::println);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * distinct —— 筛选，通过流所生成元素的hashCode（）和equals（）去除重复元素</span><br><span class="hljs-comment">     *注意：distinct 需要实体中重写hashCode（）和 equals（）方法才可以使用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test9</span> <span class="hljs-params">()</span> &#123;<br>        list.stream().distinct().forEach(System.out::println);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *	. map ，将元素转换成其他形式或者提取信息。接收一个函数作为参数，该函数会被应用到每个元素		 *	上，并将其映射成一个新的元素。</span><br><span class="hljs-comment">     * map —— 映射 ，将元素转换成其他形式或者提取信息。</span><br><span class="hljs-comment">     * 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//将流中每一个元素都映射到map的函数中，每个元素执行这个函数，再返回</span><br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>);<br>        list.stream().map((e)-&gt;e.toUpperCase()).forEach(System.out::println);<br><br>        <span class="hljs-comment">//获取Person中的每一个人得名字name，再返回一个集合</span><br>        List&lt;String&gt; stringList = <span class="hljs-built_in">this</span>.list.stream().map(Person::getName).collect(Collectors.toList());<br>        stringList.stream().forEach(System.out::println);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * flatMap —— 接收一个函数作为参数，将流中的每个值都换成一个流，然后把所有流连接成一个流</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StreamAPIDemo</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StreamAPIDemo</span>();<br>        List&lt;String&gt; list = Arrays.asList(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;ddd&quot;</span>);<br>        list.stream().flatMap((e) -&gt; 			             s.filterCharacter(e)).forEach(System.out::println);<br><br>        <span class="hljs-comment">//如果使用map则需要这样写</span><br>        list.stream().map((e) -&gt; s.filterCharacter(e)).forEach((e) -&gt; &#123;<br>            e.forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>	<span class="hljs-comment">/*</span><br><span class="hljs-comment">	其实map方法就相当于Collaction的add方法，如果add的是个集合得话就会变成二维数组，而flatMap 的话就相当于Collaction的addAll方法，参数如果是集合得话，只是将2个集合合并，而不是变成二维数组。</span><br><span class="hljs-comment">	*/</span><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sorted有两种方法，一种是不传任何参数，叫自然排序，还有一种需要传Comparator 接口参数，叫做定制排序。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test12</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 自然排序</span><br>        List&lt;Person&gt; persons1 = list.stream().sorted().collect(Collectors.toList());<br>        System.out.println(persons1);<br>        <span class="hljs-comment">//定制排序</span><br>        List&lt;Person&gt; persons2 = list.stream().sorted((e1, e2) -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (e1.getAge() == e2.getAge()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e1.getAge() &gt; e2.getAge()) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;).collect(Collectors.toList());<br>        persons2.stream().forEach(System.out::println);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * allMatch —— 检查是否匹配所有元素。</span><br><span class="hljs-comment">     * 判断所有状态是否都是FREE</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test13</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isAllBusy</span> <span class="hljs-operator">=</span> persons.stream().allMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(isAllBusy);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * anyMatch —— 检查是否至少匹配所有元素。</span><br><span class="hljs-comment">     * 判断是否有一个是FREE</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test14</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> persons.stream().anyMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(b);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * noneMatch —— 检查是否没有匹配所有元素。</span><br><span class="hljs-comment">     * 判断是否没有FREE</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test15</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> persons.stream().noneMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(b);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * findFirst —— 返回第一个元素。</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test16</span> <span class="hljs-params">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().findFirst();<br>        person.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">35</span>, Status.BUSY));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * findAny —— 返回当前流中任意元素。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test17</span> <span class="hljs-params">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().findAny();<br>        person.orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;王五&quot;</span>, <span class="hljs-string">&quot;男&quot;</span>, <span class="hljs-number">35</span>, Status.BUSY));<br>        System.out.println(person);<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * count —— 返回流中元素总个数。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test18</span> <span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> persons.stream().count();<br>        System.out.println(count);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * max —— 返回流中最大值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test19</span> <span class="hljs-params">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().max((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge()));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * min —— 返回流中最小值。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test20</span> <span class="hljs-params">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().min((e1, e2) -&gt; Double.compare(e1.getAge(), e2.getAge()));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * reduce（T identitty，BinaryOperator）首先，需要传一个起始值，然后，传入的是一个二元运算。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test21</span> <span class="hljs-params">()</span> &#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> list.stream().reduce(<span class="hljs-number">0</span>,Integer::sum);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     *  reduce（BinaryOperator）此方法相对于上面方法来说，没有起始值，则有可能结果为空，</span><br><span class="hljs-comment">     *  所以返回的值会被封装到Optional中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test22</span> <span class="hljs-params">()</span> &#123;<br>        List&lt;Integer&gt; list = Arrays.asList();<br>        Optional&lt;Integer&gt; sum = list.stream().reduce(Integer :: sum);<br>        sum.orElse(<span class="hljs-number">0</span>);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 将一个字符串转换为流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Stream&lt;Character&gt; <span class="hljs-title function_">filterCharacter</span><span class="hljs-params">(String str)</span>&#123;<br>        List&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (Character ch : str.toCharArray()) &#123;<br>            list.add(ch);<br>        &#125;<br>        <span class="hljs-keyword">return</span> list.stream();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>

<h1 id="5-接口中的默认方法与静态方法"><a href="#5-接口中的默认方法与静态方法" class="headerlink" title="5.接口中的默认方法与静态方法"></a>5.接口中的默认方法与静态方法</h1><h2 id="5-1接口中的默认方法"><a href="#5-1接口中的默认方法" class="headerlink" title="5.1接口中的默认方法"></a>5.1接口中的默认方法</h2><p>&#x3D;&#x3D;Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 <font color="red">default</font> 关键字修饰。&#x3D;&#x3D;</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709180636.png"></p>
<p>&#x3D;&#x3D;接口默认方法的 ” 类优先 ” 原则&#x3D;&#x3D;<br>若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时<br> 选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。<br> 接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181013.png"></p>
<h2 id="5-2接口中的静态方法"><a href="#5-2接口中的静态方法" class="headerlink" title="5.2接口中的静态方法"></a>5.2接口中的静态方法</h2><p>Java8 中，接口中允许添加静态方法。</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181225.png"></p>
<h1 id="6-Optional-类"><a href="#6-Optional-类" class="headerlink" title="6.Optional 类"></a>6.Optional 类</h1><p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。<br>常用方法：<br>Optional.of(T t) : 创建一个 Optional 实例<br>Optional.empty() : 创建一个空的 Optional 实例<br>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例<br>isPresent() : 判断是否包含值<br>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t<br>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值<br>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()<br>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</p>
<h2 id="一、Optional的构造方式："><a href="#一、Optional的构造方式：" class="headerlink" title="一、Optional的构造方式："></a>一、Optional的构造方式：</h2><p>1、Optional.of(T)</p>
<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>
<p>2、Optional.ofNullable(T)</p>
<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>
<p>3、Optional.empty()</p>
<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>
<h2 id="二、-如何正确使用Optional"><a href="#二、-如何正确使用Optional" class="headerlink" title="二、 如何正确使用Optional"></a>二、 如何正确使用Optional</h2><h3 id="尽量避免使用的地方："><a href="#尽量避免使用的地方：" class="headerlink" title="尽量避免使用的地方："></a>尽量避免使用的地方：</h3><p>1、避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null !&#x3D; obj没有区别，这样用就没什么意义了。</p>
<p>2、避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>
<p>3、避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>
<p>4、避免使用Optional作为方法的参数，原因同3。</p>
<h3 id="正确使用方式："><a href="#正确使用方式：" class="headerlink" title="正确使用方式："></a>正确使用方式：</h3><p>1、实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse&#x2F;orElseGet方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//存在则返回</span><br><span class="hljs-type">User</span> <span class="hljs-variable">king</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;king&quot;</span>);<br>Optional&lt;User&gt; userOpt = Optional.of(king);<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>  userOpt.orElse(<span class="hljs-literal">null</span>);<br>System.out.println(user.getName());<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"> <span class="hljs-comment">//不存在提供默认值</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user2</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);<br><span class="hljs-type">User</span> <span class="hljs-variable">user3</span> <span class="hljs-operator">=</span> userOpt2.orElse(unknown);<br>System.out.println(user3.getName());<br></code></pre></td></tr></table></figure>

<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"> <span class="hljs-comment">//通过方法提供值</span><br>User user4 = userOpt2.<span class="hljs-keyword">or</span><span class="hljs-constructor">ElseGet(()</span> -&gt; <span class="hljs-keyword">new</span> <span class="hljs-constructor">User(0, <span class="hljs-string">&quot;DEFAULT&quot;</span>)</span>); <br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(user4.get<span class="hljs-constructor">Name()</span>)<br></code></pre></td></tr></table></figure>

<p>不建议这样使用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(userOpt.isPresent()) &#123;<br>    System.out.println(userOpt.get().getName());<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-comment">//。。。</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>2、使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实例存在则操作，否则不操作</span><br>userOpt.ifPresent(u -&gt; System.out.println(u.getName()));<br>userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));<br></code></pre></td></tr></table></figure>

<p>3、使用map&#x2F;flatMap来获取关联数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用map方法获取关联数据</span><br>        System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class="hljs-string">&quot;Unknown&quot;</span>));<br>        System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class="hljs-string">&quot;Default&quot;</span>));<br>        <span class="hljs-comment">//使用flatMap方法获取关联数据</span><br>        List&lt;String&gt; interests = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>        interests.add(<span class="hljs-string">&quot;a&quot;</span>);interests.add(<span class="hljs-string">&quot;b&quot;</span>);interests.add(<span class="hljs-string">&quot;c&quot;</span>);<br>        user.setInterests(interests);<br>        List&lt;String&gt; interests2 = Optional.of(user)<br>                .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))<br>                .orElse(Collections.emptyList());<br>        System.out.println(interests2.isEmpty());<br></code></pre></td></tr></table></figure>

<h1 id="7-重复注解与类型注解"><a href="#7-重复注解与类型注解" class="headerlink" title="7.重复注解与类型注解"></a>7.重复注解与类型注解</h1><p>Java 8对注解处理提供了两点改进：&#x3D;&#x3D;可重复的注解及可用于类型的注解。&#x3D;&#x3D;</p>
<p><img src="https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181750.png"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>JAVA特性</category>
      </categories>
      <tags>
        <tag>思考</tag>
        <tag>JAVA</tag>
        <tag>Java8</tag>
        <tag>特性</tag>
      </tags>
  </entry>
  <entry>
    <title>JDBC连接参数【rewriteBatchedStatements】详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/JDBC%E8%BF%9E%E6%8E%A5%E5%8F%82%E6%95%B0%E3%80%90rewriteBatchedStatements%E3%80%91%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>最近博猪在做一些风险测算相关的工作，大体业务流程就是业务人员通过Excel录入数据后，后台通过默认的风险因子计算后，批量入库，同时会把业务人员导入的测算数据的Excel上传,由于这块操作比较多，但是因为后台使用的ORM框架是MybatisPlus，里面提供的一些API还是挺便捷的，但是同步通过输入测验发现一个问题，下面就以一个案例进入一下今天的主题，细扒一下MyBatisPlus的批量插入操作。</p>
</blockquote>
<h1 id="rewriteBatchedStatements参数"><a href="#rewriteBatchedStatements参数" class="headerlink" title="rewriteBatchedStatements参数"></a>rewriteBatchedStatements参数</h1><p>MySQL的JDBC连接的url中要加rewriteBatchedStatements参数，并保证5.1.13以上版本的驱动，才能实现高性能的批量插入。MySQL JDBC驱动在默认情况下会无视executeBatch()语句，把我们期望批量执行的一组sql语句拆散，一条一条地发给MySQL数据库，批量插入实际上是单条插入，直接造成较低的性能。只有把rewriteBatchedStatements参数置为true, 驱动才会帮你批量执行SQL，另外这个选项对INSERT&#x2F;UPDATE&#x2F;DELETE都有效</p>
<p>添加<code>rewriteBatchedStatements=true</code>这个参数后的执行速度比较：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">jdbc:mysql://数据库地址/数据库名?useUnicode=true&amp;characterEncoding=UTF8&amp;allowMultiQueries=true&amp;rewriteBatchedStatements=true<br></code></pre></td></tr></table></figure>

<h1 id="测试环境介绍"><a href="#测试环境介绍" class="headerlink" title="测试环境介绍"></a>测试环境介绍</h1><blockquote>
<p>测试代码在本地执行，数据库使用本地虚拟机。</p>
</blockquote>
<h2 id="宿主环境"><a href="#宿主环境" class="headerlink" title="宿主环境"></a>宿主环境</h2><ul>
<li>物理机处理为AMD Ryzen 9 5900HX with Radeon Graphics           3.30 GHz   48G运行内存  WIN11(OS)</li>
<li>MySQL为8.0.30，虚拟机（4G运存,20G内存)</li>
<li>jdk版本为1.8</li>
<li>日志级别调整到info或者warn级别，减少日志打印性能的消耗</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `user` (<br>  `id` bigint NOT NULL COMMENT &#x27;主键ID&#x27;,<br>  `name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>  `age` int DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>  `email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * BatchDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> will</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = App.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BatchDemo</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserService userService;<br><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">StopWatch</span> <span class="hljs-variable">stopWatch</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StopWatch</span>(<span class="hljs-string">&quot;测试批量保存&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">loopNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchNum</span> <span class="hljs-operator">=</span> <span class="hljs-number">10_000</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= loopNum; i++) &#123;<br>            stopWatch.start(<span class="hljs-string">&quot;用户保存&quot;</span> + i);<br>            ArrayList&lt;User&gt; users = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= batchNum; j++) &#123;<br>                <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> User.builder()<br>                        .id(IdWorker.getId())<br>                        .name(<span class="hljs-string">&quot;test-&quot;</span>)<br>                        .age(<span class="hljs-number">16</span>)<br>                        .email(<span class="hljs-string">&quot;@qq.com&quot;</span>)<br>                        .build();<br>                users.add(user);<br>            &#125;<br>            userService.saveBatch(users, users.size());<br>            stopWatch.stop();<br>            System.out.println(stopWatch.prettyPrint(TimeUnit.MILLISECONDS));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="普通saveBatch批量插入"><a href="#普通saveBatch批量插入" class="headerlink" title="普通saveBatch批量插入"></a>普通saveBatch批量插入</h2><p>我们循环1万次，把每个实例对象装到集合（List）中,然后调用Mybatis-Plus的saveBatch方法，传入List集合，实现批量对象的插入，然后我们在方法开始结束的地方，计算当前函数执行时长。为了测试严谨性，我们重复执行十次，下面是执行的时长：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">StopWatch &#x27;测试批量保存&#x27;: running time = 88867 ms</span><br><span class="hljs-section">---------------------------------------------</span><br><span class="hljs-section">ms         %     Task name</span><br><span class="hljs-section">---------------------------------------------</span><br>000011977  13%   用户保存1<br>000008739  10%   用户保存2<br>000008547  10%   用户保存3<br>000008636  10%   用户保存4<br>000008610  10%   用户保存5<br>000008490  10%   用户保存6<br>000008382  09%   用户保存7<br>000008287  09%   用户保存8<br>000008624  10%   用户保存9<br>000008570  10%   用户保存10<br></code></pre></td></tr></table></figure>

<p>OK，我们清空表结构，把数据量调整到10万次，，同时调整一下保存操作为<code>userService.saveBatch(users);</code>执行结果如下：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">StopWatch &#x27;测试批量保存&#x27;: running time = 888607 ms</span><br><span class="hljs-section">---------------------------------------------</span><br><span class="hljs-section">ms         %     Task name</span><br><span class="hljs-section">---------------------------------------------</span><br>000093144  10%   用户保存1<br>000087531  10%   用户保存2<br>000085724  10%   用户保存3<br>000092762  10%   用户保存4<br>000085413  10%   用户保存5<br>000090576  10%   用户保存6<br>000087468  10%   用户保存7<br>000086718  10%   用户保存8<br>000089837  10%   用户保存9<br>000089432  10%   用户保存10<br></code></pre></td></tr></table></figure>

<p>这性能差异立马上来了，然后我技术经理说让我在数据库连接上加上<code>rewriteBatchedStatements=true</code>属性，批量新增方法变更为<code>userService.saveBatch(users, users.size());</code>试一下。我们再次清空表试一下两个情况：</p>
<h2 id="增加rewriteBatchedStatements-x3D-true"><a href="#增加rewriteBatchedStatements-x3D-true" class="headerlink" title="增加rewriteBatchedStatements&#x3D;true"></a>增加rewriteBatchedStatements&#x3D;true</h2><p>一万次：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">StopWatch &#x27;测试批量保存&#x27;: running time = 6351 ms</span><br><span class="hljs-section">---------------------------------------------</span><br><span class="hljs-section">ms         %     Task name</span><br><span class="hljs-section">---------------------------------------------</span><br>000003298  52%   用户保存1<br>000000503  08%   用户保存2<br>000000338  05%   用户保存3<br>000000304  05%   用户保存4<br>000000402  06%   用户保存5<br>000000310  05%   用户保存6<br>000000312  05%   用户保存7<br>000000299  05%   用户保存8<br>000000273  04%   用户保存9<br>000000308  05%   用户保存10<br></code></pre></td></tr></table></figure>

<p>10万次：</p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-section">StopWatch &#x27;测试批量保存&#x27;: running time = 40913 ms</span><br><span class="hljs-section">---------------------------------------------</span><br><span class="hljs-section">ms         %     Task name</span><br><span class="hljs-section">---------------------------------------------</span><br>000009092  22%   用户保存1<br>000003494  09%   用户保存2<br>000003580  09%   用户保存3<br>000003645  09%   用户保存4<br>000002939  07%   用户保存5<br>000002871  07%   用户保存6<br>000004359  11%   用户保存7<br>000003043  07%   用户保存8<br>000002978  07%   用户保存9<br>000004907  12%   用户保存10<br></code></pre></td></tr></table></figure>

<p><strong>效果惊呆了吧！！！！芜湖，起飞。</strong></p>
<h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>那么问题来了，是什么原因导致的性能差异这么大的呢？</p>
<p>我们去掉<code>rewriteBatchedStatements=true</code>参数， 把日志级别调整到<code>debug</code>级别来看看日志输出情况，当然我们也要把我们数量调小些，一方面是为了我们更好的查看运行情况，另一方面也是为了我们能方便进行断点调试我们的代码。</p>
<p>首先我们在我们保存的方法上打个断点，然后运行，先放行，我们查看日志输出情况，我们发现SQL是按照单个的SQL的形式进行批量执行的。</p>
<ul>
<li>调用MyBatisPlus提供的ServiceImpl的批量保存方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行批量操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list      数据集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> batchSize 批量大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> consumer  执行方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;       泛型</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 3.3.1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">protected</span> &lt;E&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">executeBatch</span><span class="hljs-params">(Collection&lt;E&gt; list, <span class="hljs-type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;<br>    <span class="hljs-keyword">return</span> SqlHelper.executeBatch(<span class="hljs-built_in">this</span>.entityClass, <span class="hljs-built_in">this</span>.log, list, batchSize, consumer);<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>调用SqlHelper的批量执行方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行批量操作</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> entityClass 实体类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> log         日志对象</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> list        数据集合</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> batchSize   批次大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> consumer    consumer</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> &lt;E&gt;         T</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span> 操作结果</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 3.4.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;E&gt; <span class="hljs-type">boolean</span> <span class="hljs-title function_">executeBatch</span><span class="hljs-params">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class="hljs-type">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;<br>    Assert.isFalse(batchSize &lt; <span class="hljs-number">1</span>, <span class="hljs-string">&quot;batchSize must not be less than one&quot;</span>);<br>    <span class="hljs-keyword">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> list.size();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">idxLimit</span> <span class="hljs-operator">=</span> Math.min(batchSize, size);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (E element : list) &#123;<br>            consumer.accept(sqlSession, element);<br>            <span class="hljs-keyword">if</span> (i == idxLimit) &#123;<br>                sqlSession.flushStatements();<br>                idxLimit = Math.min(idxLimit + batchSize, size);<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>

<blockquote>
<p>从这里我们可以看到，批量保存的方法变成了单个插入的方式，我想这里大概是为了方便兼容各种数据库差异化的插入的处理吧，把批量保存的数据组装成单个的插入语句，到达指定批次数量之后session清空重新组装，而后事务统一提交。</p>
</blockquote>
<p>到这里用的基本上都是代理对象了，不太直观的看出调用逻辑了，我们debug到方法里面查看具体调用逻辑。然后直到执行刷新语句(<code>flushStatements</code>)这里,发现使用的是<code>BatchExecutor</code>,具体下执行方法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">@Override<br>public List&lt;BatchResult&gt; doFlushStatements(boolean isRollback) throws SQLException &#123;<br>  try &#123;<br>    List&lt;BatchResult&gt; results = new ArrayList&lt;&gt;();<br>    if (isRollback) &#123;<br>      return Collections.emptyList();<br>    &#125;<br>    for (int i = 0, n = statementList.size(); i &lt; n; i++) &#123;<br>      Statement stmt = statementList.get(i);<br>      applyTransactionTimeout(stmt);<br>      BatchResult batchResult = batchResultList.get(i);<br>      try &#123;<br>        batchResult.setUpdateCounts(stmt.executeBatch());<br>        MappedStatement ms = batchResult.getMappedStatement();<br>        List&lt;Object&gt; parameterObjects = batchResult.getParameterObjects();<br>        KeyGenerator keyGenerator = ms.getKeyGenerator();<br>        if (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) &#123;<br>          Jdbc3KeyGenerator jdbc3KeyGenerator = (Jdbc3KeyGenerator) keyGenerator;<br>          jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);<br>        &#125; else if (!NoKeyGenerator.class.equals(keyGenerator.getClass())) &#123; //issue #141<br>          for (Object parameter : parameterObjects) &#123;<br>            keyGenerator.processAfter(this, ms, stmt, parameter);<br>          &#125;<br>        &#125;<br>        // Close statement to close cursor #1109<br>        closeStatement(stmt);<br>      &#125; catch (BatchUpdateException e) &#123;<br>        StringBuilder message = new StringBuilder();<br>        message.append(batchResult.getMappedStatement().getId())<br>            .append(&quot; (batch index #&quot;)<br>            .append(i + 1)<br>            .append(&quot;)&quot;)<br>            .append(&quot; failed.&quot;);<br>        if (i &gt; 0) &#123;<br>          message.append(&quot; &quot;)<br>              .append(i)<br>              .append(&quot; prior sub executor(s) completed successfully, but will be rolled back.&quot;);<br>        &#125;<br>        throw new BatchExecutorException(message.toString(), e, results, batchResult);<br>      &#125;<br>      results.add(batchResult);<br>    &#125;<br>    return results;<br>  &#125; finally &#123;<br>    for (Statement stmt : statementList) &#123;<br>      closeStatement(stmt);<br>    &#125;<br>    currentSql = null;<br>    statementList.clear();<br>    batchResultList.clear();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p><code>batchResult.setUpdateCounts(stmt.executeBatch());</code>断点到这里后我们进入方法内部，到<code>com.mysql.cj.jdbc.StatementImpl</code>里面执行：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] executeBatch() <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">return</span> Util.truncateAndConvertToInt(executeBatchInternal());<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后再到<code>com.mysql.cj.jdbc.ClientPreparedStatement</code>里面执行一下逻辑：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-type">long</span>[] executeBatchInternal() <span class="hljs-keyword">throws</span> SQLException &#123;<br>    <span class="hljs-keyword">synchronized</span> (checkClosed().getConnectionMutex()) &#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connection.isReadOnly()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQLException</span>(Messages.getString(<span class="hljs-string">&quot;PreparedStatement.25&quot;</span>) + Messages.getString(<span class="hljs-string">&quot;PreparedStatement.26&quot;</span>),<br>                    MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT);<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.query.getBatchedArgs() == <span class="hljs-literal">null</span> || <span class="hljs-built_in">this</span>.query.getBatchedArgs().size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[<span class="hljs-number">0</span>];<br>        &#125;<br><br>        <span class="hljs-comment">// we timeout the entire batch, not individual statements</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">batchTimeout</span> <span class="hljs-operator">=</span> getTimeoutInMillis();<br>        setTimeoutInMillis(<span class="hljs-number">0</span>);<br><br>        resetCancelledState();<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            statementBegins();<br><br>            clearWarnings();<br><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.batchHasPlainStatements &amp;&amp; <span class="hljs-built_in">this</span>.rewriteBatchedStatements.getValue()) &#123;<br><br>                <span class="hljs-keyword">if</span> (getQueryInfo().isRewritableWithMultiValuesClause()) &#123;<br>                    <span class="hljs-keyword">return</span> executeBatchWithMultiValuesClause(batchTimeout);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.batchHasPlainStatements &amp;&amp; <span class="hljs-built_in">this</span>.query.getBatchedArgs() != <span class="hljs-literal">null</span><br>                        &amp;&amp; <span class="hljs-built_in">this</span>.query.getBatchedArgs().size() &gt; <span class="hljs-number">3</span> <span class="hljs-comment">/* cost of option setting rt-wise */</span>) &#123;<br>                    <span class="hljs-keyword">return</span> executePreparedBatchAsMultiStatement(batchTimeout);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> executeBatchSerially(batchTimeout);<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-built_in">this</span>.query.getStatementExecuting().set(<span class="hljs-literal">false</span>);<br><br>            clearBatch();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>发现最终执行方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>

<p>首先查看方法文档,文档说明如下：</p>
<blockquote>
<p>Executes the current batch of statements by executing them one-by-one.</p>
</blockquote>
<p>executeBatchSerially核心源码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (batchCommandIndex = <span class="hljs-number">0</span>; batchCommandIndex &lt; nbrCommands; batchCommandIndex++) &#123;<br><br>    ((PreparedQuery&lt;?&gt;) <span class="hljs-built_in">this</span>.query).setBatchCommandIndex(batchCommandIndex);<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.query.getBatchedArgs().get(batchCommandIndex);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (arg <span class="hljs-keyword">instanceof</span> String) &#123;<br>            updateCounts[batchCommandIndex] = executeUpdateInternal((String) arg, <span class="hljs-literal">true</span>, <span class="hljs-built_in">this</span>.retrieveGeneratedKeys);<br><br>            <span class="hljs-comment">// limit one generated key per OnDuplicateKey statement</span><br>            getBatchedGeneratedKeys(<span class="hljs-built_in">this</span>.results.getFirstCharOfQuery() == <span class="hljs-string">&#x27;I&#x27;</span> &amp;&amp; containsOnDuplicateKeyInString((String) arg) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            QueryBindings&lt;?&gt; queryBindings = (QueryBindings&lt;?&gt;) arg;<br>            updateCounts[batchCommandIndex] = executeUpdateInternal(queryBindings, <span class="hljs-literal">true</span>);<br><br>            <span class="hljs-comment">// limit one generated key per OnDuplicateKey statement</span><br>            getBatchedGeneratedKeys(containsOnDuplicateKeyUpdateInSQL() ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (SQLException ex) &#123;<br>        updateCounts[batchCommandIndex] = EXECUTE_FAILED;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.continueBatchOnError &amp;&amp; !(ex <span class="hljs-keyword">instanceof</span> MySQLTimeoutException) &amp;&amp; !(ex <span class="hljs-keyword">instanceof</span> MySQLStatementCancelledException)<br>                &amp;&amp; !hasDeadlockOrTimeoutRolledBackTx(ex)) &#123;<br>            sqlEx = ex;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span>[] newUpdateCounts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">long</span>[batchCommandIndex];<br>            System.arraycopy(updateCounts, <span class="hljs-number">0</span>, newUpdateCounts, <span class="hljs-number">0</span>, batchCommandIndex);<br><br>            <span class="hljs-keyword">throw</span> SQLError.createBatchUpdateException(ex, newUpdateCounts, <span class="hljs-built_in">this</span>.exceptionInterceptor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过代码分析，也确实是一条一条SQL执行，而不是把batch的SQL发送到服务器</p>
<p><strong>但是</strong></p>
<p>重点来了，执行executeBatchSerially是有条件的，再次贴一下源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.batchHasPlainStatements &amp;&amp; <span class="hljs-built_in">this</span>.connection.getRewriteBatchedStatements()) &#123;<br>    ...<br>&#125;<br><span class="hljs-keyword">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>

<p>也就是说，如果没做任何配置，默认情况下if条件是进不去的，会直接执行if块后边的语句的，那么if判断了什么，判断如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">!``<span class="hljs-built_in">this</span>``.batchHasPlainStatements &amp;&amp; ``<span class="hljs-built_in">this</span>``.connection.getRewriteBatchedStatements()<br></code></pre></td></tr></table></figure>

<p><code>batchHasPlainStatements</code>默认初始化就是<strong>false</strong>，可以不用管，重点是<code>connection.getRewriteBatchedStatements()</code>。这个是Connection的一个参数<code>rewriteBatchedStatements</code>，会在读取<code>jdbcUrl</code>的时候读取进来：<code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true</code></p>
<p>我们将jdbcUrl添加一个**<code>rewriteBatchedStatements</code>**试试，即变成：<code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;***rewriteBatchedStatements=true</code></p>
<p>这时候就会进if块了。进入if块之后，再根据执行的是insert 还是update、 delete，会走不同方法</p>
<ul>
<li>如果是insert语句，满成条件情况下，会整合成形如：”<strong>insert into xxx_table values (xx),(yy),(zz)…</strong>“这样的语句</li>
<li>如果是update\delete语句，满成条件情况下，会整合成形如：”<strong>update t set … where id &#x3D; 1; update t set … where id &#x3D; 2; update t set … where id &#x3D; 3 …</strong>“这样的语句</li>
</ul>
<p>然后分批次发送给MySQL(会有一次发送的package大小限制，所以需要拆分批次),拆分如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>` `maxAllowedPacket = ``<span class="hljs-built_in">this</span>``.connection.getMaxAllowedPacket();<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.batchHasPlainStatements &amp;&amp; <span class="hljs-built_in">this</span>.connection.getRewriteBatchedStatements()) &#123;<br>    <span class="hljs-comment">//insert会在这里进行再次判断</span><br>    <span class="hljs-keyword">if</span> (canRewriteAsMultiValueInsertAtSqlLevel()) &#123;<br>        <span class="hljs-keyword">return</span> executeBatchedInserts(batchTimeout);<br>    &#125;<br>    <span class="hljs-comment">//update、delete会在这里进行再次判断</span><br>    <span class="hljs-comment">//1. mysql版本&gt;=4.1.0</span><br>    <span class="hljs-comment">//2. batchHasPlainStatements为false</span><br>    <span class="hljs-comment">//3. batch的数量&gt;3</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.connection.versionMeetsMinimum(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>) &amp;&amp; !<span class="hljs-built_in">this</span>.batchHasPlainStatements &amp;&amp; <span class="hljs-built_in">this</span>.batchedArgs != <span class="hljs-literal">null</span><br>            &amp;&amp; <span class="hljs-built_in">this</span>.batchedArgs.size() &gt; <span class="hljs-number">3</span> <span class="hljs-comment">/* cost of option setting rt-wise */</span>) &#123;<br>        <span class="hljs-keyword">return</span> executePreparedBatchAsMultiStatement(batchTimeout);<br>    &#125;<br>&#125;<br> <br><span class="hljs-keyword">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>OK，知其然，知其所以然，我们大概知晓了参数的功能及意义，那么我们总结一下。</p>
<p>如果想要达到MySQL真正batchUpdate效果，需要有以下几个条件：</p>
<ul>
<li>需要在jdbcUrl后添加参数rewriteBatchedStatements&#x3D;true</li>
<li>this.batchHasPlainStatements 为false</li>
<li>如果是update \ delete 语句，还需要mysql版本&gt;&#x3D;4.1.0，并且batch的数量&gt;3</li>
</ul>
<p>因此，如果可能的情况下，请在jdbcUrl后添加参数rewriteBatchedStatements&#x3D;true，尽可能利用上MySQL给我们提供的便利，提高性能。</p>
<blockquote>
<p>结尾ENDING:还是着重强调一下SQL方言为MySQL，这里只是针对MySQL的性能细究，请注意一下数据库！！！</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>JDBC</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel保姆级教程(2)</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(2)/</url>
    <content><![CDATA[<blockquote>
<p>上文详细介绍了<code>easyExcel</code>的优点以及相关的读操作，通过这些案例你会发现，阿里巴巴的<code>easyExcel</code>真的对POI做了大量的封装和优化，同时让我们开发者使用也变得那么的so easy，那么今天博猪就紧着介绍一下<code>easyExcel</code>相关的写操作，看完这些案例就会发现Excel的处理也不是那么头疼了。</p>
</blockquote>
<h1 id="Excel操作-写"><a href="#Excel操作-写" class="headerlink" title="Excel操作-写"></a>Excel操作-写</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><blockquote>
<p>创建导出数据，我们默认用一个私有方法代替。</p>
<p>生成文件为了方便查看，博猪统一放在<code>C:\Users\$&#123;userName&#125;</code>目录下；</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 生成模拟数据</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> createNum   创建数量</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> List&lt;SimpleWriteEntity&gt; <span class="hljs-title function_">createData</span><span class="hljs-params">(<span class="hljs-type">int</span> createNum)</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; createNum; i++) &#123;<br>        <span class="hljs-type">SimpleWriteEntity</span> <span class="hljs-variable">entity</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleWriteEntity</span>();<br>        entity.setTitle(<span class="hljs-string">&quot;标题&quot;</span> + i);<br>        entity.setDateTitle(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        entity.setNumberTitle(random.nextDouble());<br>        list.add(entity);<br>    &#125;<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="简单写"><a href="#简单写" class="headerlink" title="简单写"></a>简单写</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleWriteEntity</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-meta">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 忽略这个字段</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-keyword">private</span> String ignoreFiled;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最简单的写</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleWrite</span><span class="hljs-params">()</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; data = createData(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;simpleWrite&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 写法1：</span><br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    <span class="hljs-comment">// 如果这里想使用03 则 传入excelType参数即可</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(data);<br><br>    <span class="hljs-comment">//写法2</span><br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        excelWriter.write(data, writeSheet);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class="hljs-keyword">if</span> (excelWriter != <span class="hljs-literal">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="根据参数只导出指定列"><a href="#根据参数只导出指定列" class="headerlink" title="根据参数只导出指定列"></a>根据参数只导出指定列</h2><h3 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 根据参数只导出指定列</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 根据自己或者排除自己需要的列</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接写即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.1.1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteByParams</span><span class="hljs-params">()</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; data = createData(<span class="hljs-number">10</span>);<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;writeByParams&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br><br>    <span class="hljs-comment">// 根据用户传入字段 假设我们要忽略 date</span><br>    Set&lt;String&gt; excludeColumnFiledNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    excludeColumnFiledNames.add(<span class="hljs-string">&quot;dateTitle&quot;</span>);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).excludeColumnFiledNames(excludeColumnFiledNames).sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            .doWrite(data);<br><br>    <span class="hljs-comment">// 根据用户传入字段 假设我们只要导出 date</span><br>    Set&lt;String&gt; includeColumnFiledNames = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;String&gt;();<br>    includeColumnFiledNames.add(<span class="hljs-string">&quot;dateTitle&quot;</span>);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).includeColumnFiledNames(includeColumnFiledNames).sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            .doWrite(data);<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="指定写入的列"><a href="#指定写入的列" class="headerlink" title="指定写入的列"></a>指定写入的列</h2><h3 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteByAnnotationEntity</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(value = &quot;字符串标题&quot;, index = 0)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(value = &quot;日期标题&quot;, index = 1)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里设置3 会导致第二列空的</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;数字标题&quot;, index = 3)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 指定写入的列</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> WriteByAnnotationEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;注解指定写入的列</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteByAnnotation</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteByAnnotation&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, WriteByAnnotationEntity.class).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="复杂头写入"><a href="#复杂头写入" class="headerlink" title="复杂头写入"></a>复杂头写入</h2><h3 id="对象-2"><a href="#对象-2" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComplexHeadEntity</span> &#123;<br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;字符串标题&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;日期标题&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-meta">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;数字标题&quot;&#125;)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 复杂头写入</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> ComplexHeadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteComplexHead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteComplexHead&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    EasyExcel.write(file, ComplexHeadEntity.class).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="同一个对象数据写到同一个Sheet"><a href="#同一个对象数据写到同一个Sheet" class="headerlink" title="同一个对象数据写到同一个Sheet"></a>同一个对象数据写到同一个Sheet</h2><h3 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重复多次写入-写到同一个sheet</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接调用二次写入即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testWriteManyDataToOneSheet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteManyDataToOneSheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这里 需要指定写用哪个class去写</span><br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class="hljs-comment">// 这里注意 如果同一个sheet只要创建一次</span><br>        <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(<span class="hljs-string">&quot;模板&quot;</span>).build();<br>        <span class="hljs-comment">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class="hljs-number">10</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class="hljs-keyword">if</span> (excelWriter != <span class="hljs-literal">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="同一个对象数据写到不同sheet"><a href="#同一个对象数据写到不同sheet" class="headerlink" title="同一个对象数据写到不同sheet"></a>同一个对象数据写到不同sheet</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重复多次写入-写到不同的sheet 同一个对象</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接调用二次写入即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteManyDataToManySheet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteManyDataToManySheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这里 指定文件</span><br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class="hljs-comment">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来。这里最终会写到5个sheet里面</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">// 每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样</span><br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(i, <span class="hljs-string">&quot;模板&quot;</span> + i).build();<br>            <span class="hljs-comment">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class="hljs-number">10</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class="hljs-keyword">if</span> (excelWriter != <span class="hljs-literal">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="不同对象写到不同sheet中"><a href="#不同对象写到不同sheet中" class="headerlink" title="不同对象写到不同sheet中"></a>不同对象写到不同sheet中</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重复多次写入-写到不同的sheet 不同的对象</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接调用二次写入即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteManyDataAndManySheet</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteManyDataAndManySheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-type">ExcelWriter</span> <span class="hljs-variable">excelWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 这里 指定文件</span><br>        excelWriter = EasyExcel.write(file).build();<br>        <span class="hljs-comment">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来。这里最终会写到5个sheet里面</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-comment">/**每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样。</span><br><span class="hljs-comment">             * 这里注意&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;.class 可以每次都变，我这里为了方便 所以用的同一个class 实际上可以一直变</span><br><span class="hljs-comment">              */</span><br>            <span class="hljs-type">WriteSheet</span> <span class="hljs-variable">writeSheet</span> <span class="hljs-operator">=</span> EasyExcel.writerSheet(i, <span class="hljs-string">&quot;模板&quot;</span> + i).head(SimpleWriteEntity.class).build();<br>            <span class="hljs-comment">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class="hljs-number">5</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class="hljs-keyword">if</span> (excelWriter != <span class="hljs-literal">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="日期、数字或者自定义格式转换"><a href="#日期、数字或者自定义格式转换" class="headerlink" title="日期、数字或者自定义格式转换"></a>日期、数字或者自定义格式转换</h2><h3 id="对象-3"><a href="#对象-3" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CoverDataWriteEntity</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我想所有的 字符串起前面加上&quot;自定义：&quot;三个字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(value = &quot;字符串标题&quot;, converter = CustomStringConverter.class)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我想写到excel 用年月日的格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我想写到excel 用百分比表示</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NumberFormat(&quot;#.##%&quot;)</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日期、数字或者自定义格式转换</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> CoverDataWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 使用&#123;<span class="hljs-doctag">@link</span> ExcelProperty&#125;配合使用注解&#123;<span class="hljs-doctag">@link</span> DateTimeFormat&#125;、&#123;<span class="hljs-doctag">@link</span> NumberFormat&#125;或者自定义注解</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteWithCovertData</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteWithCovertData&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, CoverDataWriteEntity.class).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(createData(<span class="hljs-number">10</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="图片导出"><a href="#图片导出" class="headerlink" title="图片导出"></a>图片导出</h2><h3 id="对象-4"><a href="#对象-4" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ContentRowHeight(100)</span><br><span class="hljs-meta">@ColumnWidth(100 / 8)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageWriteEntity</span> &#123;<br>    <span class="hljs-keyword">private</span> File file;<br>    <span class="hljs-keyword">private</span> InputStream inputStream;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果string类型 必须指定转换器，string默认转换成string</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(converter = StringImageConverter.class)</span><br>    <span class="hljs-keyword">private</span> String string;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] byteArray;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据url导出</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@since</span> 2.1.1</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> URL url;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 图片导出</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> ImageWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteImage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteImage&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 如果使用流 记得关闭</span><br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        List&lt;ImageWriteEntity&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ImageWriteEntity&gt;();<br>        <span class="hljs-type">ImageWriteEntity</span> <span class="hljs-variable">imageData</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageWriteEntity</span>();<br>        list.add(imageData);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">imagePath</span> <span class="hljs-operator">=</span> FileUtil.getPath() + <span class="hljs-string">&quot;image&quot;</span> + File.separator + <span class="hljs-string">&quot;img.jpg&quot;</span>;<br>        <span class="hljs-comment">// 放入五种类型的图片 实际使用只要选一种即可</span><br>        imageData.setByteArray(FileUtils.readFileToByteArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imagePath)));<br>        imageData.setFile(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imagePath));<br>        imageData.setString(imagePath);<br>        inputStream = FileUtils.openInputStream(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(imagePath));<br>        imageData.setInputStream(inputStream);<br>        imageData.setUrl(<span class="hljs-keyword">new</span> <span class="hljs-title class_">URL</span>(<br>                <span class="hljs-string">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F201610%2F05%2F20161005195151_rzGhS.thumb.400_0.jpeg&amp;refer=http%3A%2F%2Fc-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1625563170&amp;t=8d28f9633784ab21a52583629fcbac53&quot;</span>));<br>        EasyExcel.write(file, ImageWriteEntity.class).sheet().doWrite(list);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (inputStream != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="注解自定义样式"><a href="#注解自定义样式" class="headerlink" title="注解自定义样式"></a>注解自定义样式</h2><h3 id="对象-5"><a href="#对象-5" class="headerlink" title="对象"></a>对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-comment">// 头背景设置成红色 IndexedColors.RED.getIndex()</span><br><span class="hljs-meta">@HeadStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 10)</span><br><span class="hljs-comment">// 头字体设置成20</span><br><span class="hljs-meta">@HeadFontStyle(fontHeightInPoints = 20)</span><br><span class="hljs-comment">// 内容的背景设置成绿色 IndexedColors.GREEN.getIndex()</span><br><span class="hljs-meta">@ContentStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 17)</span><br><span class="hljs-comment">// 内容字体设置成20</span><br><span class="hljs-meta">@ContentFontStyle(fontHeightInPoints = 20)</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> SimpleWriteEntity</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Excel简单写实体类,通过注解写入样式</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/5/29 21:58</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleWriteWithStyleByAnnotationEntity</span> &#123;<br><br>    <span class="hljs-comment">// 字符串的头背景设置成粉红 IndexedColors.PINK.getIndex()</span><br>    <span class="hljs-meta">@HeadStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 14)</span><br>    <span class="hljs-comment">// 字符串的头字体设置成20</span><br>    <span class="hljs-meta">@HeadFontStyle(fontHeightInPoints = 30)</span><br>    <span class="hljs-comment">// 字符串的内容的背景设置成天蓝 IndexedColors.SKY_BLUE.getIndex()</span><br>    <span class="hljs-meta">@ContentStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 40)</span><br>    <span class="hljs-comment">// 字符串的内容字体设置成20</span><br>    <span class="hljs-meta">@ContentFontStyle(fontHeightInPoints = 30)</span><br><br>    <span class="hljs-meta">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-meta">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 忽略这个字段</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelIgnore</span><br>    <span class="hljs-keyword">private</span> String ignoreFiled;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解形式自定义样式</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteWithStyleByAnnotationEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接写即可</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@since</span> 2.2.0-beta1</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteWithStyleByAnnotation</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteWithStyleByAnnotation&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteWithStyleByAnnotationEntity.class).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="自定义样式"><a href="#自定义样式" class="headerlink" title="自定义样式"></a>自定义样式</h2><h3 id="测试代码-8"><a href="#测试代码-8" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义样式</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 创建一个style策略 并注册</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteWithStyleByCustom</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteWithStyleByCustom&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 头的策略</span><br>    <span class="hljs-type">WriteCellStyle</span> <span class="hljs-variable">headWriteCellStyle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteCellStyle</span>();<br>    <span class="hljs-comment">// 背景设置为红色</span><br>    headWriteCellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());<br>    <span class="hljs-type">WriteFont</span> <span class="hljs-variable">headWriteFont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteFont</span>();<br>    headWriteFont.setFontHeightInPoints((<span class="hljs-type">short</span>)<span class="hljs-number">20</span>);<br>    headWriteCellStyle.setWriteFont(headWriteFont);<br>    <span class="hljs-comment">// 内容的策略</span><br>    <span class="hljs-type">WriteCellStyle</span> <span class="hljs-variable">contentWriteCellStyle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteCellStyle</span>();<br>    <span class="hljs-comment">// 这里需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span><br>    contentWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);<br>    <span class="hljs-comment">// 背景绿色</span><br>    contentWriteCellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());<br>    <span class="hljs-type">WriteFont</span> <span class="hljs-variable">contentWriteFont</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteFont</span>();<br>    <span class="hljs-comment">// 字体大小</span><br>    contentWriteFont.setFontHeightInPoints((<span class="hljs-type">short</span>)<span class="hljs-number">20</span>);<br>    contentWriteCellStyle.setWriteFont(contentWriteFont);<br>    <span class="hljs-comment">// 这个策略是 头是头的样式 内容是内容的样式 其他的策略可以自己实现</span><br>    <span class="hljs-type">HorizontalCellStyleStrategy</span> <span class="hljs-variable">horizontalCellStyleStrategy</span> <span class="hljs-operator">=</span><br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">HorizontalCellStyleStrategy</span>(headWriteCellStyle, contentWriteCellStyle);<br><br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).registerWriteHandler(horizontalCellStyleStrategy).sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            .doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="动态头，实时生成头写入"><a href="#动态头，实时生成头写入" class="headerlink" title="动态头，实时生成头写入"></a>动态头，实时生成头写入</h2><h3 id="创建头数据"><a href="#创建头数据" class="headerlink" title="创建头数据"></a>创建头数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">head</span><span class="hljs-params">()</span> &#123;<br>    List&lt;List&lt;String&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>    List&lt;String&gt; head0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    head0.add(<span class="hljs-string">&quot;字符串&quot;</span> + System.currentTimeMillis());<br>    List&lt;String&gt; head1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    head1.add(<span class="hljs-string">&quot;数字&quot;</span> + System.currentTimeMillis());<br>    List&lt;String&gt; head2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    head2.add(<span class="hljs-string">&quot;日期&quot;</span> + System.currentTimeMillis());<br>    list.add(head0);<br>    list.add(head1);<br>    list.add(head2);<br>    <span class="hljs-keyword">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-9"><a href="#测试代码-9" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 动态头，实时生成头写入</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 思路是这样子的，先创建List&lt;String&gt;头格式的sheet仅仅写入头,然后通过table 不写入头的方式 去写入数据</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 然后写入table即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteByDynamicHead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteByDynamicHead&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    EasyExcel.write(file)<br>            <span class="hljs-comment">// 这里放入动态头</span><br>            .head(head()).sheet(<span class="hljs-string">&quot;模板&quot;</span>)<br>            <span class="hljs-comment">// 当然这里数据也可以用 List&lt;List&lt;String&gt;&gt; 去传入</span><br>            .doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="自定义拦截器"><a href="#自定义拦截器" class="headerlink" title="自定义拦截器"></a>自定义拦截器</h2><h3 id="创建Excel表拦截器"><a href="#创建Excel表拦截器" class="headerlink" title="创建Excel表拦截器"></a>创建Excel表拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> CustomCellWriteHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义拦截器。对第一行第一列的头超链接到:https://github.com/alibaba/easyexcel</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/6 17:40</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomCellWriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CellWriteHandler</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(CustomCellWriteHandler.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeCellCreate</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head</span><br><span class="hljs-params">            , Integer integer, Integer integer1, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellCreate</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell</span><br><span class="hljs-params">            , Head head, Integer integer, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellDataConverted</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData</span><br><span class="hljs-params">            , Cell cell, Head head, Integer integer, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterCellDispose</span><span class="hljs-params">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; list</span><br><span class="hljs-params">            , Cell cell, Head head, Integer integer, Boolean isHead)</span> &#123;<br>        <span class="hljs-comment">// 这里可以对cell进行任何操作</span><br>        LOGGER.info(<span class="hljs-string">&quot;第&#123;&#125;行，第&#123;&#125;列写入完成。&quot;</span>, cell.getRowIndex(), cell.getColumnIndex());<br>        <span class="hljs-keyword">if</span> (isHead &amp;&amp; cell.getColumnIndex() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">CreationHelper</span> <span class="hljs-variable">createHelper</span> <span class="hljs-operator">=</span> writeSheetHolder.getSheet().getWorkbook().getCreationHelper();<br>            <span class="hljs-type">Hyperlink</span> <span class="hljs-variable">hyperlink</span> <span class="hljs-operator">=</span> createHelper.createHyperlink(HyperlinkType.URL);<br>            hyperlink.setAddress(<span class="hljs-string">&quot;https://github.com/alibaba/easyexcel&quot;</span>);<br>            cell.setHyperlink(hyperlink);<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="创建ExcelSheet拦截器"><a href="#创建ExcelSheet拦截器" class="headerlink" title="创建ExcelSheet拦截器"></a>创建Excel<code>Sheet</code>拦截器</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> CustomSheetWriteHandler</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span>  自定义拦截器.对第一列第一行和第二行的数据新增下拉框，显示 测试1 测试2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/6 17:44</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CustomSheetWriteHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">SheetWriteHandler</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(CustomSheetWriteHandler.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">beforeSheetCreate</span><span class="hljs-params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">afterSheetCreate</span><span class="hljs-params">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;第&#123;&#125;个Sheet写入成功。&quot;</span>, writeSheetHolder.getSheetNo());<br>        <span class="hljs-comment">// 区间设置 第一列第一行和第二行的数据。由于第一行是头，所以第一、二行的数据实际上是第二三行</span><br>        <span class="hljs-type">CellRangeAddressList</span> <span class="hljs-variable">cellRangeAddressList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CellRangeAddressList</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-type">DataValidationHelper</span> <span class="hljs-variable">helper</span> <span class="hljs-operator">=</span> writeSheetHolder.getSheet().getDataValidationHelper();<br>        <span class="hljs-type">DataValidationConstraint</span> <span class="hljs-variable">constraint</span> <span class="hljs-operator">=</span> helper.createExplicitListConstraint(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[] &#123;<span class="hljs-string">&quot;测试1&quot;</span>, <span class="hljs-string">&quot;测试2&quot;</span>&#125;);<br>        <span class="hljs-type">DataValidation</span> <span class="hljs-variable">dataValidation</span> <span class="hljs-operator">=</span> helper.createValidation(constraint, cellRangeAddressList);<br>        writeSheetHolder.getSheet().addValidationData(dataValidation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试代码-10"><a href="#测试代码-10" class="headerlink" title="测试代码"></a>测试代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 下拉，超链接等自定义拦截器（上面几点都不符合但是要对单元格进行操作的参照这个）</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * demo这里实现2点。</span><br><span class="hljs-comment"> * 1. 对第一行第一列的头超链接到:https://github.com/alibaba/easyexcel</span><br><span class="hljs-comment"> * 2. 对第一列第一行和第二行的数据新增下拉框，显示 测试1 测试2</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleWriteEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 注册拦截器 &#123;<span class="hljs-doctag">@link</span> CustomCellWriteHandler&#125; &#123;<span class="hljs-doctag">@link</span> CustomSheetWriteHandler&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 直接写即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testWriteByCustomHandler</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> FileUtil.readUserHomeFile(<span class="hljs-string">&quot;WriteByCustomHandler&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class="hljs-comment">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).registerWriteHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomSheetWriteHandler</span>())<br>            .registerWriteHandler(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CustomCellWriteHandler</span>()).sheet(<span class="hljs-string">&quot;模板&quot;</span>).doWrite(createData(<span class="hljs-number">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>POI</category>
      </categories>
      <tags>
        <tag>POI</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(3)-服务治理</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(3)-%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86/</url>
    <content><![CDATA[<h1 id="服务治理介绍"><a href="#服务治理介绍" class="headerlink" title="服务治理介绍"></a>服务治理介绍</h1><p>先来思考一个问题<br>通过上一章的操作，我们已经可以实现微服务之间的调用。但是我们把服务提供者的网络地址（ip，端口）等硬编码到了代码中，这种做法存在许多问题：</p>
<ul>
<li>一旦服务提供者地址变化，就需要手工修改代码</li>
<li>一旦是多个服务提供者，无法实现负载均衡功能</li>
<li>一旦服务变得越来越多，人工维护调用关系困难</li>
</ul>
<p><strong>那么应该怎么解决呢， 这时候就需要通过注册中心动态的实现服务治理。</strong></p>
<h2 id="什么是服务治理"><a href="#什么是服务治理" class="headerlink" title="什么是服务治理"></a>什么是服务治理</h2><p>服务治理是微服务架构中最核心最基本的模块。用于实现各个微服务的自动化注册与发现。</p>
<ul>
<li>服务注册：在服务治理框架中，都会构建一个注册中心，每个服务单元向注册中心登记自己提供服务的详细信息。并在注册中心形成一张服务的清单，服务注册中心需要以心跳的方式去监测清单中的服务是否可用，如果不可用，需要在服务清单中剔除不可用的服务。</li>
<li>服务发现：服务调用方向服务注册中心咨询服务，并获取所有服务的实例清单，实现对具体服务实<br>例的访问。</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/03/RRd8Ag.jpg" alt="RRd8Ag.jpg"><a href="https://imgtu.com/i/RRd8Ag">https://imgtu.com/i/RRd8Ag</a></p>
<p>通过上面的调用图会发现，除了微服务，还有一个组件是服务注册中心，它是微服务架构非常重要的一个组件，在微服务架构里主要起到了协调者的一个作用。注册中心一般包含如下几个功能：</p>
<ul>
<li><p>服务发现：</p>
<ul>
<li>服务注册：保存服务提供者和服务调用者的信息</li>
<li>服务订阅：服务调用者订阅服务提供者的信息，注册中心向订阅者推送提供者的信息</li>
</ul>
</li>
<li><p>服务配置：</p>
<ul>
<li>配置订阅：服务提供者和服务调用者订阅微服务相关的配置</li>
<li>配置下发：主动将配置推送给服务提供者和服务调用者</li>
</ul>
</li>
<li><p>服务健康检测</p>
<ul>
<li>检测服务提供者的健康情况，如果发现异常，执行服务剔除</li>
</ul>
</li>
</ul>
<h2 id="常见的注册中心"><a href="#常见的注册中心" class="headerlink" title="常见的注册中心"></a>常见的注册中心</h2><ul>
<li><p>Zookeeper<br>zookeeper是一个分布式服务框架，是Apache Hadoop 的一个子项目，它主要是用来解决分布式应用中经常遇到的一些数据管理问题，如：统一命名服务、状态同步服务、集群管理、分布式应用配置项的管理等。</p>
</li>
<li><p>Eureka<br>Eureka是Springcloud Netflix中的重要组件，主要作用就是做服务注册和发现。但是现在已经闭源</p>
</li>
<li><p>Consul</p>
<p>Consul是基于GO语言开发的开源工具，主要面向分布式，服务化的系统提供服务注册、服务发现和配置管理的功能。Consul的功能都很实用，其中包括：服务注册&#x2F;发现、健康检查、Key&#x2F;Value存储、多数据中心和分布式一致性保证等特性。Consul本身只是一个二进制的可执行文件，所以安装和部署都非常简单，只需要从官网下载后，在执行对应的启动脚本即可。</p>
</li>
<li><p>Nacos</p>
<p>Nacos是一个更易于构建云原生应用的动态服务发现、配置管理和服务管理平台。它是 SpringCloud Alibaba 组件之一，负责服务注册发现和服务配置，可以这样认为nacos&#x3D;eureka+config。</p>
</li>
</ul>
<h2 id="nacos简介"><a href="#nacos简介" class="headerlink" title="nacos简介"></a>nacos简介</h2><p>Nacos 致力于帮助您发现、配置和管理微服务。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。从上面的介绍就可以看出，nacos的作用就是一个注册中心，用来管理注册上来的各个微服务。</p>
<h2 id="nacos实战入门"><a href="#nacos实战入门" class="headerlink" title="nacos实战入门"></a>nacos实战入门</h2><blockquote>
<p>本篇只讲解windows安装运行，Linux安装部署请参考博猪Docker系列中的docker安装部署Nacos.</p>
</blockquote>
<p>接下来，我们就在现有的环境中加入nacos，并将我们的两个微服务注册上去。</p>
<h3 id="搭建nacos环境"><a href="#搭建nacos环境" class="headerlink" title="搭建nacos环境"></a>搭建nacos环境</h3><ul>
<li>安装nacos</li>
</ul>
<blockquote>
<p>下载地址: <a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a><br>下载zip格式的安装包，然后进行解压缩操作</p>
</blockquote>
<ul>
<li>启动nacos</li>
</ul>
<blockquote>
<p>切换目录</p>
<p>cd nacos&#x2F;bin</p>
<p>命令启动</p>
<p>startup.cmd -m standalone</p>
</blockquote>
<ul>
<li>访问nacos</li>
</ul>
<blockquote>
<p>打开浏览器输入<a href="http://localhost:8848/nacos%EF%BC%8C%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%EF%BC%8C">http://localhost:8848/nacos，即可访问服务，</a> 默认密码是nacos&#x2F;nacos</p>
</blockquote>
<h3 id="注册微服务"><a href="#注册微服务" class="headerlink" title="注册微服务"></a>注册微服务</h3><ul>
<li>在pom.xml中添加nacos的依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>开启服务发现注解，在项目引导类<code>ProductApplication</code>上增加<code>@EnableDiscoveryClient</code>注解</li>
<li>添加注册中心配置</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cloud:</span><br>  <span class="hljs-attr">nacos:</span><br>    <span class="hljs-attr">discovery:</span><br>      <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span> <span class="hljs-comment"># 注册中心nacos服务端地址及端口</span><br>      <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span> <span class="hljs-comment"># 命名空间，方便管理</span><br></code></pre></td></tr></table></figure>

<ul>
<li>启动服务， 观察nacos的控制面板中是否有注册上来的微服务</li>
</ul>
<h2 id="服务调用"><a href="#服务调用" class="headerlink" title="服务调用"></a>服务调用</h2><ul>
<li>修改订单Controller</li>
<li>增加<code>服务发现</code>api和常量:</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">NACOS</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;nacos&quot;</span>;<br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br></code></pre></td></tr></table></figure>

<ul>
<li>增加私有方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过服务发现接口</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pId    产品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductByDiscoveryClient</span><span class="hljs-params">(Integer pId)</span> &#123;<br>    List&lt;ServiceInstance&gt; productInstances = discoveryClient.getInstances(<span class="hljs-string">&quot;shop-product&quot;</span>);<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(productInstances)) &#123;<br>        log.error(<span class="hljs-string">&quot;产品服务为空！&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">defaultServiceInstance</span> <span class="hljs-operator">=</span> productInstances.get(<span class="hljs-number">0</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> defaultServiceInstance.getHost();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> defaultServiceInstance.getPort();<br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;/product/info/&quot;</span> + pId, Product.class);<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>修改保存订单方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存指定产品订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/save/&#123;pId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId, <span class="hljs-meta">@RequestParam(name = &quot;queryType&quot;)</span> String queryType)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 通过restTemplate调用商品微服务</span><br>    <span class="hljs-keyword">if</span> (REST_TEMPLATE.equals(queryType)) &#123;<br>        product = queryProductByRestTemplate(pId);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (NACOS.equals(queryType)) &#123;<br>        product = queryProductByDiscoveryClient(pId);<br>    &#125;<br><br>    log.info(<span class="hljs-string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));<br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setUId(<span class="hljs-number">1</span>);<br>    order.setUserName(<span class="hljs-string">&quot;测试用户&quot;</span>);<br>    order.setPId(product.getPId());<br>    order.setPName(product.getPName());<br>    order.setPPrice(product.getPPrice());<br>    order.setNumber(<span class="hljs-number">1</span>);<br>    orderService.saveOrder(order);<br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>DiscoveryClient是专门负责服务注册和发现的，我们可以通过它获取到注册到注册中心的所有服务。</p>
</blockquote>
<ul>
<li>启动测试</li>
</ul>
<p>启动服务， 观察nacos的控制面板中是否有注册上来的订单微服务，然后通过访问消费者服务验证调用是否成功</p>
<p><img src="https://z3.ax1x.com/2021/07/05/R5qdHA.png" alt="R5qdHA.png"><a href="https://imgtu.com/i/R5qdHA">https://imgtu.com/i/R5qdHA</a></p>
<h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><h2 id="什么是负载均衡"><a href="#什么是负载均衡" class="headerlink" title="什么是负载均衡"></a>什么是负载均衡</h2><blockquote>
<p>通俗的讲， 负载均衡就是将负载（工作任务，访问请求）进行分摊到多个操作单元（服务器,组件）上进行执行。<br>根据负载均衡发生位置的不同,一般分为服务端负载均衡和客户端负载均衡。<br>服务端负载均衡指的是发生在服务提供者一方,比如常见的<code>Nginx</code>负载均衡<br>而客户端负载均衡指的是发生在服务请求的一方，也就是在发送请求之前已经选好了由哪个实例处理请求。</p>
</blockquote>
<p><img src="https://z3.ax1x.com/2021/07/05/R5LFDH.png" alt="R5LFDH.png"><a href="https://imgtu.com/i/R5LFDH">https://imgtu.com/i/R5LFDH</a></p>
<p>我们在微服务调用关系中一般会选择客户端负载均衡，也就是在服务调用的一方来决定服务由哪个提供者执行。</p>
<h2 id="自定义实现负载均衡"><a href="#自定义实现负载均衡" class="headerlink" title="自定义实现负载均衡"></a>自定义实现负载均衡</h2><ul>
<li>通过idea再启动一个 shop-product 微服务，设置其端口为8082</li>
<li>通过nacos查看微服务的启动情况</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/05/R5xV91.png" alt="R5xV91.png"><a href="https://imgtu.com/i/R5xV91">https://imgtu.com/i/R5xV91</a></p>
<ul>
<li>修改 <code>shop-order</code> 的代码，实现负载均衡</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">    * 通过服务发现接口</span><br><span class="hljs-comment">    *</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@param</span> pId   产品id</span><br><span class="hljs-comment">    * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">    */</span><br>   <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductByDiscoveryClient</span><span class="hljs-params">(Integer pId)</span> &#123;<br>       List&lt;ServiceInstance&gt; productInstances = discoveryClient.getInstances(<span class="hljs-string">&quot;shop-product&quot;</span>);<br>       <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(productInstances)) &#123;<br>           log.error(<span class="hljs-string">&quot;产品服务为空！&quot;</span>);<br>       &#125;<br>       <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt(productInstances.size());<br>       <span class="hljs-type">ServiceInstance</span> <span class="hljs-variable">defaultServiceInstance</span> <span class="hljs-operator">=</span> productInstances.get(index);<br>       <span class="hljs-type">String</span> <span class="hljs-variable">host</span> <span class="hljs-operator">=</span> defaultServiceInstance.getHost();<br>       <span class="hljs-type">int</span> <span class="hljs-variable">port</span> <span class="hljs-operator">=</span> defaultServiceInstance.getPort();<br>       <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;http://&quot;</span> + host + <span class="hljs-string">&quot;:&quot;</span> + port + <span class="hljs-string">&quot;/product/info/&quot;</span> + pId;<br>       log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;从nacos中获取到的微服务地址为:&quot;</span> + url);<br><br>       <span class="hljs-keyword">return</span> restTemplate.getForObject(url, Product.class);<br>   &#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>启动两个服务提供者和一个服务消费者，多访问几次消费者测试效果</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/11/W9yfHO.png" alt="W9yfHO.png"><a href="https://imgtu.com/i/W9yfHO">https://imgtu.com/i/W9yfHO</a></p>
<blockquote>
<p>从上述图片我们可以看出我们自定义的负载均衡存在一下几点情况：</p>
<ul>
<li>对业务代码侵入性太高；</li>
<li>请求具有不确定性；</li>
<li>请求分发策略单一，更改难度较大</li>
</ul>
<p>对于以上问题，SpringCloud 已经为我们提供了一个解决方案：<code>Ribbon</code></p>
</blockquote>
<h2 id="基于Ribbon实现负载均衡"><a href="#基于Ribbon实现负载均衡" class="headerlink" title="基于Ribbon实现负载均衡"></a>基于Ribbon实现负载均衡</h2><blockquote>
<p>Ribbon是Spring Cloud的一个组件， 它可以让我们使用一个注解就能轻松的搞定负载均衡</p>
</blockquote>
<ul>
<li>在RestTemplate 的生成方法上添加@LoadBalanced注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@LoadBalanced</span><br><span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>增加负载均衡调用算法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * RestTemplate   负载均衡风格查询</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pId    产品id</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductLoadBalancingByRibbon</span><span class="hljs-params">(Integer pId)</span> &#123;<br>    <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://shop-product/product/info/&quot;</span> + pId, Product.class);<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>修改下单方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">RIBBON</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ribbon&quot;</span>;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存指定产品订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/save/&#123;pId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId, <span class="hljs-meta">@RequestParam(name = &quot;queryType&quot;)</span> String queryType)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 通过restTemplate调用商品微服务</span><br>    <span class="hljs-keyword">if</span> (REST_TEMPLATE.equals(queryType)) &#123;<br>        product = queryProductByRestTemplate(pId);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (NACOS.equals(queryType)) &#123;<br>        product = queryProductByDiscoveryClient(pId);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (RIBBON.equals(queryType)) &#123;<br>        product = queryProductLoadBalancingByRibbon(pId);<br>    &#125;<br><br>    log.info(<span class="hljs-string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));<br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setUId(<span class="hljs-number">1</span>);<br>    order.setUserName(<span class="hljs-string">&quot;测试用户&quot;</span>);<br>    order.setPId(product.getPId());<br>    order.setPName(product.getPName());<br>    order.setPPrice(product.getPPrice());<br>    order.setNumber(<span class="hljs-number">1</span>);<br>    orderService.saveOrder(order);<br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Ribbon支持的负载均衡策略：<br>Ribbon内置了多种负载均衡策略,内部负载均衡的顶级接口为<code>com.netflix.loadbalancer.IRule</code> , 具体的负载策略如下图所示:</p>
<table>
<thead>
<tr>
<th>策略名</th>
<th>策略描述</th>
<th>实现说明</th>
</tr>
</thead>
<tbody><tr>
<td>BestAvailableRule</td>
<td>选择一个最小的并发请求的server</td>
<td>逐个考察Server，如果Server被 tripped了，则忽略，在选择其中 ActiveRequestsCount最小的server</td>
</tr>
<tr>
<td>AvailabilityFilteringRule</td>
<td>过滤掉那些因为一直 连接失败的被标记为 circuit tripped的后 端server，并过滤掉 那些高并发的的后端 server（active connections 超过配 置的阈值）</td>
<td>使用一个AvailabilityPredicate来包含 过滤server的逻辑，其实就就是检查 status里记录的各个server的运行状 态</td>
</tr>
<tr>
<td>WeightedResponseTimeRule</td>
<td>根据相应时间分配一 个weight，相应时 间越长，weight越 小，被选中的可能性 越低。</td>
<td>一个后台线程定期的从status里面读 取评价响应时间，为每个server计算 一个weight。Weight的计算也比较简 单responsetime 减去每个server自己 平均的responsetime是server的权 重。当刚开始运行，没有形成statas 时，使用roubine策略选择server。</td>
</tr>
<tr>
<td>RetryRule</td>
<td>对选定的负载均衡策略机上重试机制。</td>
<td>在一个配置时间段内当选择server不成功，则一直尝试使用subRule的方式选择一个可用的server</td>
</tr>
<tr>
<td>RoundRobinRule</td>
<td>轮询方式轮询选server</td>
<td>轮询index，选择index对应位置的server</td>
</tr>
<tr>
<td>RandomRule</td>
<td>随机选择一个server</td>
<td>在index上随机，选择index对应位置的server</td>
</tr>
<tr>
<td>ZoneAvoidanceRule</td>
<td>复合判断server所在区域的性能和server的可用性选择server</td>
<td>使用ZoneAvoidancePredicate和AvailabilityPredicate来判断是否选择某个server，前一个判断判定一个zone的运行性能是否可用，剔除不可用的zone（的所有server），AvailabilityPredicate用于过滤掉连接数过多的Server。</td>
</tr>
</tbody></table>
<p>我们可以通过修改配置来调整Ribbon的负载均衡策略，具体代码如下:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">shop-product:</span> <span class="hljs-comment"># 调用的提供者的名称</span><br>  <span class="hljs-attr">ribbon:</span><br>    <span class="hljs-attr">NFLoadBalancerRuleClassName:</span> <span class="hljs-string">com.netflix.loadbalancer.RandomRule</span><br></code></pre></td></tr></table></figure>

<h2 id="基于Feign实现服务调用"><a href="#基于Feign实现服务调用" class="headerlink" title="基于Feign实现服务调用"></a>基于Feign实现服务调用</h2><h3 id="什么是Feign"><a href="#什么是Feign" class="headerlink" title="什么是Feign"></a>什么是Feign</h3><p>Feign是Spring Cloud提供的一个声明式的伪Http客户端， 它使得调用远程服务就像调用本地服务一样简单， 只需要创建一个接口并添加一个注解即可。<br>Nacos很好的兼容了Feign， Feign默认集成了 Ribbon， 所以在Nacos下使用Fegin默认就实现了负载均衡的效果。</p>
<h3 id="Feign的使用"><a href="#Feign的使用" class="headerlink" title="Feign的使用"></a>Feign的使用</h3><h4 id="创建新的模块shop-product-api"><a href="#创建新的模块shop-product-api" class="headerlink" title="创建新的模块shop-product-api"></a>创建新的模块<code>shop-product-api</code></h4><blockquote>
<p>在这里博猪说一下博猪单独创建这个模块的意义或者好处在哪里。博猪也在项目初始化的时候说明了博猪特别不喜欢甚至讨厌所有的Java对象放在common模块里面，但是刚开始用着挺爽的，但是后期项目规模增大后，对象直接的影响或者说带给我们的干扰也挺多的，所以我习惯把feign相关对外提供的接口单独定义，并且字段相关尽量简化，因为feign底层也是http请求，所以尽可能减少http之间的请求时长。</p>
</blockquote>
<h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--fegin组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="创建feign接口返回对象"><a href="#创建feign接口返回对象" class="headerlink" title="创建feign接口返回对象"></a>创建feign接口返回对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductVO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><br>   <span class="hljs-comment">/** 主键 */</span><br>   <span class="hljs-keyword">private</span> Integer pId;<br>   <span class="hljs-comment">/** 商品名称 */</span><br>   <span class="hljs-keyword">private</span> String pName;<br>   <span class="hljs-comment">/** 商品价格 */</span><br>   <span class="hljs-keyword">private</span> Double pPrice;<br>   <span class="hljs-comment">/** 库存 */</span><br>   <span class="hljs-keyword">private</span> Integer stock;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="创建Feign接口"><a href="#创建Feign接口" class="headerlink" title="创建Feign接口"></a>创建Feign接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClient</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(name = &quot;shop-product&quot;,fallback = ProductFeignClientFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_FALLBACK_MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;服务不可用！&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据产品id查询产品详情</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> productId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/queryProductInfoByProductId/&#123;productId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">queryProductInfoByProductId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer productId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="创建FeignFallback"><a href="#创建FeignFallback" class="headerlink" title="创建FeignFallback"></a>创建FeignFallback</h4><blockquote>
<p>接口调用异常，会默认跳转到此方法中，在这个方法中可做业务相关处理，比如增加日志等，方便开发和运维排查处理问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClientFallback</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductFeignClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">queryProductInfoByProductId</span><span class="hljs-params">(Integer productId)</span> &#123;<br>        System.out.println(DEFAULT_FALLBACK_MSG);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="修改shop-product模块"><a href="#修改shop-product模块" class="headerlink" title="修改shop-product模块"></a>修改<code>shop-product</code>模块</h4><h5 id="增加依赖"><a href="#增加依赖" class="headerlink" title="增加依赖"></a>增加依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-product-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h5 id="开启Feign，在shop-order启动类中增加一下注释："><a href="#开启Feign，在shop-order启动类中增加一下注释：" class="headerlink" title="开启Feign，在shop-order启动类中增加一下注释："></a>开启Feign，在<code>shop-order</code>启动类中增加一下注释：</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients</span><br></code></pre></td></tr></table></figure>

<h5 id="创建Feign接口实现"><a href="#创建Feign接口实现" class="headerlink" title="创建Feign接口实现"></a>创建Feign接口实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClientImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 产品feign接口的实现</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:41</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductFeignClientImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductService productService;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">queryProductInfoByProductId</span><span class="hljs-params">(Integer productId)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.queryById(productId);<br>        log.info(<span class="hljs-string">&quot;查询到商品:&quot;</span> + JSON.toJSONString(product));<br>        <span class="hljs-keyword">if</span> (product != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ProductVO</span>();<br>            BeanUtils.copyProperties(product, productVO);<br>            <span class="hljs-keyword">return</span> productVO;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="修改shop-order模块"><a href="#修改shop-order模块" class="headerlink" title="修改shop-order模块"></a>修改<code>shop-order</code>模块</h4><h5 id="去掉shop-product依赖，增加shop-product-api、Feign依赖"><a href="#去掉shop-product依赖，增加shop-product-api、Feign依赖" class="headerlink" title="去掉shop-product依赖，增加shop-product-api、Feign依赖"></a>去掉<code>shop-product</code>依赖，增加<code>shop-product-api</code>、Feign依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-product-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br> <span class="hljs-comment">&lt;!--fegin组件--&gt;</span><br> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>      <br></code></pre></td></tr></table></figure>

<h5 id="修改shop-order启动引导类，增加feign扫描"><a href="#修改shop-order启动引导类，增加feign扫描" class="headerlink" title="修改shop-order启动引导类，增加feign扫描"></a>修改<code>shop-order</code>启动引导类，增加feign扫描</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableFeignClients(basePackages = &quot;com.letcoding.product&quot;)</span><br></code></pre></td></tr></table></figure>

<h5 id="修改OrderController"><a href="#修改OrderController" class="headerlink" title="修改OrderController"></a>修改<code>OrderController</code></h5><ul>
<li>添加产品feign接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> ProductFeignClient productFeignClient;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">FEIGN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;feign&quot;</span>;<br></code></pre></td></tr></table></figure>

<ul>
<li>增加feign接口相关实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">   * RestTemplate   负载均衡风格查询</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@param</span> pId    产品id</span><br><span class="hljs-comment">   * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">   */</span><br>  <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductLoadBalancingByFeign</span><span class="hljs-params">(Integer pId)</span> &#123;<br>      <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> productFeignClient.queryProductInfoByProductId(pId);<br>      <span class="hljs-keyword">if</span> (productVO != <span class="hljs-literal">null</span>) &#123;<br>          <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>          BeanUtils.copyProperties(productVO, product);<br>          <span class="hljs-keyword">return</span> product;<br>      &#125;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>  &#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>修改订单保存方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 保存指定产品订单</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@GetMapping(&quot;/save/&#123;pId&#125;&quot;)</span><br><span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId, <span class="hljs-meta">@RequestParam(name = &quot;queryType&quot;)</span> String queryType)</span> &#123;<br>    log.info(<span class="hljs-string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);<br>    <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// 通过restTemplate调用商品微服务</span><br>    <span class="hljs-keyword">if</span> (FEIGN.equals(queryType)) &#123;<br>        product = queryProductLoadBalancingByFeign(pId);<br>    &#125;<br><br>    log.info(<span class="hljs-string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));<br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setUId(<span class="hljs-number">1</span>);<br>    order.setUserName(<span class="hljs-string">&quot;测试用户&quot;</span>);<br>    order.setPId(product.getPId());<br>    order.setPName(product.getPName());<br>    order.setPPrice(product.getPPrice());<br>    order.setNumber(<span class="hljs-number">1</span>);<br>    orderService.saveOrder(order);<br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="重启order微服务-查看效果"><a href="#重启order微服务-查看效果" class="headerlink" title="重启order微服务,查看效果"></a>重启order微服务,查看效果</h4>]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>EasyExcel保姆级教程(1)</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(1)/</url>
    <content><![CDATA[<h1 id="EasyExcel保姆级教程-1"><a href="#EasyExcel保姆级教程-1" class="headerlink" title="EasyExcel保姆级教程(1)"></a>EasyExcel保姆级教程(1)</h1><blockquote>
<p>由于博猪所在行业使用到关于Excel导入、导出的功能比较多，本文主要详细介绍一下博猪使用的阿里巴巴的<code>easyExcel</code>，让Excel相关操作没那么多烦恼。</p>
</blockquote>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="Excel的缺点"><a href="#Excel的缺点" class="headerlink" title="Excel的缺点"></a>Excel的缺点</h2><blockquote>
<p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到KB级别，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p>
</blockquote>
<ul>
<li><strong>Excel读写时候内存溢出</strong></li>
</ul>
<blockquote>
<p>虽然POI是目前使用最多的用来做excel解析的框架，但这个框架并不那么完美。大部分使用POI都是使用他的userModel模式。userModel的好处是上手容易使用简单，随便拷贝个代码跑一下，剩下就是写业务转换了，虽然转换也要写上百行代码，相对比较好理解。然而userModel模式最大的问题是在于非常大的内存消耗，一个几兆的文件解析要用掉上百兆的内存。现在很多应用采用这种模式，之所以还正常在跑一定是并发不大，并发上来后一定会OOM或者频繁的full gc</p>
</blockquote>
<ul>
<li><strong>其他开源框架使用复杂</strong></li>
</ul>
<blockquote>
<p>对POI有过深入了解的估计才知道原来POI还有SAX模式。但SAX模式相对比较复杂，excel有03和07两种版本，两个版本数据存储方式截然不同，sax解析方式也各不一样。想要了解清楚这两种解析方式，才去写代码测试，估计两天时间是需要的。再加上即使解析完，要转换到自己业务模型还要很多繁琐的代码。总体下来感觉至少需要三天，由于代码复杂，后续维护成本巨大。</p>
</blockquote>
<ul>
<li><strong>其他开源框架存在一些BUG修复不及时</strong></li>
</ul>
<h2 id="EasyExcel简介"><a href="#EasyExcel简介" class="headerlink" title="EasyExcel简介"></a>EasyExcel简介</h2><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p>
<blockquote>
<p>阿里巴巴GitHub地址：<a href="https://github.com/alibaba/easyexcel">Github</a></p>
</blockquote>
<h1 id="EasyExcelDemo"><a href="#EasyExcelDemo" class="headerlink" title="EasyExcelDemo"></a>EasyExcelDemo</h1><h2 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h2><ul>
<li>创建空的Maven项目</li>
<li>添加Maven依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--lombok插件 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- junit测试 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.75<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>新建<code>util</code>包，创建<code>FileUtil</code>工具类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileUtil</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取文件成输入流</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fileName   文件名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> InputStream <span class="hljs-title function_">getResourcesFileInputStream</span><span class="hljs-params">(String fileName)</span> &#123;<br>        <span class="hljs-keyword">return</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="hljs-string">&quot;&quot;</span> + fileName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取文件资源根路径，resource</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getPath</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> FileUtil.class.getResource(<span class="hljs-string">&quot;/&quot;</span>).getPath();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建resource下文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathName   路径名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">createNewFile</span><span class="hljs-params">(String pathName)</span> &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getPath() + pathName);<br>        <span class="hljs-keyword">if</span> (file.exists()) &#123;<br>            file.delete();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (!file.getParentFile().exists()) &#123;<br>                file.getParentFile().mkdirs();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> file;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathName    全路径文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">readFile</span><span class="hljs-params">(String pathName)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(getPath() + pathName);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取用户目录下面的文件</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pathName    全路径文件名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> File <span class="hljs-title function_">readUserHomeFile</span><span class="hljs-params">(String pathName)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + File.separator + pathName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Excel操作-读"><a href="#Excel操作-读" class="headerlink" title="Excel操作-读"></a>Excel操作-读</h2><blockquote>
<p>测试类相关常量如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">SUFFIX_EXCEL_FILE_TYPE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;.xlsx&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">READ_ROOT_RESOURCE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;read&quot;</span>;<br></code></pre></td></tr></table></figure>
</blockquote>
<h3 id="最简单的读"><a href="#最简单的读" class="headerlink" title="最简单的读"></a>最简单的读</h3><h4 id="excel示例"><a href="#excel示例" class="headerlink" title="excel示例"></a>excel示例</h4><p><img src="https://cdn.nlark.com/yuque/0/2020/png/553000/1584450793123-1fe49477-0609-4fd8-8ef8-0b907141486f.png#align=left&display=inline&height=229&originHeight=229&originWidth=332&size=0&status=done&style=none&width=332" alt="image"></p>
<h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationReadEntity</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数字标题</span><br><span class="hljs-comment">     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(index = 2)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleReadListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;SimpleReadEntity&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(SimpleReadListener.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    List&lt;SimpleReadEntity&gt; saveList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;SimpleReadEntity&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> EntityDao entityDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleReadListener</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class="hljs-built_in">this</span>.entityDao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityDao</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> demoDAO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleReadListener</span><span class="hljs-params">(EntityDao demoDAO)</span> &#123;<br>        <span class="hljs-built_in">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个每一条数据解析都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> simpleReadEntity</span><br><span class="hljs-comment">     *            one row value. Is is same as &#123;<span class="hljs-doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(SimpleReadEntity simpleReadEntity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSONObject.toJSONString(simpleReadEntity));<br>        saveList.add(simpleReadEntity);<br>        <span class="hljs-comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class="hljs-keyword">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class="hljs-comment">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有数据解析完成了 都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>       <span class="hljs-comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量保存方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchSave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class="hljs-string">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h4 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EntityDao</span>&lt;T&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(EntityDao.class);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchSave</span><span class="hljs-params">(List&lt;T&gt; list)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;EntityDao.batchSave:&#123;&#125;&quot;</span> + JSONObject.toJSONString(list));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 最简单的读</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleReadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> SimpleReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接读即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleRead1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><br>    <span class="hljs-comment">// 写法1：</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 简单度方式2</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleRead2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">excelReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName, SimpleReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).build();<br>        <span class="hljs-type">ReadSheet</span> <span class="hljs-variable">readSheet</span> <span class="hljs-operator">=</span> EasyExcel.readSheet(<span class="hljs-number">0</span>).build();<br>        excelReader.read(readSheet);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (excelReader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="根据注解读取"><a href="#根据注解读取" class="headerlink" title="根据注解读取"></a>根据注解读取</h3><h4 id="excel示例-1"><a href="#excel示例-1" class="headerlink" title="excel示例"></a>excel示例</h4><blockquote>
<p>参照：<a href="#e3mb9">excel示例</a></p>
</blockquote>
<h4 id="对象-1"><a href="#对象-1" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationReadEntity</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-meta">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class="hljs-keyword">private</span> Date dateTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 数字标题</span><br><span class="hljs-comment">     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(index = 2)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="监听器-1"><a href="#监听器-1" class="headerlink" title="监听器"></a>监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnnotationReadListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;AnnotationReadEntity&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(AnnotationReadListener.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    List&lt;AnnotationReadEntity&gt; saveList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;AnnotationReadEntity&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> EntityDao entityDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationReadListener</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class="hljs-built_in">this</span>.entityDao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityDao</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> demoDAO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AnnotationReadListener</span><span class="hljs-params">(EntityDao demoDAO)</span> &#123;<br>        <span class="hljs-built_in">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个每一条数据解析都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> entity</span><br><span class="hljs-comment">     *            one row value. Is is same as &#123;<span class="hljs-doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(AnnotationReadEntity entity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;解析到一条数据:&quot;</span>, entity);<br>        saveList.add(entity);<br>        <span class="hljs-comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class="hljs-keyword">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class="hljs-comment">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有数据解析完成了 都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>       <span class="hljs-comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量保存方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchSave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class="hljs-string">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<h4 id="测试代码-1"><a href="#测试代码-1" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 注解读取,与标题不匹配的名称可忽略</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testAnnotationRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;annotationRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">excelReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName, AnnotationReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnnotationReadListener</span>()).build();<br>        <span class="hljs-type">ReadSheet</span> <span class="hljs-variable">readSheet</span> <span class="hljs-operator">=</span> EasyExcel.readSheet(<span class="hljs-number">0</span>).build();<br>        excelReader.read(readSheet);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (excelReader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="读多个sheet"><a href="#读多个sheet" class="headerlink" title="读多个sheet"></a>读多个sheet</h3><h4 id="测试代码-2"><a href="#测试代码-2" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读多个或者全部sheet,这里注意一个sheet不能读取多次，多次读取需要重新读取文件</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleReadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> SimpleReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接读即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testRepeatedRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 读取全部sheet</span><br>    <span class="hljs-comment">// 这里需要注意 SimpleReadListener 的 doAfterAllAnalysed 会在每个sheet读取完毕后调用一次。然后所有sheet都会往同一个 SimpleReadListener 里面写</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).doReadAll();<br><br>    <span class="hljs-comment">// 读取部分sheet</span><br>    fileName = FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-type">ExcelReader</span> <span class="hljs-variable">excelReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName).build();<br><br>        <span class="hljs-comment">// 这里为了简单 所以注册了 同样的head 和Listener 自己使用功能必须不同的Listener</span><br>        <span class="hljs-type">ReadSheet</span> <span class="hljs-variable">readSheet1</span> <span class="hljs-operator">=</span><br>                EasyExcel.readSheet(<span class="hljs-number">0</span>).head(SimpleReadEntity.class).registerReadListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).build();<br>        <span class="hljs-type">ReadSheet</span> <span class="hljs-variable">readSheet2</span> <span class="hljs-operator">=</span><br>                EasyExcel.readSheet(<span class="hljs-number">1</span>).head(SimpleReadEntity.class).registerReadListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).build();<br>        <span class="hljs-comment">// 这里注意 一定要把sheet1 sheet2 一起传进去，不然有个问题就是03版的excel 会读取多次，浪费性能</span><br>        excelReader.read(readSheet1, readSheet2);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (excelReader != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="读取多行"><a href="#读取多行" class="headerlink" title="读取多行"></a>读取多行</h3><h4 id="测试代码-3"><a href="#测试代码-3" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 多行头</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleReadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> SimpleReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;3. 设置headRowNumber参数，然后读。 这里要注意headRowNumber如果不指定， 会根据你传入的class的&#123;<span class="hljs-doctag">@link</span> ExcelProperty#value()&#125;里面的表头的数量来决定行数，</span><br><span class="hljs-comment"> * 如果不传入class则默认为1.当然你指定了headRowNumber不管是否传入class都是以你传入的为准。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testManyHeaderRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).sheet()<br>            <span class="hljs-comment">// 这里可以设置1，因为头就是一行。如果多行头，可以设置其他值。不传入也可以，因为默认会根据DemoData 来解析，他没有指定头，也就是默认1行</span><br>            .headRowNumber(<span class="hljs-number">1</span>).doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="同步返回数据"><a href="#同步返回数据" class="headerlink" title="同步返回数据"></a>同步返回数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 同步的返回，不推荐使用，如果数据量大会把数据放到内存里面</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSyncResRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 同步读取会自动finish</span><br>    List&lt;SimpleReadEntity&gt; list = EasyExcel.read(fileName).head(SimpleReadEntity.class).sheet().doReadSync();<br>    <span class="hljs-keyword">for</span> (SimpleReadEntity data : list) &#123;<br>        System.out.println(<span class="hljs-string">&quot;读取到数据: &quot;</span> + JSON.toJSONString(data));<br>    &#125;<br>    <span class="hljs-comment">// 这里 也可以不指定class，返回一个list，然后读取第一个sheet 同步读取会自动finish</span><br>    List&lt;Map&lt;Integer, String&gt;&gt; listMap = EasyExcel.read(fileName).sheet().doReadSync();<br>    <span class="hljs-keyword">for</span> (Map&lt;Integer, String&gt; data : listMap) &#123;<br>        <span class="hljs-comment">// 返回每条数据的键值对 表示所在的列 和所在列的值</span><br>        System.out.println(JSON.toJSONString(data));<br>        System.out.println(<span class="hljs-string">&quot;读取到数据: &quot;</span> + JSON.toJSONString(data));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="读取表头数据"><a href="#读取表头数据" class="headerlink" title="读取表头数据"></a>读取表头数据</h3><h4 id="在SimpleReadListener监听器上增加方法"><a href="#在SimpleReadListener监听器上增加方法" class="headerlink" title="在SimpleReadListener监听器上增加方法"></a>在<code>SimpleReadListener</code>监听器上增加方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 这里会一行行的返回头</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> headMap</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeHeadMap</span><span class="hljs-params">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;<br>    LOGGER.info(<span class="hljs-string">&quot;解析到一条头数据:&#123;&#125;&quot;</span>, JSON.toJSONString(headMap));<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="测试代码-4"><a href="#测试代码-4" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取表头数据</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> SimpleReadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> SimpleReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接读即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHeaderRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h4 id="对象-2"><a href="#对象-2" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExceptionReadEntity</span> &#123;<br>    <span class="hljs-comment">/** 标题 */</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 用日期去接字符串 肯定报错</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> String dateTitle;<br>    <span class="hljs-comment">/** 数字标题 */</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="在SimpleReadListener监听器上增加方法-1"><a href="#在SimpleReadListener监听器上增加方法-1" class="headerlink" title="在SimpleReadListener监听器上增加方法"></a>在<code>SimpleReadListener</code>监听器上增加方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 在转换异常 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则 继续读取下一行。</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> exception</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> context</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@throws</span> Exception</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception exception, AnalysisContext context)</span>&#123;<br>    LOGGER.error(<span class="hljs-string">&quot;解析失败，但是继续解析下一行:&#123;&#125;&quot;</span>, exception.getMessage());<br>    <span class="hljs-comment">// 如果是某一个单元格的转换异常 能获取到具体行号</span><br>    <span class="hljs-comment">// 如果要获取头的信息 配合invokeHeadMap使用</span><br>    <span class="hljs-keyword">if</span> (exception <span class="hljs-keyword">instanceof</span> ExcelDataConvertException) &#123;<br>        <span class="hljs-type">ExcelDataConvertException</span> <span class="hljs-variable">excelDataConvertException</span> <span class="hljs-operator">=</span> (ExcelDataConvertException)exception;<br>        LOGGER.error(<span class="hljs-string">&quot;第&#123;&#125;行，第&#123;&#125;列解析异常&quot;</span>, excelDataConvertException.getRowIndex(),<br>                excelDataConvertException.getColumnIndex());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="测试代码-5"><a href="#测试代码-5" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 数据转换等异常处理</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> ExceptionReadEntity&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> SimpleReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 3. 直接读即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSimpleReadOnException</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, ExceptionReadEntity.class,<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试不创建对象的读取"><a href="#测试不创建对象的读取" class="headerlink" title="测试不创建对象的读取"></a>测试不创建对象的读取</h3><h4 id="监听器-2"><a href="#监听器-2" class="headerlink" title="监听器"></a>监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotCreateObjectReadListener</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(NotCreateObjectReadListener.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    List&lt;Map&lt;Integer, String&gt;&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Map&lt;Integer, String&gt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));<br>        list.add(data);<br>        <span class="hljs-keyword">if</span> (list.size() &gt;= BATCH_COUNT) &#123;<br>            saveData();<br>            list.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>        saveData();<br>        LOGGER.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 加上存储数据库</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">()</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());<br>        LOGGER.info(<span class="hljs-string">&quot;存储数据库成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="测试代码-6"><a href="#测试代码-6" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testNotCreateObjectRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 只要，然后读取第一个sheet 同步读取会自动finish</span><br>    EasyExcel.read(fileName, <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotCreateObjectReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h3><h4 id="对象-3"><a href="#对象-3" class="headerlink" title="对象"></a>对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Getter</span><br><span class="hljs-meta">@Setter</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConverterReadEntity</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我自定义 转换器，不管数据库传过来什么 。我给他加上“自定义：”</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@ExcelProperty(converter = CustomStringConverter.class)</span><br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这里用string 去接日期才能格式化。我想接收年月日格式</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span><br>    <span class="hljs-keyword">private</span> String dateTitle;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 我想接收百分比的数字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@NumberFormat(&quot;#.##%&quot;)</span><br>    <span class="hljs-keyword">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="监听器-3"><a href="#监听器-3" class="headerlink" title="监听器"></a>监听器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConverterReadListener</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AnalysisEventListener</span>&lt;ConverterReadEntity&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">LOGGER</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(ConverterReadListener.class);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BATCH_COUNT</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br>    List&lt;ConverterReadEntity&gt; saveList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ConverterReadEntity&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> EntityDao entityDao;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConverterReadListener</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class="hljs-built_in">this</span>.entityDao = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EntityDao</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> demoDAO</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ConverterReadListener</span><span class="hljs-params">(EntityDao demoDAO)</span> &#123;<br>        <span class="hljs-built_in">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这个每一条数据解析都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> entity</span><br><span class="hljs-comment">     *            one row value. Is is same as &#123;<span class="hljs-doctag">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invoke</span><span class="hljs-params">(ConverterReadEntity entity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class="hljs-string">&quot;解析到一条数据:&quot;</span>, entity);<br>        saveList.add(entity);<br>        <span class="hljs-comment">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class="hljs-keyword">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class="hljs-comment">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 所有数据解析完成了 都会来调用</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> analysisContext</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAfterAllAnalysed</span><span class="hljs-params">(AnalysisContext analysisContext)</span> &#123;<br>       <span class="hljs-comment">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class="hljs-string">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量保存方法</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batchSave</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class="hljs-string">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class="hljs-string">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="测试代码-7"><a href="#测试代码-7" class="headerlink" title="测试代码"></a>测试代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 日期、数字或者自定义格式转换</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * 默认读的转换器&#123;<span class="hljs-doctag">@link</span> DefaultConverterLoader#loadDefaultReadConverter()&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class="hljs-doctag">@link</span> ConverterReadEntity&#125;.里面可以使用注解&#123;<span class="hljs-doctag">@link</span> DateTimeFormat&#125;、&#123;<span class="hljs-doctag">@link</span> NumberFormat&#125;或者自定义注解</span><br><span class="hljs-comment"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class="hljs-doctag">@link</span> ConverterReadListener&#125;</span><br><span class="hljs-comment"> * &lt;p&gt;3. 直接读即可</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">testConvertRead</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class="hljs-string">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class="hljs-comment">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, ConverterReadEntity.class, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConverterReadListener</span>())<br>            <span class="hljs-comment">// 这里注意 我们也可以registerConverter来指定自定义转换器， 但是这个转换变成全局了， 所有java为string,excel为string的都会用这个转换器。</span><br>            <span class="hljs-comment">// 如果就想单个字段使用请使用@ExcelProperty 指定converter</span><br>            <span class="hljs-comment">// .registerConverter(new CustomStringStringConverter())</span><br>            <span class="hljs-comment">// 读取sheet</span><br>            .sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>POI</category>
      </categories>
      <tags>
        <tag>POI</tag>
        <tag>EasyExcel</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(2)-搭建项目</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(2)-%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="微服务环境搭建"><a href="#微服务环境搭建" class="headerlink" title="微服务环境搭建"></a>微服务环境搭建</h1><p>本次是使用的电商项目中的商品、订单、用户为案例进行学习。</p>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul>
<li><code>maven：3.6.x</code></li>
<li>数据库：<code>MySQL 5.8</code></li>
<li>持久层: <code>SpingData Jpa</code></li>
<li>其他:<code>​ SpringCloud Alibaba 技术栈</code></li>
</ul>
<h2 id="模块设计"><a href="#模块设计" class="headerlink" title="模块设计"></a>模块设计</h2><ul>
<li><strong>springcloud-alibaba 父工程</strong></li>
<li><strong>shop-common 公共模块【实体类】</strong></li>
<li><strong>shop-user 用户微服务 【端口: 807x】</strong></li>
<li><strong>shop-product 商品微服务 【端口: 808x】</strong></li>
<li><strong>shop-order 订单微服务 【端口: 809x】</strong></li>
</ul>
<p><img src="https://i.loli.net/2021/04/08/orFDAifgP3kntzb.png" alt="Snipaste_2021-04-08_16-06-55.png"></p>
<h2 id="微服务调用"><a href="#微服务调用" class="headerlink" title="微服务调用"></a>微服务调用</h2><p>在微服务架构中，最常见的场景就是微服务之间的相互调用。我们以电商系统中常见的用户下单为例来演示微服务的调用：客户向订单微服务发起一个下单的请求，在进行保存订单之前需要调用商品微服务查询商品的信息。</p>
<blockquote>
<p>我们一般把服务的主动调用方称为<strong>服务消费者</strong>，把服务的被调用方称为<strong>服务提供者</strong>。</p>
</blockquote>
<h2 id="父工程"><a href="#父工程" class="headerlink" title="父工程"></a>父工程</h2><p>创建一个maven工程，然后在<code>pom.xml</code>文件中添加下面内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springCloud-alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencyManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;spring-cloud-alibaba.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">type</span>&gt;</span>pom<span class="hljs-tag">&lt;/<span class="hljs-name">type</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>import<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencyManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p><a href="https://github.com/alibaba/spring-cloud-alibaba/wiki/%E7%89%88%E6%9C%AC%E8%AF%B4%E6%98%8E">官方版本说明</a></p>
</blockquote>
<h2 id="common模块"><a href="#common模块" class="headerlink" title="common模块"></a><code>common</code>模块</h2><blockquote>
<p>这里的<code>common</code>模块，按照博猪个人习惯是不会放DTO&#x2F;VO&#x2F;ENTITY这些对象的，这个项目案例中目前也没有特别复杂的逻辑，所以也不存放<code>util</code>，这里博猪为了后续方便暂时在<code>pom</code>文件中放一些公共的依赖。</p>
<p>公共依赖：</p>
<ul>
<li><code>JPA</code>的启动器</li>
<li><code>lombok</code></li>
<li>数据库连接驱动</li>
</ul>
<p><code>pom</code>依赖如下：</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springCloud-alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.56<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="用户模块"><a href="#用户模块" class="headerlink" title="用户模块"></a>用户模块</h2><h3 id="pom依赖"><a href="#pom依赖" class="headerlink" title="pom依赖"></a><code>pom</code>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springCloud-alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-user<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-product</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.56.120:3306/cloudAlibaba-demo?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">hibernate:</span><br>        <span class="hljs-attr">hbm2ddl:</span><br>          <span class="hljs-attr">auto:</span> <span class="hljs-string">update</span><br>        <span class="hljs-attr">dialect:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><br></code></pre></td></tr></table></figure>

<h3 id="启动器"><a href="#启动器" class="headerlink" title="启动器"></a>启动器</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> UserApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 用户启动类</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/4/8 17:19</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Company</span> 北京华焱坤泰科技有限公司</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(UserApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> User</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/4/9 12:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Company</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Entity(name = &quot;shop_user&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-comment">/** 主键 */</span><br>    <span class="hljs-keyword">private</span> Integer uId;<br>    <span class="hljs-comment">/** 用户名 */</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-comment">/** 密码 */</span><br>    <span class="hljs-keyword">private</span> String password;<br>    <span class="hljs-comment">/** 手机号 */</span><br>    <span class="hljs-keyword">private</span> String telePhone;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="数据仓储"><a href="#数据仓储" class="headerlink" title="数据仓储"></a>数据仓储</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> UserDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> UserDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:08</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;User,Integer&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="产品模块"><a href="#产品模块" class="headerlink" title="产品模块"></a>产品模块</h2><h3 id="pom依赖-1"><a href="#pom依赖-1" class="headerlink" title="pom依赖"></a><code>pom</code>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springCloud-alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-product<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="项目配置-1"><a href="#项目配置-1" class="headerlink" title="项目配置"></a>项目配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8081</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-product</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.56.120:3306/cloudAlibaba-demo?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">hibernate:</span><br>        <span class="hljs-attr">hbm2ddl:</span><br>          <span class="hljs-attr">auto:</span> <span class="hljs-string">update</span><br>        <span class="hljs-attr">dialect:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><br></code></pre></td></tr></table></figure>

<h3 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:13</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ProductApplication.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="实体类-1"><a href="#实体类-1" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> Product</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:16</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity(name = &quot;shop_product&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Product</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-comment">/** 主键 */</span><br>    <span class="hljs-keyword">private</span> Integer pId;<br>    <span class="hljs-comment">/** 商品名称 */</span><br>    <span class="hljs-keyword">private</span> String pName;<br>    <span class="hljs-comment">/** 商品价格 */</span><br>    <span class="hljs-keyword">private</span> Double pPrice;<br>    <span class="hljs-comment">/** 库存 */</span><br>    <span class="hljs-keyword">private</span> Integer stock;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="数据仓储-1"><a href="#数据仓储-1" class="headerlink" title="数据仓储"></a>数据仓储</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:27</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Product,Integer&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:28</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取指定pId的产品对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    Product <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer pId)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Service接口实现"><a href="#Service接口实现" class="headerlink" title="Service接口实现"></a>Service接口实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductServiceImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ProductService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductDao productDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">queryById</span><span class="hljs-params">(Integer pId)</span> &#123;<br>        Optional&lt;Product&gt; productOptional = productDao.findById(pId);<br>        <span class="hljs-keyword">if</span> (productOptional.isPresent()) &#123;<br>            <span class="hljs-keyword">return</span> productOptional.get();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:43</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/product&quot;)</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductService productService;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/info/&#123;pId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Product <span class="hljs-title function_">info</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId)</span> &#123;<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> productService.queryById(pId);<br>        log.info(<span class="hljs-string">&quot;查询到商品:&quot;</span> + JSON.toJSONString(product));<br>        <span class="hljs-keyword">return</span> product;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `shop_product`(`p_id`, `p_name`, `p_price`, `stock`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;小米&#x27;</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `shop_product`(`p_id`, `p_name`, `p_price`, `stock`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">2</span>, <span class="hljs-string">&#x27;华为&#x27;</span>, <span class="hljs-number">2000</span>, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `shop_product`(`p_id`, `p_name`, `p_price`, `stock`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;苹果&#x27;</span>, <span class="hljs-number">3000</span>, <span class="hljs-number">5000</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `shop_product`(`p_id`, `p_name`, `p_price`, `stock`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;OPPO&#x27;</span>, <span class="hljs-number">4000</span>, <span class="hljs-number">5000</span>);<br></code></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p><img src="https://ftp.bmp.ovh/imgs/2021/06/c342f7bc6c36c39a.png"></p>
<h2 id="订单模块"><a href="#订单模块" class="headerlink" title="订单模块"></a>订单模块</h2><h3 id="pom依赖-2"><a href="#pom依赖-2" class="headerlink" title="pom依赖"></a><code>pom</code>依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>springCloud-alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-order<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-common<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-product<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="项目配置-2"><a href="#项目配置-2" class="headerlink" title="项目配置"></a>项目配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-order</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">driver-class-name:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.56.120:3306/cloudAlibaba-demo?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>  <span class="hljs-attr">jpa:</span><br>    <span class="hljs-attr">properties:</span><br>      <span class="hljs-attr">hibernate:</span><br>        <span class="hljs-attr">hbm2ddl:</span><br>          <span class="hljs-attr">auto:</span> <span class="hljs-string">update</span><br>        <span class="hljs-attr">dialect:</span> <span class="hljs-string">org.hibernate.dialect.MySQL5InnoDBDialect</span><br></code></pre></td></tr></table></figure>

<h3 id="启动类-1"><a href="#启动类-1" class="headerlink" title="启动类"></a>启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> OrderApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(OrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="实体类-2"><a href="#实体类-2" class="headerlink" title="实体类"></a>实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> Order</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Entity(name = &quot;shop_order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span><br>    <span class="hljs-comment">/** 订单id */</span><br>    <span class="hljs-keyword">private</span> Long oId;<br>    <span class="hljs-comment">/** 用户id */</span><br>    <span class="hljs-keyword">private</span> Integer uId;<br>    <span class="hljs-comment">/** 用户名 */</span><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-comment">/** 商品id */</span><br>    <span class="hljs-keyword">private</span> Integer pId;<br>    <span class="hljs-comment">/** 商品名称 */</span><br>    <span class="hljs-keyword">private</span> String pName;<br>    <span class="hljs-comment">/** 商品单价 */</span><br>    <span class="hljs-keyword">private</span> Double pPrice;<br>    <span class="hljs-comment">/** 购买数量 */</span><br>    <span class="hljs-keyword">private</span> Integer number;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="数据仓储-2"><a href="#数据仓储-2" class="headerlink" title="数据仓储"></a>数据仓储</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> OrderDao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">JpaRepository</span>&lt;Order,Long&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Service接口-1"><a href="#Service接口-1" class="headerlink" title="Service接口"></a>Service接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> OrderService</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存订单对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> order</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(Order order)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Service接口实现-1"><a href="#Service接口实现-1" class="headerlink" title="Service接口实现"></a>Service接口实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> OrderServiceImpl</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 19:36</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">OrderService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderDao orderDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveOrder</span><span class="hljs-params">(Order order)</span> &#123;<br>        orderDao.save(order);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="实例配置"><a href="#实例配置" class="headerlink" title="实例配置"></a>实例配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> BeanConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 20:34</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanConfiguration</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> RestTemplate <span class="hljs-title function_">restTemplate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Controller-1"><a href="#Controller-1" class="headerlink" title="Controller"></a>Controller</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> OrderController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/6/20 20:35</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;/order&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderController</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">REST_TEMPLATE</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;restTemplate&quot;</span>;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> DiscoveryClient discoveryClient;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存指定产品订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/save/&#123;pId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId, <span class="hljs-meta">@RequestParam(name = &quot;queryType&quot;)</span> String queryType)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 通过restTemplate调用商品微服务</span><br>        <span class="hljs-keyword">if</span> (REST_TEMPLATE.equals(queryType)) &#123;<br>            product = queryProductByRestTemplate(pId);<br>        &#125; <br>        log.info(<span class="hljs-string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setUId(<span class="hljs-number">1</span>);<br>        order.setUserName(<span class="hljs-string">&quot;测试用户&quot;</span>);<br>        order.setPId(product.getPId());<br>        order.setPName(product.getPName());<br>        order.setPPrice(product.getPPrice());<br>        order.setNumber(<span class="hljs-number">1</span>);<br>        orderService.saveOrder(order);<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * RestTemplate风格查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pId    产品id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductByRestTemplate</span><span class="hljs-params">(Integer pId)</span> &#123;<br>        <span class="hljs-keyword">return</span> restTemplate.getForObject(<span class="hljs-string">&quot;http://localhost:8081/product/info/&quot;</span> + pId, Product.class);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>日志类库详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/%E6%97%A5%E5%BF%97%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="日志库简介"><a href="#日志库简介" class="headerlink" title="日志库简介"></a>日志库简介</h2><blockquote>
<p>我认为全面理解日志库需要从下面三个角度去理解：</p>
</blockquote>
<ul>
<li>最重要的一点是 区分<strong>日志系统</strong>和<strong>日志门面</strong>;</li>
<li>其次是日志库的使用, 包含配置与API使用；配置侧重于日志系统的配置，API使用侧重于日志门面；</li>
<li>最后是选型，改造和最佳实践等</li>
</ul>
<h1 id="日志系统与日志门面的区别"><a href="#日志系统与日志门面的区别" class="headerlink" title="日志系统与日志门面的区别"></a>日志系统与日志门面的区别</h1><p>日志系统和日志门面是两个不同的概念:</p>
<ol>
<li>日志系统(Logging System)是指用于生成和收集日志的整体技术方案和实现,比如 log4j、logback等。它负责日志的生成、收集、存储、查询等完整功能。</li>
<li>日志门面(Logging Facade)是在日志系统之上,提供一个简单、统一的日志接口,用来屏蔽不同日志系统API的差异。<br>其主要区别是:</li>
</ol>
<ul>
<li>日志系统负责完整的日志功能,而日志门面只是简化和统一接口。</li>
<li>开发人员面对的是日志门面,而日志系统在后台运行。</li>
<li>如果更换日志系统,只需要更换门面实现,对使用日志的代码无影响。</li>
<li>日志门面简化了日志使用,系统可轻松切换日志实现。</li>
</ul>
<p>所以日志系统是基础实现,日志门面提供简单统一的封装,作为开发人员的接口。日志门面屏蔽了不同系统的差异,使得切换日志系统对代码无影响。两者在日志功能支撑上的职责不同,日志门面建立在日志系统之上,为其提供友好的高级接口。</p>
<h1 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h1><h2 id="JUL-java-util-logging"><a href="#JUL-java-util-logging" class="headerlink" title="JUL(java.util.logging )"></a>JUL(java.util.logging )</h2><p>JDK1.4 开始，通过 java.util.logging 提供日志功能。虽然是官方自带的log lib，JUL的使用确不广泛。主要原因:</p>
<ul>
<li>JUL从JDK1.4 才开始加入(2002年)，当时各种第三方log lib已经被广泛使用了</li>
<li>JUL早期存在性能问题，到JDK1.5上才有了不错的进步，但现在和Logback&#x2F;Log4j2相比还是有所不如</li>
<li>JUL的功能不如Logback&#x2F;Log4j2等完善，比如Output Handler就没有Logback&#x2F;Log4j2的丰富，有时候需要自己来继承定制，又比如默认没有从ClassPath里加载配置文件的功能</li>
</ul>
<h2 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h2><p>Log4j 是 apache 的一个开源项目，创始人 Ceki Gulcu。Log4j 应该说是 Java 领域资格最老，应用最广的日志工具。Log4j 是高度可配置的，并可通过在运行时的外部文件配置。它根据记录的优先级别，并提供机制，以指示记录信息到许多的目的地，诸如：数据库，文件，控制台，UNIX 系统日志等。</p>
<p>Log4j 中有三个主要组成部分：</p>
<ul>
<li>loggers - 负责捕获记录信息。</li>
<li>appenders - 负责发布日志信息，以不同的首选目的地。</li>
<li>layouts - 负责格式化不同风格的日志信息。</li>
</ul>
<p>官网地址：<a href="http://logging.apache.org/log4j/2.x/">http://logging.apache.org/log4j/2.x/</a></p>
<p>Log4j 的短板在于性能，在Logback 和 Log4j2 出来之后，Log4j的使用也减少了。</p>
<h2 id="Logback"><a href="#Logback" class="headerlink" title="Logback"></a>Logback</h2><p>Logback 是由 log4j 创始人 Ceki Gulcu 设计的又一个开源日志组件，是作为 Log4j 的继承者来开发的，提供了性能更好的实现，异步 logger，Filter等更多的特性。</p>
<p>logback 当前分成三个模块：logback-core、logback-classic 和 logback-access。</p>
<ul>
<li>logback-core - 是其它两个模块的基础模块。</li>
<li>logback-classic - 是 log4j 的一个 改良版本。此外 logback-classic 完整实现 SLF4J API 使你可以很方便地更换成其它日志系统如 log4j 或 JDK14 Logging。</li>
<li>logback-access - 访问模块与 Servlet 容器集成提供通过 Http 来访问日志的功能。</li>
</ul>
<p>官网地址: <a href="http://logback.qos.ch/">http://logback.qos.ch/</a></p>
<h2 id="Log4j2"><a href="#Log4j2" class="headerlink" title="Log4j2"></a>Log4j2</h2><p>维护 Log4j 的人为了性能又搞出了 Log4j2。</p>
<p>Log4j2 和 Log4j1.x 并不兼容，设计上很大程度上模仿了 SLF4J&#x2F;Logback，性能上也获得了很大的提升。</p>
<p>Log4j2 也做了 Facade&#x2F;Implementation 分离的设计，分成了 log4j-api 和 log4j-core。</p>
<p>官网地址: <a href="http://logging.apache.org/log4j/2.x/">http://logging.apache.org/log4j/2.x/</a></p>
<h2 id="对比-Log4j-vs-Logback-vs-Log4j2"><a href="#对比-Log4j-vs-Logback-vs-Log4j2" class="headerlink" title="对比(Log4j vs Logback vs Log4j2)"></a>对比(Log4j vs Logback vs Log4j2)</h2><blockquote>
<p>从性能上Log4J2要强，但从生态上Logback+SLF4J优先</p>
</blockquote>
<h3 id="历史漫谈"><a href="#历史漫谈" class="headerlink" title="历史漫谈"></a>历史漫谈</h3><blockquote>
<p>logback和log4j2都宣称自己是log4j的后代，一个是出于同一个作者，另一个则是在名字上根正苗红。</p>
</blockquote>
<h3 id="简单对比"><a href="#简单对比" class="headerlink" title="简单对比"></a>简单对比</h3><ul>
<li>log4j2比logback更新<br>  log4j2的GA版在2014年底才推出，比logback晚了好几年，这期间log4j2确实吸收了slf4j和logback的一些优点（比如日志模板），同时应用了不少的新技术</li>
<li>由于采用了更先进的锁机制和LMAX Disruptor库，log4j2的性能优于logback，特别是在多线程环境下和使用异步日志的环境下</li>
<li>二者都支持Filter（应该说是log4j2借鉴了logback的Filter），能够实现灵活的日志记录规则（例如仅对一部分用户记录debug级别的日志）</li>
<li>二者都支持对配置文件的动态更新</li>
<li>二者都能够适配slf4j，logback与slf4j的适配应该会更好一些，毕竟省掉了一层适配库</li>
<li>logback能够自动压缩&#x2F;删除旧日志</li>
<li>logback提供了对日志的HTTP访问功能</li>
<li>log4j2实现了“无垃圾”和“低垃圾”模式。<br>  简单地说，log4j2在记录日志时，能够重用对象（如String等），尽可能避免实例化新的临时对象，减少因日志记录产生的垃圾对象，减少垃圾回收带来的性能下降</li>
<li>log4j2和logback各有长处，总体来说，如果对性能要求比较高的话，log4j2相对还是较优的选择。</li>
</ul>
<h3 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h3><blockquote>
<p>附上log4j2与logback性能对比的benchmark，这份benchmark是Apache Logging出的，有多大水分不知道，仅供参考</p>
</blockquote>
<p><a href="https://logging.apache.org/log4j/2.x/performance.html">官方benchmark</a></p>
<h1 id="日志门面"><a href="#日志门面" class="headerlink" title="日志门面"></a>日志门面</h1><h2 id="common-logging"><a href="#common-logging" class="headerlink" title="common-logging"></a>common-logging</h2><blockquote>
<p>common-logging 是 apache 的一个开源项目。也称Jakarta Commons Logging，缩写 JCL。</p>
</blockquote>
<p>common-logging 的功能是提供日志功能的 API 接口，本身并不提供日志的具体实现（当然，common-logging 内部有一个 Simple logger 的简单实现，但是功能很弱，直接忽略），而是在运行时动态的绑定日志实现组件来工作（如 log4j、java.util.loggin）。</p>
<p><a href="http://commons.apache.org/proper/commons-logging/">官网地址</a></p>
<h2 id="slf4j"><a href="#slf4j" class="headerlink" title="slf4j"></a>slf4j</h2><blockquote>
<p>全称为 Simple Logging Facade for Java，即 java 简单日志门面。</p>
</blockquote>
<p>很不凑巧，作者又是 Ceki Gulcu！这位大神写了 Log4j、Logback 和 slf4j，专注日志组件开发五百年，一直只能超越自己。</p>
<p>类似于 Common-Logging，slf4j 是对不同日志框架提供的一个 API 封装，可以在部署的时候不修改任何配置即可接入一种日志实现方案。但是，slf4j 在编译时静态绑定真正的 Log 库。使用 SLF4J 时，如果你需要使用某一种日志实现，那么你必须选择正确的 SLF4J 的 jar 包的集合（各种桥接包）。</p>
<p><a href="http://www.slf4j.org/">官网地址</a></p>
<p>官网各版本桥接包如下：</p>
<p><img src="https://s3.bmp.ovh/imgs/2023/07/18/b64bbdd30747ad98.png"></p>
<h2 id="对比-common-logging-vs-slf4j"><a href="#对比-common-logging-vs-slf4j" class="headerlink" title="对比( common-logging vs slf4j )"></a>对比( common-logging vs slf4j )</h2><blockquote>
<p>slf4j 库类似于 Apache Common-Logging。但是，他在编译时静态绑定真正的日志库。这点似乎很麻烦，其实也不过是导入桥接 jar 包而已。</p>
</blockquote>
<p>slf4j 一大亮点是提供了更方便的日志记录方式：</p>
<p>不需要使用logger.isDebugEnabled()来解决日志因为字符拼接产生的性能问题。slf4j 的方式是使用{}作为字符串替换符，形式如下：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><code class="hljs pgsql">logger.<span class="hljs-keyword">debug</span>(&quot;id: &#123;&#125;, name: &#123;&#125; &quot;, id, <span class="hljs-type">name</span>);<br></code></pre></td></tr></table></figure>

<h1 id="日志库使用方案"><a href="#日志库使用方案" class="headerlink" title="日志库使用方案"></a>日志库使用方案</h1><p>使用日志解决方案基本可分为三步：</p>
<ul>
<li>引入 jar 包</li>
<li>配置</li>
<li>使用 API</li>
</ul>
<p>常见的各种日志解决方案的第 2 步和第 3 步基本一样，实施上的差别主要在第 1 步，也就是使用不同的库。</p>
<h2 id="日志库jar包方案"><a href="#日志库jar包方案" class="headerlink" title="日志库jar包方案"></a>日志库jar包方案</h2><p>这里首选推荐使用 slf4j + logback 的组合。</p>
<p>如果你习惯了 common-logging，可以选择 common-logging+log4j。</p>
<p>强烈建议不要直接使用日志实现组件(logback、log4j、java.util.logging)，理由前面也说过，就是无法灵活替换日志库。</p>
<p>还有一种情况：你的老项目使用了 common-logging，或是直接使用日志实现组件。如果修改老的代码，工作量太大，需要兼容处理。在下文，都将看到各种应对方法。</p>
<blockquote>
<p>注： slf4j 不可以桥接到 common-logging，当前项目及使用的相关框架好像没有这种配置形式，当然这也不能代表绝对的关系。</p>
</blockquote>
<h3 id="slf4j-直接绑定日志组件"><a href="#slf4j-直接绑定日志组件" class="headerlink" title="slf4j 直接绑定日志组件"></a>slf4j 直接绑定日志组件</h3><h4 id="slf4j-logback"><a href="#slf4j-logback" class="headerlink" title="slf4j + logback"></a>slf4j + logback</h4><p>添加依赖到 pom.xml 中即可。</p>
<p>logback-classic-1.0.13.jar 会自动将 slf4j-api-1.7.21.jar 和 logback-core-1.0.13.jar 也添加到你的项目中。<br>当然你也可以显式的依赖一下这两个桥接包。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.13<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="slf4j-log4j"><a href="#slf4j-log4j" class="headerlink" title="slf4j + log4j"></a>slf4j + log4j</h4><p>添加依赖到 pom.xml 中即可。</p>
<p>slf4j-log4j12-1.7.21.jar 会自动将 slf4j-api-1.7.21.jar 和 log4j-1.2.17.jar 也添加到你的项目中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-log4j12<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="slf4j-java-util-logging-JUL"><a href="#slf4j-java-util-logging-JUL" class="headerlink" title="slf4j +  java.util.logging(JUL)"></a>slf4j +  java.util.logging(JUL)</h4><p>添加依赖到 pom.xml 中即可。</p>
<p>slf4j-jdk14-1.7.21.jar 会自动将 slf4j-api-1.7.21.jar 也添加到你的项目中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>slf4j-jdk14<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.21<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="slf4j-兼容非-slf4j-日志组件"><a href="#slf4j-兼容非-slf4j-日志组件" class="headerlink" title="slf4j 兼容非 slf4j 日志组件"></a>slf4j 兼容非 slf4j 日志组件</h3><p>在介绍解决方案前，先提一个概念——桥接</p>
<h4 id="什么是桥接呢"><a href="#什么是桥接呢" class="headerlink" title="什么是桥接呢"></a>什么是桥接呢</h4><p>假如你正在开发应用程序所调用的组件当中已经使用了 common-logging，这时你需要 jcl-over-slf4j.jar 把日志信息输出重定向到 slf4j-api，slf4j-api 再去调用 slf4j 实际依赖的日志组件。这个过程称为桥接。下图是官方的 slf4j 桥接策略图：<br><img src="https://s3.bmp.ovh/imgs/2023/07/18/2cf0a2b4dc6875d5.png"></p>
<p>从图中应该可以看出，无论你的老项目中使用的是 common-logging 或是直接使用 log4j、java.util.logging，都可以使用对应的桥接 jar 包来解决兼容问题。</p>
<h4 id="slf4j-兼容-common-logging"><a href="#slf4j-兼容-common-logging" class="headerlink" title="slf4j 兼容 common-logging"></a>slf4j 兼容 common-logging</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="slf4j-兼容-log4j"><a href="#slf4j-兼容-log4j" class="headerlink" title="slf4j 兼容 log4j"></a>slf4j 兼容 log4j</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>slf4j 兼容 java.util.logging</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jul-to-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.7.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="Spring-Framework-logging-框架演变"><a href="#Spring-Framework-logging-框架演变" class="headerlink" title="Spring Framework logging 框架演变"></a>Spring Framework logging 框架演变</h4><table>
<thead>
<tr>
<th>版本</th>
<th>日志门面</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td>1.x ~ 3.x</td>
<td>Commons Logging</td>
<td>Log4j</td>
</tr>
<tr>
<td>4.0+</td>
<td>JCL (Jakarta Commons Logging)</td>
<td>Log4j —&gt; Log4j2&#x2F;Logback</td>
</tr>
</tbody></table>
<h4 id="Spring-Boot-logging-框架演变"><a href="#Spring-Boot-logging-框架演变" class="headerlink" title="Spring Boot logging 框架演变"></a>Spring Boot logging 框架演变</h4><table>
<thead>
<tr>
<th>版本</th>
<th>日志门面</th>
<th>日志实现</th>
</tr>
</thead>
<tbody><tr>
<td>1.x</td>
<td>JCL</td>
<td>Logback</td>
</tr>
<tr>
<td>2.x</td>
<td></td>
<td>JCL Logback —&gt; Log4j2</td>
</tr>
</tbody></table>
<p>总结一下日志框架演变:</p>
<ul>
<li>Spring Framework从早期common-logging + log4j,到JCL桥接日志实现</li>
<li>Spring Boot直接使用JCL + logback,后支持切换到log4j2</li>
</ul>
<h4 id="common-logging-绑定日志组件"><a href="#common-logging-绑定日志组件" class="headerlink" title="common-logging 绑定日志组件"></a>common-logging 绑定日志组件</h4><ul>
<li>common-logging + log4j</li>
</ul>
<p>添加依赖到 pom.xml 中即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="日志库配置-针对于日志框架"><a href="#日志库配置-针对于日志框架" class="headerlink" title="日志库配置 - 针对于日志框架"></a>日志库配置 - 针对于日志框架</h2><h3 id="log4j2-配置"><a href="#log4j2-配置" class="headerlink" title="log4j2 配置"></a>log4j2 配置</h3><h4 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>;<br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span>&gt;</span>value<span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name2&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;value2&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">...</span> /&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appender</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">...</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appender</span>&gt;</span><br>    ...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name1&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;type&quot;</span> <span class="hljs-attr">...</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span><br>    ...<br>    <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;level&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;name&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="配置示例"><a href="#配置示例" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">strict</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;XMLConfigTest&quot;</span></span><br><span class="hljs-tag">               <span class="hljs-attr">packages</span>=<span class="hljs-string">&quot;org.apache.logging.log4j.test&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;filename&quot;</span>&gt;</span>target/test.log<span class="hljs-tag">&lt;/<span class="hljs-name">Property</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Properties</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ThresholdFilter&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;trace&quot;</span>/&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Appenders</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appender</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;PatternLayout&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%m MDC%X%n&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MarkerFilter&quot;</span> <span class="hljs-attr">marker</span>=<span class="hljs-string">&quot;FLOW&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MarkerFilter&quot;</span> <span class="hljs-attr">marker</span>=<span class="hljs-string">&quot;EXCEPTION&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appender</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FLOW&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;PatternLayout&quot;</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%C&#123;1&#125;.%M %m %ex%n&quot;</span>/&gt;</span><span class="hljs-comment">&lt;!-- class and line number --&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MarkerFilter&quot;</span> <span class="hljs-attr">marker</span>=<span class="hljs-string">&quot;FLOW&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;MarkerFilter&quot;</span> <span class="hljs-attr">marker</span>=<span class="hljs-string">&quot;EXCEPTION&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appender</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Appender</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;$&#123;filename&#125;&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Layout</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;PatternLayout&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d %p %C&#123;1.&#125; [%t] %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Layout</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Appender</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Appenders</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">Loggers</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.logging.log4j.test1&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">Filter</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;ThreadContextMapFilter&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">KeyValuePair</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;test&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">Filter</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">Logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.apache.logging.log4j.test2&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;debug&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;File&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Logger</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">Root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;trace&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">AppenderRef</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">Root</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">Loggers</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">Configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="logback-配置"><a href="#logback-配置" class="headerlink" title="logback 配置"></a>logback 配置</h3><h4 id="配置示例-1"><a href="#配置示例-1" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-comment">&lt;!-- logback中一共有5种有效级别，分别是TRACE、DEBUG、INFO、WARN、ERROR，优先级依次从低到高 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DIR_NAME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;spring-helloworld&quot;</span>/&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- 将记录日志打印到控制台 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- RollingFileAppender begin --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALL&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/all.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>30MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/error.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>ERROR<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/warn.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>WARN<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/info.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>INFO<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DEBUG&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/debug.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>DEBUG<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;TRACE&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/trace.%d&#123;yyyy-MM-dd&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">level</span>&gt;</span>TRACE<span class="hljs-tag">&lt;/<span class="hljs-name">level</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMatch</span>&gt;</span>ACCEPT<span class="hljs-tag">&lt;/<span class="hljs-name">onMatch</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">onMismatch</span>&gt;</span>DENY<span class="hljs-tag">&lt;/<span class="hljs-name">onMismatch</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;SPRING&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 根据时间来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;user.dir&#125;/logs/$&#123;DIR_NAME&#125;/springframework.%d&#123;yyyy-MM-dd&#125;.log<br>      <span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>30<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!-- 根据文件大小来制定滚动策略 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">triggeringPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>10MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">triggeringPolicy</span>&gt;</span><br> <br>    <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] [%-5p] %c&#123;36&#125;.%M - %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- RollingFileAppender end --&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- logger begin --&gt;</span><br>  <span class="hljs-comment">&lt;!-- 本项目的日志记录，分级打印 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.test&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;TRACE&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ERROR&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;WARN&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;INFO&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;TRACE&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- SPRING框架日志 --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;org.springframework&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;WARN&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;SPRING&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;TRACE&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ALL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- logger end --&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="log4j-配置"><a href="#log4j-配置" class="headerlink" title="log4j 配置"></a>log4j 配置</h3><h4 id="配置示例-2"><a href="#配置示例-2" class="headerlink" title="配置示例"></a>配置示例</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">log4j</span>:configuration <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;log4j.dtd&quot;</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">log4j:configuration</span> <span class="hljs-attr">xmlns:log4j</span>=<span class="hljs-string">&#x27;http://jakarta.apache.org/log4j/&#x27;</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;STDOUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.ConsoleAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS\&#125; [%-5p] [%t] %c&#123;36\&#125;.%M - %m%n&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br> <br>    <span class="hljs-comment">&lt;!--过滤器设置输出的级别--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.varia.LevelRangeFilter&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;levelMin&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;debug&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;levelMax&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;fatal&quot;</span>/&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;AcceptOnMatch&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ALL&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.DailyRollingFileAppender&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;File&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;user.dir&#125;/logs/spring-common/jcl/all&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Append&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每天重新生成日志文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;DatePattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;-&#x27;yyyy-MM-dd&#x27;.log&#x27;&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!-- 每小时重新生成日志文件 --&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;param name=&quot;DatePattern&quot; value=&quot;&#x27;-&#x27;yyyy-MM-dd-HH&#x27;.log&#x27;&quot;/&gt;--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;org.apache.log4j.PatternLayout&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">param</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;ConversionPattern&quot;</span></span><br><span class="hljs-tag">             <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss,SSS\&#125; [%-5p] [%t] %c&#123;36\&#125;.%M - %m%n&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- 指定logger的设置，additivity指示是否遵循缺省的继承机制--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.example.test&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;error&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;ALL&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br> <br>  <span class="hljs-comment">&lt;!-- 根logger的设置--&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">root</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">level</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;warn&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;STDOUT&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">log4j:configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="日志库API-针对于日志门面"><a href="#日志库API-针对于日志门面" class="headerlink" title="日志库API - 针对于日志门面"></a>日志库API - 针对于日志门面</h2><h4 id="slf4j-用法"><a href="#slf4j-用法" class="headerlink" title="slf4j 用法"></a>slf4j 用法</h4><p>使用 slf4j 的 API 很简单。使用LoggerFactory初始化一个Logger实例，然后调用 Logger 对应的打印等级函数就行了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">App</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(App.class);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;print log, current level: &#123;&#125;&quot;</span>;<br>        log.trace(msg, <span class="hljs-string">&quot;trace&quot;</span>);<br>        log.debug(msg, <span class="hljs-string">&quot;debug&quot;</span>);<br>        log.info(msg, <span class="hljs-string">&quot;info&quot;</span>);<br>        log.warn(msg, <span class="hljs-string">&quot;warn&quot;</span>);<br>        log.error(msg, <span class="hljs-string">&quot;error&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="common-logging-用法"><a href="#common-logging-用法" class="headerlink" title="common-logging 用法"></a>common-logging 用法</h4><p>common-logging 用法和 slf4j 几乎一样，但是支持的打印等级多了一个更高级别的：fatal。</p>
<p>此外，common-logging 不支持{}替换参数，你只能选择拼接字符串这种方式了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.apache.commons.logging.Log;<br><span class="hljs-keyword">import</span> org.apache.commons.logging.LogFactory;<br> <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JclTest</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Log</span> <span class="hljs-variable">log</span> <span class="hljs-operator">=</span> LogFactory.getLog(JclTest.class);<br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;print log, current level: &quot;</span>;<br>        log.trace(msg + <span class="hljs-string">&quot;trace&quot;</span>);<br>        log.debug(msg + <span class="hljs-string">&quot;debug&quot;</span>);<br>        log.info(msg + <span class="hljs-string">&quot;info&quot;</span>);<br>        log.warn(msg + <span class="hljs-string">&quot;warn&quot;</span>);<br>        log.error(msg + <span class="hljs-string">&quot;error&quot;</span>);<br>        log.fatal(msg + <span class="hljs-string">&quot;fatal&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h1 id="日志库选型与改造"><a href="#日志库选型与改造" class="headerlink" title="日志库选型与改造"></a>日志库选型与改造</h1><h2 id="对Java日志组件选型的建议"><a href="#对Java日志组件选型的建议" class="headerlink" title="对Java日志组件选型的建议"></a>对Java日志组件选型的建议</h2><p>slf4j已经成为了Java日志组件的明星选手，可以完美替代JCL，使用JCL桥接库也能完美兼容一切使用JCL作为日志门面的类库，现在的新系统已经没有不使用slf4j作为日志API的理由了。</p>
<p>日志记录服务方面，log4j在功能上输于logback和log4j2，在性能方面log4j2则全面超越log4j和logback。所以新系统应该在logback和log4j2中做出选择，对于性能有很高要求的系统，应优先考虑log4j2。</p>
<h2 id="对日志架构使用比较好的实践"><a href="#对日志架构使用比较好的实践" class="headerlink" title="对日志架构使用比较好的实践"></a>对日志架构使用比较好的实践</h2><h3 id="建议使用Log-Facade，而不是具体Log-Implementation"><a href="#建议使用Log-Facade，而不是具体Log-Implementation" class="headerlink" title="建议使用Log Facade，而不是具体Log Implementation"></a>建议使用Log Facade，而不是具体Log Implementation</h3><p>正如之前所说的，使用 Log Facade 可以方便的切换具体的日志实现。而且，如果依赖多个项目，使用了不同的Log Facade，还可以方便的通过 Adapter 转接到同一个实现上。如果依赖项目使用了多个不同的日志实现，就麻烦的多了。</p>
<p>具体来说，现在推荐使用 Log4j-API 或者 SLF4j，不推荐继续使用 JCL。</p>
<h3 id="尽量使用一个-Log-Implementation依赖"><a href="#尽量使用一个-Log-Implementation依赖" class="headerlink" title="尽量使用一个 Log Implementation依赖"></a>尽量使用一个 Log Implementation依赖</h3><p>毫无疑问，项目中应该只使用一个具体的 Log Implementation，建议使用 Logback 或者Log4j2。如果有依赖的项目中，使用的 Log Facade不支持直接使用当前的 Log Implementation，就添加合适的桥接器依赖。具体的桥接关系可以看上一篇文章的图。</p>
<h3 id="具体的日志实现依赖应该设置为optional和使用runtime-scope"><a href="#具体的日志实现依赖应该设置为optional和使用runtime-scope" class="headerlink" title="具体的日志实现依赖应该设置为optional和使用runtime scope"></a>具体的日志实现依赖应该设置为optional和使用runtime scope</h3><p>在项目中，Log Implementation的依赖强烈建议设置为runtime scope，并且设置为optional。<br>例如项目中使用了 SLF4J 作为 Log Facade，然后想使用 Log4j2 作为 Implementation，那么使用 maven 添加依赖的时候这样设置:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-slf4j-impl<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4j.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>设为optional，依赖不会传递，这样如果你是个lib项目，然后别的项目使用了你这个lib，不会被引入不想要的Log Implementation 依赖；</li>
<li>Scope设置为runtime，是为了防止开发人员在项目中直接使用Log Implementation中的类，而不适用Log Facade中的类。</li>
</ul>
<h3 id="如果有必要-排除依赖的第三方库中的Log-Impementation依赖"><a href="#如果有必要-排除依赖的第三方库中的Log-Impementation依赖" class="headerlink" title="如果有必要, 排除依赖的第三方库中的Log Impementation依赖"></a>如果有必要, 排除依赖的第三方库中的Log Impementation依赖</h3><p>这是很常见的一个问题，第三方库的开发者未必会把具体的日志实现或者桥接器的依赖设置为optional，然后你的项目继承了这些依赖——具体的日志实现未必是你想使用的，比如他依赖了Log4j，你想使用Logback，这时就很尴尬。另外，如果不同的第三方依赖使用了不同的桥接器和Log实现，也极容易形成环。</p>
<p>这种情况下，推荐的处理方法，是使用exclude来排除所有的这些Log实现和桥接器的依赖，只保留第三方库里面对Log Facade的依赖。</p>
<p>比如阿里的JStorm就没有很好的处理这个问题，依赖jstorm会引入对Logback和log4j-over-slf4j的依赖，如果你想在自己的项目中使用Log4j或其他Log实现的话，就需要加上excludes:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.jstorm<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jstorm-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-over-slf4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>ch.qos.logback<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>logback-classic<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="避免为不会输出的log付出代价"><a href="#避免为不会输出的log付出代价" class="headerlink" title="避免为不会输出的log付出代价"></a>避免为不会输出的log付出代价</h3><p>Log库都可以灵活的设置输出界别，所以每一条程序中的log，都是有可能不会被输出的。这时候要注意不要额外的付出代价。</p>
<p>先看两个有问题的写法：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">logger.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;start process request, url: &quot;</span> + url);<br>logger.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;receive request: &#123;&#125;&quot;</span>, toJson(request));<br></code></pre></td></tr></table></figure>

<ul>
<li>第一条是直接做了字符串拼接，所以即使日志级别高于debug也会做一个字符串连接操作；</li>
<li>第二条虽然用了SLF4J&#x2F;Log4j2 中的懒求值方式来避免不必要的字符串拼接开销，但是toJson()这个函数却是都会被调用并且开销更大。</li>
</ul>
<p>推荐的写法如下:</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">logger.debug(<span class="hljs-string">&quot;start process request, url:&#123;&#125;&quot;</span>, url); <span class="hljs-comment">// SLF4J/LOG4J2</span><br>logger.debug(<span class="hljs-string">&quot;receive request: &#123;&#125;&quot;</span>, <span class="hljs-literal">()</span> -&gt; <span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">request</span>)</span>); <span class="hljs-comment">// LOG4J2</span><br>logger.debug(<span class="hljs-literal">()</span> -&gt; <span class="hljs-string">&quot;receive request: &quot;</span> + <span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">request</span>)</span>); <span class="hljs-comment">// LOG4J2</span><br><span class="hljs-keyword">if</span> (logger.is<span class="hljs-constructor">DebugEnabled()</span>) &#123; <span class="hljs-comment">// SLF4J/LOG4J2</span><br>    logger.debug(<span class="hljs-string">&quot;receive request: &quot;</span> + <span class="hljs-keyword">to</span><span class="hljs-constructor">Json(<span class="hljs-params">request</span>)</span>); <br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="日志格式中最好不要使用行号，函数名等字段"><a href="#日志格式中最好不要使用行号，函数名等字段" class="headerlink" title="日志格式中最好不要使用行号，函数名等字段"></a>日志格式中最好不要使用行号，函数名等字段</h3><p>原因是，为了获取语句所在的函数名，或者行号，log库的实现都是获取当前的stacktrace，然后分析取出这些信息，而获取stacktrace的代价是很昂贵的。如果有很多的日志输出，就会占用大量的CPU。在没有特殊需要的情况下，建议不要在日志中输出这些这些字段。</p>
<p>最后， log中不要输出稀奇古怪的字符！</p>
<p>部分开发人员为了方便看到自己的log，会在log语句中加上醒目的前缀，比如:</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><code class="hljs routeros">logger.<span class="hljs-built_in">debug</span>(<span class="hljs-string">&quot;========================start process request=============&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>虽然对于自己来说是方便了，但是如果所有人都这样来做的话，那log输出就没法看了！正确的做法是使用grep 来看只自己关心的日志。</p>
<h2 id="对现有系统日志架构的改造建议"><a href="#对现有系统日志架构的改造建议" class="headerlink" title="对现有系统日志架构的改造建议"></a>对现有系统日志架构的改造建议</h2><pre><code class="hljs">如果现有系统使用JCL作为日志门面，又确实面临着JCL的ClassLoader机制带来的问题，完全可以引入slf4j并通过桥接库将JCL api输出的日志桥接至slf4j，再通过适配库适配至现有的日志输出服务（如log4j），如下图：
</code></pre>
<p><img src="https://s3.bmp.ovh/imgs/2023/07/19/fcdaf3e6c0588a46.png"></p>
<p>这样做不需要任何代码级的改造，就可以解决JCL的ClassLoader带来的问题，但没有办法享受日志模板等slf4j的api带来的优点。不过之后在现系统上开发的新功能就可以使用slf4j的api了，老代码也可以分批进行改造。</p>
<p>如果现有系统使用JCL作为日志门面，又头疼JCL不支持logback和log4j2等新的日志服务，也可以通过桥接库以slf4j替代JCL，但同样无法直接享受slf4j api的优点。</p>
<p>如果想要使用slf4j的api，那么就不得不进行代码改造了，当然改造也可以参考1中提到的方式逐步进行。</p>
<p>如果现系统面临着log4j的性能问题，可以使用Apache Logging提供的log4j到log4j2的桥接库log4j-1.2-api，把通过log4j api输出的日志桥接至log4j2。这样可以最快地使用上log4j2的先进性能，但组件中缺失了slf4j，对后续进行日志架构改造的灵活性有影响。另一种办法是先把log4j桥接至slf4j，再使用slf4j到log4j2的适配库。这样做稍微麻烦了一点，但可以逐步将系统中的日志输出标准化为使用slf4j的api，为后面的工作打好基础。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>日志类库详解</tag>
      </tags>
  </entry>
  <entry>
    <title>Aviator</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/Aviator/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote>
<p>最近项目业务中有关于价格计算的模块，项目用到这个东西，感觉很方便和灵活，特地看了一下官方文档。</p>
<p>官方文档地址如下：</p>
<p><a href="https://www.yuque.com/boyan-avfmj/aviatorscript">点击跳转官方最新文档地址</a></p>
<p>参照博客地址：</p>
<p><a href="https://www.cnblogs.com/csguo/p/7614893.html">博客地址</a></p>
</blockquote>
<h2 id="软件简介"><a href="#软件简介" class="headerlink" title="软件简介"></a>软件简介</h2><p><code>AviatorScript</code> 是一门高性能、轻量级寄宿于 JVM 之上的脚本语言。</p>
<blockquote>
<p>备注：版本5之前都叫<code>Aviator</code>, 5版本重大升级改名<code>​ AviatorScript</code>,详情请看官方文档介绍。</p>
</blockquote>
<p>Aviator是一个高性能、轻量级的java语言实现的表达式求值引擎，主要用于各种表达式的动态求值。现在已经有很多开源可用的java表达式求值引擎，为什么还需要Avaitor呢？</p>
<p>Aviator的设计目标是<strong>轻量级</strong>和<strong>高性能</strong> ，相比于Groovy、JRuby的笨重，Aviator非常小，加上依赖包也才450K,不算依赖包的话只有70K；当然，Aviator的语法是受限的，它不是一门完整的语言，而只是语言的一小部分集合。</p>
<p>其次，Aviator的实现思路与其他轻量级的求值器很不相同，其他求值器一般都是通过解释的方式运行，而Aviator则是直接将表达式<strong>编译成Java字节码</strong>，交给JVM去执行。简单来说，Aviator的定位是介于Groovy这样的重量级脚本语言和IKExpression这样的轻量级表达式引擎之间。</p>
<h2 id="特性介绍"><a href="#特性介绍" class="headerlink" title="特性介绍"></a>特性介绍</h2><p>Aviator的特性</p>
<ul>
<li>支持大部分运算操作符，包括算术操作符、关系运算符、逻辑操作符、正则匹配操作符(&#x3D;~)、三元表达式?: ，并且支持操作符的优先级和括号强制优先级，具体请看后面的操作符列表。</li>
<li>支持函数调用和自定义函数</li>
<li>支持正则表达式匹配，类似Ruby、Perl的匹配语法，并且支持类Ruby的$digit指向匹配分组。</li>
<li>自动类型转换，当执行操作的时候，会自动判断操作数类型并做相应转换，无法转换即抛异常。</li>
<li>支持传入变量，支持类似a.b.c的嵌套变量访问。</li>
<li>性能优秀</li>
</ul>
<p>Aviator的限制：</p>
<ul>
<li>没有if else、do while等语句，没有赋值语句，仅支持逻辑表达式、算术表达式、三元表达式和正则匹配。</li>
<li>没有位运算符</li>
</ul>
<blockquote>
<p>使用场景包括：</p>
</blockquote>
<ol>
<li>规则判断及规则引擎</li>
<li>公式计算</li>
<li>动态脚本控制</li>
<li>集合数据 ELT 等 ……</li>
</ol>
<h3 id="整体结构"><a href="#整体结构" class="headerlink" title="整体结构"></a>整体结构</h3><p>Aviator的结构非常简单，一个典型的求值器的结构</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201101215837.jpg" alt="img"></p>
<h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ul>
<li>创建一个空的Maven项目</li>
<li>导入以下依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--表达式求值引擎--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.googlecode.aviator<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>aviator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>5.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.12<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>compile<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="执行表达式"><a href="#执行表达式" class="headerlink" title="执行表达式"></a>执行表达式</h2><p>Aviator的使用都是集中通过com.googlecode.aviator.AviatorEvaluator这个入口类来处理，最简单的例子，执行一个计算1+2+3的表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 计算1+2+3</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test01</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Long) AviatorEvaluator.execute(<span class="hljs-string">&quot;1+2+3&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;result = &quot;</span> + result);<span class="hljs-comment">//6</span><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>细心的朋友肯定注意到结果是Long，而不是Integer。这是因为Aviator的数值类型仅支持Long和Double，任何整数都将转换成Long，任何浮点数都将转换为Double，包括用户传入的变量数值。这个例子的打印结果将是正确答案6。</p>
</blockquote>
<h2 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h2><p>想让Aviator对你say hello吗？很简单，传入你的名字，让Aviator负责字符串的相加：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 测试使用变量</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test02</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">yourName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;will&quot;</span>;<br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;yourName&quot;</span>, yourName);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) AviatorEvaluator.execute(<span class="hljs-string">&quot; &#x27;hello &#x27; + yourName &quot;</span>, env);<br>    System.out.println(result);<span class="hljs-comment">//hello will</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>上面的例子演示了怎么向表达式传入变量值，表达式中的yourname是一个变量，默认为null，通过传入Map&lt;String,Object&gt;的变量绑定环境，将yourname设置为你输入的名称。env的key是变量名，value是变量的值。</p>
<p>上面例子中的’hello ‘是一个Aviator的String，Aviator的String是任何用单引号或者双引号括起来的字符序列，String可以比较大小（基于unicode顺序），可以参与正则匹配，可以与任何对象相加，任何对象与String相加结果为String。String中也可以有转义字符，如&#x2F;n、&#x2F;&#x2F;、&#x2F;‘等。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AviatorEvaluator.execute(<span class="hljs-string">&quot; &#x27;a\\&quot;</span>b<span class="hljs-string">&#x27; &quot;);   //字符串 a&#x27;</span>b <br>AviatorEvaluator.execute(<span class="hljs-string">&quot; \\&quot;</span>a\\<span class="hljs-string">&quot;b &quot;</span>);  <span class="hljs-comment">//字符串 a&quot;b </span><br>AviatorEvaluator.execute(<span class="hljs-string">&quot; &#x27;hello&#x27; + 3 &quot;</span>);  <span class="hljs-comment">//字符串 hello 3 </span><br>AviatorEvaluator.execute(<span class="hljs-string">&quot; &#x27;hello &#x27;+ unknow &quot;</span>);  <span class="hljs-comment">//字符串 hello null</span><br></code></pre></td></tr></table></figure>

<h2 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h2><p>Aviator支持函数调用，函数调用的风格类似lua，下面的例子获取字符串的长度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AviatorEvaluator.execute(<span class="hljs-string">&quot;string.length(&#x27;hello&#x27;)&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>string.length(‘hello’)是一个函数调用，string.length是一个函数,’hello’是调用的参数。</p>
<p>再用string.substring来截取字符串：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">AviatorEvaluator.execute(<span class="hljs-string">&quot;string.contains(/&quot;</span>test/<span class="hljs-string">&quot;,string.substring(&#x27;hello&#x27;,1,2))&quot;</span>);<br></code></pre></td></tr></table></figure>

<p>通过string.substring(‘hello’,1,2)获取字符串’e’，然后通过函数string.contains判断e是否在’test’中。可以看到，函数可以嵌套调用。</p>
<p>完整代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 调用函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test03</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Long</span> <span class="hljs-variable">strLen</span> <span class="hljs-operator">=</span> (Long) AviatorEvaluator.execute(<span class="hljs-string">&quot;string.length(&#x27;hello will&#x27;)&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;strLen = &quot;</span> + strLen); <span class="hljs-comment">// 10</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">strContainsFlag</span> <span class="hljs-operator">=</span> (Boolean) AviatorEvaluator.execute(<span class="hljs-string">&quot;string.contains(&#x27;test&#x27;,string.substring(&#x27;hello&#x27;,1,2))&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;strContainsFlag = &quot;</span> + strContainsFlag);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>Aviator的内置函数列表请看后面。</p>
<h2 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h2><p>Aviator除了内置的函数之外，还允许用户自定义函数，只要实现com.googlecode.aviator.runtime.type.AviatorFunction接口，并注册到AviatorEvaluator即可使用。</p>
<p>接口信息如下：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201101213259.png"></p>
<p>可以看一个例子，我们实现一个add函数来做数值的相加：</p>
<ul>
<li>先创建一个类实现<code>AbstractFunction</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.demo.aviator;<br><br><span class="hljs-keyword">import</span> com.googlecode.aviator.runtime.function.AbstractFunction;<br><span class="hljs-keyword">import</span> com.googlecode.aviator.runtime.function.FunctionUtils;<br><span class="hljs-keyword">import</span> com.googlecode.aviator.runtime.type.AviatorDouble;<br><span class="hljs-keyword">import</span> com.googlecode.aviator.runtime.type.AviatorObject;<br><br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MyAddFunction</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义实现增加方法</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/1 8:05 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAddFunction</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractFunction</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> AviatorObject <span class="hljs-title function_">call</span><span class="hljs-params">(Map&lt;String, Object&gt; env,</span><br><span class="hljs-params">                              AviatorObject arg1, AviatorObject arg2)</span> &#123;<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> FunctionUtils.getNumberValue(arg1, env);<br>        <span class="hljs-type">Number</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> FunctionUtils.getNumberValue(arg2, env);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AviatorDouble</span>(left.doubleValue() + right.doubleValue());<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;add&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<ul>
<li>注册到AviatorEvaluator并调用如下：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用自定义函数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test04</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">//注册函数</span><br>    AviatorEvaluator.addFunction(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyAddFunction</span>());<br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot;add(1,2)&quot;</span>)); <span class="hljs-comment">//3.0</span><br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot;add(add(1,2),100)&quot;</span>)); <span class="hljs-comment">//103.0</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>注册函数通过AviatorEvaluator.addFunction方法，移除可以通过removeFunction。</p>
<h2 id="编译表达式"><a href="#编译表达式" class="headerlink" title="编译表达式"></a>编译表达式</h2><p>上面提到的例子都是直接执行表达式，事实上Aviator背后都帮你做了编译并执行的工作。你可以自己先编译表达式，返回一个编译的结果，然后传入不同的env来复用编译结果，提高性能，这是更推荐的使用方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用编译表达式</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test05</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a-(b-c)&gt;100&quot;</span>;<br>    <span class="hljs-comment">// 编译表达式</span><br>    <span class="hljs-type">Expression</span> <span class="hljs-variable">compiledExp</span> <span class="hljs-operator">=</span> AviatorEvaluator.compile(expression);<br><br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-number">100.3</span>);<br>    env.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-number">45</span>);<br>    env.put(<span class="hljs-string">&quot;c&quot;</span>, -<span class="hljs-number">199.100</span>);<br><br>    <span class="hljs-comment">// 执行表达式</span><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Boolean) compiledExp.execute(env);<br>    System.out.println(result);<span class="hljs-comment">//false</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过compile方法可以将表达式编译成Expression的中间对象，当要执行表达式的时候传入env并调用Expression的execute方法即可。表达式中使用了括号来强制优先级，这个例子还使用了&gt;用于比较数值大小，比较运算符!&#x3D;、&#x3D;&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;不仅可以用于数值，也可以用于String、Pattern、Boolean等等，甚至是任何用户传入的两个都实现了java.lang。Comparable接口的对象之间。</p>
<p>编译后的结果你可以自己缓存，也可以交给Aviator帮你缓存，AviatorEvaluator内部有一个全局的缓存池，如果你决定缓存编译结果，可以通过：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> Expression <span class="hljs-title">compile</span><span class="hljs-params">(<span class="hljs-type">String</span> expression, <span class="hljs-type">boolean</span> cached)</span></span><br></code></pre></td></tr></table></figure>

<p>将cached设置为true即可，那么下次编译同一个表达式的时候将直接返回上一次编译的结果。使缓存失效通过：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">invalidateCache</span><span class="hljs-params">(<span class="hljs-type">String</span> expression)</span></span><br></code></pre></td></tr></table></figure>

<p>这个方法。</p>
<h2 id="访问数组和集合"><a href="#访问数组和集合" class="headerlink" title="访问数组和集合"></a>访问数组和集合</h2><p>可以通过中括号去访问数组和java.util.List对象，可以通过map.key访问java.util.Map中key对应的value，一个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//操作数组</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test06</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">final</span> List&lt;String&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>    list.add(<span class="hljs-string">&quot;hello&quot;</span>);<br>    list.add(<span class="hljs-string">&quot; world&quot;</span>);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br>    array[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    array[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    array[<span class="hljs-number">2</span>] = <span class="hljs-number">3</span>;<br><br>    <span class="hljs-keyword">final</span> Map&lt;String, Date&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Date&gt;();<br>    map.put(<span class="hljs-string">&quot;date&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br><br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;list&quot;</span>, list);<br>    env.put(<span class="hljs-string">&quot;array&quot;</span>, array);<br>    env.put(<span class="hljs-string">&quot;map&quot;</span>, map);<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * hello world/array[0]+array[1]+array[2]=4</span><br><span class="hljs-comment">     *  today is Sun Nov 01 20:31:32 CST 2020</span><br><span class="hljs-comment">     */</span><br>    System.out.println(AviatorEvaluator.execute(<br>            <span class="hljs-string">&quot;list[0]+list[1]+&#x27;/array[0]+array[1]+array[2]=&#x27;+(array[0]+array[1]+array[2]) +&#x27; \n today is &#x27;+map.date &quot;</span>, env));<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="三元操作符"><a href="#三元操作符" class="headerlink" title="三元操作符"></a>三元操作符</h2><p>Aviator不提供if else语句，但是提供了三元操作符?:用于条件判断，使用上与java没有什么不同：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//三元运算符</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test07</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;<br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;a&quot;</span>, num);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (String) AviatorEvaluator.execute(<span class="hljs-string">&quot;a &gt; 0? &#x27;yes&#x27;:&#x27;no&#x27;&quot;</span>, env);<br>    System.out.println(result);<span class="hljs-comment">//yes</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>这个例子用来判断用户传入的数字是否是正整数，是的话打印yes。</p>
<p>Aviator的三元表达式对于两个分支的结果类型并不要求一致，可以是任何类型，这一点与java不同。</p>
<h2 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h2><p>Aviator支持类Ruby和Perl风格的表达式匹配运算，通过&#x3D;~操作符，如下面这个例子匹配email并提取用户名返回：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//正则表达式</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test08</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;will2020@qq.com&quot;</span>;<br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;email&quot;</span>, email);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">username</span> <span class="hljs-operator">=</span> (String) AviatorEvaluator.execute(<span class="hljs-string">&quot;email=~/([\\w0-8]+@\\w+[\\.\\w+]+)/ ? $1:&#x27;unknow&#x27;&quot;</span>, env);<br>    System.out.println(username);<span class="hljs-comment">//will2020@qq.com</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>email与正则表达式&#x2F;&#x2F;(&#x2F;&#x2F;w0-8+@&#x2F;&#x2F;w+&#x2F;&#x2F;.&#x2F;&#x2F;w++)&#x2F;通过&#x3D;~操作符来匹配，结果为一个Boolean类型，因此可以用于三元表达式判断，匹配成功的时候返回$1，指代正则表达式的分组1，也就是用户名，否则返回unknown。这个例子将打印killme2008这个用户名。</p>
<p>Aviator在表达式级别支持正则表达式，通过&#x2F;&#x2F;括起来的字符序列构成一个正则表达式，正则表达式可以用于匹配（作为&#x3D;~的右操作数)、比较大小，匹配仅能与字符串进行匹配。匹配成功后，Aviator会自动将匹配成功的分组放入$num的变量中，其中$0指代整个匹配的字符串，而$1表示第一个分组，以此类推。</p>
<p>Aviator的正则表达式规则跟Java完全一样，因为内部其实就是使用java.util.regex.Pattern做编译的。</p>
<h2 id="变量的语法糖衣"><a href="#变量的语法糖衣" class="headerlink" title="变量的语法糖衣"></a>变量的语法糖衣</h2><p>Aviator有个方便用户使用变量的语法糖衣，当你要访问变量a中的某个属性b，那么你可以通过a.b访问到，更进一步，a.b.c将访问变量a的b属性中的c属性值，推广开来也就是说Aviator可以将变量声明为嵌套访问的形式，一个例子，Foo类有属性i、f、date：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.demo.aviator;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Foo</span> &#123;<br>        <span class="hljs-type">int</span> i; <br>        <span class="hljs-type">float</span> f; <br>        <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Foo</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">float</span> f, Date date)</span> &#123; <br>            <span class="hljs-built_in">super</span>(); <br>            <span class="hljs-built_in">this</span>.i = i; <br>            <span class="hljs-built_in">this</span>.f = f; <br>            <span class="hljs-built_in">this</span>.date = date; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getI</span><span class="hljs-params">()</span> &#123; <br>            <span class="hljs-keyword">return</span> i; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setI</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123; <br>            <span class="hljs-built_in">this</span>.i = i; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-type">float</span> <span class="hljs-title function_">getF</span><span class="hljs-params">()</span> &#123; <br>            <span class="hljs-keyword">return</span> f; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setF</span><span class="hljs-params">(<span class="hljs-type">float</span> f)</span> &#123; <br>            <span class="hljs-built_in">this</span>.f = f; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> Date <span class="hljs-title function_">getDate</span><span class="hljs-params">()</span> &#123; <br>            <span class="hljs-keyword">return</span> date; <br>        &#125; <br> <br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDate</span><span class="hljs-params">(Date date)</span> &#123; <br>            <span class="hljs-built_in">this</span>.date = date; <br>        &#125; <br>    &#125;<br></code></pre></td></tr></table></figure>

<p>Foo类符合JavaBean规范，并且是public的，我们执行一个表达式来描述Foo:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//变量的语法糖</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test09</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">Foo</span> <span class="hljs-variable">foo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Foo</span>(<span class="hljs-number">100</span>, <span class="hljs-number">3.14f</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class="hljs-string">&quot;foo&quot;</span>, foo);<br><br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span><br>            (String) AviatorEvaluator.execute(<br>                    <span class="hljs-string">&quot; &#x27;[foo i=&#x27;+ foo.i + &#x27; f=&#x27;+foo.f+&#x27; year=&#x27;+(foo.date.year+1900)+ &#x27; month=&#x27;+foo.date.month +&#x27;]&#x27;  &quot;</span>,<br>                    env);<br>    <span class="hljs-comment">//因为获取的是year调用的是Date对象的getYear方法，而getYear方法默认获取的是公元元年</span><br>    System.out.println(result);<span class="hljs-comment">//[foo i=100 f=3.14 year=2020 month=10]</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>细看下表达式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-string">&#x27;[foo i=&#x27;</span>+ foo.i + <span class="hljs-string">&#x27; f=&#x27;</span>+foo.f+<span class="hljs-string">&#x27; year=&#x27;</span>+(foo.date.year+<span class="hljs-number">1900</span>)+ <span class="hljs-string">&#x27; month=&#x27;</span>+foo.date.month +<span class="hljs-string">&#x27;]&#x27;</span><br></code></pre></td></tr></table></figure>

<p>可以看到我们通过foo.i和foo.f的方式来访问foo变量中的i和f属性，并且通过foo.date.year的方式来访问foo中date对象的year属性（其实是getYear方法）。</p>
<h2 id="nil对象"><a href="#nil对象" class="headerlink" title="nil对象"></a>nil对象</h2><p>nil是Aviator内置的常量，类似java中的null，表示空的值。nil跟null不同的在于，在java中null只能使用在&#x3D;&#x3D;、!&#x3D;的比较运算符，而nil还可以使用&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;等比较运算符。Aviator规定，任何对象都比nil大除了nil本身。用户传入的变量如果为null，将自动以nil替代。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//nil对象</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test10</span><span class="hljs-params">()</span>&#123;<br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot;nil == nil&quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot;3 &gt; nil&quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot; true!= nil&quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot; &#x27;&#x27; &gt;nil &quot;</span>)); <span class="hljs-comment">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class="hljs-string">&quot; a == nil &quot;</span>)); <span class="hljs-comment">// true</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>nil与String相加的时候，跟java一样显示为null</p>
<h2 id="日期比较"><a href="#日期比较" class="headerlink" title="日期比较"></a>日期比较</h2><p>Aviator并不支持日期类型，如果要比较日期，你需要将日期写字符串的形式，并且要求是形如”yyyy-MM-dd HH:mm:ss:SS”的字符串，否则都将报错。 字符串跟java.util.Date比较的时候将自动转换为Date对象进行比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//日期格式比较</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test11</span><span class="hljs-params">()</span>&#123;<br>    Map&lt;String, Object&gt; env = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Date</span> <span class="hljs-variable">date</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">dateStr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss:SS&quot;</span>).format(date);<br>    env.put(<span class="hljs-string">&quot;date&quot;</span>, date);<br>    env.put(<span class="hljs-string">&quot;dateStr&quot;</span>, dateStr);<br><br>    <span class="hljs-type">Boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> (Boolean) AviatorEvaluator.execute(<span class="hljs-string">&quot;date == dateStr&quot;</span>, env);<br>    System.out.println(result); <span class="hljs-comment">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class="hljs-string">&quot;date &gt; &#x27;2009-12-20 00:00:00:00&#x27; &quot;</span>, env);<br>    System.out.println(result);<span class="hljs-comment">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class="hljs-string">&quot;date &lt; &#x27;2200-12-20 00:00:00:00&#x27; &quot;</span>, env);<br>    System.out.println(result);<span class="hljs-comment">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class="hljs-string">&quot;date == date &quot;</span>, env);<br>    System.out.println(result);<span class="hljs-comment">//true</span><br>&#125;<br></code></pre></td></tr></table></figure>

<p>也就是说String除了能跟String比较之外，还能跟nil和date字符串比较。</p>
<h2 id="两种模式"><a href="#两种模式" class="headerlink" title="两种模式"></a>两种模式</h2><p>默认AviatorEvaluator以编译速度优先：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AviatorEvaluator</span>.</span></span>set<span class="hljs-constructor">Optimize(AviatorEvaluator.COMPILE)</span>;<br></code></pre></td></tr></table></figure>

<p>你可以修改为运行速度优先，这会做更多的编译优化：</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AviatorEvaluator</span>.</span></span>set<span class="hljs-constructor">Optimize(AviatorEvaluator.EVAL)</span>;<br></code></pre></td></tr></table></figure>

<h1 id="语法手册"><a href="#语法手册" class="headerlink" title="语法手册"></a>语法手册</h1><p>下面是Aviator详细的语法规则定义。</p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><ul>
<li>Number类型：数字类型，支持两种类型，分别对应Java的Long和Double，也就是说任何整数都将被转换为Long，而任何浮点数都将被转换为Double，包括用户传入的数值也是如此转换。不支持科学计数法，仅支持十进制。如-1、100、2.3等。</li>
<li>String类型： 字符串类型，单引号或者双引号括起来的文本串，如’hello world’，变量如果传入的是String或者Character也将转为String类型。</li>
<li>Bool类型： 常量true和false，表示真值和假值，与java的Boolean.TRUE和Boolean.False对应。</li>
<li>Pattern类型： 类似Ruby、perl的正则表达式，以&#x2F;&#x2F;括起来的字符串，如&#x2F;&#x2F;d+&#x2F;，内部实现为java.util.Pattern。</li>
<li>变量类型： 与Java的变量命名规则相同，变量的值由用户传入，如”a”、”<em>b&quot;等</em></li>
<li>nil类型: 常量nil,类似java中的null，但是nil比较特殊，nil不仅可以参与<code>==</code>、<code>!=</code>的比较，也可以参与<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>的比较，Aviator规定任何类型都n大于nil除了nil本身，nil<code>==</code>nil返回true。用户传入的变量值如果为null，那么也将作为nil处理，nil打印为null。</li>
</ul>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>Aviator支持常见的算术运算符，包括+ - <code>*</code> &#x2F; % 五个二元运算符，和一元运算符”-“。其中 - <code>*</code> &#x2F; %和一元的”-“仅能作用于Number类型。</p>
<p>“+”不仅能用于Number类型，还可以用于String的相加，或者字符串与其他对象的相加。Aviator规定，任何类型与String相加，结果为String。</p>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>Avaitor的支持的逻辑运算符包括，一元否定运算符”!”，以及逻辑与的”&amp;&amp;”，逻辑或的”||”。逻辑运算符的操作数只能为Boolean。</p>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>Aviator支持的关系运算符包括”&lt;” “&lt;&#x3D;” “&gt;” “&gt;&#x3D;” 以及”&#x3D;&#x3D;”和”!&#x3D;” 。</p>
<p>&amp;&amp;和||都执行短路规则。</p>
<p>关系运算符可以作用于Number之间、String之间、Pattern之间、Boolean之间、变量之间以及其他类型与nil之间的关系比较，不同类型除了nil之外不能相互比较。</p>
<p>Aviator规定任何对象都比nil大除了nil之外。</p>
<h3 id="匹配运算符"><a href="#匹配运算符" class="headerlink" title="匹配运算符"></a>匹配运算符</h3><p>匹配运算符”&#x3D;~”用于String和Pattern的匹配，它的左操作数必须为String，右操作数必须为Pattern。匹配成功后，Pattern的分组将存于变量$num，num为分组索引。</p>
<h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><p>Aviator没有提供if else语句，但是提供了三元运算符 “?:”，形式为 bool ? exp1: exp2。 其中bool必须为结果为Boolean类型的表达式，而exp1和exp2可以为任何合法的Aviator表达式，并且不要求exp1和exp2返回的结果类型一致。</p>
<h3 id="操作符列表"><a href="#操作符列表" class="headerlink" title="操作符列表"></a>操作符列表</h3><h3 id="Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列："><a href="#Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：" class="headerlink" title="Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列："></a>Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：</h3><table>
<thead>
<tr>
<th>序号</th>
<th>操作符</th>
<th>结合性</th>
<th>操作数限制</th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>() <code>[</code> <code>]</code></td>
<td>从左到右</td>
<td>()用于函数调用，<code>[</code> <code>]</code>用于数组和java.util.List的元素访问，要求<code>[</code>indx<code>]</code>中的index必须为整型</td>
</tr>
<tr>
<td>1</td>
<td>! -</td>
<td>从右到左</td>
<td>! 能用于Boolean,- 仅能用于Number</td>
</tr>
<tr>
<td>2</td>
<td><code>*</code> &#x2F; %</td>
<td>从左到右</td>
<td>Number之间</td>
</tr>
<tr>
<td>3</td>
<td>+ -</td>
<td>从左到右</td>
<td>+ - 都能用于Number之间, + 还能用于String之间，或者String和其他对象</td>
</tr>
<tr>
<td>4</td>
<td>&lt; &lt;&#x3D; &gt; &gt;&#x3D;</td>
<td>从左到右</td>
<td>Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间</td>
</tr>
<tr>
<td>5</td>
<td>&#x3D;&#x3D; !&#x3D; &#x3D;~</td>
<td>从左到右</td>
<td>&#x3D;&#x3D;和!&#x3D;作用于Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间以及String和java.util.Date之间，&#x3D;~仅能作用于String和Pattern之间</td>
</tr>
<tr>
<td>6</td>
<td>&amp;&amp;</td>
<td>从左到右</td>
<td>Boolean之间，短路</td>
</tr>
<tr>
<td>7</td>
<td>&#96;</td>
<td>&#96;&#96;|&#96;</td>
<td>从左到右</td>
</tr>
<tr>
<td>8</td>
<td>? :</td>
<td>从右到左</td>
<td>第一个操作数的结果必须为Boolean，第二和第三操作数结果无限制</td>
</tr>
</tbody></table>
<h2 id="类型转换规则"><a href="#类型转换规则" class="headerlink" title="类型转换规则"></a>类型转换规则</h2><ul>
<li>Java的byte short int long都转化为Long类型，Java的float,double都将转化为Double类型。Java的char String都将转化为String。Java的null都将转为nil。</li>
<li>当两个操作符都是Double或者都是Long的时候，各自按照Double或者Long的类型执行</li>
<li>当两个操作符中某一个是Double的时候，另一个操作数也将转换成Double，按照Double类型执行。</li>
<li>任何类型与String相加，结果为String</li>
<li>任何类型都比nil大，除了nil本身。</li>
<li>nil在打印或者与字符串相加的时候，显示为null</li>
<li>形如”yyyy-MM-dd HH:mm:ss:SS”的字符串，在与java.util.Date做比较的时候将尝试转换成java.util.Date对象比较。</li>
<li>没有规定的类型转换操作，除了未知的变量类型之间，都将抛出异常。</li>
</ul>
<h2 id="常量和变量"><a href="#常量和变量" class="headerlink" title="常量和变量"></a>常量和变量</h2><table>
<thead>
<tr>
<th>true</th>
<th>真值</th>
</tr>
</thead>
<tbody><tr>
<td>false</td>
<td>假值</td>
</tr>
<tr>
<td>nil</td>
<td>空值</td>
</tr>
<tr>
<td>$digit</td>
<td>正则表达式匹配成功后的分组，$0表示匹配的字符串，$1表示第一个分组 etc.</td>
</tr>
</tbody></table>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><table>
<thead>
<tr>
<th>函数名称</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sysdate()</td>
<td>返回当前日期对象java.util.Date</td>
</tr>
<tr>
<td>rand()</td>
<td>返回一个介于0-1的随机数，double类型</td>
</tr>
<tr>
<td>print(<code>[</code>out<code>]</code>,obj)</td>
<td>打印对象，如果指定out，向out打印，否则输出到控制台</td>
</tr>
<tr>
<td>println(<code>[</code>out<code>]</code>,obj)</td>
<td>与print类似，但是在输出后换行</td>
</tr>
<tr>
<td>now()</td>
<td>返回System.currentTimeMillis</td>
</tr>
<tr>
<td>string.contains(s1,s2)</td>
<td>判断s1是否包含s2，返回Boolean</td>
</tr>
<tr>
<td>string.length(s)</td>
<td>求字符串长度,返回Long</td>
</tr>
<tr>
<td>string.startsWith(s1,s2)</td>
<td>s1是否以s2开始，返回Boolean</td>
</tr>
<tr>
<td>string.endsWith(s1,s2)</td>
<td>s1是否以s2结尾,返回Boolean</td>
</tr>
<tr>
<td>string.substring(s,begin<code>[</code>,end<code>]</code>)</td>
<td>截取字符串s，从begin到end，end如果忽略的话，将从begin到结尾，与java.util.String.substring一样。</td>
</tr>
<tr>
<td>math.abs(d)</td>
<td>求d的绝对值</td>
</tr>
<tr>
<td>math.sqrt(d)</td>
<td>求d的平方根</td>
</tr>
<tr>
<td>math.pow(d1,d2)</td>
<td>求d1的d2次方</td>
</tr>
<tr>
<td>math.log(d)</td>
<td>求d的自然对数</td>
</tr>
<tr>
<td>math.log10(d)</td>
<td>求d以10为底的对数</td>
</tr>
<tr>
<td>math.sin(d)</td>
<td>正弦函数</td>
</tr>
<tr>
<td>math.cos(d)</td>
<td>余弦函数</td>
</tr>
<tr>
<td>math.tan(d)</td>
<td>正切函数</td>
</tr>
<tr>
<td>map(seq,fun)</td>
<td>将函数fun作用到集合seq每个元素上，返回新元素组成的集合</td>
</tr>
<tr>
<td>filter(seq,predicate)</td>
<td>将谓词predicate作用在集合的每个元素上，返回谓词为true的元素组成的集合</td>
</tr>
<tr>
<td>count(seq)</td>
<td>返回集合大小</td>
</tr>
<tr>
<td>include(seq,element)</td>
<td>判断element是否在集合seq中，返回boolean值</td>
</tr>
<tr>
<td>sort(seq)</td>
<td>排序集合，仅对数组和List有效，返回排序后的新集合</td>
</tr>
<tr>
<td>reduce(seq,fun,init)</td>
<td>fun接收两个参数，第一个是集合元素，第二个是累积的init，本函数用于将fun作用在集合每个元素和初始值上面，返回最终的init值</td>
</tr>
<tr>
<td>seq.eq(value)</td>
<td>返回一个谓词，用来判断传入的参数是否跟value相等,用于filter函数，如filter(seq,seq.eq(3)) 过滤返回等于3的元素组成的集合</td>
</tr>
<tr>
<td>seq.neq(value)</td>
<td>与seq.eq类似，返回判断不等于的谓词</td>
</tr>
<tr>
<td>seq.gt(value)</td>
<td>返回判断大于value的谓词</td>
</tr>
<tr>
<td>seq.ge(value)</td>
<td>返回判断大于等于value的谓词</td>
</tr>
<tr>
<td>seq.lt(value)</td>
<td>返回判断小于value的谓词</td>
</tr>
<tr>
<td>seq.le(value)</td>
<td>返回判断小于等于value的谓词</td>
</tr>
<tr>
<td>seq.nil()</td>
<td>返回判断是否为nil的谓词</td>
</tr>
<tr>
<td>seq.exists()</td>
<td>返回判断不为nil的谓词</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>脚本语言</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Script</tag>
      </tags>
  </entry>
  <entry>
    <title>CompletableFuture 异步编排详解</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(3)-CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>查询商品详情页面逻辑比较复杂，有些数据需要远程调用，必然需要花费更多的时间。<br>假如商品详情每个页面查询，需要的如下的标准时间完成，那么用户需要10s才能完成。这里我们需采用异步查询，但是比如接口A查询商品信息，而接口B需要查询商品的SKU,接口C需要查询商品供应商等信息，如接口C必须依赖接口A或接口B的返回值。那么我们就需要使用CompletableFuture接口来实现。</p>
</blockquote>
<h1 id="一、开启异步编程"><a href="#一、开启异步编程" class="headerlink" title="一、开启异步编程"></a>一、开启异步编程</h1><h2 id="runAsync-无入参、无返回值"><a href="#runAsync-无入参、无返回值" class="headerlink" title="runAsync:无入参、无返回值"></a>runAsync:无入参、无返回值</h2><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>main end ...<br>开启异步任务...<br></code></pre></td></tr></table></figure>

<h2 id="supplyAsync-：无入参，可以获取返回值"><a href="#supplyAsync-：无入参，可以获取返回值" class="headerlink" title="supplyAsync ：无入参，可以获取返回值"></a>supplyAsync ：无入参，可以获取返回值</h2><h3 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;开启异步任务，我是返回值&quot;</span>;  <br>  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;获取异步任务返回值:&quot;</span> + cf.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>获取异步任务返回值:开启异步任务，我是返回值<br>main end ...<br></code></pre></td></tr></table></figure>
<h1 id="二、计算完成回调"><a href="#二、计算完成回调" class="headerlink" title="二、计算完成回调"></a>二、计算完成回调</h1><p>当我们想第一个异步任务执行完成后，还需要做其他的事情。我们的<code>CompletableFuture</code>提供了计算完成时回调方法，<code>whenComplete</code>、<code>whenCompleteAsync</code>、<code>exceptionally</code>等接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> CompletableFuture&lt;T&gt; <span class="hljs-title function_">whenComplete</span><span class="hljs-params">(BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> Throwable&gt; action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;T&gt; <span class="hljs-title function_">whenCompleteAsync</span><span class="hljs-params">(BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> Throwable&gt; action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;T&gt; <span class="hljs-title function_">whenCompleteAsync</span><span class="hljs-params">(BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> Throwable&gt; action, Executor executor)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;T&gt; <span class="hljs-title function_">exceptionally</span><span class="hljs-params">(Function&lt;Throwable, ? extends T&gt; fn)</span><br></code></pre></td></tr></table></figure>

<p><code>whenComplete</code> 可以处理正常和异常的计算结果，<code>exceptionally</code>: 处理异常情况。</p>
<p><code>whenComplete</code>和<code>whenCompleteAsync</code> 的区别是whenComplete 是执行当前任务的线程继续执行whenComplete的任务。</p>
<p>whenCompleteAsync： 是把whenCompleteAsync的任务继续提交给线程池来进行执行。</p>
<h2 id="whenCompleteAsync"><a href="#whenCompleteAsync" class="headerlink" title="whenCompleteAsync"></a>whenCompleteAsync</h2><h3 id="代码示例-2"><a href="#代码示例-2" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service).whenCompleteAsync((res,exp)-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;异步结果已经执行完成 ...&quot;</span>);  <br>            <span class="hljs-keyword">if</span> (exp == <span class="hljs-literal">null</span>) &#123;  <br>                System.out.println(<span class="hljs-string">&quot;异步执行结果为:&quot;</span> + res);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                System.out.println(<span class="hljs-string">&quot;异步执行出错啦，出错信息为：&quot;</span> + exp.getMessage());  <br>            &#125;  <br>        &#125;);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果：</p>
<ul>
<li>正常<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>main end ...<br>异步结果已经执行完成 ...<br>异步执行结果为:5<br></code></pre></td></tr></table></figure></li>
<li>异常<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>main end ...<br>异步结果已经执行完成 ...<br>异步执行出错啦，出错信息为：java.lang.ArithmeticException: / by zero<br></code></pre></td></tr></table></figure>
对于异常的捕获也可以这样写：<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;  <br>        &#125;, service).whenCompleteAsync((res,exp)-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;异步结果已经执行完成 ...&quot;</span>);  <br>            System.out.println(<span class="hljs-string">&quot;异步执行结果为:&quot;</span> + res);  <br>        &#125;).exceptionally(throwable-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;捕获到异步执行的异常信息，出错信息为：&quot;</span> + throwable.getMessage());  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;  <br>            System.out.println(<span class="hljs-string">&quot;返回默认异常结果：&quot;</span> + <span class="hljs-number">5</span>);  <br>            <span class="hljs-keyword">return</span> res;  <br>        &#125;);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
执行结果：<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>异步结果已经执行完成 ...<br>异步执行结果为:null<br>捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero<br>返回默认异常结果：5<br>main end ...<br></code></pre></td></tr></table></figure>
我们可以看到，通过exceptionally可以捕获异步任务抛出来的异常信息，并对异常进行处理，并可以将处理结果返回。</li>
</ul>
<p><strong>whenComplete虽然可以得到异常信息，但是无法修改结果，exceptionally可以感知异常，同时可以返回默认值。</strong></p>
<h1 id="三、handle最终处理"><a href="#三、handle最终处理" class="headerlink" title="三、handle最终处理"></a>三、handle最终处理</h1><p>handle和whenComplete方法类似，但是whenComplete能感知异常但是不能返回结果。只能通过exceptionally进行处理。</p>
<p>而handle即可以获取执行结果，也可以感知异常信息，并能处理执行结果并返回。</p>
<h2 id="代码示例-3"><a href="#代码示例-3" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">0</span>;  <br>        &#125;, service).handleAsync((res, exp) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;进入handleAsync方法 ...&quot;</span>);  <br>            <span class="hljs-keyword">if</span> (res != <span class="hljs-literal">null</span>) &#123;  <br>                <span class="hljs-keyword">return</span> res * <span class="hljs-number">2</span>;  <br>            &#125;  <br>            <span class="hljs-keyword">if</span> (exp != <span class="hljs-literal">null</span>) &#123;  <br>                System.out.println(<span class="hljs-string">&quot;捕获到异步执行的异常信息，出错信息为：&quot;</span> + exp.getMessage());  <br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>进入handleAsync方法 ...<br>捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero<br>获取异步任务返回值：0<br>main end ...<br></code></pre></td></tr></table></figure>
<p>如果我们去掉异常信息，可以看到如下返回值，最终异步执行结果为10；最终执行结果如下：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>进入handleAsync方法 ...<br>获取异步任务返回值：10<br>main end ...<br></code></pre></td></tr></table></figure>
<h1 id="四、线程串行化"><a href="#四、线程串行化" class="headerlink" title="四、线程串行化"></a>四、线程串行化</h1><p>在CompletableFuture中有以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">thenApply</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T,? extends U&gt; fn)</span><br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">thenApplyAsync</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T,? extends U&gt; fn)</span><br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">thenApplyAsync</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T,? extends U&gt; fn, Executor executor)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAccept</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAcceptAsync</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAcceptAsync</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action,Executor executor)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenRun</span><span class="hljs-params">(Runnable action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenRunAsync</span><span class="hljs-params">(Runnable action)</span><br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenRunAsync</span><span class="hljs-params">(Runnable action,Executor executor)</span><br></code></pre></td></tr></table></figure>
<ul>
<li>thenApply 方法：当一个线程依赖另一个线程时，获取上一个任务返回结果，并<strong>返回当前任务的返回值</strong>。</li>
<li>thenAccept方法：消费处理结果，接收任务的处理结果，并消费处理，<strong>无返回结果</strong>。</li>
<li>thenRun方法：只要上面的任务执行完成，就开始执行thenRun，只是处理完任务后，执行thenRun的后续操作。<br> thenRun 获取不到上个任务的执行结果，无返回值。</li>
</ul>
<h2 id="thenRun"><a href="#thenRun" class="headerlink" title="thenRun"></a>thenRun</h2><p>thenRun 不能获取上一步的执行结果，并无返回值。</p>
<h3 id="代码示例-4"><a href="#代码示例-4" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service).thenRun(()-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;任务2启动了...&quot;</span>);  <br>        &#125;);  <br>        System.out.println(<span class="hljs-string">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>任务2启动了...<br>获取异步任务返回值：null<br>main end ...<br></code></pre></td></tr></table></figure>
<p>如果我们需要获取上一步的执行结果，我们使用thenAccept；</p>
<h2 id="thenAccept"><a href="#thenAccept" class="headerlink" title="thenAccept"></a>thenAccept</h2><p>消费处理结果，接收任务的处理结果，并消费处理，<strong>无返回结果</strong>。</p>
<h3 id="代码示例-5"><a href="#代码示例-5" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest4</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);<br>      <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service).thenAcceptAsync((res)-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;任务2启动了... res:&quot;</span> + res);  <br>        &#125;);  <br>        System.out.println(<span class="hljs-string">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>任务2启动了... res:5<br>获取异步任务返回值：null<br>main end ...<br></code></pre></td></tr></table></figure>
<p>如果我们即需要上一步执行结果，并需要返回值供别人使用，那么我们使用thenApply方法;</p>
<h2 id="thenApply"><a href="#thenApply" class="headerlink" title="thenApply"></a>thenApply</h2><p>当一个线程依赖另一个线程时，获取上一个任务返回结果，并<strong>返回当前任务的返回值</strong>。</p>
<h3 id="代码示例-6"><a href="#代码示例-6" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest5</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service).thenApplyAsync((res)-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;任务2启动了... res:&quot;</span> + res);  <br>            <span class="hljs-keyword">return</span> res;  <br>        &#125;);  <br>        System.out.println(<span class="hljs-string">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务 ...<br>任务2启动了... res:5<br>获取异步任务返回值：5<br>main end ...<br></code></pre></td></tr></table></figure>

<h1 id="双任务-都执行（并）"><a href="#双任务-都执行（并）" class="headerlink" title="双任务-都执行（并）"></a>双任务-都执行（并）</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="hljs-title function_">thenCombine</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class="hljs-built_in">super</span> T,? <span class="hljs-built_in">super</span> U,? extends V&gt; fn)</span>;<br><span class="hljs-keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="hljs-title function_">thenCombineAsync</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class="hljs-built_in">super</span> T,? <span class="hljs-built_in">super</span> U,? extends V&gt; fn)</span>;<br><span class="hljs-keyword">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class="hljs-title function_">thenCombineAsync</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class="hljs-built_in">super</span> T,? <span class="hljs-built_in">super</span> U,? extends V&gt; fn,Executor executor)</span>;<br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAcceptBoth</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> U&gt; action)</span>;<br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAcceptBothAsync</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> U&gt; action)</span>;<br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class="hljs-title function_">thenAcceptBothAsync</span><span class="hljs-params">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class="hljs-built_in">super</span> T, ? <span class="hljs-built_in">super</span> U&gt; action, Executor executor)</span>;<br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterBoth</span><span class="hljs-params">(CompletionStage&lt;?&gt; other,Runnable action)</span>&#125;;<br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterBothAsync</span><span class="hljs-params">(CompletionStage&lt;?&gt; other,Runnable action)</span> &#125;<br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterBothAsync</span><span class="hljs-params">(CompletionStage&lt;?&gt; other,Runnable action,        Executor executor)</span>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>两个任务必须都完成，触发该任务。</strong></p>
<ul>
<li>runAfterBoth 没有返回值，入参CompletionStage、action；第一个异步任务.runAfterBoth(第二个异步任务,第三个异步任务）</li>
<li>thenAcceptBoth 可以获取两个任务的返回值。</li>
<li>thenCombine 可以获取两个任务的返回值，并可以将任务三结果返回。</li>
</ul>
<h2 id="runAfterBoth"><a href="#runAfterBoth" class="headerlink" title="runAfterBoth"></a>runAfterBoth</h2><h3 id="代码示例-7"><a href="#代码示例-7" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest6</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        f1.runAfterBothAsync(f2, () -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>main end ...<br>开启异步任务3 ...<br></code></pre></td></tr></table></figure>
<p>可以看到，任务3是在任务1和任务2执行完成后，才执行的。</p>
<h2 id="thenAcceptBoth"><a href="#thenAcceptBoth" class="headerlink" title="thenAcceptBoth"></a>thenAcceptBoth</h2><p>我们使用thenAcceptBoth可以感知任务1和任务2的返回值，但是thenAcceptBoth没有返回值。我们看下案例。</p>
<h3 id="代码示例-8"><a href="#代码示例-8" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest7</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        f1.thenAcceptBothAsync(f2, (f1Res,f2Res) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ...,f1Res: &quot;</span> + f1Res + <span class="hljs-string">&quot; f2Res: &quot;</span> + f2Res);  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>

<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>main end ...<br>开启异步任务3 ...,f1Res: 5 f2Res: will<br></code></pre></td></tr></table></figure>
<p>我们可以看到，任务3在任务1和任务2执行后执行了，并获取了任务1和任务2的返回值。</p>
<h2 id="thenCombineAsync"><a href="#thenCombineAsync" class="headerlink" title="thenCombineAsync"></a>thenCombineAsync</h2><p>可以获取两个任务的返回值，并可以将任务三结果返回</p>
<h3 id="代码示例-9"><a href="#代码示例-9" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest8</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.thenCombineAsync(f2, (f1Res, f2Res) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ...,f1Res: &quot;</span> + f1Res + <span class="hljs-string">&quot; f2Res: &quot;</span> + f2Res);  <br>            <span class="hljs-keyword">return</span> f1Res + <span class="hljs-string">&quot;---&gt;&quot;</span> + f2Res;  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>开启异步任务3 ...,f1Res: 5 f2Res: will<br>f3.get() = 5---&gt;will<br>main end ...<br></code></pre></td></tr></table></figure>
<h1 id="双任务-任意（或）"><a href="#双任务-任意（或）" class="headerlink" title="双任务-任意（或）"></a>双任务-任意（或）</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterEither</span><span class="hljs-params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;  <br>  <br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterEitherAsync</span><span class="hljs-params">(CompletionStage&lt;?&gt; other, Runnable action)</span>;  <br>  <br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">runAfterEitherAsync</span><span class="hljs-params">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;  <br>  <br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">acceptEither</span><span class="hljs-params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span>;  <br>  <br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">acceptEitherAsync</span><span class="hljs-params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span>;  <br>  <br><span class="hljs-keyword">public</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">acceptEitherAsync</span><span class="hljs-params">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action, Executor executor)</span>;  <br>  <br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">applyToEither</span><span class="hljs-params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="hljs-built_in">super</span> T, U&gt; fn)</span>;  <br>  <br><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">applyToEitherAsync</span><span class="hljs-params">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class="hljs-built_in">super</span> T, U&gt; fn)</span>;<br></code></pre></td></tr></table></figure>
<p>当两个任务中，任意一个future任务完成的时候，执行任务。</p>
<ul>
<li>applyToEither 两个任务有一个任务执行完成，获取它的返回值，处理任务并有新的返回值。</li>
<li>acceptEither 两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值。</li>
<li>runAfterEither 两个任务有一个执行完成，不需要获取future的结果，处理任务，也没有返回值。</li>
</ul>
<h2 id="runAfterEitherAsync"><a href="#runAfterEitherAsync" class="headerlink" title="runAfterEitherAsync"></a>runAfterEitherAsync</h2><p>不感知结果，自己没有返回值。</p>
<h3 id="代码示例-10"><a href="#代码示例-10" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest9</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Void&gt; f3 = f1.runAfterEitherAsync(f2,()-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>开启异步任务3 ...<br>f3.get() = null<br>main end ...<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>
<p>我们可以看到，任务1执行完成后，任务3不需要等待任务2执行完成，即可启动任务3。但是使用runAfterEitherAsync不能感知任务的返回值，自身也无返回值。</p>
<h2 id="acceptEitherAsync"><a href="#acceptEitherAsync" class="headerlink" title="acceptEitherAsync"></a>acceptEitherAsync</h2><h3 id="代码示例-11"><a href="#代码示例-11" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest10</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;  <br>        &#125;, service);  <br>        f1.acceptEitherAsync(f2,(res)-&gt;&#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ... res: &quot;</span>+res);  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>main end ...<br>开启异步任务3 ... res: 5<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>
<p>可以看到，可以获取任务1的执行结果，但不返回执行结果。</p>
<h2 id="applyToEither"><a href="#applyToEither" class="headerlink" title="applyToEither"></a>applyToEither</h2><p>可以感知结果，并返回执行结果。</p>
<h3 id="代码示例-12"><a href="#代码示例-12" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest11</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">10</span> / <span class="hljs-number">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-number">6</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.applyToEitherAsync(f2, (res) -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;开启异步任务3 ... res: &quot;</span> + res);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        System.out.println(<span class="hljs-string">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>开启异步任务1 ...<br>开启异步任务3 ... res: 5<br>f3.get() = will<br>main end ...<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>

<h1 id="多任务组合"><a href="#多任务组合" class="headerlink" title="多任务组合"></a>多任务组合</h1><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Void&gt; <span class="hljs-title function_">allOf</span><span class="hljs-params">(CompletableFuture&lt;?&gt;... cfs)</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> CompletableFuture&lt;Object&gt; <span class="hljs-title function_">anyOf</span><span class="hljs-params">(CompletableFuture&lt;?&gt;... cfs)</span>;<br></code></pre></td></tr></table></figure>
<ul>
<li>allOf：等待所有任务完成</li>
<li>anyOf: 只要有一个任务完成</li>
</ul>
<h2 id="allOf"><a href="#allOf" class="headerlink" title="allOf"></a>allOf</h2><h3 id="代码示例-13"><a href="#代码示例-13" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest12</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品图片 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;图片地址&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品属性...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;黑色 256G&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品品牌...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;苹果手机&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.allOf(f1, f2, f3);  <br>        future.get();<span class="hljs-comment">//等待索引结果完成  </span><br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>查询商品图片 ...<br>查询商品属性...<br>查询商品品牌...<br>main end ...<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注：如果不使用future.get()阻塞，若其中一个任务执行时间较长，则可能会丢失任务信息。</p>
</blockquote>
<h2 id="anyOf"><a href="#anyOf" class="headerlink" title="anyOf"></a>anyOf</h2><h3 id="代码示例-14"><a href="#代码示例-14" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompletableFutureTest13</span> &#123;  <br>  <br>    <span class="hljs-comment">// 自定义线程池  </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> Executors.newFixedThreadPool(<span class="hljs-number">5</span>);  <br>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;  <br>        System.out.println(<span class="hljs-string">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品图片 ...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;图片地址&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品属性...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;黑色 256G&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;查询商品品牌...&quot;</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;苹果手机&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Object&gt; future = CompletableFuture.anyOf(f1, f2, f3);  <br>        System.out.println(<span class="hljs-string">&quot;future.get() = &quot;</span> + future.get());  <br>        System.out.println(<span class="hljs-string">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;	<br></code></pre></td></tr></table></figure>
<p>执行结果为： </p>
<figure class="highlight txt"><table><tr><td class="code"><pre><code class="hljs txt">main start ...<br>查询商品图片 ...<br>查询商品属性...<br>future.get() = 图片地址<br>main end ...<br>查询商品品牌...<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>异步编程</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>异步编程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>异步编程(2)-Java异步编程指北</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(2)-Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8C%97/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>本文简要介绍一下Java中可支持异步编程的类和使用方法，方便后期回顾和汇总。</p>
</blockquote>
<h1 id="同步异步优缺点"><a href="#同步异步优缺点" class="headerlink" title="同步异步优缺点"></a>同步异步优缺点</h1><p>在我们平时开发中或多或少都会遇到需要调用接口来完成一个功能的需求，这个接口可以是内部系统也可以是外部的，然后等到接口返回数据了才能继续其他的业务流程，这就是传统的 <code>同步</code>模式。</p>
<p>同步模式虽然简单但缺点也很明显，如果对方服务处理缓慢迟迟未能返回数据，或网络问题导致响应变长，就会阻塞我们调用方的线程，导致我们主流程的耗时的延迟，传统的解决方式是增加接口、网关的超时(timeout)设置，防止无限期等待。但即使这样还是会占用CPU资源。</p>
<p>在我们做rpc远程调用，redis，数据库访问等比较耗时的网络请求时经常要面对这样的问题，这种业务场景我们可以引入<code>异步</code>的编程思想，即主流程不需要阻塞等待接口返回数据，而是继续往下执行，当真正需要这个接口返回结果时再通过回调或阻塞的方式获取，此时我们的主流程和异步任务是并行执行的。</p>
<p>Java中实现异步主要是通过Future，CompletableFuture，Guava ListenableFuture以及一些异步响应式框架如RxJava实现。</p>
<p>下面我们主要看下这几种组件适用的业务场景和需要注意的地方，避免踩坑。</p>
<h1 id="Future"><a href="#Future" class="headerlink" title="Future"></a>Future</h1><p>Future 表示异步计算的结果。提供了检查计算是否完成、等待计算完成以及检索计算结果的方法。只有在计算完成后才能使用方法 get 检索结果，必要时阻止，直到准备就绪。取消是通过该方法 cancel 执行的。提供了其他方法来确定任务是正常完成还是已取消。计算完成后，无法取消计算。如果您想为了可取消性而使用Future ，但不提供可用的结果，则可以声明<code> Future&lt;?&gt;</code> 的类型并作为基础任务的结果返回 null。<br>接口信息如下图所示：<br><img src="https://s3.bmp.ovh/imgs/2023/05/31/b2baebe6d50661a8.png"><br>实际开发中我们一般会结合线程池的submit配合使用，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.concurrent.ExecutorService;  <br><span class="hljs-keyword">import</span> java.util.concurrent.Executors;  <br><span class="hljs-keyword">import</span> java.util.concurrent.Future;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * AsyncTest 异步  </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> will  </span><br><span class="hljs-comment"> */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FutureTest</span> &#123;  <br> <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;  <br>        <span class="hljs-comment">//创建线程池  </span><br>        <span class="hljs-type">ExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> Executors.newCachedThreadPool();  <br>        <span class="hljs-comment">// 模拟接口调用  </span><br>        Future&lt;String&gt; submit = executor.submit(() -&gt; &#123;  <br>            Thread.sleep(<span class="hljs-number">2</span>*<span class="hljs-number">1000</span>);  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;  <br>        &#125;);  <br>  <br>        System.out.println(<span class="hljs-string">&quot;异步执行结果 = &quot;</span> + submit.get());  <br>        System.out.println(<span class="hljs-string">&quot;submit.isDone() = &quot;</span> + submit.isDone());  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>
<p>简单的说我有一个任务，提交给了Future，Future替我完成这个任务，这期间我可以去做别的事情。一段时间之后，我再从Future取出结果。</p>
<p>上面的代码有2个地方需要注意:</p>
<ul>
<li>不建议使用future.get()方式，而应该使用future.get(long timeout, TimeUnit unit)<br>  尤其是在生产环境一定要设置合理的超时时间，防止程序无限期等待下去</li>
<li>另外就是要考虑异步任务执行过程中报错抛出异常的情况，需要捕获future的异常信息。<br>通过代码可以看出一些简单的异步场景可以使用Future解决，但是对于结果的获取却不是很方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式相当于把异步变成了同步，显然和异步编程的初衷相违背，轮询的方式又会浪费CPU资源。</li>
</ul>
<p><code>Future没有提供通知的机制，就是回调，我们无法知道它什么时间完成任务。</code></p>
<p>而且在复杂一点的情况下，比如多个异步任务的场景，一个异步任务依赖上一个异步任务的执行结果，异步任务合并等，Future无法满足需求。</p>
<h1 id="ListenableFuture"><a href="#ListenableFuture" class="headerlink" title="ListenableFuture"></a>ListenableFuture</h1><p>Google并发包下的listenableFuture对Java原生的future做了扩展，顾名思义就是使用监听器模式实现的回调，所以叫可监听的future。</p>
<p>要使用listenableFuture还要结合MoreExecutor线程池，MoreExecutor是对Java原生线程池的封装，比如常用的MoreExecutors.listeningDecorator(threadPool); 修改Java原生线程池的submit方法，封装了future返回listenableFuture。<br>接口信息如下图所示：<br><img src="https://s3.bmp.ovh/imgs/2023/05/31/38d7ecdc6230f9e8.png"><br>代码示例如下：<br>首先还是创建线程池,模拟业务调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建线程池  </span><br><span class="hljs-type">ListeningExecutorService</span> <span class="hljs-variable">executor</span> <span class="hljs-operator">=</span> MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());  <br><span class="hljs-comment">// 模拟接口调用  </span><br>ListenableFuture&lt;String&gt; future = executor.submit(() -&gt; &#123;  <br>    Thread.sleep(<span class="hljs-number">2</span>*<span class="hljs-number">1000</span>);  <br>    <span class="hljs-comment">// int i = 1 / 0;  </span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello world&quot;</span>;  <br>&#125;);<br></code></pre></td></tr></table></figure>
<p>上面的代码是构造了一个ListenableFuture的异步任务，调用它的结果一般有两种方式：</p>
<ul>
<li>基于监听器(addListener)<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于监听机制  </span><br>future.addListener(() -&gt; &#123;  <br>    <span class="hljs-keyword">try</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;异步结果:&quot;</span> + future.get());  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;  <br>        e.printStackTrace();  <br>    &#125;  <br>&#125;, executor);<br></code></pre></td></tr></table></figure></li>
<li>基于回调（addCallback）<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 基于回调机制  </span><br>Futures.addCallback(future, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureCallback</span>&lt;String&gt;() &#123;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSuccess</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> String result)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;异步结果:&quot;</span> + result);  <br>    &#125;  <br>    <span class="hljs-meta">@Override</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onFailure</span><span class="hljs-params">(Throwable t)</span> &#123;  <br>        System.out.println(<span class="hljs-string">&quot;异步结果错误:&quot;</span> + t.getMessage());  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure>
上述代码用例可以发现我注释掉了一个<code>int i = 1 / 0</code>,在学习过程中可以放开来看看结果，对比验证一下。<br>OK，上述如果验证完毕后，可以比对看下面的汇总，加深一下使用区别。</li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>使用说明</th>
</tr>
</thead>
<tbody><tr>
<td>addListener</td>
<td>需要自己代码里捕获处理异常情况，最好设置超时时间</td>
</tr>
<tr>
<td>addCallback</td>
<td>把正常返回和异常情况做了分离，方便我们针对不同情况做处理</td>
</tr>
</tbody></table>
<p>另外Futures里还有很多其他的api，可以满足我们负责场景，比如transform()可以处理异步任务之间的依赖情况，allAsList()将多个ListenableFuture合并成一个。</p>
<h1 id="CompletableFuture"><a href="#CompletableFuture" class="headerlink" title="CompletableFuture"></a>CompletableFuture</h1><p>如果你们公司的jdk是8或以上的版本，那可以直接使用CompletableFuture类来实现异步编程。</p>
<p>Java8新增的CompletableFuture类借鉴了Google Guava的ListenableFuture，它包含50多个方法，默认使用forkJoinPool线程池，提供了非常强大的Future扩展功能，可以帮助我们简化异步编程的复杂性，结合函数式编程，通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的多种方法，可以满足大部分异步回调场景。<br>接口信息如下图所示：<br><img src="https://s3.bmp.ovh/imgs/2023/06/01/6aac59f5cb214601.png"></p>
<p>虽然方法很多但有个特征：</p>
<ul>
<li>以Async结尾的方法签名表示是在异步线程里执行，没有以Async结尾的方法则是由主线程调用</li>
<li>如果参数里有Runnable类型，则没有返回结果，即纯消费的方法  </li>
<li>如果参数里没有指定executor则默认使用forkJoinPool线程池，指定了则以指定的线程池来执行任务</li>
</ul>
<h2 id="thenApplyAsync"><a href="#thenApplyAsync" class="headerlink" title="thenApplyAsync"></a>thenApplyAsync</h2><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><blockquote>
<p>&#x3D;&#x3D;这里先说明一下，示例代码只关注核心功能，如果要实际使用需要考虑超时和异常情况，大家需要注意。&#x3D;&#x3D;</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;String&gt; f1 = CompletableFuture  <br>        .supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;...开始执行 hello&quot;</span>);  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello! &quot;</span>;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;  <br>            System.out.println(<span class="hljs-string">&quot;...执行hello完毕，执行结果：&quot;</span> + hello);  <br>            <span class="hljs-keyword">return</span> hello;  <br>        &#125;);  <br>CompletableFuture&lt;String&gt; f2 = f1.thenApplyAsync(s -&gt; &#123;  <br>    System.out.println(<span class="hljs-string">&quot;...开始执行 world&quot;</span>);  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world!&quot;</span>;  <br>    System.out.println(<span class="hljs-string">&quot;...获取上一步结果,结果为：&quot;</span> + s);  <br>    System.out.println(<span class="hljs-string">&quot;开始输出 &quot;</span> + world);  <br>    <span class="hljs-keyword">return</span> s + world;  <br>&#125;);  <br>System.out.println(<span class="hljs-string">&quot;f2.get() = &quot;</span> + f2.get());<br></code></pre></td></tr></table></figure>
<p>在上面的代码中异步任务f2需要异步任务f1的结果才能执行，但对于我们的主线程来说，无须等到f1返回结果后再调用函数f2，即不会阻塞主流程，而是告诉CompletableFuture当执行完了f1的方法再去执行f2，只有当需要最后的结果时再获取。</p>
<h2 id="thenComposeAsync"><a href="#thenComposeAsync" class="headerlink" title="thenComposeAsync"></a>thenComposeAsync</h2><h3 id="示例代码-1"><a href="#示例代码-1" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;String&gt; f1 = CompletableFuture  <br>        .supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class="hljs-string">&quot;...开始执行 hello&quot;</span>);  <br>            <span class="hljs-type">String</span> <span class="hljs-variable">hello</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello! &quot;</span>;  <br>            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;  <br>            System.out.println(<span class="hljs-string">&quot;...执行hello完毕，执行结果：&quot;</span> + hello);  <br>            <span class="hljs-keyword">return</span> hello;  <br>        &#125;);  <br>CompletableFuture&lt;String&gt; f2 = f1.thenComposeAsync(t -&gt; CompletableFuture.supplyAsync(()-&gt;&#123;  <br>    System.out.println(<span class="hljs-string">&quot;...开始执行 world&quot;</span>);  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">world</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;world!&quot;</span>;  <br>    System.out.println(<span class="hljs-string">&quot;...获取上一步结果,结果为：&quot;</span> + t);  <br>    System.out.println(<span class="hljs-string">&quot;开始输出 &quot;</span> + world);  <br>    <span class="hljs-keyword">return</span> t + world;  <br>&#125;));  <br>System.out.println(<span class="hljs-string">&quot;f2.get() = &quot;</span> + f2.get());<br></code></pre></td></tr></table></figure>
<p>上面两个案例的输出结果相同，但是两者还是有细微的差异的，差异信息如下方所示：</p>
<table>
<thead>
<tr>
<th>方法名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>thenComposeAsync</td>
<td>将异步操作的结果保存到 CompletableFuture 中，并返回一个新的 CompletableFuture</td>
</tr>
<tr>
<td>thenApplyAsync</td>
<td>将异步操作的结果应用于输入参数，并返回一个新的 CompletableFuture</td>
</tr>
<tr>
<td>通过代码注释能看出thenCompose相当于flatMap,避免<code>CompletableFuture&lt;CompletableFuture&gt;</code>这种写法。</td>
<td></td>
</tr>
</tbody></table>
<p>这也是<code>thenCompose</code>和<code>thenApply</code>的区别，通过查看api也能看出：<br>thenApply：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">thenApply</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T,? extends U&gt; fn)</span> &#123;<span class="hljs-keyword">return</span> uniApplyStage(<span class="hljs-literal">null</span>, fn);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>thenCompose：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class="hljs-title function_">thenCompose</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span> &#123;<span class="hljs-keyword">return</span> uniComposeStage(screenExecutor(executor), fn);<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="thenCombineAsync"><a href="#thenCombineAsync" class="headerlink" title="thenCombineAsync"></a>thenCombineAsync</h2><h3 id="示例代码-2"><a href="#示例代码-2" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> <span class="hljs-variable">time</span> <span class="hljs-operator">=</span> System.currentTimeMillis();  <br>CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class="hljs-comment">// 模拟接口耗时，1s  </span><br>    <span class="hljs-keyword">try</span> &#123;  <br>        Thread.sleep(<span class="hljs-number">1000</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class="hljs-comment">// 模拟接口耗时，1s  </span><br>    <span class="hljs-keyword">try</span> &#123;  <br>        Thread.sleep(<span class="hljs-number">1000</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;world! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f3 = f1.thenCombineAsync(f2, (s1, s2) -&gt; s1 + s2);  <br>System.out.println(<span class="hljs-string">&quot;异步结果:&quot;</span> + f3.get());  <br>System.out.println(<span class="hljs-string">&quot;耗时:&quot;</span> + (System.currentTimeMillis() - time));<br></code></pre></td></tr></table></figure>
<p>从代码输出结果可以看到两个异步任务f1、f2是并行执行，彼此无先后依赖顺序，<code>thenCombineAsync</code>适合将两个并行执行的异步任务的结果合并返回成一个新的future。</p>
<p>还有一个类似的方法<code>thenAcceptBoth</code>也是合并两个future的结果，但是不会返回新的值，内部消费掉了。</p>
<h2 id="applyToEitherAsync"><a href="#applyToEitherAsync" class="headerlink" title="applyToEitherAsync"></a>applyToEitherAsync</h2><h3 id="示例代码-3"><a href="#示例代码-3" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class="hljs-comment">// 模拟接口耗时，1s  </span><br>    <span class="hljs-keyword">try</span> &#123;  <br>        Thread.sleep(<span class="hljs-number">2000</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class="hljs-comment">// 模拟接口耗时，1s  </span><br>    <span class="hljs-keyword">try</span> &#123;  <br>        Thread.sleep(<span class="hljs-number">1000</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;world! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f3 = f1.applyToEitherAsync(f2, t -&gt; t);  <br>System.out.println(<span class="hljs-string">&quot;异步结果:&quot;</span> + f3.get());<br></code></pre></td></tr></table></figure>
<p>输出的结果:world，哪个future先执行完就根据它的结果计算，取两个future最先返回的。</p>
<p>这里要说明一点，<code>如果两个future是同时返回结果，那么applyToEitherAsync永远以第一个future的结果为准</code>，大家可以把上面代码的Thread.sleep注释掉测试下。</p>
<p>另外acceptEither方法和这个类似，但是没有返回值。</p>
<p><code>allOf / anyOf</code><br>前面讲的compose,combine,either都是处理两个future的方法，如果是超过2个的可以使用allOf或anyOf</p>
<h2 id="allOf"><a href="#allOf" class="headerlink" title="allOf"></a>allOf</h2><h3 id="示例代码-4"><a href="#示例代码-4" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;Void&gt; f1 = CompletableFuture.allOf(  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;world&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;!!!!!!&quot;</span>;  <br>        &#125;)  <br>);  <br>System.out.println(<span class="hljs-string">&quot;f1.get() = &quot;</span> + f1.get());<br></code></pre></td></tr></table></figure>
<p><code>allOf</code>方法是当所有的CompletableFuture都执行完后执行计算，<strong>无返回值</strong>。</p>
<h2 id="anyOf"><a href="#anyOf" class="headerlink" title="anyOf"></a>anyOf</h2><h3 id="示例代码-5"><a href="#示例代码-5" class="headerlink" title="示例代码"></a>示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">CompletableFuture&lt;Object&gt; f1 = CompletableFuture.anyOf(  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">3000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">2000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;world&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class="hljs-keyword">try</span> &#123;  <br>                <span class="hljs-comment">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class="hljs-number">1000</span>);  <br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;!!!!!!&quot;</span>;  <br>        &#125;)  <br>);  <br>System.out.println(<span class="hljs-string">&quot;f1.get() = &quot;</span> + f1.get());<br></code></pre></td></tr></table></figure>
<p>多次执行,执行结果为”!!!!!!”，anyOf方法当任意一个CompletableFuture执行完后就会执行计算。</p>
<p>虽然说CompletableFuture更适合I&#x2F;O场景，但使用时一定要结合具体业务，比如说有些公共方法处理异步任务时需要考虑异常情况，这时候使用<code>CompletableFuture.handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)</code>更合适，handle方法会处理正常计算值和异常，因此它可以屏蔽异常，避免异常继续抛出。</p>
<p>CompletableFuture还有一个坑需要注意：如果线上流量比较大的情况下会出现响应缓慢的问题。</p>
<p>因为CompletableFuture默认使用的线程池是forkJoinPool，当时对一台使用了CompletableFuture实现异步回调功能的接口做压测，通过监控系统发现有大量的ForkJoinPool.commonPool-worker-* 线程处于等待状态，进一步分析dump信息发现是forkJoinPool的makeCommonPool问题。<br>具体原因为：</p>
<blockquote>
<p>java.util.concurrent.ForkJoinPool.common.parallelism的值，那么forkJoinPool线程池的线程数就是(cpu-1)，如果我们机器是2核，这样实际执行任务的线程数只有1个，当有大量请求过来时，如果有耗时高的io操作，势必会造成更多的线程等待，进而拖累服务响应时间。</p>
</blockquote>
<p>解决方案一个是设置java.util.concurrent.ForkJoinPool.common.parallelism这个值(要在项目启动时指定)，或者指定线程池不使用默认的forkJoinPool。根据阿里巴巴规范建议使用自定义的线程池。</p>
<p>那么如何比较好的设置线程数量，以下参考《Java并发编程实战》中的公式：<br>$$threads &#x3D; N CPU * U CPU * (1 + W&#x2F;C)$$</p>
<ul>
<li>N CPU 是处理器的核数</li>
<li>U CPU 是期望的CPU利用率（介于0和1之间）</li>
<li>W&#x2F;C是等待时间与计算时间的比率</li>
</ul>
<p>网上也有这么区分的：</p>
<ul>
<li>如果服务是cpu密集型的，设置为电脑的核数</li>
<li>如果服务是io密集型的，设置为电脑的核数*2</li>
</ul>
<p>其实并不严谨，尤其是io密集型的还要参考QPS和web服务器的配置。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>异步编程</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>异步编程</tag>
        <tag>线程</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>设计模式是众多软件开发人员经过长时间的试错和应用总结出来的，解决特定问题的一系列方案。现行的部分教材在介绍设计模式时，有些会因为案例脱离实际应用场景而令人费解，有些又会因为场景简单而显得有些小题大做。本文会结合在美团金融服务平台设计开发时的经验，结合实际的案例，并采用“师生对话”这种相对诙谐的形式去讲解三类常用设计模式的应用。希望能对想提升系统设计能力的同学有所帮助或启发。</p>
<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>话说这是在程序员世界里一对师徒的对话：</p>
<p>“老师，我最近在写代码时总感觉自己的代码很不优雅，有什么办法能优化吗？”</p>
<p>“嗯，可以考虑通过教材系统学习，从注释、命名、方法和异常等多方面实现整洁代码。”</p>
<p>“然而，我想说的是，我的代码是符合各种编码规范的，但是从实现上却总是感觉不够简洁，而且总是需要反复修改！”学生小明叹气道。</p>
<p>老师看了看小明的代码说：“我明白了，这是系统设计上的缺陷。总结就是抽象不够、可读性低、不够健壮。”</p>
<p>“对对对，那怎么能迅速提高代码的可读性、健壮性、扩展性呢？”小明急不可耐地问道。</p>
<p>老师敲了敲小明的头：“不要太浮躁，没有什么方法能让你立刻成为系统设计专家。但是对于你的问题，我想<strong>设计模式</strong>可以帮到你。”</p>
<p>“设计模式？”小明不解。</p>
<p>“是的。”老师点了点头，“世上本没有路，走的人多了，便变成了路。在程序员的世界中，本没有设计模式，写代码是人多了，他们便总结出了一套能提高开发和维护效率的套路，这就是设计模式。设计模式不是什么教条或者范式，它可以说是一种在特定场景下普适且可复用的解决方案，是一种可以用于提高代码可读性、可扩展性、可维护性和可测性的最佳实践。”</p>
<p>“哦哦，我懂了，那我应该如何去学习呢？”</p>
<p>“不急，接下来我来带你慢慢了解设计模式。”</p>
<h2 id="奖励的发放策略"><a href="#奖励的发放策略" class="headerlink" title="奖励的发放策略"></a>奖励的发放策略</h2><p>第一天，老师问小明：“你知道活动营销吗？”</p>
<p>“这我知道，活动营销是指企业通过参与社会关注度高的已有活动，或整合有效的资源自主策划大型活动，从而迅速提高企业及其品牌的知名度、美誉度和影响力，常见的比如有抽奖、红包等。”</p>
<p>老师点点头：“是的。我们假设现在就要做一个营销，需要用户参与一个活动，然后完成一系列的任务，最后可以得到一些奖励作为回报。活动的奖励包含美团外卖、酒旅和美食等多种品类券，现在需要你帮忙设计一套奖励发放方案。”</p>
<p>因为之前有过类似的开发经验，拿到需求的小明二话不说开始了编写起了代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 奖励服务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewordApiService</span>&#123;<br>    <span class="hljs-comment">//各种奖励实现</span><br>    <span class="hljs-keyword">private</span> Reword1Service reword1Service;<br>    <span class="hljs-keyword">private</span> Reword2Service reword2Service;<br>    <span class="hljs-keyword">private</span> Reword3Service reword3Service;<br><br>    <span class="hljs-comment">// 使用对入参的条件判断进行发奖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">issueReward</span><span class="hljs-params">(String rewardType, Object ... params)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (rewardType) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword1&quot;</span>:<br>                <span class="hljs-type">Reword1Reqeust</span> <span class="hljs-variable">reword1Reqeust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword1Reqeust</span>();<br>                reword1Reqeust.setReq(params);<br>                reword1Service.rewordService(reword1Reqeust);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword2&quot;</span>:<br>                <span class="hljs-type">Reword2Reqeust</span> <span class="hljs-variable">reword2Reqeust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2Reqeust</span>();<br>                reword2Reqeust.setReq(params);<br>                reword2Service.rewordService(reword2Reqeust);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword3&quot;</span>:<br>                <span class="hljs-type">Reword3Reqeust</span> <span class="hljs-variable">reword3Reqeust</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword3Reqeust</span>();<br>                reword3Reqeust.setReq(params);<br>                reword3Service.rewordService(reword3Reqeust);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;rewardType error!&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>小明很快写好了Demo，然后发给老师看。</p>
<p>“假如我们即将接入新的打车券，这是否意味着你必须要修改这部分代码？”老师问道。</p>
<p>小明愣了一愣，没等反应过来老师又问：”假如后面美团外卖的发券接口发生了改变或者替换，这段逻辑是否必须要同步进行修改？”</p>
<p>小明陷入了思考之中，一时间没法回答。</p>
<p>经验丰富的老师一针见血地指出了这段设计的问题：“你这段代码有两个主要问题，一是不符合<strong>开闭原则</strong>，可以预见，如果后续新增品类券的话，需要直接修改主干代码，而我们提倡代码应该是对修改封闭的；二是不符合<strong>迪米特法则</strong>，发奖逻辑和各个下游接口高度耦合，这导致接口的改变将直接影响到代码的组织，使得代码的可维护性降低。”</p>
<p>小明恍然大悟：“那我将各个同下游接口交互的功能抽象成单独的服务，封装其参数组装及异常处理，使得发奖主逻辑与其解耦，是否就能更具备扩展性和可维护性？”</p>
<p>“这是个不错的思路。之前跟你介绍过设计模式，这个案例就可以使用<strong>策略模式</strong>和<strong>适配器模式</strong>来优化。”</p>
<p>小明借此机会学习了这两个设计模式。首先是策略模式：</p>
<blockquote>
<p>策略模式定义了一系列的算法，并将每一个算法封装起来，使它们可以相互替换。策略模式通常包含以下角色：</p>
<ul>
<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>
<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>
<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>
</ul>
</blockquote>
<p>然后是适配器模式：</p>
<blockquote>
<p>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式包含以下主要角色：</p>
<ul>
<li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li>
<li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li>
<li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li>
</ul>
</blockquote>
<p>结合优化思路，小明首先设计出了策略接口，并通过适配器的思想将各个下游接口类适配成策略类,一下是小明修改后的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 奖励策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span>;<br>&#125;<br><span class="hljs-comment">//实现奖励1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword1</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">private</span> Reword1Service reword1Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword1Request</span> <span class="hljs-variable">reword1Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword1Request</span>();<br>        reword1Request.setParam(params);<br>        reword1Service.reword(reword1Request);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现奖励2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">private</span> Reword2Service reword2Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword2Request</span> <span class="hljs-variable">reword12Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2Request</span>();<br>        reword12Request.setParam(params);<br>        reword2Service.reword(reword12Request);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现奖励3</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">private</span> Reword3Service reword3Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword3Request</span> <span class="hljs-variable">reword13Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword3Request</span>();<br>        reword13Request.setParam(params);<br>        reword3Service.reword(reword13Request);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后，小明创建策略模式的环境类，并供奖励服务调用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//奖励策略上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewordStrategyContext</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RewordStrategy <span class="hljs-title function_">getRewordStrategy</span><span class="hljs-params">(String rewordType)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (rewordType) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword1&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword1</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword2&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2</span>();<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;reword3&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword3</span>();<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;rewardType error!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 奖励服务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewordApiService</span>&#123;<br>    <span class="hljs-comment">// 使用对入参的条件判断进行发奖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">issueReward</span><span class="hljs-params">(String rewardType, Object ... params)</span> &#123;<br>        <span class="hljs-type">RewordStrategy</span> <span class="hljs-variable">rewordStrategy</span> <span class="hljs-operator">=</span> RewordStrategyContext.getRewordStrategy(rewardType);<br>        rewordStrategy.reword(params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>小明的代码经过优化后，虽然结构和设计上比之前要复杂不少，但考虑到健壮性和拓展性，还是非常值得的。</p>
<p>“看，我这次优化后的版本是不是很完美？”小明洋洋得意地说。</p>
<p>“耦合度确实降低了，但还能做的更好。”</p>
<p>“怎么做？”小明有点疑惑。</p>
<p>“我问你，策略类是有状态的模型吗？如果不是是否可以考虑做成单例的？”</p>
<p>“的确如此。”小明似乎明白了。</p>
<p>“还有一点，环境类的获取策略方法职责很明确，但是你依然没有做到完全对修改封闭。”</p>
<p>经过老师的点拨，小明很快也领悟到了要点：“那我可以将策略类单例化以减少开销，并实现自注册的功能彻底解决分支判断。”</p>
<p>小明列出单例模式的要点：</p>
<blockquote>
<p>单例模式设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>
<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>
</blockquote>
<p>最终，小明在策略环境类中使用一个注册表来记录各个策略类的注册信息，并提供接口供策略类调用进行注册。同时使用<strong>饿汉式单例模式</strong>去优化策略类的设计：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 奖励策略接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span>;<br>&#125;<br><span class="hljs-comment">//实现奖励1</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRewordStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Reword2</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Reword2</span><span class="hljs-params">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reword2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Reword1Service reword1Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword1Request</span> <span class="hljs-variable">reword1Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword1Request</span>();<br>        reword1Request.setParam(params);<br>        reword1Service.reword(reword1Request);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现奖励2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRewordStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Reword2</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Reword2</span><span class="hljs-params">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reword2 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> Reword2Service reword2Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword2Request</span> <span class="hljs-variable">reword12Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword2Request</span>();<br>        reword12Request.setParam(params);<br>        reword2Service.reword(reword12Request);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//实现奖励3</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Reword3</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRewordStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Reword3</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword3</span>();<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Reword3</span><span class="hljs-params">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Reword3 <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Reword3Service reword3Service;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">reword</span><span class="hljs-params">(Object... params)</span> &#123;<br>        <span class="hljs-type">Reword3Request</span> <span class="hljs-variable">reword13Request</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Reword3Request</span>();<br>        reword13Request.setParam(params);<br>        reword3Service.reword(reword13Request);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//奖励策略上下文</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewordStrategyContext</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;String, RewordStrategy&gt; REWORD_STRATEGY_MAP = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerStrategy</span><span class="hljs-params">(String rewordType, RewordStrategy rewordStrategy)</span> &#123;<br>        REWORD_STRATEGY_MAP.putIfAbsent(rewordType, rewordStrategy);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> RewordStrategy <span class="hljs-title function_">getStrategy</span><span class="hljs-params">(String rewordType)</span> &#123;<br>        <span class="hljs-keyword">return</span> REWORD_STRATEGY_MAP.get(rewordType);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 抽象类，抽象注册方法</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AbstractRewordStrategy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RewordStrategy</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">()</span> &#123;<br>        RewordStrategyContext.registerStrategy(getClass().getSimpleName(),<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 奖励服务</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RewordApiService</span>&#123;<br>    <span class="hljs-comment">// 使用对入参的条件判断进行发奖</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">issueReward</span><span class="hljs-params">(String rewardType, Object ... params)</span> &#123;<br>        <span class="hljs-type">RewordStrategy</span> <span class="hljs-variable">rewordStrategy</span> <span class="hljs-operator">=</span> RewordStrategyContext.getStrategy(rewardType);<br>        rewordStrategy.reword(params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>如果使用了Spring框架，还可以利用Spring的Bean机制来代替上述的部分设计，直接使用<code>@Component</code>和<code>@PostConstruct</code>注解即可完成单例的创建和注册，代码会更加简洁。</p>
<p>至此，经过了多次讨论、反思和优化，小明终于得到了一套低耦合高内聚，同时符合开闭原则的设计。</p>
<p>“老师，我开始学会利用设计模式去解决已发现的问题。这次我做得怎么样？”</p>
<p>“合格。但是，依然要戒骄戒躁。”</p>
<h2 id="任务模型的设计"><a href="#任务模型的设计" class="headerlink" title="任务模型的设计"></a>任务模型的设计</h2><p>“之前让你设计奖励发放策略你还记得吗？”老师忽然问道。</p>
<p>“当然记得。一个好的设计模式，能让工作事半功倍。”小明答道。</p>
<p>“嗯，那会提到了活动营销的组成部分，除了奖励之外，貌似还有任务吧。”</p>
<p>小明点了点头，老师接着说：“现在，我想让你去完成任务模型的设计。你需要重点关注状态的流转变更，以及状态变更后的消息通知。”</p>
<p>小明欣然接下了老师给的难题。他首先定义了一套任务状态的枚举和行为的枚举：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务状态枚举</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">TaskState</span> &#123;<br>    INIT(<span class="hljs-string">&quot;初始化&quot;</span>),<br>    ONGOING( <span class="hljs-string">&quot;进行中&quot;</span>),<br>    PAUSED(<span class="hljs-string">&quot;暂停中&quot;</span>),<br>    FINISHED(<span class="hljs-string">&quot;已完成&quot;</span>),<br>    EXPIRED(<span class="hljs-string">&quot;已过期&quot;</span>)<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br>&#125;<br><span class="hljs-comment">// 行为枚举</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">ActionType</span> &#123;<br>    START(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;开始&quot;</span>),<br>    STOP(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;暂停&quot;</span>),<br>    ACHIEVE(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;完成&quot;</span>),<br>    EXPIRE(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;过期&quot;</span>)<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>然后，小明对开始编写状态变更功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 更新状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    <span class="hljs-keyword">private</span> Long taskId;<br>    <span class="hljs-comment">// 任务的默认状态为初始化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">TaskState</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> TaskState.INIT;<br>    <span class="hljs-comment">// 活动服务</span><br>    <span class="hljs-keyword">private</span> ActivityService activityService;<br>    <span class="hljs-comment">// 任务管理器</span><br>    <span class="hljs-keyword">private</span> TaskManager taskManager;<br>    <span class="hljs-comment">// 使用条件分支进行任务更新</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (state == TaskState.INIT) &#123;<br>            <span class="hljs-keyword">if</span> (actionType == ActionType.START) &#123;<br>                state = TaskState.ONGOING;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == TaskState.ONGOING) &#123;<br>            <span class="hljs-keyword">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>                state = TaskState.FINISHED;<br>                <span class="hljs-comment">// 任务完成后进对外部服务进行通知</span><br>                activityService.notifyFinished(taskId);<br>                taskManager.release(taskId);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.STOP) &#123;<br>                state = TaskState.PAUSED;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.EXPIRE) &#123;<br>                state = TaskState.EXPIRED;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (state == TaskState.PAUSED) &#123;<br>            <span class="hljs-keyword">if</span> (actionType == ActionType.START) &#123;<br>                state = TaskState.ONGOING;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.EXPIRE) &#123;<br>                state = TaskState.EXPIRED;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>在上述的实现中，小明在<code>updateState</code>方法中完成了2个重要的功能：</p>
<ol>
<li>接收不同的行为，然后更新当前任务的状态；</li>
<li>当任务过期时，通知任务所属的活动和任务管理器。</li>
</ol>
<p>诚然，随着小明的系统开发能力和代码质量意识的提升，他能够认识到这种功能设计存在缺陷。</p>
<p>“老师，我的代码还是和之前说的那样，不够优雅。”</p>
<p>“哦，你自己说说看有什么问题？”</p>
<p>“第一，方法中使用条件判断来控制语句，但是当条件复杂或者状态太多时，条件判断语句会过于臃肿，可读性差，且不具备扩展性，维护难度也大。且增加新的状态时要添加新的if-else语句，这违背了开闭原则，不利于程序的扩展。”</p>
<p>老师表示同意，小明接着说：“第二，任务类不够高内聚，它在通知实现中感知了其他领域或模块的模型，如活动和任务管理器，这样代码的耦合度太高，不利于扩展。”</p>
<p>老师赞赏地说道：“很好，你有意识能够自主发现代码问题所在，已经是很大的进步了。”</p>
<p>“那这个问题应该怎么去解决呢？”小明继续发问。</p>
<p>“这个同样可以通过设计模式去优化。首先是状态流转的控制可以使用<strong>状态模式</strong>，其次，任务完成时的通知可以用到<strong>观察者模式</strong>。”</p>
<p>收到指示后，小明马上去学习了状态模式的结构：</p>
<blockquote>
<p>状态模式：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。状态模式包含以下主要角色：</p>
<ul>
<li>环境类（Context）角色：也称为上下文，它定义了客户端需要的接口，内部维护一个当前状态，并负责具体状态的切换。</li>
<li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为，可以有一个或多个行为。</li>
<li>具体状态（Concrete State）角色：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换。</li>
</ul>
</blockquote>
<p>根据状态模式的定义，小明将TaskState枚举类扩展成多个状态类，并具备完成状态的流转的能力；然后优化了任务类的实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务状态枚举</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">TaskState</span> &#123;<br>    INIT(<span class="hljs-string">&quot;初始化&quot;</span>),<br>    ONGOING( <span class="hljs-string">&quot;进行中&quot;</span>),<br>    PAUSED(<span class="hljs-string">&quot;暂停中&quot;</span>),<br>    FINISHED(<span class="hljs-string">&quot;已完成&quot;</span>),<br>    EXPIRED(<span class="hljs-string">&quot;已过期&quot;</span>)<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br>&#125;<br><span class="hljs-comment">// 行为枚举</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@Getter</span><br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">ActionType</span> &#123;<br>    START(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;开始&quot;</span>),<br>    STOP(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;暂停&quot;</span>),<br>    ACHIEVE(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;完成&quot;</span>),<br>    EXPIRE(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;过期&quot;</span>)<br>    ;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String message;<br>&#125;<br><span class="hljs-comment">//状态接口</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">State</span>&#123;<br>    <span class="hljs-comment">// 默认实现，不做任何处理</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-comment">// do nothing</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">// 任务开始</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (actionType == ActionType.START) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskOnGoing</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//任务进行</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskOnGoing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span>&#123;<br>    <span class="hljs-keyword">private</span> ActivityService activityService;<br>    <span class="hljs-keyword">private</span> TaskManager taskManager;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskFinished</span>());<br>            <span class="hljs-comment">// 通知</span><br>            activityService.notifyFinished(taskId);<br>            taskManager.release(taskId);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.STOP) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskPaused</span>());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 任务暂停状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskPaused</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (actionType == ActionType.START) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskOnGoing</span>());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 任务完成状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskFinished</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br><span class="hljs-comment">// 任务过期状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskExpired</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-comment">// do something</span><br>&#125;<br><span class="hljs-comment">// 任务类</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span> &#123;<br>    <span class="hljs-keyword">private</span> Long taskId;<br>    <span class="hljs-comment">// 初始化为初始态</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">State</span> <span class="hljs-variable">state</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskInit</span>();<br>    <span class="hljs-comment">// 更新状态</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">updateState</span><span class="hljs-params">(ActionType actionType)</span> &#123;<br>        state.updateState(<span class="hljs-built_in">this</span>, actionType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>小明欣喜地看到，经过状态模式处理后的任务类的耦合度得到降低，符合开闭原则。状态模式的优点在于符合单一职责原则，状态类职责明确，有利于程序的扩展。但是这样设计的代价是状态类的数目增加了，因此状态流转逻辑越复杂、需要处理的动作越多，越有利于状态模式的应用。除此之外，状态类的自身对于开闭原则的支持并没有足够好，如果状态流转逻辑变化频繁，那么可能要慎重使用。</p>
<p>处理完状态后，小明又根据老师的指导使用<strong>观察者模式</strong>去优化任务完成时的通知：</p>
<blockquote>
<p>观察者模式：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。观察者模式的主要角色如下。</p>
<ul>
<li>抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li>
<li>具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>
<li>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>
<li>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>
</ul>
</blockquote>
<p>小明首先设计好抽象目标和抽象观察者，然后将活动和任务管理器的接收通知功能定制成具体观察者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 抽象观察者</span><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">TaskObserver</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">response</span><span class="hljs-params">(Long logId)</span>; <span class="hljs-comment">// 反应</span><br>&#125;<br><span class="hljs-comment">// 抽象目标</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskSubject</span> &#123;<br>    <span class="hljs-keyword">protected</span> List&lt;TaskObserver&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;TaskObserver&gt;();<br>    <span class="hljs-comment">// 增加观察者方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(TaskObserver observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br>    <span class="hljs-comment">// 删除观察者方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br>    <span class="hljs-comment">// 通知观察者方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObserver</span><span class="hljs-params">(Long taskId)</span> &#123;<br>        <span class="hljs-keyword">for</span> (TaskObserver observer : observers) &#123;<br>            observer.response(taskId);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 活动观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TaskObserver</span> &#123;<br>    <span class="hljs-keyword">private</span> ActivityService activityService;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">response</span><span class="hljs-params">(Long taskId)</span> &#123;<br>        activityService.notifyFinished(taskId);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 任务管理观察者</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskManageObserver</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TaskObserver</span> &#123;<br>    <span class="hljs-keyword">private</span> TaskManager taskManager;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">response</span><span class="hljs-params">(Long taskId)</span> &#123;<br>        taskManager.release(taskId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>最后，小明将任务进行状态类优化成使用通用的通知方法，并在任务初始态执行状态流转时定义任务进行态所需的观察者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 任务进行状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskOngoing</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;  <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskFinished</span>());<br>            <span class="hljs-comment">// 通知</span><br>            notifyObserver(task.getTaskId());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.STOP) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskPaused</span>());<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 任务初始状态</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TaskInit</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">State</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Task task, ActionType actionType)</span> &#123;<br>        <span class="hljs-keyword">if</span>  (actionType == ActionType.START) &#123;<br>            <span class="hljs-type">TaskOngoing</span> <span class="hljs-variable">taskOngoing</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskOngoing</span>();<br>            taskOngoing.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityObserver</span>());<br>            taskOngoing.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TaskManageObserver</span>());<br>            task.setState(taskOngoing);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>通过观察者模式，小明让任务状态和通知方实现松耦合（实际上观察者模式还没能做到完全的解耦，如果要做进一步的解耦可以考虑学习并使用<strong>发布-订阅模式</strong>，这里也不再赘述）。</p>
<p>至此，小明成功使用状态模式设计出了高内聚、高扩展性、单一职责的任务的整个状态机实现，以及做到松耦合的、符合依赖倒置原则的任务状态变更通知方式。</p>
<p>“老师，我逐渐能意识到代码的设计缺陷，并学会利用较为复杂的设计模式做优化。”</p>
<p>“不错，再接再厉！”</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware-安装虚拟机</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/VMware/VMware-%E5%AE%89%E8%A3%85%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>在安装vmware前，需要确认是否开启虚拟化<br>任务管理器-&gt;性能-&gt;虚拟化<br>如果没有开启则需要开启相关配置</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="创建虚拟机，选择安装类型"><a href="#创建虚拟机，选择安装类型" class="headerlink" title="创建虚拟机，选择安装类型"></a>创建虚拟机，选择安装类型</h2><p>创建虚拟机时，需要选择虚拟机安装类型。<br>这里默认安装自定义安装。</p>
<p>典型安装与自定义安装的差别：通常设计人员使用自定义安装（高级）。</p>
<ol>
<li>典型安装：<br>这种安装方式将默认选项用于所有安装设置，包括安装位置、虚拟网络配置等。<br>这通常是新用户使用的方法，因为它省去了诸如配置选项之类的繁琐步骤，使得安装非常简便快捷。</li>
<li>自定义安装：<br>这种安装方式允许您自己选择要安装的组件和默认选项。<br>通过自定义安装，您可以选择特定的安装位置、禁用不需要的组件、自定义虚拟网络配置等。<br>自定义安装通常是高级用户使用的方法，因为它提供了更大的灵活性和控制权。</li>
</ol>
<h2 id="虚拟机硬件兼容性"><a href="#虚拟机硬件兼容性" class="headerlink" title="虚拟机硬件兼容性"></a>虚拟机硬件兼容性</h2><p>虚拟机硬件兼容性是一个重要的选项，它决定了虚拟机能够在哪些版本的VMware产品上运行在选择虚拟机硬件兼容性选项时，需要考虑主机系统的版本以及目标环境的版本，以确保虚拟机可以在目标环境中正常运行。同时，不同的硬件兼容性选项可能会影响虚拟机所支持的特性和性能，因此需要根据实际需求进行选。<br>​ 例如：<br>​ Workstation 16.x：该选项表示虚拟机仅能在VMware Workstation 16或更高版本上运行<br>​ Workstation 15.x：该选项表示虚拟机可以在VMware Workstation 15或更高版本上运行<br>​ Workstation 14.x：该选项表示虚拟机可以在VMware Workstation 14或更高版本上运行。<br>​ 这个选项意义比如：<br>​ 在a机器上创建的虚拟机 在未来可能要移入到b机器<br>​ 如果a机器是Workstation 16.x<br>​ 但是b机器是Workstation 15.x 会存在兼容性问题<br>​ 如果是相反的操作<br>​ 如果a机器是Workstation 15.x<br>​ b机器是Workstation 16.x<br>​ a机器上创建的虚拟机移入到b机器，则可以使用，因为16.x是兼容15.x的</p>
<h2 id="安装镜像文件"><a href="#安装镜像文件" class="headerlink" title="安装镜像文件"></a>安装镜像文件</h2><p>这一步选择稍后安装操作系统。</p>
<p>安装方式分为三种安装方式 ：<br>​ 第一种是通过电脑外，光盘驱动安装 (使用很少)<br>​ 第二种是通过电脑内，下载的镜像文件 (常用)<br>​ 第三种是先创建空虚拟机，稍后再安装系统 (常用)</p>
<h2 id="选择版本"><a href="#选择版本" class="headerlink" title="选择版本"></a>选择版本</h2><p>操作系统选择Linux,CentOS8版本</p>
<h2 id="命名虚拟机以及安装路径"><a href="#命名虚拟机以及安装路径" class="headerlink" title="命名虚拟机以及安装路径"></a>命名虚拟机以及安装路径</h2><p>给虚拟机一个合适的名称即可</p>
<h2 id="处理器配置选择"><a href="#处理器配置选择" class="headerlink" title="处理器配置选择"></a>处理器配置选择</h2><p>处理器数量：<br>​ 可以根据虚拟机的需求选择使用的物理CPU核心数。但是，需要确认主机系统的CPU是否支持所需的核心数，否则可能会导致虚拟机无法启动或性能不佳。<br>查看主机CPU可以选择任务管理-&gt;资源监视器<br>cpu内核总数是cpu&#x3D;n+1<br>再选择虚拟机的cpu核心数（注意：你需要同时开启的虚拟机内核数相加不能超过你电脑cpu内核总数）</p>
<h2 id="虚拟机内存配置选择"><a href="#虚拟机内存配置选择" class="headerlink" title="虚拟机内存配置选择"></a>虚拟机内存配置选择</h2><p>虚拟机内存配置的合适数值取决于许多因素，例如虚拟机运行的操作系统、应用程序的类型和数量、主机系统的硬件配置等。一般来说，以下是一些关于虚拟机内存配置的推荐：</p>
<p>对于桌面虚拟机（例如Windows 10），最低配置为2GB，推荐4GB或更高。<br>对于服务器虚拟机（例如Windows Server、Linux服务器），至少需要4GB，推荐8GB及以上。<br>可以在虚拟机中，根据实际需求增加内存。</p>
<h2 id="虚拟机网络配置选择"><a href="#虚拟机网络配置选择" class="headerlink" title="虚拟机网络配置选择"></a>虚拟机网络配置选择</h2><p>以下是VMware虚拟网络中的三种常见网络连接方式：</p>
<table>
<thead>
<tr>
<th>网络模式</th>
<th>网络模式含义</th>
</tr>
</thead>
<tbody><tr>
<td>桥接（Bridged）</td>
<td>将虚拟机网络透明地连接到物理网络中，并且虚拟机可获得与物理网络相同的IP地址段。<br/>这种连接方式可以让虚拟机直接访问物理网络上的其他设备，同时也能让物理网络上的其他设备访问到虚拟机。<br/>在桥接模式下，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信。<br/>同时，由于这个虚拟系统是局域网中的一个独立的主机系统，那么就可以手工配置它的TCP&#x2F;IP配置信息，以实现通过局域网的网关或路由器访问互联网</td>
</tr>
<tr>
<td>NAT（Network Address Translation）</td>
<td>在主机和虚拟机之间建立一个私有网络，并通过虚拟网络适配器对连接进行管理。虚拟机使用虚拟网络适配器向外部发送请求，而请求的源IP地址被转换为主机的IP地址。<br/>这种连接方式可以提供一定的安全性，防止虚拟机受到来自外部的攻击，并且允许虚拟机访问Internet。</td>
</tr>
<tr>
<td>仅主机（Host-Only）</td>
<td>创建一个独立的虚拟网络，只包含主机和虚拟机，而不与任何物理网络连接。<br/>这种连接方式可以提供一定的安全性，因为虚拟机无法从Internet或局域网中访问其他设备，但是不允许虚拟机之间直接通信。</td>
</tr>
</tbody></table>
<p>桥接模式的细则理解：</p>
<ul>
<li>桥接模式可以让虚拟机透明地连接到物理网络中，并且虚拟机可获得与物理网络相同的IP地址段。在桥接模式下，VMware虚拟网络适配器会创建一个虚拟交换机（Virtual Switch），这个虚拟交换机类似于物理网络交换机，用于将虚拟机和物理网络之间进行通信。虚拟机和主机之间的通信并非直接发生，而是通过虚拟交换机（Virtual Switch）进行传递。虚拟交换机类似于物理网络交换机，用于将虚拟机和物理网络之间进行通信。当虚拟机向主机发送数据包时，数据包会先通过虚拟交换机，然后再传递给主机系统；反之，当主机向虚拟机发送数据包时，数据包也会经过虚拟交换机转发给虚拟机。</li>
<li>当虚拟机使用桥接模式连接网络时，它们就像物理计算机一样被分配了一个唯一的MAC地址和IP地址。这使得虚拟机能够直接访问物理网络上的其他设备，同时也能让物理网络上的其他设备访问到虚拟机。因此，在桥接模式下，虚拟机可以像物理计算机一样访问网络资源、共享文件等。<br>3、需要注意的是，使用桥接模式需要根据实际需求进行设置，并确保主机系统的网络适配器正确配置。如果网络适配器未正确配置，可能导致虚拟机无法访问网络或访问速度缓慢。同时，为避免安全问题，建议对虚拟机启用防火墙或其他安全功能。</li>
</ul>
<p>NAT模式的细则理解：</p>
<ul>
<li>NAT模式（Network Address Translation）在主机和虚拟机之间建立一个私有网络，通过虚拟网络适配器对连接进行管理，使得虚拟机可以使用主机的Internet连接。具体来说，在NAT模式下，VMware会创建一个虚拟DHCP服务器，并为虚拟机分配一个虚拟IP地址，同时将本地主机的IP地址作为NAT路由器的出口IP地址</li>
<li>当虚拟机使用NAT模式连接到Internet时，虚拟机的所有网络通信都是通过主机系统进行转发和管理的。虚拟机的访问请求先被发送到虚拟DHCP服务器，然后经由主机进行NAT转换，返回数据则也会经过主机的NAT转换后再传递给虚拟机。这种连接方式可以提供一定的安全性，防止虚拟机受到来自外部的攻击，并且允许虚拟机访问Internet。</li>
<li>需要注意的是，使用NAT模式需要根据实际需求进行设置，并确保主机系统的网络适配器正确配置。如果网络适配器未正确配置，可能导致虚拟机无法访问网络或访问速度缓慢。同时，建议对虚拟机启用防火墙或其他安全功能，以保护虚拟机免受来自外部的攻击。</li>
</ul>
<p>仅主机模式的细则理解：</p>
<ul>
<li>仅主机模式（Host-Only）创建一个独立的虚拟网络，只包含主机和虚拟机，而不与任何物理网络连接。在这种模式下，虚拟机只能与主机进行通信，而无法直接访问Internet或局域网上的其他设备。为了实现这种连接方式，VMware会创建一个虚拟网络适配器，并将其配置为与主机系统共享。</li>
<li>当虚拟机使用仅主机模式连接网络时，它们就像被放置在一个私有网络中，可以相互通信、共享资源等，但是无法从Internet或局域网中访问其他设备。这种连接方式可以提供一定的安全性，因为虚拟机无法从Internet或局域网中访问其他设备，同时也不会受到来自外部的攻击。</li>
<li>需要注意的是，在仅主机模式下，虚拟机之间可以直接通信，但不能与主机所在的物理网络（例如家庭或企业网络）通信。如果需要让虚拟机与物理网络通信，可以考虑使用桥接或NAT模式。同时，在使用仅主机模式时，建议对虚拟机启用防火墙或其他安全功能，以保护虚拟机免受来自虚拟机之间的攻击。</li>
</ul>
<h2 id="I-x2F-O控制器配置选择"><a href="#I-x2F-O控制器配置选择" class="headerlink" title="I&#x2F;O控制器配置选择"></a>I&#x2F;O控制器配置选择</h2><table>
<thead>
<tr>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>BusLogic</td>
<td>是第一个被支持的SCSI控制器类型，适用于早期的Windows操作系统和其他一些老旧的操作系统。在性能方面，BusLogic相对较慢，因为它使用CPU软件仿真来处理I&#x2F;O请求。</td>
</tr>
<tr>
<td>LSI Logic</td>
<td>是一种较新的SCSI控制器类型，适用于大多数现代操作系统和应用程序。与BusLogic相比，LSI Logic使用更先进的技术来处理I&#x2F;O请求，具有更好的性能和可靠性。(推荐)</td>
</tr>
<tr>
<td>LSI Logic SAS</td>
<td>是一种基于SAS架构的SCSI控制器，适用于需要高速存储和高并发I&#x2F;O的应用场景。与LSI Logic相比，LSI Logic SAS提供了更高的带宽和更低的延迟。(推荐) Paravirtualized SCSI：是一种特殊类型的SCSI控制器，使用虚拟化技术来提高性能和效率。它可以通过直接访问物理设备来避免CPU软件仿真，提供更低的延迟和更高的吞吐量。</td>
</tr>
</tbody></table>
<h2 id="磁盘类型选择"><a href="#磁盘类型选择" class="headerlink" title="磁盘类型选择"></a>磁盘类型选择</h2><p>在VMware虚拟机中，IDE磁盘类型、SCSI磁盘类型、SATA磁盘类型和NVMe磁盘类型都有各自的特点和适用场景。以下是它们的主要特点和适用场景：</p>
<p>IDE磁盘类型：适用于较早的操作系统和应用程序，如MS-DOS和Windows 95&#x2F;98等。它可以连接两个IDE硬盘或CD&#x2F;DVD-ROM设备，但不支持热插拔功能，且性能相对较差。</p>
<p>SCSI磁盘类型：适用于大多数现代操作系统和应用程序，特别是需要高性能存储的应用场景。它支持多达15个SCSI设备，包括硬盘、CD&#x2F;DVD-ROM、磁带机等，并提供了更好的性能和可靠性。</p>
<p>SATA磁盘类型：适用于较新的Windows、Linux和其他操作系统，特别是桌面和笔记本电脑的虚拟机。它可以连接多个SATA硬盘和CD&#x2F;DVD-ROM设备，并提供了较好的性能和扩展性。与IDE相比，SATA磁盘类型支持更高的数据传输速率和更大的存储容量。</p>
<p>NVMe磁盘类型：适用于需要极高性能存储的应用场景，如大规模数据分析和高性能计算等。它可以连接多个NVMe硬盘，并提供了较低的延迟和更高的带宽。与SCSI和SATA相比，NVMe具有更高的I&#x2F;O吞吐量和更低的访问延迟。</p>
<p>IDE磁盘类型适用于较早的系统和应用程序，而SCSI、SATA和NVMe则适用于现代的操作系统和应用程序。在选择磁盘类型时，应该根据实际需求进行权衡，考虑到性能、兼容性和扩展性等因素。需要注意的是，在更改磁盘类型时，可能需要重新安装操作系统或驱动程序，以确保虚拟机可以正常工作。</p>
<h2 id="磁盘选择"><a href="#磁盘选择" class="headerlink" title="磁盘选择"></a>磁盘选择</h2><p>在VMware虚拟机中，创建新的虚拟磁盘、使用现有的虚拟磁盘和使用物理磁盘都有各自的优缺点和适用场景。以下是它们的主要区别：<br>​ 创建新的虚拟磁盘：这种方法可以为虚拟机分配一个新的虚拟磁盘，并将其格式化为所需的文件系统。创建新的虚拟磁盘通常比较简单，且不会影响其他虚拟机或主机系统。</p>
<p>​ 使用现有的虚拟磁盘：这种方法可以利用已经存在的虚拟磁盘，避免重复创建和占用存储空间。如果虚拟机需要多个磁盘，使用现有的虚拟磁盘也可以提高磁盘管理的效率和便捷性。</p>
<p>​ 使用物理磁盘：这种方法可以将物理磁盘直接映射到虚拟机中，使得虚拟机可以直接读写物理磁盘上的数据。使用物理磁盘可以获得更好的性能和可靠性，但需要注意保护物理磁盘的数据安全性。</p>
<p>​ 需要注意的是，在使用以上任何一种方法时，都需要考虑到存储空间、性能和安全等方面的问题，并根据实际需求进行权衡选择。同时，在使用物理磁盘时，需要特别小心，以避免对宿主机上的数据造成损坏或泄露。</p>
<h2 id="磁盘容量选择"><a href="#磁盘容量选择" class="headerlink" title="磁盘容量选择"></a>磁盘容量选择</h2><p>如无特殊需求，大小和分配类型根据红框选择即可，如有特殊需求可自行调配。</p>
<h2 id="磁盘存储路径"><a href="#磁盘存储路径" class="headerlink" title="磁盘存储路径"></a>磁盘存储路径</h2><p>依据自己真实情况进行选择配置。</p>
<h2 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h2><p>可自定义配置虚拟机硬件配置信息，如博猪会把USB驱动、声卡等非必要的硬件配置信息，配置完成后，点击完成即可。</p>
<h1 id="初始配置"><a href="#初始配置" class="headerlink" title="初始配置"></a>初始配置</h1><h2 id="虚拟网卡区别"><a href="#虚拟网卡区别" class="headerlink" title="虚拟网卡区别"></a>虚拟网卡区别</h2><h3 id="VMnet1-和-VMnet8区别："><a href="#VMnet1-和-VMnet8区别：" class="headerlink" title="VMnet1 和 VMnet8区别："></a>VMnet1 和 VMnet8区别：</h3><p>vmnet1和vmnet8是两个虚拟网卡，主要作用是让虚拟机可以通过我们的宿主机的网线上网。</p>
<p><font color="#c00000">注意：如果有“！”，说明不能用。</font></p>
<blockquote>
<h2 id="vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host-Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。"><a href="#vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host-Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。" class="headerlink" title="vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。设置私有网络（Host Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。而使用桥接网络时，则不需要这两个网卡了。"></a>vmnet1是为host-only方式服务的，vmnet8是为NAT方式服务的。<br>设置私有网络（Host Only）时，用来和主机通信，禁用以后就无法正常使用Host-Only模式了；<br>设置网络地址翻译（NAT）时，和主机通讯使用，如果禁用，那么虚拟机在NAT模式下依然可以通过主机网卡访问外网，但不能通过内部网络和主机直接通信。<br>而使用桥接网络时，则不需要这两个网卡了。</h2><p>使用Host-Only模式的guest系统与主机通信需要VMnet1网卡的支持；<br>通过NAT方式上网的guest系统与主机通信需要VMnet8网卡的支持；<br>使用桥接模式上网需要网络中存在DHCP服务器，且提供服务。</p>
</blockquote>
<p>再来区分一下应用场景：</p>
<ul>
<li>VMnet1<br>使用Host-Only模式的guest系统与主机通信需要VMnet1网卡的支持</li>
<li>VMnet8<br>使用NAT网络模式，在宿主机安装多台虚拟机，和宿主组成一个小局域网，宿主机，虚拟机之间都可以互相通信，虚拟机也可访问外网，例如 搭建 hadoop 集群，分布式服务</li>
<li>VMNet0<br>使用桥接模式，安装VM后，在VM里建立虚拟机 默认 就是该模式。<br>如果你只是需要一台虚拟机可以和宿主互通，并可以访问外网，此模式即可。</li>
</ul>
<blockquote>
<p>安装虚拟机系统后不需要调整网络，物理网络中的 “路由” 所包含的DHCP服务器会自动识别该虚拟机并为其分配IP地址；<br>如果没有路由，可以自己手动在系统分配，原则是和宿主机在同一网段并指向相同的网关即可通信。</p>
</blockquote>
<h2 id="配置虚拟机网络配置"><a href="#配置虚拟机网络配置" class="headerlink" title="配置虚拟机网络配置"></a>配置虚拟机网络配置</h2><p><font color="#c00000">网络模式默认配置为NAT模式</font></p>
<p>既然要网络模式要设置为NAT模式，即对应VMware中的<code>VMware Network Adapter VMnet8</code>网卡设备，这个是虚拟网卡。</p>
<p>VMware-&gt;编辑-&gt;选择VMnet8<br>配置子网地址、子网掩码、网关信息，如果需要动态分配IP地址的话则需要配置DHCP信息。</p>
<h2 id="编辑网卡配置文件"><a href="#编辑网卡配置文件" class="headerlink" title="编辑网卡配置文件"></a>编辑网卡配置文件</h2><p>编辑网卡配置文件，进入 &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts 目录，网卡名称可能不同，查看 ip (使用 ifconfig 或 ip addr 命令)，可以找到网卡名，进入网卡名对应的文件。<br>一般虚拟机网卡信息为：<code>ifcfg-ens160</code>,如果存在多个网卡配置信息，可以使用<code>ifconfig</code>查询虚拟机网卡信息，找到对应网段的信息配置。<br>这里就以<code>ifcfg-ens160</code>为例。</p>
<p><code>vim ifcfg-ens160</code> 修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">TYPE=Ethernet<br>PROXY_METHOD=none<br>BROWSER_ONLY=no<br><span class="hljs-comment"># 这里默认为DHCP,即动态分配，现在修改为静态地址</span><br>BOOTPROTO=static<br>DEFROUTE=<span class="hljs-built_in">yes</span><br>IPV4_FAILURE_FATAL=no<br>IPV6INIT=<span class="hljs-built_in">yes</span><br>IPV6_AUTOCONF=<span class="hljs-built_in">yes</span><br>IPV6_DEFROUTE=<span class="hljs-built_in">yes</span><br>IPV6_FAILURE_FATAL=no<br>NAME=ens160<br>UUID=79179731-c3c5-4ba8-8b78-b54af474f1b7<br>DEVICE=ens160<br><span class="hljs-comment"># 开机自启动</span><br>ONBOOT=<span class="hljs-built_in">yes</span><br><span class="hljs-comment"># 静态IP地址</span><br>IPADDR=192.168.122.128<br><span class="hljs-comment"># 静态IP掩码信息</span><br>NETMASK=255.255.255.0<br><span class="hljs-comment"># 静态IP网关</span><br>GATEWAY=192.168.122.2<br></code></pre></td></tr></table></figure>

<h2 id="重启网卡配置信息"><a href="#重启网卡配置信息" class="headerlink" title="重启网卡配置信息"></a>重启网卡配置信息</h2><p>使用 <code>nmcli c reload</code>（centos 8） 命令或 <code>service network restart</code> (centos 7)命令重启虚拟网卡，查看本机 ip 如果不是设置的则重启虚拟机</p>
<h1 id="桌面调整设置"><a href="#桌面调整设置" class="headerlink" title="桌面调整设置"></a>桌面调整设置</h1><p>centos中的6种运行级别如下：</p>
<ul>
<li>0：关机 runlevel0 poweroff.target</li>
<li>1：单用户 runlevel1 rescue.target</li>
<li>2：多用户无网络 runlevel2 multi-user.target</li>
<li>3：多用户有网络 runlevel3 multi-user.target</li>
<li>4：保留 runlevel4 multi-user.target</li>
<li>5：图形界面 runlevel5 graphical.target</li>
<li>6：关机并重启 runlevel6 reboot.target</li>
</ul>
<h2 id="1-centos7以下的版本"><a href="#1-centos7以下的版本" class="headerlink" title="1. centos7以下的版本"></a>1. centos7以下的版本</h2><p>通过有以下方式进行设置默认启动方式<br><code>vim /etc/inittab</code><br>找到id:5:initdefault,将 5 修改为3即可</p>
<h2 id="2-centos7-含-以上的版本"><a href="#2-centos7-含-以上的版本" class="headerlink" title="2. centos7(含)以上的版本"></a>2. centos7(含)以上的版本</h2><ul>
<li><p>设置成默认命令模式启动<br>  <code>systemctl set-default multi-user.target 或者 systemctl set-default runlevel3</code><br>  等同于<br>  <code>rm /etc/systemd/system/default.target &amp;&amp; ln -sf /lib/systemd/system/multi-user.target /etc/systemd/system/default.target</code></p>
</li>
<li><p>设置成默认图形模式启动<br>  <code>systemctl set-default graphical.target 或者 systemctl set-default runlevel5</code><br>  等同于<br>  <code>rm /etc/systemd/system/default.target &amp;&amp; ln -sf /lib/systemd/system/graphical.target /etc/systemd/system/default.target</code></p>
</li>
</ul>
<p>可以看到他们的关系：  </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">ls</span> -l /etc/systemd/system/default.target<br><span class="hljs-built_in">ls</span> -l /lib/systemd/system/runlevel*<br></code></pre></td></tr></table></figure>
<h2 id="3-手动启动某个模式"><a href="#3-手动启动某个模式" class="headerlink" title="3. 手动启动某个模式"></a>3. 手动启动某个模式</h2><p><code>init 3 //运行命令行模式</code><br><code>init 5 //运行图形模式</code></p>
<h2 id="4-安装图像界面"><a href="#4-安装图像界面" class="headerlink" title="4. 安装图像界面"></a>4. 安装图像界面</h2><p><code>dnf groupinstall &quot;GNOME Desktop&quot; &quot;Graphical Administration Tools&quot;</code><br>centos8以下版本，把dnf改为yum</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>Linux</category>
        <category>VMware</category>
      </categories>
      <tags>
        <tag>VMware</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis技术内幕</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/MyBatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>博主mybatis源码学习相关资料：</p>
<blockquote>
<p>MyBatis技术内幕</p>
</blockquote>
<p>myBatis网站：</p>
<blockquote>
<p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis3官网文档地址</a></p>
</blockquote>
</blockquote>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><h2 id="ORM-简介"><a href="#ORM-简介" class="headerlink" title="ORM 简介"></a>ORM 简介</h2><h3 id="ORM概念"><a href="#ORM概念" class="headerlink" title="ORM概念"></a>ORM概念</h3><p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>
<p>简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>
<p>ORM在业务逻辑层和数据库层之间充当了桥梁的作用。</p>
<h3 id="ORM由来"><a href="#ORM由来" class="headerlink" title="ORM由来"></a>ORM由来</h3><p>让我们从O&#x2F;R开始。字母O起源于”对象”(Object),而R则来自于”关系”(Relational)。</p>
<p>几乎所有的软件开发过程中都会涉及到对象和关系数据库。在用户层面和业务逻辑层面，我们是面向对象的。当对象的信息发生变化的时候，我们就需要把对象的信息保存在关系数据库中。</p>
<p>按照之前的方式来进行开发就会出现程序员会在自己的业务逻辑代码中夹杂很多SQL语句用来增加、读取、修改、删除相关数据，而这些代码通常都是重复的。</p>
<h3 id="ORM优势"><a href="#ORM优势" class="headerlink" title="ORM优势"></a>ORM优势</h3><p>ORM解决的主要问题是对象和关系的映射。它通常把一个类和一个表一一对应，类的每个实例对应表中的一条记录，类的每个属性对应表中的每个字段。</p>
<p>ORM提供了对数据库的映射，不用直接编写SQL代码，只需像操作对象一样从数据库操作数据。</p>
<p>让软件开发人员专注于业务逻辑的处理，提高了开发效率。</p>
<h3 id="ORM的劣势"><a href="#ORM的劣势" class="headerlink" title="ORM的劣势"></a>ORM的劣势</h3><p>ORM的缺点是会在一定程度上牺牲程序的执行效率。</p>
<p>ORM用多了SQL语句就不会写了，关系数据库相关技能退化…</p>
<h3 id="ORM总结"><a href="#ORM总结" class="headerlink" title="ORM总结"></a>ORM总结</h3><p>ORM只是一种工具，工具确实能解决一些重复，简单的劳动。这是不可否认的。</p>
<p>但我们不能指望某个工具能一劳永逸地解决所有问题，一些特殊问题还是需要特殊处理的。</p>
<p>但是在整个软件开发过程中需要特殊处理的情况应该都是很少的，否则所谓的工具也就失去了它存在的意义。</p>
<h2 id="常见的持久化框架"><a href="#常见的持久化框架" class="headerlink" title="常见的持久化框架"></a>常见的持久化框架</h2><p>当前 Java ORM 框架产品有很多，常见的框架有 Hibernate 和 MyBatis，其主要区别如下。</p>
<h3 id="Hibernate"><a href="#Hibernate" class="headerlink" title="Hibernate"></a>Hibernate</h3><p>Hibernate 框架是一个全表映射的框架。通常开发者只要定义好持久化对象到数据库表的映射关系，就可以通过 Hibernate 框架提供的方法完成持久层操作。</p>
<p>开发者并不需要熟练地掌握 SQL 语句的编写，Hibernate 框架会根据编制的存储逻辑，自动生成对应的 SQL，并调用 JDBC 接口来执行，所以其开发效率会高于 MyBatis 框架。</p>
<p>然而 Hibernate 框架自身也存在一些缺点，例如：</p>
<ul>
<li>多表关联时，对 SQL 查询的支持较差；</li>
<li>更新数据时，需要发送所有字段；</li>
<li>不支持存储过程；</li>
<li>不能通过优化 SQL 来优化性能。</li>
</ul>
<p>这些问题导致其只适合在场景不太复杂且对性能要求不高的项目中使用。</p>
<p>Hibernate 官网：<a href="http://hibernate.org/">http://hibernate.org/</a></p>
<h3 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h3><p>MyBatis 框架是一个半自动映射的框架。这里所谓的 “半自动” 是相对于 Hibernate 框架全表映射而言的，MyBatis 框架需要手动匹配提供 POJO、SQL 和映射关系，而 Hibernate 框架只需提供 POJO 和映射关系即可。</p>
<p>与 Hibernate 框架相比，虽然使用 MyBatis 框架手动编写 SQL 要比使用 Hibernate 框架的工作量大，但 MyBatis 框架可以配置动态 SQL 并优化 SQL、通过配置决定 SQL 的映射规则，以及支持存储过程等。对于一些复杂的和需要优化性能的项目来说，显然使用 MyBatis 框架更加合适。</p>
<p>MyBatis 框架可应用于需求多变的互联网项目，如电商项目；Hibernate 框架可应用于需求明确、业务固定的项目，如 OA 项目、ERP 项目等。</p>
<p>学习地址：<a href="https://mybatis.org/mybatis-3/zh/getting-started.html">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p>
<h2 id="MyBatis示例"><a href="#MyBatis示例" class="headerlink" title="MyBatis示例"></a>MyBatis示例</h2><blockquote>
<p>项目案例为一个普通的Maven的Java项目</p>
</blockquote>
<h3 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.4.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="创建SQL"><a href="#创建SQL" class="headerlink" title="创建SQL"></a>创建SQL</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `inter_employee` (<br>  `id` varchar(32) NOT NULL COMMENT &#x27;id&#x27;,<br>  `name` varchar(32) NOT NULL COMMENT &#x27;姓名&#x27;,<br>  `email` varchar(128) NOT NULL COMMENT &#x27;邮箱&#x27;,<br>  `sex` char(1) NOT NULL COMMENT &#x27;性别 0-男；1-女；2-未知&#x27;,<br>  `dept_id` bigint NOT NULL COMMENT &#x27;所属部门id&#x27;,<br>  `org_id` varchar(32) NOT NULL COMMENT &#x27;所属机构id&#x27;,<br>  `status` char(1) NOT NULL COMMENT &#x27;状态 0-无效；1-有效&#x27;,<br>  `created_by` varchar(32) DEFAULT NULL COMMENT &#x27;创建人&#x27;,<br>  `created_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `updated_by` varchar(32) DEFAULT NULL COMMENT &#x27;更新人&#x27;,<br>  `updated_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;机构员工信息&#x27;;<br></code></pre></td></tr></table></figure>

<h3 id="注入数据"><a href="#注入数据" class="headerlink" title="注入数据"></a>注入数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;a999b75045ac4c51a537b4a2f3631da8&#x27;</span>, <span class="hljs-string">&#x27;will——5&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;a007fd3f3d4242b880d9eae31514ba1f&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:11:26&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2020-06-03 22:11:26&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;08b8755629e8482da80e329e6b8b7221&#x27;</span>, <span class="hljs-string">&#x27;will——3&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;fa67adfd262a4c4b9c763031fbe5e11c&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:17&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:17&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;4da05f39ba5b4b5e8a9aa583e649165f&#x27;</span>, <span class="hljs-string">&#x27;will——2&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;253daef00ca54b1ea7064bdc491006d7&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:10&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:10&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;5ad23b1c5a9545298d99455b7fc9c12c&#x27;</span>, <span class="hljs-string">&#x27;will——1&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;e39ef78e0a834846b103492a887aa95e&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 21:49:30&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:11:01&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;7c6ee3c522b34d48bdaaa467eb97265b&#x27;</span>, <span class="hljs-string">&#x27;will——4&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;2f8a94f7433a45a6bf5c0b5d29d0bd39&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:21&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2020-06-03 22:09:21&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;a7da1e401baa48a5af095e4169c6ddbb&#x27;</span>, <span class="hljs-string">&#x27;will——6&#x27;</span>, <span class="hljs-string">&#x27;1@qqc.om&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-number">1001</span>, <span class="hljs-string">&#x27;20b14675a4e54345aa042baed441b3e4&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>, <span class="hljs-string">&#x27;2020-06-03 22:11:30&#x27;</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-string">&#x27;2020-06-03 22:11:30&#x27;</span>);<br></code></pre></td></tr></table></figure>

<h3 id="创建MODEL对象"><a href="#创建MODEL对象" class="headerlink" title="创建MODEL对象"></a>创建MODEL对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossYang.myBatisTest.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> InterEmployee</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/8 9:55 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployee</span> &#123;<br>    <span class="hljs-keyword">private</span> String id;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String email;<br>    <span class="hljs-keyword">private</span> String sex;<br>    <span class="hljs-keyword">private</span> String deptId;<br>    <span class="hljs-keyword">private</span> String orgId;<br>    <span class="hljs-keyword">private</span> String status;<br>    <span class="hljs-keyword">private</span> String createdBy;<br>    <span class="hljs-keyword">private</span> String createdTime;<br>    <span class="hljs-keyword">private</span> String updatedBy;<br>    <span class="hljs-keyword">private</span> String updatedTime;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="创建mybatis-config-xml"><a href="#创建mybatis-config-xml" class="headerlink" title="创建mybatis-config.xml"></a>创建<code>mybatis-config.xml</code></h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;jdbc:mysql://localhost:3306/beetsql_demo&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;root&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;12345678&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">environments</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/interEmployee.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="创建interEmployee-xml-实现查询功能"><a href="#创建interEmployee-xml-实现查询功能" class="headerlink" title="创建interEmployee.xml,实现查询功能"></a>创建<code>interEmployee.xml</code>,实现查询功能</h3><ul>
<li>在<code>resources</code>目录下面创建<code>mapper</code>文件夹</li>
<li>创建表对应的xml【<code>interEmployee.xml</code>】文件，实现最基本的一个查询SQL</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;com.bossYang.myBatisTest.dao.InterEmployeeDao&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span> = <span class="hljs-string">&quot;queryInterEmployeeById&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.bossYang.myBatisTest.bean.InterEmployee&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.bossYang.myBatisTest.bean.InterEmployee&quot;</span>&gt;</span><br>        SELECT<br>            t.id id,<br>            t.`name` `name`,<br>            t.email email,<br>            t.dept_id deptId,<br>            t.org_id orgId,<br>            t.sex sex,<br>            t.`status` `status`,<br>            t.created_by createdBy,<br>            t.created_time createdTime,<br>            t.updated_by updatedBy,<br>            t.updated_time updatedTime<br>        FROM inter_employee t<br>        WHERE t.id = #&#123;id&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="实现查询"><a href="#实现查询" class="headerlink" title="实现查询"></a>实现查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossYang.myBatisTest;<br><br><span class="hljs-keyword">import</span> com.bossYang.myBatisTest.bean.InterEmployee;<br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> MyBatisInitDemo</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/8 10:03 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBatisInitDemo</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">myBatisCfgResource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;config/mybatis-config.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br>        <span class="hljs-type">SqlSessionFactory</span> <span class="hljs-variable">sqlSessionFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(resource);<br>        <span class="hljs-type">SqlSession</span> <span class="hljs-variable">sqlSession</span> <span class="hljs-operator">=</span> sqlSessionFactory.openSession();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">InterEmployee</span> <span class="hljs-variable">param</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InterEmployee</span>();<br>            param.setId(<span class="hljs-string">&quot;08b8755629e8482da80e329e6b8b7221&quot;</span>);<br><br>            <span class="hljs-type">InterEmployee</span> <span class="hljs-variable">interEmployee</span> <span class="hljs-operator">=</span> sqlSession.selectOne(<span class="hljs-string">&quot;com.bossYang.myBatisTest.dao.InterEmployeeDao.queryInterEmployeeById&quot;</span>, param);<br>            <span class="hljs-keyword">if</span> (interEmployee != <span class="hljs-literal">null</span>) &#123;<br>                System.out.println(<span class="hljs-string">&quot;interEmployee = &quot;</span> + interEmployee);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="MyBatis整体架构"><a href="#MyBatis整体架构" class="headerlink" title="MyBatis整体架构"></a>MyBatis整体架构</h2><p>MyBatis 整体架构分为三层：基础支持层、核心处理层和接口层。</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201114212618.png" alt="image-20201114212618759"></p>
<h3 id="基础支持层"><a href="#基础支持层" class="headerlink" title="基础支持层"></a>基础支持层</h3><ul>
<li><p>反射模块</p>
<blockquote>
<p>Java 中的反射虽然功能强大，但对大多数开发人员来说，写出高质量的反射代码还是有一定难度的。M y Ba tis 中专门提供了反射模块，该模块对Java 原生的反射进行了良好的封装，提供了更加简洁易用的API ，方便上层使调用，并且对反射操作进行了一系列优化，例如缓存了类的元数据，提高了反射操作的性能。</p>
</blockquote>
</li>
<li><p>类型转换模块</p>
<blockquote>
<p>正如前面示例所示 ，MyBatis 为简化配置文件提供了别名机制 ，该机制是类型转换模 块的主要功能之一 。类型转换模块的另一个功能是实现 JDBC 类型与 Java 类型之间的 转换，该功能在为 SQL 语句绑定实参以及 映射查询结果集 时都会涉及 。在为 SQL 语 句绑定实参时，会将数据由 Java 类型转换成 JDBC 类型 ；而在映射结果集时 ，会将数 据由 JDBC 类型转换成 Java 类型 。</p>
</blockquote>
</li>
<li><p>日志模块</p>
<blockquote>
<p>无论在开发测试环境中 ，还是在线上生产环境中 ，日志在整个系统中的地位都是非常 重要的 。良好的日志功能可以帮助开发 人员和测试人员快速定位 Bug 代码 ，也可以帮 助运维人员快速定位性能瓶颈、等问题 。目前的 Java 世界中存在很多优秀的日志框架 ，例如 Log4j 、Log4j2, slf4j 等 。MyBatis 作为一个设计优良的框架 ，除了提供详细的日 志输出信息 ，还要能够集成多种日志框架 ，其日志模块的 一个主要功能就是集成第 三 方日志框架</p>
</blockquote>
</li>
<li><p>资源加载模块</p>
<blockquote>
<p>资源加载模块主要是对类加载器进行封装 ，确定类加载器的使用顺序 ，并提供了加载 类文件以及其他资源文件的功能 。</p>
</blockquote>
</li>
<li><p>解析器模块</p>
<blockquote>
<p>解析器模块的主要提供了两个功能 ：一个功能是对 XPath 进行封装 ，为 MyBatis 初始 化时解析 mybatis-config.xml 配置文件以及映射配 置文件提供支持 ；另一个功能是为处 理动态 SQL 语句中的占位符提供支持 。</p>
</blockquote>
</li>
<li><p>数据源模块</p>
<blockquote>
<p>数据源是实际开发中常用的组件之 一。现在开源的数据源都提供了比较丰富的功能 ， 例如 ，连接池功能 、检测连接状态等 ，选择性能优秀的数据源组件对于提升 ORM 框 架乃至整个应用的性能都是非常重要的 。MyBatis 自身提供了相应的数据源实现 ，当 然 MyBatis 也提供了与第三方数据源集成的接口 ，这些功能都位于数据源模块之中 。</p>
</blockquote>
</li>
<li><p>事务管理</p>
<blockquote>
<p>MyBatis  对数据库中的事务进行了抽象 ，其自身提供了相 应的事务接口和简单实现 。 在很多场景中 ，MyBatis 会与 Spring 框架集成 ，并由 Spring 框架管理事务 。</p>
</blockquote>
</li>
<li><p>缓存模块</p>
<blockquote>
<p>My Batis 中提供了一级缓存和二级缓存，而这两级缓存都是依赖于基础支持层中的缓存模块实现的。这里需要读者注意的是， MyBatis 中自带的这两级缓存与MyBatis 以及整个应用是运行在同一个JVM中的，共享同一块堆内存。如果这两级缓存中的数据量较大， 则可能影响系统中其他功能的运行，所以当需要缓存大量数据时，优先考虑使用Redis 、Memcache 等缓存产品。</p>
<p><img src="https://img-blog.csdnimg.cn/20201012134820519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNzM4MTU=,size_16,color_FFFFFF,t_70" alt="img"></p>
</blockquote>
</li>
<li><p>Binding 模块</p>
<blockquote>
<p>通过前面的示例我们知道 ，在调用 SqISession 相应方法执行数据库操作时 ，需要指定映射文件中定义的 SQL 节点，如果出现拼写错误，我们只能在运行时才能发现相应的 异常 。为了尽早发现这种错误 ，MyBatis 通过 Binding 模块将用户自定义的 Mapper 接 口与映射配置文件关联起来 ，系统可以通过调用自定义 Mapper 接口中的方法执行相应 的 SQL 语句完成数据库操作 ，从而避免上述问题 。</p>
</blockquote>
</li>
</ul>
<h3 id="核心处理层"><a href="#核心处理层" class="headerlink" title="核心处理层"></a>核心处理层</h3><ul>
<li><p>配置解析</p>
<blockquote>
<p>在MyBatis 初始化过程中，会加载mybatis-config.xml 配置文件、映射配置文件以及Mapper 接口中的注解信息，解析后的配置信息会形成相应的对象并保存到Configuration 对象中.</p>
</blockquote>
</li>
<li><p>SOL 解析与scripting 模块</p>
<blockquote>
<p>拼凑 SQL  语句是一件烦琐且易出错的过程 ，为了将开发人员从这项枯燥无趣的工作中 解脱出来 ，MyBatis 实现动态 SQL 语句的功能 ，提供了多种动态 SQL 语句对应的节点 ， 例如 ，＜where＞节点、＜if&gt;节点、＜foreach＞节点等。通过这些节点的组合使用，开发人 员可以写出几乎满足所有需求的动态  SQL  语句。</p>
<p>MyBatis 中的 scripting 模块会根据用户传入的实参 ，解析映射文件中定义的 动态 SQL 节点，并形成数据库可执行的 SQL 语句。之后会处理 SQL 语句中的占位符 ，绑定用 户传入的实参 。</p>
</blockquote>
</li>
<li><p>SOL 执行</p>
<blockquote>
<p>SQL 语句 的执行涉及多个组件 ，其中比较重要的是 Executor 、StatementHandler 、 ParameterHandler 和 R巳sultSetHandler 。Executor 主要负责维护一级缓存和二级缓存， 并提供事务管理 的相关操作，它会将数据库相关操作委托给 StatementHandler 完成。</p>
<p>StatementHandler 首先通过 ParameterHandler 完成 SQL 语句的实参绑定 ，然后通过 java.sql.Statement 对象执行 SQL 语句并得到结果集，最后通过ResultSetHandler 完成结 果集的映射，得到结果对象并返回 。</p>
</blockquote>
</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201130182026.png" alt="image-20201130182017018"></p>
<ul>
<li><p>插件</p>
<blockquote>
<p>Mybatis  自身的功能虽然强大 ，但是并不能完美切 合所有的应用场景 ，因此 MyBatis 提供了插件接口 ，我们可以通过添加用户自定义插件的方式对 MyBatis 进行扩展 。用 户自定义插件也可以改变 Mybatis 的默认行为 ，例如 ，我们可以拦截 SQL 语句并对其 进行重写 。由于用户自定义插件会影响 MyBatis 的核心行为 ，在使用自定义插件之前， 开发人员需要了解 MyBatis 内部的原理，这样才能编写出安全 、高效的插件 。</p>
</blockquote>
</li>
</ul>
<h3 id="接口层"><a href="#接口层" class="headerlink" title="接口层"></a>接口层</h3><p>接口层相对简单 ，其核心是 SqlSession 接口 ，该接口中定义了 MyBatis 暴露给应用程序调 用的 API ，也就是上层应用与 MyBatis 交互的桥梁 。接口层在接收到调用请求时 ，会调用核心 处理层的相应模块来完成具体的数据库操作。</p>
<h1 id="基础支持层-1"><a href="#基础支持层-1" class="headerlink" title="基础支持层"></a>基础支持层</h1><p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201114212618.png" alt="image-20201114212618759"></p>
<p>基础支持层位于 MyBatis 整体架构的最底层，支撑着 MyBatis 的核心处理层 ，是整个框架的基石 。基础支持层 中封装了多个较为通用的 、独立的模块 ，不仅仅为 MyBatis 提供基础支撑 ，也可以在合适的场 景中直接复用。</p>
<h2 id="解析器模块"><a href="#解析器模块" class="headerlink" title="解析器模块"></a>解析器模块</h2><blockquote>
<p>在 MyBatis  中涉及多个 XML  配置文件 ，因此我们首先介绍 XML  解析的相关内容。XML解析常见的方式有三种 ，分别是：DOM ( Document Object Model ） 解析方式和 SAX ( Simple API for XML ）解析方式 ，以及从 JDK 6.0 版本开始，JDK 开始支持的 StAX ( Streaming API for XML ) 解析方式 。在开始介绍 MyBatis 的 XML  解析功能之前 ，先介绍这几种常见的 XML  处理方式。</p>
</blockquote>
<h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM 是基于树形结构的 XML 解析方式 ，它会将整个 XML 文档读入内存并构建 一个 DOM 树，基于这棵树形结构对各个节点（Node ） 进行操作。XML  文档中的每个成分都是 一个节点： 整个文档是一个文档节点 ，每个 X扣E标签对应一个元素节点 ，包含在 X岛1L 标签中的文本是文 本节点，每一个 XML  属性是一个属性节点 ，注释属于注释节点 。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">inventory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;2000&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Snow Crash<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Neal Stephenson<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Spectra<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0553380958<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>14.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;2005&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Burning Tower<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Larry Niven<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Jerry Pournelle<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Pocket<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0743416910<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>5.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;1995&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Zodiac<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Neal Stephenson<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Spectra<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0553573862<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>7.50<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- more books --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">inventory</span>&gt;</span><br></code></pre></td></tr></table></figure>

<p>dom解析后树状结构示例：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201221170229.png" alt="image-20201221170217672"></p>
<p>DOM 解析方式最主要的好处是易于编程 ，可以根据需求在树形结构的各节点之间导航。例 如导航到当前节点的父节点 、兄弟节点、子节点等都是比较方便的 ，这样就可以轻易地获取到 自己需要的数据，也可以很容易地添加和修改树中的元素 。因为要将整个 XML 文档加载到内 存中井构造树形结构 ，当 XML 文档的数据量较大时 ，会造成较大的资源消耗 。</p>
<h3 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h3><p>SAX 是基于事件模型的XML 解析方式 ，它并不需要将整个 XML文档加载到内存中 ，而只需将 XML文档的一部分加载到内存中 ，即可开始解析，在处理过程中井不会在内存中记录XML中的数据，所以占用的资源比较小。当程序处理过程中满足条件时，也可以立即停止解析 过程，这样就不必解析剩余的 XML 内容。</p>
<p>当 SAX 解析器解析到某类型节点时 ，会触发注册在该类型节点上的回调函数，开发人员可以根据自己感兴趣的事件注册相应的回调函数 。一般情况下 ，开发人员只需继承 SAX 提供的 DefaultHandler 基类，重写相应事件的处理方法并进行注册即可</p>
<p>SAX 的缺点也非常明显，因为不存储XML文挡的结构 ，所以需要开发人员自己负 责维护 业务逻辑涉及的多层节点之间的关系 ，例如，某节点与其父节点之间的父子关系 、与其子节点 之间的父子关系 。当 XML 文档非常复杂时 ，维护节点间关系的复杂度较高 ，工作量也就会 比 较大 。另一方面 ，因为是流式处理 ，所以处理过程只能从 XML 文档开始向后单向进行 ，无法 像 DOM 方式那样 ，自由导航到之前处理过的节点上重新处理 ，也无法支持 XPath 。SAX 没有 提供写 XML 文档的功能 。</p>
<p>SAX解析后树状结构示例：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201221173158.png" alt="image-20201221173148569"></p>
<h3 id="StAX"><a href="#StAX" class="headerlink" title="StAX"></a>StAX</h3><p>JAXP 是JDK 提供的一套用于解析XML的API ， 它很好地支持DOM和SAX 解析方式，JAXP 是JavaSE 的一部分，它由javax.xml 、org.w3c . dom 、orgnl.sax 包及其子包组成。从JDK6 . 0 开始， JAXP 开始支持另一种XML 解析方式，也就是下面要介绍的StAX解析方式。</p>
<blockquote>
<p>StAX是一个基于JAVA API用于解析XML文档，类似SAX解析器的方式。但两种API之间有两个区别</p>
<ul>
<li>StAX是PULL API，其中作为SAX是PUSH API。这意味着如果StAX解析器，客户端应用程序需要询问StAX解析器从XML获取信息它所需要的，但如果是SAX解析器，客户端应用程序需要获取信息时，SAX解析器会通知客户端应用程序的信息是可用的。</li>
<li>StAX的API可以读取和写入XML文档。使用SAX API，XML可以是只读的。</li>
</ul>
</blockquote>
<p>SAX的缺点:</p>
<ul>
<li>因为它是在一个处理的方式，而不是随机访问XML文档。</li>
<li>如果需要跟踪的数据分析器已经看到或更改项目的顺序，必须编写代码和数据存储以自己方式处理。</li>
</ul>
<p>StAX解析后树状结构示例：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210114105737.png"></p>
<h3 id="XPath"><a href="#XPath" class="headerlink" title="XPath"></a>XPath</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote>
<p>XPath是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>
</blockquote>
<p>XPath 是一门在 XML 文档中查找信息的语言， 可用来在 XML 文档中对元素和属性进行遍历。XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 同时被构建于 XPath 表达之上。因此，对 XPath 的理解是很多高级 XML 应用的基础。<br>XPath非常类似对数据库操作的SQL语言，或者说JQuery，它可以方便开发者抓起文档中需要的东西。</p>
<h4 id="XPath常用表达式"><a href="#XPath常用表达式" class="headerlink" title="XPath常用表达式"></a>XPath常用表达式</h4><table>
<thead>
<tr>
<th>表达式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取指定节点的所有子节点</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>从根节点选取指定节点</td>
</tr>
<tr>
<td>&#x2F;&#x2F;</td>
<td>根据指定的表达式，在整个文档中选取匹配的节点，这里并不会考虑匹配节点在文档中的位置</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点</td>
</tr>
<tr>
<td>@</td>
<td>选取属性</td>
</tr>
<tr>
<td>*</td>
<td>匹配任何元素节点</td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点</td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型的节点</td>
</tr>
<tr>
<td>text()</td>
<td>匹配文本节点</td>
</tr>
<tr>
<td>|</td>
<td>选取若干个路径</td>
</tr>
<tr>
<td>[]</td>
<td>指定某个条件，用于查找某个特定节点或包含某个指定值的节点</td>
</tr>
</tbody></table>
<p>在JDK 5.0 版本中推出了javax且nl 叩ath 包， 它是一个引擎和对象模型独立的XPath 库。Java 中使用XPath 编程的代码模式比较固定，下面先通过一个示例简单介绍DOM 解析方式和XPath 库的使用方式。</p>
<h4 id="Xpath步骤Demo"><a href="#Xpath步骤Demo" class="headerlink" title="Xpath步骤Demo"></a>Xpath步骤Demo</h4><h5 id="创建inventory-xml"><a href="#创建inventory-xml" class="headerlink" title="创建inventory.xml"></a>创建<code>inventory.xml</code></h5><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">inventory</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;2000&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Snow Crash<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Neal Stephenson<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Spectra<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0553380958<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>14.95<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;2005&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Burning Tower<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Larry Niven<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Jerry Pournelle<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Pocket<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0743416910<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>5.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">book</span> <span class="hljs-attr">year</span>=<span class="hljs-string">&quot;1995&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Zodiac<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>Neal Stephenson<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">publisher</span>&gt;</span>Spectra<span class="hljs-tag">&lt;/<span class="hljs-name">publisher</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">isbn</span>&gt;</span>0553573862<span class="hljs-tag">&lt;/<span class="hljs-name">isbn</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>7.50<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">book</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- more books --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">inventory</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h5 id="CodeDemo"><a href="#CodeDemo" class="headerlink" title="CodeDemo"></a>CodeDemo</h5><h6 id="创建工厂对象"><a href="#创建工厂对象" class="headerlink" title="创建工厂对象"></a>创建工厂对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">documentBuilderFactory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br></code></pre></td></tr></table></figure>

<h6 id="开启验证"><a href="#开启验证" class="headerlink" title="开启验证"></a>开启验证</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//开启验证</span><br>documentBuilderFactory.setValidating(<span class="hljs-literal">true</span>);<br>documentBuilderFactory.setNamespaceAware(<span class="hljs-literal">false</span>);<br>documentBuilderFactory.setIgnoringComments(<span class="hljs-literal">true</span>);<br>documentBuilderFactory.setCoalescing(<span class="hljs-literal">false</span>);<br>documentBuilderFactory.setExpandEntityReferences(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure>

<h6 id="使用工厂创建文档实例对象"><a href="#使用工厂创建文档实例对象" class="headerlink" title="使用工厂创建文档实例对象"></a>使用工厂创建文档实例对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建DocumentBuilder</span><br><span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">documentBuilder</span> <span class="hljs-operator">=</span> documentBuilderFactory.newDocumentBuilder();<br></code></pre></td></tr></table></figure>

<h6 id="创建并赋值异常机制"><a href="#创建并赋值异常机制" class="headerlink" title="创建并赋值异常机制"></a>创建并赋值异常机制</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">ErrorHandler</span> <span class="hljs-variable">errorHandler</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorHandler</span>()&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warning</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;warning:&quot;</span> + exception.getMessage());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;error:&quot;</span> + exception.getMessage());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fatalError</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>        System.out.println(<span class="hljs-string">&quot;fatalError:&quot;</span> + exception.getMessage());<br>    &#125;<br>&#125;;<br><span class="hljs-comment">//设置异常处理对象</span><br>documentBuilder.setErrorHandler(errorHandler);<br></code></pre></td></tr></table></figure>

<h6 id="创建XPath工厂对象"><a href="#创建XPath工厂对象" class="headerlink" title="创建XPath工厂对象"></a>创建XPath工厂对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//加载对象</span><br><span class="hljs-type">String</span> <span class="hljs-variable">myBatisCfgResource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test/inventory.xml&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br><span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> documentBuilder.parse(resource)<br></code></pre></td></tr></table></figure>

<h6 id="创建XPath对象"><a href="#创建XPath对象" class="headerlink" title="创建XPath对象"></a>创建XPath对象</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建XpathFactory</span><br><span class="hljs-type">XPathFactory</span> <span class="hljs-variable">xPathFactory</span> <span class="hljs-operator">=</span> XPathFactory.newInstance();<br><span class="hljs-comment">//创建XPath对象</span><br><span class="hljs-type">XPath</span> <span class="hljs-variable">xPath</span> <span class="hljs-operator">=</span> xPathFactory.newXPath();<br></code></pre></td></tr></table></figure>

<h6 id="编译表达式"><a href="#编译表达式" class="headerlink" title="编译表达式"></a>编译表达式</h6><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 通过XPath表达式得到结果 ，第一个参数指定了XPath表达式进行查询的上下文节点 ，也就是在指定</span><br><span class="hljs-comment"> * 节点下查找符合XPath的节点。 本例中的上下文节点是整个文档；第二个参数 指定了XPath表达式</span><br><span class="hljs-comment"> * 的返回类型。</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">XPathExpression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> xPath.compile(<span class="hljs-string">&quot;//book[author=&#x27;Neal Stephenson&#x27;]/title/text()&quot;</span>);<br><span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> expression.evaluate(document, XPathConstants.NODESET);<br>System.out.println(<span class="hljs-string">&quot;查询作者为Neal Stephenson的图书的标题：&quot;</span>);<br><span class="hljs-type">NodeList</span> <span class="hljs-variable">nodeList</span> <span class="hljs-operator">=</span>  (NodeList)result;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;查询1997年之后的图书的标题：&quot;</span>);<br>nodeList = (NodeList) xPath.evaluate(<span class="hljs-string">&quot;//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;查询1997年之后的图书的属性和标题：&quot;</span>);<br>nodeList = (NodeList) xPath.evaluate(<span class="hljs-string">&quot;//book[@year&gt;1997]/@*|//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="整体案例"><a href="#整体案例" class="headerlink" title="整体案例"></a>整体案例</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossYang.myBatisTest;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.w3c.dom.Document;<br><span class="hljs-keyword">import</span> org.w3c.dom.NodeList;<br><span class="hljs-keyword">import</span> org.xml.sax.ErrorHandler;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXException;<br><span class="hljs-keyword">import</span> org.xml.sax.SAXParseException;<br><br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilder;<br><span class="hljs-keyword">import</span> javax.xml.parsers.DocumentBuilderFactory;<br><span class="hljs-keyword">import</span> javax.xml.parsers.ParserConfigurationException;<br><span class="hljs-keyword">import</span> javax.xml.xpath.XPath;<br><span class="hljs-keyword">import</span> javax.xml.xpath.XPathConstants;<br><span class="hljs-keyword">import</span> javax.xml.xpath.XPathExpression;<br><span class="hljs-keyword">import</span> javax.xml.xpath.XPathFactory;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> XpathTest</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2020/11/28 6:08 PM</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">XpathTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">DocumentBuilderFactory</span> <span class="hljs-variable">documentBuilderFactory</span> <span class="hljs-operator">=</span> DocumentBuilderFactory.newInstance();<br><br>        <span class="hljs-comment">//开启验证</span><br>        documentBuilderFactory.setValidating(<span class="hljs-literal">true</span>);<br>        documentBuilderFactory.setNamespaceAware(<span class="hljs-literal">false</span>);<br>        documentBuilderFactory.setIgnoringComments(<span class="hljs-literal">true</span>);<br>        documentBuilderFactory.setCoalescing(<span class="hljs-literal">false</span>);<br>        documentBuilderFactory.setExpandEntityReferences(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-comment">//创建DocumentBuilder</span><br>        <span class="hljs-type">DocumentBuilder</span> <span class="hljs-variable">documentBuilder</span> <span class="hljs-operator">=</span> documentBuilderFactory.newDocumentBuilder();<br><br>        <span class="hljs-type">ErrorHandler</span> <span class="hljs-variable">errorHandler</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ErrorHandler</span>()&#123;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">warning</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>                System.out.println(<span class="hljs-string">&quot;warning:&quot;</span> + exception.getMessage());<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">error</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>                System.out.println(<span class="hljs-string">&quot;error:&quot;</span> + exception.getMessage());<br>            &#125;<br><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">fatalError</span><span class="hljs-params">(SAXParseException exception)</span> <span class="hljs-keyword">throws</span> SAXException &#123;<br>                System.out.println(<span class="hljs-string">&quot;fatalError:&quot;</span> + exception.getMessage());<br>            &#125;<br>        &#125;;<br><br><br>        <span class="hljs-comment">//设置异常处理对象</span><br>        documentBuilder.setErrorHandler(errorHandler);<br>        <span class="hljs-comment">//加载对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">myBatisCfgResource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;test/inventory.xml&quot;</span>;<br>        <span class="hljs-type">InputStream</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br>        <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> documentBuilder.parse(resource);<br><br>        <span class="hljs-comment">//创建XpathFactory</span><br>        <span class="hljs-type">XPathFactory</span> <span class="hljs-variable">xPathFactory</span> <span class="hljs-operator">=</span> XPathFactory.newInstance();<br>        <span class="hljs-comment">//创建XPath对象</span><br>        <span class="hljs-type">XPath</span> <span class="hljs-variable">xPath</span> <span class="hljs-operator">=</span> xPathFactory.newXPath();<br>        <span class="hljs-comment">//编译XPath表达式</span><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 通过XPath表达式得到结果 ，第一个参数指定了XPath表达式进行查询的上下文节点 ，也就是在指定</span><br><span class="hljs-comment">         * 节点下查找符合XPath的节点。 本例中的上下文节点是整个文档；第二个参数 指定了XPath表达式</span><br><span class="hljs-comment">         * 的返回类型。</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">XPathExpression</span> <span class="hljs-variable">expression</span> <span class="hljs-operator">=</span> xPath.compile(<span class="hljs-string">&quot;//book[author=&#x27;Neal Stephenson&#x27;]/title/text()&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> expression.evaluate(document, XPathConstants.NODESET);<br>        System.out.println(<span class="hljs-string">&quot;查询作者为Neal Stephenson的图书的标题：&quot;</span>);<br>        <span class="hljs-type">NodeList</span> <span class="hljs-variable">nodeList</span> <span class="hljs-operator">=</span>  (NodeList)result;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;查询1997年之后的图书的标题：&quot;</span>);<br>        nodeList = (NodeList) xPath.evaluate(<span class="hljs-string">&quot;//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;查询1997年之后的图书的属性和标题：&quot;</span>);<br>        nodeList = (NodeList) xPath.evaluate(<span class="hljs-string">&quot;//book[@year&gt;1997]/@*|//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>注意:</p>
<p>XPathExpression. evaluate()方法的第二参数，它指定了XP础表达式查找的结果类型，在XPathConstants 类中提供了nodeset、boolean 、number、string 和Node 五种类型。<br>另外，如果XPath表达式只使用一次， 可以跳过编译步骤直接调用XPath 对象的evaluate()方法进行查询。但是如果同一个XPath 表达式要重复执行多次，则建议先进行编译，然后进行查询，这样性能会好一点。</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>MyBatis</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>JDBC</tag>
        <tag>Mysql</tag>
        <tag>MyBatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(4)-服务容错</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(4)-%E6%9C%8D%E5%8A%A1%E5%AE%B9%E9%94%99/</url>
    <content><![CDATA[<h1 id="高并发带来的问题"><a href="#高并发带来的问题" class="headerlink" title="高并发带来的问题"></a>高并发带来的问题</h1><p>在微服务架构中，我们将业务拆分成一个个的服务，服务与服务之间可以相互调用，但是由于网络原因或者自身的原因，服务并不能保证服务的100%可用，如果单个服务出现问题，调用这个服务就会出现网络延迟，此时若有大量的网络涌入，会形成任务堆积，最终导致服务瘫痪。</p>
<p>接下来我们通过一个案例，来模拟一下一个高并发的场景。</p>
<ul>
<li>新建<code>HighConcurrencyController</code>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> HighConcurrencyController</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> TODO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/12 20:50</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@RequestMapping(&quot;/highConcurrency&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighConcurrencyController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> ProductFeignClient productFeignClient;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderService orderService;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存指定产品订单</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/save/&#123;pId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Order <span class="hljs-title function_">order</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;pId&quot;)</span> Integer pId, <span class="hljs-meta">@RequestParam(name = &quot;queryType&quot;)</span> String queryType)</span> &#123;<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;客户下单，这时候要调用商品微服务查询商品信息&quot;</span>);<br>        <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">// 通过restTemplate调用商品微服务</span><br>        product = queryProductLoadBalancingByFeign(pId);<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;商品信息,查询结果:&quot;</span> + JSON.toJSONString(product));<br>        <span class="hljs-comment">//模拟网络延时</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">1000L</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setUId(<span class="hljs-number">1</span>);<br>        order.setUserName(<span class="hljs-string">&quot;测试用户&quot;</span>);<br>        order.setPId(product.getPId());<br>        order.setPName(product.getPName());<br>        order.setPPrice(product.getPPrice());<br>        order.setNumber(<span class="hljs-number">1</span>);<br>        orderService.saveOrder(order);<br>        <span class="hljs-keyword">return</span> order;<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getMessage&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;测试高并发&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * RestTemplate   负载均衡风格查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pId    产品id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> Product <span class="hljs-title function_">queryProductLoadBalancingByFeign</span><span class="hljs-params">(Integer pId)</span> &#123;<br>        <span class="hljs-type">ProductVO</span> <span class="hljs-variable">productVO</span> <span class="hljs-operator">=</span> productFeignClient.queryProductInfoByProductId(pId);<br>        <span class="hljs-keyword">if</span> (productVO != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">Product</span> <span class="hljs-variable">product</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Product</span>();<br>            BeanUtils.copyProperties(productVO, product);<br>            <span class="hljs-keyword">return</span> product;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>修改配置文件中tomcat的并发数</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8091</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">max-threads:</span> <span class="hljs-number">10</span> <span class="hljs-comment">#tomcat的最大并发值修改为10,默认是200</span><br></code></pre></td></tr></table></figure>

<ul>
<li>压力测试</li>
</ul>
<blockquote>
<p>本次使用jmeter进行压力测试，创建步骤为：</p>
<ul>
<li>创建线程组，线程数量为20，间隔时间为1s，循环次数为：100次；</li>
<li>创建http请求，填写创建订单请求信息</li>
<li>创建查看结果树，查看请求结果</li>
<li>启动</li>
</ul>
</blockquote>
<ul>
<li>访问ｍessage方法观察效果</li>
</ul>
<p>结论：</p>
<blockquote>
<p>此时会发现, 由于order方法囤积了大量请求, 导致ｍessage方法的访问出现了问题，这就是服务雪崩的雏形。</p>
</blockquote>
<h1 id="服务雪崩效应"><a href="#服务雪崩效应" class="headerlink" title="服务雪崩效应"></a>服务雪崩效应</h1><p><strong>在分布式系统中,由于网络原因或自身的原因,服务一般无法保证 100% 可用。如果一个服务出现了问题，调用这个服务就会出现线程阻塞的情况，此时若有大量的请求涌入，就会出现多条线程阻塞等待，进而导致服务瘫痪。</strong>​<strong>由于服务与服务之间的依赖性，故障会传播，会对整个微服务系统造成灾难性的严重后果，这就是服务故障的 “雪崩效应”。</strong></p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/07/806b4e49574f0d7c.jpg"></p>
<p><strong>雪崩发生的原因多种多样，有不合理的容量设计，或者是高并发下某一个方法响应变慢，亦或是某台机器的资源耗尽。我们无法完全杜绝雪崩源头的发生，只有做好足够的容错，保证在一个服务发生问题，不会影响到其它服务的正常运行。也就是＂雪落而不雪崩＂。</strong></p>
<h1 id="常见容错方案"><a href="#常见容错方案" class="headerlink" title="常见容错方案"></a>常见容错方案</h1><p>要防止雪崩的扩散，我们就要做好服务的容错，容错说白了就是保护自己不被猪队友拖垮的一些措施, 下面介绍常见的服务容错思路和组件。</p>
<h2 id="常见的容错思路"><a href="#常见的容错思路" class="headerlink" title="常见的容错思路"></a>常见的容错思路</h2><p>常见的容错思路有隔离、超时、限流、熔断、降级这几种，下面分别介绍一下。</p>
<h3 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h3><p>它是指将系统按照一定的原则划分为若干个服务模块，各个模块之间相对独立，无强依赖。当有故障发生时，能将问题和影响隔离在某个模块内部，而不扩散风险，不波及其它模块，不影响整体的系统服务。常见的隔离方式有：线程池隔离和信号量隔离．</p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8Nehj.png" alt="W8Nehj.png"><a href="https://imgtu.com/i/W8Nehj">https://imgtu.com/i/W8Nehj</a></p>
<h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><p>在上游服务调用下游服务的时候，设置一个最大响应时间，如果超过这个时间，下游未作出反应，就断开请求，释放掉线程。</p>
<h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><p>限流就是限制系统的输入和输出流量已达到保护系统的目的。为了保证系统的稳固运行,一旦达到的需要限制的阈值,就需要限制流量并采取少量措施以完成限制流量的目的。</p>
<h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><p>在互联网系统中，当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护系统整体的可用性，可以暂时切断对下游服务的调用。这种牺牲局部，保全整体的措施就叫做熔断。</p>
<p>服务熔断一般有三种状态：</p>
<ul>
<li>熔断关闭状态（Closed）<br>服务没有故障时，熔断器所处的状态，对调用方的调用不做任何限制</li>
<li>熔断开启状态（Open）<br>后续对该服务接口的调用不再经过网络，直接执行本地的fallback方法</li>
<li>半熔断状态（Half-Open）<br>尝试恢复服务调用，允许有限的流量调用该服务，并监控调用成功率。如果成功率达到预期，则说明服务已恢复，进入熔断关闭状态；如果成功率仍旧很低，则重新进入熔断关闭状态。</li>
</ul>
<h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><p>降级其实就是为服务提供一个托底方案，一旦服务无法正常调用，就使用托底方案。</p>
<h1 id="常见的容错组件"><a href="#常见的容错组件" class="headerlink" title="常见的容错组件"></a>常见的容错组件</h1><h2 id="Hystrix"><a href="#Hystrix" class="headerlink" title="Hystrix"></a>Hystrix</h2><p>Hystrix是由Netflix开源的一个延迟和容错库，用于隔离访问远程系统、服务或者第三方库，防止级联失败，从而提升系统的可用性与容错性。</p>
<h2 id="Resilience4J"><a href="#Resilience4J" class="headerlink" title="Resilience4J"></a>Resilience4J</h2><p>Resilicence4J一款非常轻量、简单，并且文档非常清晰、丰富的熔断工具，这也是Hystrix官方推荐的替代产品。不仅如此，Resilicence4j还原生支持Spring Boot 1.x&#x2F;2.x，而且监控也支持和prometheus等多款主流产品进行整合。</p>
<h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p>Sentinel 是阿里巴巴开源的一款断路器实现，本身在阿里内部已经被大规模采用，非常稳定。</p>
<h2 id="组件对比"><a href="#组件对比" class="headerlink" title="组件对比"></a>组件对比</h2><table>
<thead>
<tr>
<th></th>
<th>Sentinel</th>
<th>Hystrix</th>
<th>resilience4j</th>
</tr>
</thead>
<tbody><tr>
<td>隔离策略</td>
<td>信号量隔离（并发线程数限流）</td>
<td>线程池隔离&#x2F;信号隔离</td>
<td>信号量隔离</td>
</tr>
<tr>
<td>熔断降级策略</td>
<td>基于响应时间、异常比率、异常数</td>
<td>基于异常比率</td>
<td>基于异常比率、响应</td>
</tr>
<tr>
<td>实时统计实现</td>
<td>滑动窗口（LeapArray）</td>
<td>滑动窗口（基于RxJava)</td>
<td>Ring Bit Buffer</td>
</tr>
<tr>
<td>动态规则配置</td>
<td>支持多种数据源</td>
<td>支持多种数据</td>
<td>有限支持</td>
</tr>
<tr>
<td>扩展性</td>
<td>多个扩展点</td>
<td>插件的形式</td>
<td>接口的形式</td>
</tr>
<tr>
<td>基于注解的支持</td>
<td>:white_check_mark:</td>
<td>:white_check_mark:</td>
<td>:white_check_mark:</td>
</tr>
<tr>
<td>限流</td>
<td>基于 QPS，支持基于调用关系的限流</td>
<td>有限的支持</td>
<td>Rate Limiter</td>
</tr>
<tr>
<td>流量整形</td>
<td>支持预热模式、匀速器模式、预热排队模式</td>
<td>:x:</td>
<td>简单的RateLimiter</td>
</tr>
<tr>
<td>系统自适应保护</td>
<td>:white_check_mark:</td>
<td>:x:</td>
<td>:x:</td>
</tr>
<tr>
<td>控制台</td>
<td>提供开箱即用的控制台，可配置规则、查看秒级监控、机器发现等</td>
<td>简单的监控查看</td>
<td>不提供控制台，可对接其它监控系统</td>
</tr>
</tbody></table>
<h1 id="Sentinel入门"><a href="#Sentinel入门" class="headerlink" title="Sentinel入门"></a>Sentinel入门</h1><h2 id="什么是Sentinel"><a href="#什么是Sentinel" class="headerlink" title="什么是Sentinel"></a>什么是Sentinel</h2><p>Sentinel (分布式系统的流量防卫兵) 是阿里开源的一套用于服务容错的综合性解决方案。它以流量为切入点, 从流量控制、熔断降级、系统负载保护等多个维度来保护服务的稳定性。</p>
<p>Sentinel 具有以下特征:</p>
<ul>
<li>丰富的应用场景：Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景, 例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li>
<li>完备的实时监控：Sentinel 提供了实时的监控功能。通过控制台可以看到接入应用的单台机器秒级数据, 甚至 500 台以下规模的集群的汇总运行情况。<br>广泛的开源生态：Sentinel 提供开箱即用的与其它开源框架&#x2F;库的整合模块, 例如与 Spring Cloud、Dubbo、gRPC 的整合。只需要引入相应的依赖并进行简单的配置即可快速地接入Sentinel。</li>
<li>完善的 SPI 扩展点：Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li>
</ul>
<p>Sentinel 分为两个部分:</p>
<ul>
<li>核心库（Java 客户端）不依赖任何框架&#x2F;库,能够运行于所有 Java 运行时环境，同时对 Dubbo &#x2F;Spring Cloud 等框架也有较好的支持。</li>
<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>
</ul>
<h2 id="微服务集成Sentinel"><a href="#微服务集成Sentinel" class="headerlink" title="微服务集成Sentinel"></a>微服务集成Sentinel</h2><p>为微服务集成Sentinel非常简单, 只需要加入Sentinel的依赖即可</p>
<h3 id="下载jar包"><a href="#下载jar包" class="headerlink" title="下载jar包"></a>下载jar包</h3><p>访问<a href="https://github.com/alibaba/Sentinel/releases">sentinel的官方</a>​<a href="https://github.com/alibaba/Sentinel/releases"><code>GitHub</code></a>​<a href="https://github.com/alibaba/Sentinel/releases">仓库下载jar包</a></p>
<h3 id="启动jar包"><a href="#启动jar包" class="headerlink" title="启动jar包"></a>启动jar包</h3><blockquote>
<p>直接使用jar命令启动项目(控制台本身是一个SpringBoot项目)</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><code class="hljs shell">java -jar sentinel-dashboard-1.8.2.jar -Dserver.port=8080 -Dcsp.sentinel.dashboard.server=localhost:8080 -Dporject.name=sentinel-dashboard<br></code></pre></td></tr></table></figure>

<h3 id="在测试高并发专用接口"><a href="#在测试高并发专用接口" class="headerlink" title="在测试高并发专用接口"></a>在测试高并发专用接口</h3><blockquote>
<p><code>HighConcurrencyController</code>中添加测试方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/message1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message1</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/message2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message2</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--sentinel--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sentinel:</span><br>  <span class="hljs-attr">transport:</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-number">9999</span> <span class="hljs-comment">#跟控制台交流的端口,随意指定一个未使用的端口即可</span><br>    <span class="hljs-attr">dashboard:</span> <span class="hljs-string">localhost:8080</span><br></code></pre></td></tr></table></figure>

<h3 id="启动order服务测试"><a href="#启动order服务测试" class="headerlink" title="启动order服务测试"></a>启动order服务测试</h3><p>启动成功后访问地址：<code>localhost:8080</code>，账号和密码默认都是sentinel，访问后你会发现服务信息为空白。</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/07/d869eb55dcf31cd1.png"></p>
<h3 id="发送-highConcurrency-message1请求，再次测试"><a href="#发送-highConcurrency-message1请求，再次测试" class="headerlink" title="发送/highConcurrency/message1请求，再次测试"></a>发送<code>/highConcurrency/message1</code>请求，再次测试</h3><p><img src="https://ftp.bmp.ovh/imgs/2021/07/70b99c97f9b0c76b.png"></p>
<h3 id="补充：了解控制台的使用原理"><a href="#补充：了解控制台的使用原理" class="headerlink" title="补充：了解控制台的使用原理"></a>补充：了解控制台的使用原理</h3><p>Sentinel的控制台其实就是一个SpringBoot编写的程序。我们需要将我们的微服务程序注册到控制台上,即在微服务中指定控制台的地址, 并且还要开启一个跟控制台传递数据的端口, 控制台也可以通过此端口调用微服务中的监控程序获取微服务的各种信息。</p>
<p><img src="https://user-images.githubusercontent.com/9434884/53381986-a0b73f00-39ad-11e9-90cf-b49158ae4b6f.png"></p>
<h3 id="入门案例-实现一个接口的限流"><a href="#入门案例-实现一个接口的限流" class="headerlink" title="入门案例[实现一个接口的限流]"></a>入门案例[实现一个接口的限流]</h3><ul>
<li>通过控制台为message1添加一个流控规则</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YnaQ.png" alt="W8YnaQ.png"><a href="https://imgtu.com/i/W8YnaQ">https://imgtu.com/i/W8YnaQ</a></p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8Yl2q.png" alt="W8Yl2q.png"><a href="https://imgtu.com/i/W8Yl2q">https://imgtu.com/i/W8Yl2q</a></p>
<ul>
<li>通过控制台快速频繁访问, 观察效果</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YNa4.png" alt="W8YNa4.png"><a href="https://imgtu.com/i/W8YNa4">https://imgtu.com/i/W8YNa4</a></p>
<h1 id="Sentinel的概念和功能"><a href="#Sentinel的概念和功能" class="headerlink" title="Sentinel的概念和功能"></a>Sentinel的概念和功能</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><p><strong>资源就是Sentinel要保护的东西</strong></p>
<p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，可以是一个服务，也可以是一个方法，甚至可以是一段代码。</p>
<blockquote>
<p>我们入门案例中的message1方法就可以认为是一个资源</p>
</blockquote>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p><strong>规则就是用来定义如何进行保护资源的</strong></p>
<p>作用在资源之上, 定义以什么样的方式保护资源，主要包括流量控制规则、熔断降级规则以及系统保护规则。</p>
<blockquote>
<p>我们入门案例中就是为message1资源设置了一种流控规则, 限制了进入message1的流量</p>
</blockquote>
<h2 id="重要功能"><a href="#重要功能" class="headerlink" title="重要功能"></a>重要功能</h2><p>Sentinel的主要功能就是容错，主要体现为下面这三个：</p>
<ul>
<li><p>流量控制<br>流量控制在网络传输中是一个常用的概念，它用于调整网络包的数据。任意时间到来的请求往往是随机不可控的，而系统的处理能力是有限的。我们需要根据系统的处理能力对流量进行控制。Sentinel 作为一个调配器，可以根据需要把随机的请求调整成合适的形状。</p>
</li>
<li><p>熔断降级<br>当检测到调用链路中某个资源出现不稳定的表现，例如请求响应时间长或异常比例升高的时候，则对这个资源的调用进行限制，让请求快速失败，避免影响到其它的资源而导致级联故障。Sentinel 对这个问题采取了两种手段:</p>
<ul>
<li>通过并发线程数进行限制<br>Sentinel 通过限制资源并发线程的数量，来减少不稳定资源对其它资源的影响。当某个资源出现不稳定的情况下，例如响应时间变长，对资源的直接影响就是会造成线程数的逐步堆积。当线程数在特定资源上堆积到一定的数量之后，对该资源的新请求就会被拒绝。堆积的线程完成任务后才开始继续接收请求。</li>
<li>通过响应时间对资源进行降级<br>除了对并发线程数进行控制以外，Sentinel 还可以通过响应时间来快速降级不稳定的资源。当依赖的资源出现响应时间过长后，所有对该资源的访问都会被直接拒绝，直到过了指定的时间窗口之后才重新恢复。</li>
</ul>
</li>
</ul>
<blockquote>
<p>Sentinel 和 Hystrix 的区别<br>两者的原则是一致的, 都是当一个资源出现问题时, 让其快速失败, 不要波及到其它服务但是在限制的手段上, 确采取了完全不一样的方法:</p>
<ul>
<li>Hystrix 采用的是线程池隔离的方式, 优点是做到了资源之间的隔离, 缺点是增加了线程切换的成本。</li>
<li>Sentinel 采用的是通过并发线程的数量和响应时间来对资源做限制。</li>
</ul>
</blockquote>
<ul>
<li><p>系统负载保护</p>
<p>Sentinel 同时提供系统维度的自适应保护能力。当系统负载较高的时候，如果还持续让请求进入可能会导致系统崩溃，无法响应。在集群环境下，会把本应这台机器承载的流量转发到其它的机器上去。如果这个时候其它的机器也处在一个边缘状态的时候，Sentinel 提供了对应的保护机制，让系统的入口流量和系统的负载达到一个平衡，保证系统在能力范围之内处理最多的请求。</p>
</li>
</ul>
<p><strong>总之一句话: 我们需要做的事情，就是在Sentinel的资源上配置各种各样的规则，来实现各种容错的功能。</strong></p>
<h2 id="Sentinel规则"><a href="#Sentinel规则" class="headerlink" title="Sentinel规则"></a>Sentinel规则</h2><h3 id="流控规则"><a href="#流控规则" class="headerlink" title="流控规则"></a>流控规则</h3><p>流量控制，其原理是监控应用流量的QPS(每秒查询率) 或并发线程数等指标，当达到指定的阈值时对流量进行控制，以避免被瞬时的流量高峰冲垮，从而保障应用的高可用性。</p>
<p>点击簇点链路，我们就可以看到访问过的接口地址，然后点击对应的流控按钮，进入流控规则配置页面。新增流控规则界面如下:</p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YBxx.png" alt="W8YBxx.png"><a href="https://imgtu.com/i/W8YBxx">https://imgtu.com/i/W8YBxx</a></p>
<ul>
<li><strong>资源名：唯一名称，默认是请求路径，可自定义</strong></li>
</ul>
<p><strong>针对来源：指定对哪个微服务进行限流，默认指default，意思是不区分来源，全部限制</strong></p>
<ul>
<li><strong>阈值类型&#x2F;单机阈值：</strong><ul>
<li><strong>QPS（每秒请求数量）: 当调用该接口的QPS达到阈值的时候，进行限流</strong></li>
<li><strong>线程数：当调用该接口的线程数达到阈值的时候，进行限流</strong></li>
</ul>
</li>
<li><strong>是否集群：暂不需要集群</strong><br>接下来我们以QPS为例来研究限流规则的配置。</li>
</ul>
<h4 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h4><p>我们先做一个简单配置，设置阈值类型为QPS，单机阈值为3。即每秒请求量大于3的时候开始限流。</p>
<p>接下来，在流控规则页面就可以看到这个配置。</p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YssK.png" alt="W8YssK.png"><a href="https://imgtu.com/i/W8YssK">https://imgtu.com/i/W8YssK</a></p>
<p>然后快速访问<code>message1</code> 接口，观察效果。此时发现，当QPS &gt; 3的时候，服务就不能正常响应，而是返回Blocked by Sentinel (flow limiting)结果。</p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YNa4.png" alt="W8YNa4.png"></p>
<h4 id="配置流控模式"><a href="#配置流控模式" class="headerlink" title="配置流控模式"></a>配置流控模式</h4><p>点击上面设置流控规则的<code>编辑</code>按钮，然后在编辑页面点击<code>高级选项</code>，会看到有流控模式一栏。</p>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YhRI.png" alt="W8YhRI.png"><a href="https://imgtu.com/i/W8YhRI">https://imgtu.com/i/W8YhRI</a></p>
<p>sentinel共有三种流控模式，分别是：</p>
<ul>
<li>直接（默认）：接口达到限流条件时，开启限流</li>
<li>关联：当关联的资源达到限流条件时，开启限流 [适合做应用让步]</li>
<li>链路：当从某个接口过来的资源达到限流条件时，开启限流</li>
</ul>
<p>下面呢分别演示三种模式.</p>
<h5 id="直接流控模式"><a href="#直接流控模式" class="headerlink" title="直接流控模式"></a>直接流控模式</h5><p>直接流控模式是最简单的模式，当指定的接口达到限流条件时开启限流。上面案例使用的就是直接流控模式。</p>
<h5 id="关联流控模式"><a href="#关联流控模式" class="headerlink" title="关联流控模式"></a>关联流控模式</h5><p>关联流控模式指的是，当指定接口关联的接口达到限流条件时，开启对指定接口开启限流。</p>
<ul>
<li>配置限流规则, 将流控模式设置为关联，关联资源设置为的<code>message2</code></li>
<li>使用jmeter进行压力测试访问，<strong>注意QPS一定要大于0.3，即每秒请求大于等于三次。</strong></li>
<li>第4步：访问<code>message1</code>,会发现已经被限流</li>
</ul>
<p>[<img src="https://z3.ax1x.com/2021/07/18/W8YTL8.png" alt="W8YTL8.png"></p>
<h5 id="链路流控模式"><a href="#链路流控模式" class="headerlink" title="链路流控模式"></a>链路流控模式</h5><p>链路流控模式指的是，当从某个接口过来的资源达到限流条件时，开启限流。它的功能有点类似于针对来源配置项，区别在于：针对来源是针对上级微服务，而链路流控是针对上级接口，也就是说它的粒度更细。</p>
<ul>
<li>在<code>OrderService</code>中新建抽象接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 打印信息</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure>

<ul>
<li>在<code>OrderServiceImpl</code>进行实现</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-meta">@SentinelResource(&quot;message&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">()</span> &#123;<br>    System.out.println(<span class="hljs-string">&quot;OrderService.printMessage&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>在<code>message1</code>、<code>message2</code>中分别增加该调用方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping(&quot;/message1&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message1</span><span class="hljs-params">()</span> &#123;<br>    orderService.printMessage();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>&#125;<br><br><span class="hljs-meta">@RequestMapping(&quot;/message2&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message2</span><span class="hljs-params">()</span> &#123;<br>    orderService.printMessage();<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message2&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>禁止收敛URL的入口 context</li>
</ul>
<blockquote>
<p>从1.6.3 版本开始，Sentinel Web filter默认收敛所有URL的入口context，因此链路限流不生效。<br>1.7.0 版本开始（对应SCA的2.1.1.RELEASE)，官方在CommonFilter 引入了WEB_CONTEXT_UNIFY 参数，用于控制是否收敛context。将其配置为 false 即可根据不同的URL 进行链路限流。SCA 2.1.1.RELEASE之后的版本,可以通过配置spring.cloud.sentinel.web-context-unify&#x3D;false即可关闭收敛</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">sentinel:</span><br>  <span class="hljs-attr">web-context-unify:</span> <span class="hljs-literal">false</span><br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FilterContextConfig</span> &#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> FilterRegistrationBean <span class="hljs-title function_">sentinelFilterRegistrationBean</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">FilterRegistrationBean</span> <span class="hljs-variable">registration</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FilterRegistrationBean</span>();<br>        registration.setFilter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">CommonFilter</span>());<br>        registration.addUrlPatterns(<span class="hljs-string">&quot;/*&quot;</span>);<br>       <span class="hljs-comment">// 入口资源关闭聚合</span><br>        registration.addInitParameter(CommonFilter.WEB_CONTEXT_UNIFY,<span class="hljs-string">&quot;false&quot;</span>);<br>        registration.setName(<span class="hljs-string">&quot;sentinelFilter&quot;</span>);<br>        registration.setOrder(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">return</span> registration;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>控制台配置限流规则</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/18/W8YzQ0.png" alt="W8YzQ0.png"><a href="https://imgtu.com/i/W8YzQ0">https://imgtu.com/i/W8YzQ0</a></p>
<ul>
<li>分别通过<code>message1</code> 和<code>message2</code> 访问, 发现2没问题, 1的被限流了</li>
</ul>
<h5 id="配置流控效果"><a href="#配置流控效果" class="headerlink" title="配置流控效果"></a>配置流控效果</h5><ul>
<li>快速失败（默认）: 直接失败，抛出异常，不做任何额外的处理，是最简单的效果</li>
<li>Warm Up：它从开始阈值到最大QPS阈值会有一个缓冲阶段，一开始的阈值是最大QPS阈值的1&#x2F;3，然后慢慢增长，直到最大阈值，适用于将突然增大的流量转换为缓步增长的场景。</li>
<li>排队等待：让请求以均匀的速度通过，单机阈值为每秒通过数量，其余的排队等待； 它还会让设置一个超时时间，当请求超过超时间时间还未处理，则会被丢弃。</li>
</ul>
<h4 id="配置降级规则"><a href="#配置降级规则" class="headerlink" title="配置降级规则"></a>配置降级规则</h4><p>降级规则就是设置当满足什么条件的时候，对服务进行降级。Sentinel提供了三个衡量条件：</p>
<ul>
<li>平均响应时间 ：当资源的平均响应时间超过阈值（以 ms 为单位）之后，资源进入准降级状态。<br>如果接下来 1s 内持续进入 5 个请求，它们的 RT都持续超过这个阈值，那么在接下的时间窗口（以 s 为单位）之内，就会对这个方法进行服务降级。</li>
</ul>
<p><img src="https://z3.ax1x.com/2021/07/18/W8tio4.png" alt="W8tio4.png"><a href="https://imgtu.com/i/W8tio4">https://imgtu.com/i/W8tio4</a></p>
<blockquote>
<p>上述配置为当响应时间大于1毫秒的时候，接下来的十秒内该服务进行降级，十秒后回复正常，进行下一轮的判断。</p>
<p>注意:</p>
<p>Sentinel 默认统计的 RT 上限是 4900 ms，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 -Dcsp.sentinel.statistic.max.rt&#x3D;xxx 来配置。</p>
</blockquote>
<ul>
<li><p>异常比例：当资源的每秒异常总数占通过量的比值超过阈值之后，资源进入降级状态，即在接下的时间窗口（以 s 为单位）之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0,1.0]。</p>
<ul>
<li>模拟一个异常</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">&quot;/message1&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">message1</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">//异常比例为0.33</span><br>    <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">30</span>; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message1&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>设置异常比例为0.25</li>
</ul>
<p><img src="https://i.bmp.ovh/imgs/2021/09/34f69b017981f9a6.png"></p>
<ul>
<li>异常数 ：当资源近 1 分钟的异常数目超过阈值之后会进行服务降级。注意由于统计时间窗口是分钟级别的，若时间窗口小于 60s，则结束熔断状态后仍可能再进入熔断状态。</li>
</ul>
</li>
</ul>
<p><img src="https://i.bmp.ovh/imgs/2021/09/14bfdc57aeca8152.png"></p>
<blockquote>
<p>问题：<br>流控规则和降级规则返回的异常页面是一样的，我们怎么来区分到底是什么原因导致的呢？</p>
</blockquote>
<h4 id="配置热点规则"><a href="#配置热点规则" class="headerlink" title="配置热点规则"></a>配置热点规则</h4><p>热点参数流控规则是一种更细粒度的流控规则, 它允许将规则具体到参数上。</p>
<h5 id="简单配置-1"><a href="#简单配置-1" class="headerlink" title="简单配置"></a>简单配置</h5><ul>
<li><p>编写代码</p>
<figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@RequestMapping</span>(<span class="hljs-string">&quot;/message3&quot;</span>)<br><span class="hljs-variable">@SentinelResource</span>(<span class="hljs-string">&quot;messages3&quot;</span>)<span class="hljs-comment">//注意这里必须使用这个注解标识,热点规则不生效</span><br>public String <span class="hljs-built_in">message3</span>(String name,Integer age) &#123;<br>    <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">name</span> + <span class="hljs-selector-tag">age</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li><p>配置热点规则</p>
</li>
</ul>
<p><img src="https://i.loli.net/2021/09/05/ySYaLxKuJf9sDOU.png" alt="image-20210905201210835"></p>
<ul>
<li>分别用两个参数访问,会发现只对第一个参数限流了</li>
</ul>
<h5 id="热点规则增强使用"><a href="#热点规则增强使用" class="headerlink" title="热点规则增强使用"></a>热点规则增强使用</h5><p>参数例外项允许对一个参数的具体值进行流控</p>
<ul>
<li>编辑刚才定义的规则,增加参数例外项</li>
</ul>
<p><img src="https://i.bmp.ovh/imgs/2021/09/0d1b9c0cae07396d.png"></p>
<h3 id="授权规则"><a href="#授权规则" class="headerlink" title="授权规则"></a>授权规则</h3><p>很多时候，我们需要根据调用来源来判断该次请求是否允许放行，这时候可以使用 Sentinel 的来源<br>访问控制的功能。来源访问控制根据资源的请求来源（origin）限制资源是否通过：</p>
<ul>
<li>若配置白名单，则只有请求来源位于白名单内时才可通过；</li>
<li>若配置黑名单，则请求来源位于黑名单时不通过，其余的请求通过。</li>
</ul>
<p><img src="https://i.bmp.ovh/imgs/2021/09/94bc40c52a38bde8.png"></p>
<p>上面的资源名和授权类型不难理解，但是流控应用怎么填写呢？</p>
<blockquote>
<p>其实这个位置要填写的是来源标识，Sentinel提供了<code>RequestOriginParser</code>接口来处理来源。</p>
<p>只要Sentinel保护的接口资源被访问，Sentinel就会调用RequestOriginParser的实现类去解析访问来源。</p>
<p>下方有坑，请注意！！！！</p>
<hr>
<p><strong>&#x3D;&#x3D;注意：由于上方配置流控规则是把收敛的接口都开放了，博猪在实现<code>RequestOriginParser</code>接口处理来源，配置黑白名单时不生效，这个具体原因博猪还没进一步查看源码实现逻辑，可能是sentinel的一个bug，所以需要把注入的<code>FilterRegistrationBean</code>去掉，配置文件中的<code>WEB_CONTEXT_UNIFY ​</code>去掉！！&#x3D;&#x3D;</strong></p>
</blockquote>
<h4 id="自定义处理规则"><a href="#自定义处理规则" class="headerlink" title="自定义处理规则"></a>自定义处理规则</h4><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ServiceNameOriginParser</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">RequestOriginParser</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">parseOrigin</span>(<span class="hljs-params">HttpServletRequest httpServletRequest</span>) &#123;<br>        <span class="hljs-title class_">String</span> serviceName = httpServletRequest.<span class="hljs-title function_">getParameter</span>(<span class="hljs-string">&quot;serviceName&quot;</span>);<br>        <span class="hljs-keyword">return</span> serviceName;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="配置授权规则"><a href="#配置授权规则" class="headerlink" title="配置授权规则"></a>配置授权规则</h4><blockquote>
<p>解释一下配置含义：当seriviceName&#x3D;pc时不能访问（黑名单）</p>
</blockquote>
<p><img src="https://i.bmp.ovh/imgs/2021/09/ad32eb08f12b3954.png"></p>
<h4 id="访问配置地址，查看结果"><a href="#访问配置地址，查看结果" class="headerlink" title="访问配置地址，查看结果"></a>访问配置地址，查看结果</h4><p>访问<a href="http://localhost:8091/highConcurrency/getMessage?serviceName=pc%EF%BC%8C%E6%9F%A5%E7%9C%8B%E7%BB%93%E6%9E%9C">http://localhost:8091/highConcurrency/getMessage?serviceName=pc，查看结果</a></p>
<h3 id="系统规则"><a href="#系统规则" class="headerlink" title="系统规则"></a>系统规则</h3><p>系统保护规则是从应用级别的入口流量进行控制，从单台机器的总体 Load、RT、入口 QPS 、CPU使用率和线程数五个维度监控应用数据，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p>
<p>系统保护规则是应用整体维度的，而不是资源维度的，并且仅对入口流量 (进入应用的流量) 生效。</p>
<ul>
<li>Load（仅对 Linux&#x2F;Unix-like 机器生效）：当系统 load1 超过阈值，且系统当前的并发线程数超过系统容量时才会触发系统保护。系统容量由系统的 maxQps * minRt 计算得出。设定参考值一般是 CPU cores * 2.5。</li>
<li>RT：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li>
<li>线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li>
<li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li>
<li>CPU使用率：当单台机器上所有入口流量的 CPU使用率达到阈值即触发系统保护。</li>
</ul>
<h3 id="拓展-自定义异常返回"><a href="#拓展-自定义异常返回" class="headerlink" title="拓展-自定义异常返回"></a>拓展-自定义异常返回</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelExceptionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">BlockExceptionHandler</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * BlockException 异常接口,包含Sentinel的五个异常</span><br><span class="hljs-comment">     * FlowException          限流异常</span><br><span class="hljs-comment">     * DegradeException       降级异常</span><br><span class="hljs-comment">     * ParamFlowException     参数限流异常</span><br><span class="hljs-comment">     * AuthorityException     授权异常</span><br><span class="hljs-comment">     * SystemBlockException   系统负载异常</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        response.setContentType(<span class="hljs-string">&quot;application/json;charset=utf-8&quot;</span>);<br>        <span class="hljs-type">ResponseData</span> <span class="hljs-variable">responseData</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> FlowException) &#123;<br>            responseData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseData</span>(<span class="hljs-number">4001</span>, <span class="hljs-string">&quot;接口被限流！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> DegradeException) &#123;<br>            responseData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseData</span>(<span class="hljs-number">4002</span>, <span class="hljs-string">&quot;接口被降级！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> ParamFlowException) &#123;<br>            responseData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseData</span>(<span class="hljs-number">4003</span>, <span class="hljs-string">&quot;接口参数被限流！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> AuthorityException) &#123;<br>            responseData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseData</span>(<span class="hljs-number">4004</span>, <span class="hljs-string">&quot;接口授权异常！&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> SystemBlockException) &#123;<br>            responseData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ResponseData</span>(<span class="hljs-number">4005</span>, <span class="hljs-string">&quot;系统负载异常！&quot;</span>);<br>        &#125;<br>        response.getWriter().write(JSONObject.toJSONString(responseData));<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回类定义</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ResponseData</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> code;<br>    <span class="hljs-keyword">private</span> String message;<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2021/09/05/gbKIefCR5xQZNTW.png" alt="image.png"></p>
<h2 id="Sentinel注解"><a href="#Sentinel注解" class="headerlink" title="Sentinel注解"></a>Sentinel注解</h2><h3 id="SentinelResource"><a href="#SentinelResource" class="headerlink" title="SentinelResource"></a>SentinelResource</h3><p>在定义了资源点之后，我们可以通过Dashboard来设置限流和降级策略来对资源点进行保护。同时还能通过<code>@SentinelResource</code>来指定出现异常时的处理策略。<code>@SentinelResource</code> 用于定义资源，并提供可选的异常处理和 fallback 配置项。其主要参数如下:</p>
<table>
<thead>
<tr>
<th><strong>属性</strong></th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>value</td>
<td>资源名称</td>
</tr>
<tr>
<td>entryType</td>
<td>entry类型，标记流量的方向，取值<code>IN/OUT</code>，默认是OUT</td>
</tr>
<tr>
<td>blockHandler</td>
<td>处理BlockException的函数名称,函数要求：<br />1.必须是 public<br />2. 返回类型 参数与原方法一致<br />3.默认需和原方法在同一个类中。若希望使用其他类的函数，可配置<code>blockHandlerClass</code>，并指定<code>blockHandlerClass</code>里面的方法。</td>
</tr>
<tr>
<td>blockHandlerClass</td>
<td>存放fallback的类。对应的处理函数必须static修饰。</td>
</tr>
<tr>
<td>fallback</td>
<td>用于在抛出异常的时候提供fallback处理逻辑。<br />fallback函数可以针对所有类型的异常（除了 exceptionsToIgnore 里面排除掉的异常类型）进行处理。<br />函数要求：<br />1. 返回类型与原方法一致<br />2. 参数类型需要和原方法相匹配<br />3. 默认需和原方法在同一个类中。若希望使用其他类的函数，可配置fallbackClass ，并指定fallbackClass里面的方法。</td>
</tr>
<tr>
<td>fallbackClass</td>
<td>存放fallback的类。对应的处理函数必须static修饰。</td>
</tr>
<tr>
<td>defaultFallback</td>
<td>用于通用的 fallback 逻辑。<br />默认fallback函数可以针对所有类型的异常进行处理。若同时配置了 fallback 和 defaultFallback，以fallback为准。<br />函数要求：<br />1. 返回类型与原方法一致<br />2. 方法参数列表为空，或者有一个 Throwable 类型的参数。<br />3.默认需要和原方法在同一个类中。若希望使用其他类的函数，可配置fallbackClass ，并指定 fallbackClass 里面的方法。</td>
</tr>
<tr>
<td>exceptionsToIgnore</td>
<td>指定排除掉哪些异常。排除的异常不会计入异常统计，也不会进入fallback逻辑，而是原样抛出。</td>
</tr>
<tr>
<td>exceptionsToTrace</td>
<td>需要trace的异常</td>
</tr>
</tbody></table>
<p>下面通过代码案例演示</p>
<h4 id="限流降级定义在同一个类里面"><a href="#限流降级定义在同一个类里面" class="headerlink" title="限流降级定义在同一个类里面"></a>限流降级定义在同一个类里面</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * &#123;<span class="hljs-doctag">@link</span> SentinelResource&#125;</span><br><span class="hljs-comment"> *  value：资源名称</span><br><span class="hljs-comment"> *  blockHandler：sentinel异常捕获信息</span><br><span class="hljs-comment"> *  fallback：业务异常（除sentinel异常之外的）的异常捕获信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SentinelResource(value = &quot;message4&quot;, blockHandler = &quot;message4BlockHandler&quot;, fallback = &quot;message4Fallback&quot;)</span><br><span class="hljs-meta">@GetMapping(&quot;/message4&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message4</span><span class="hljs-params">()</span> &#123;<br>    ERROR_COUNT++;<br>    <span class="hljs-keyword">if</span> (ERROR_COUNT % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message4BlockHandler</span><span class="hljs-params">(BlockException e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;message4 接口被限流或者被降级了!,exception info is:&quot;</span>, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4 接口被限流或者被降级了!&quot;</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">message4Fallback</span><span class="hljs-params">(Throwable e)</span> &#123;<br>    log.error(<span class="hljs-string">&quot;message4 接口异常!,throwable info is:&quot;</span>, e);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4 接口异常!&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>运行</li>
<li>增加流程规则，简单设置个QPS限制</li>
<li>请求接口，测试。</li>
</ul>
<blockquote>
<p>通过请求接口我们发现，throw出来的RuntimeException打印和返回的是<code>message4Fallback</code>的信息，sentinel的QPS的异常信息打印和返回是<code>message4BlockHandler</code>.</p>
<ul>
<li><strong>&#x3D;&#x3D;注意blockHandler里面的方法名一定要和实现异常处理的方法名一致，且返回类型一致！&#x3D;&#x3D;</strong></li>
<li><strong>&#x3D;&#x3D;注意sentinel的<code>SentinelResource</code>的两个属性的实现方法是可以使用参数的，但是必须包含异常信息的参数，并且，blockHandler的异常只能是<code>BlockException</code>,其他类型则会自动进入<code>fallback</code>里面&#x3D;&#x3D;</strong></li>
<li><code>SentinelResource</code>的异常高于自定义全局异常捕获机智！</li>
</ul>
</blockquote>
<h3 id="将限流降级放在单独的类里面"><a href="#将限流降级放在单独的类里面" class="headerlink" title="将限流降级放在单独的类里面"></a>将限流降级放在单独的类里面</h3><h4 id="抽取限流方法"><a href="#抽取限流方法" class="headerlink" title="抽取限流方法"></a>抽取限流方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighConcurrencyBlockHandler</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">message4BlockHandler</span><span class="hljs-params">(BlockException e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;message4 接口被限流或者被降级了,HighConcurrencyBlockHandler!,exception info is:&quot;</span>, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4 接口被限流或者被降级了,HighConcurrencyBlockHandler!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="抽取fallback方法"><a href="#抽取fallback方法" class="headerlink" title="抽取fallback方法"></a>抽取fallback方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HighConcurrencyFallback</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">message4Fallback</span><span class="hljs-params">(Throwable e)</span> &#123;<br>        log.error(<span class="hljs-string">&quot;message4 接口异常,HighConcurrencyFallback!,throwable info is:&quot;</span>, e);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4 接口异常,HighConcurrencyFallback!&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="改造资源保护方法"><a href="#改造资源保护方法" class="headerlink" title="改造资源保护方法"></a>改造资源保护方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">  * &#123;<span class="hljs-doctag">@link</span> SentinelResource&#125;</span><br><span class="hljs-comment">  * value：资源名称</span><br><span class="hljs-comment">  * blockHandler：sentinel异常捕获信息</span><br><span class="hljs-comment">  * fallback：业务异常（除sentinel异常之外的）的异常捕获信息</span><br><span class="hljs-comment">  *</span><br><span class="hljs-comment">  * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">  */</span><br> <span class="hljs-meta">@SentinelResource(value = &quot;message4&quot;,</span><br><span class="hljs-meta">         blockHandler = &quot;message4BlockHandler&quot;, fallback = &quot;message4Fallback&quot;,</span><br><span class="hljs-meta">         blockHandlerClass = HighConcurrencyBlockHandler.class, fallbackClass = HighConcurrencyFallback.class)</span><br> <span class="hljs-meta">@GetMapping(&quot;/message4&quot;)</span><br> <span class="hljs-keyword">public</span> String <span class="hljs-title function_">message4</span><span class="hljs-params">()</span> &#123;<br>     ERROR_COUNT++;<br>     <span class="hljs-keyword">if</span> (ERROR_COUNT % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>         <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>();<br>     &#125; <span class="hljs-keyword">else</span> &#123;<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;message4&quot;</span>;<br>     &#125;<br> &#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>运行</li>
<li>增加流程规则，简单设置个QPS限制</li>
<li>请求接口，测试。</li>
</ul>
<h2 id="Sentinel规则持久化"><a href="#Sentinel规则持久化" class="headerlink" title="Sentinel规则持久化"></a>Sentinel规则持久化</h2><p>通过前面的讲解，我们已经知道，可以通过Dashboard来为每个Sentinel客户端设置各种各样的规则，但是这里有一个问题，就是这些规则默认是存放在内存中，极不稳定，所以需要将其持久化。</p>
<p>本地文件数据源会定时轮询文件的变更，读取规则。这样我们既可以在应用本地直接修改文件来更新规则，也可以通过 Sentinel 控制台推送规则。以本地文件数据源为例，推送过程如下图所示：</p>
<p><img src="https://i.bmp.ovh/imgs/2021/09/cd5c368316e6c777.png"></p>
<p>首先 Sentinel 控制台通过 API 将规则推送至客户端并更新到内存中，接着注册的写数据源会将新的规则保存到本地的文件中。</p>
<h3 id="实现实例化功能"><a href="#实现实例化功能" class="headerlink" title="实现实例化功能"></a>实现实例化功能</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> SentinelPersistence</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> Sentitnel持久化</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/9/12 14:04</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SentinelPersistence</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InitFunc</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ruleDir</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;user.home&quot;</span>) + <span class="hljs-string">&quot;/sentinel-rules/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">flowRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/flow-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">degradeRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/degrade-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">systemRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/system-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">authorityRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/authority-rule.json&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">paramFlowRulePath</span> <span class="hljs-operator">=</span> ruleDir + <span class="hljs-string">&quot;/param-flow-rule.json&quot;</span>;<br><br>        <span class="hljs-built_in">this</span>.mkdir(ruleDir);<br>        <span class="hljs-built_in">this</span>.createFile(flowRulePath);<br>        <span class="hljs-built_in">this</span>.createFile(degradeRulePath);<br>        <span class="hljs-built_in">this</span>.createFile(systemRulePath);<br>        <span class="hljs-built_in">this</span>.createFile(authorityRulePath);<br>        <span class="hljs-built_in">this</span>.createFile(paramFlowRulePath);<br><br>        <span class="hljs-comment">// 流控规则</span><br>        ReadableDataSource&lt;String, List&lt;FlowRule&gt;&gt; flowRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(<br>                flowRulePath,<br>                flowRuleListParser<br>        );<br>        FlowRuleManager.register2Property(flowRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;FlowRule&gt;&gt; flowRuleWDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(<br>                flowRulePath,<br>                <span class="hljs-built_in">this</span>::encodeJson<br>        );<br>        WritableDataSourceRegistry.registerFlowDataSource(flowRuleWDS);<br><br>        <span class="hljs-comment">// 降级规则</span><br>        ReadableDataSource&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(<br>                degradeRulePath,<br>                degradeRuleListParser<br>        );<br>        DegradeRuleManager.register2Property(degradeRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;DegradeRule&gt;&gt; degradeRuleWDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(<br>                degradeRulePath,<br>                <span class="hljs-built_in">this</span>::encodeJson<br>        );<br>        WritableDataSourceRegistry.registerDegradeDataSource(degradeRuleWDS);<br><br>        <span class="hljs-comment">// 系统规则</span><br>        ReadableDataSource&lt;String, List&lt;SystemRule&gt;&gt; systemRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(<br>                systemRulePath,<br>                systemRuleListParser<br>        );<br>        SystemRuleManager.register2Property(systemRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;SystemRule&gt;&gt; systemRuleWDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(<br>                systemRulePath,<br>                <span class="hljs-built_in">this</span>::encodeJson<br>        );<br>        WritableDataSourceRegistry.registerSystemDataSource(systemRuleWDS);<br><br>        <span class="hljs-comment">// 授权规则</span><br>        ReadableDataSource&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(<br>                authorityRulePath,<br>                authorityRuleListParser<br>        );<br>        AuthorityRuleManager.register2Property(authorityRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;AuthorityRule&gt;&gt; authorityRuleWDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(<br>                authorityRulePath,<br>                <span class="hljs-built_in">this</span>::encodeJson<br>        );<br>        WritableDataSourceRegistry.registerAuthorityDataSource(authorityRuleWDS);<br><br>        <span class="hljs-comment">// 热点参数规则</span><br>        ReadableDataSource&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleRDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileRefreshableDataSource</span>&lt;&gt;(<br>                paramFlowRulePath,<br>                paramFlowRuleListParser<br>        );<br>        ParamFlowRuleManager.register2Property(paramFlowRuleRDS.getProperty());<br>        WritableDataSource&lt;List&lt;ParamFlowRule&gt;&gt; paramFlowRuleWDS = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWritableDataSource</span>&lt;&gt;(<br>                paramFlowRulePath,<br>                <span class="hljs-built_in">this</span>::encodeJson<br>        );<br>        ModifyParamFlowRulesCommandHandler.setWritableDataSource(paramFlowRuleWDS);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;FlowRule&gt;&gt; flowRuleListParser = source -&gt; JSON.parseObject(<br>            source,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;FlowRule&gt;&gt;() &#123;<br>            &#125;<br>    );<br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;DegradeRule&gt;&gt; degradeRuleListParser = source -&gt; JSON.parseObject(<br>            source,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;DegradeRule&gt;&gt;() &#123;<br>            &#125;<br>    );<br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;SystemRule&gt;&gt; systemRuleListParser = source -&gt; JSON.parseObject(<br>            source,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;SystemRule&gt;&gt;() &#123;<br>            &#125;<br>    );<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;AuthorityRule&gt;&gt; authorityRuleListParser = source -&gt; JSON.parseObject(<br>            source,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;AuthorityRule&gt;&gt;() &#123;<br>            &#125;<br>    );<br><br>    <span class="hljs-keyword">private</span> Converter&lt;String, List&lt;ParamFlowRule&gt;&gt; paramFlowRuleListParser = source -&gt; JSON.parseObject(<br>            source,<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeReference</span>&lt;List&lt;ParamFlowRule&gt;&gt;() &#123;<br>            &#125;<br>    );<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建文件夹，不存在则创建</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath   文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mkdir</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.mkdirs();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 创建文件，不存在则创建</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> filePath    文件路径</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span> IOException</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createFile</span><span class="hljs-params">(String filePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br>        <span class="hljs-keyword">if</span> (!file.exists()) &#123;<br>            file.createNewFile();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> &lt;T&gt; String <span class="hljs-title function_">encodeJson</span><span class="hljs-params">(T t)</span> &#123;<br>        <span class="hljs-keyword">return</span> JSONObject.toJSONString(t);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="添加配置-1"><a href="#添加配置-1" class="headerlink" title="添加配置"></a>添加配置</h3><ul>
<li>在<code>resource</code>下面创建配置目录<code>META-INF/services ​</code></li>
<li>添加文件<code>com.alibaba.csp.sentinel.init.InitFunc</code></li>
<li>在文件中添加配置类的全路径</li>
</ul>
<blockquote>
<p><strong>&#x3D;&#x3D;该实例化存在一个严重的问题，我为了这个配置类的易用性，增加注入了一个spring的<code>spring.application.name</code>,但是不知道为啥，项目启动后改配置读取不到，显示为null,后经过debug发现的sentinel相关默认实现添加了spring的order排序，但是博猪更改排序后还是无效，这个疑问还请有踩过坑的，麻烦解读一下&#x3D;&#x3D;</strong></p>
</blockquote>
<h2 id="Feign整合Sentinel"><a href="#Feign整合Sentinel" class="headerlink" title="Feign整合Sentinel"></a>Feign整合Sentinel</h2><h3 id="引入sentinel的依赖"><a href="#引入sentinel的依赖" class="headerlink" title="引入sentinel的依赖"></a>引入sentinel的依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--sentinel客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-sentinel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="配置开启feign"><a href="#配置开启feign" class="headerlink" title="配置开启feign"></a>配置开启feign</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">feign:</span><br>  <span class="hljs-attr">sentinel:</span><br>    <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<h3 id="创建产品feign-api项目"><a href="#创建产品feign-api项目" class="headerlink" title="创建产品feign-api项目"></a>创建产品feign-api项目</h3><h4 id="创建shop-product-api模块，jar包形式"><a href="#创建shop-product-api模块，jar包形式" class="headerlink" title="创建shop-product-api模块，jar包形式"></a>创建<code>shop-product-api</code>模块，jar包形式</h4><h4 id="增加相关依赖"><a href="#增加相关依赖" class="headerlink" title="增加相关依赖"></a>增加相关依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--fegin组件--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="创建feignClient"><a href="#创建feignClient" class="headerlink" title="创建feignClient"></a>创建feignClient</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClient</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(name = &quot;shop-product&quot;</span><br><span class="hljs-meta">        , fallback = ProductFeignClientFallback.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_FALLBACK_MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;服务不可用！&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据产品id查询产品详情</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> productId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/queryProductInfoByProductId/&#123;productId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">queryProductInfoByProductId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer productId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="创建fallback"><a href="#创建fallback" class="headerlink" title="创建fallback"></a>创建fallback</h4><figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClientFallback</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:29</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductFeignClientFallback</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ProductFeignClient</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">ProductVO <span class="hljs-title">queryProductInfoByProductId</span><span class="hljs-params">(Integer productId)</span> </span>&#123;<br>        log.<span class="hljs-keyword">error</span>(DEFAULT_FALLBACK_MSG);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="创建feignClientVO"><a href="#创建feignClientVO" class="headerlink" title="创建feignClientVO"></a>创建feignClientVO</h4><figure class="highlight zephir"><table><tr><td class="code"><pre><code class="hljs zephir"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductVO</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:33</span><br><span class="hljs-comment"> */</span><br>@Data<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductVO</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span> </span>&#123;<br><br>   <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = <span class="hljs-number">1</span>L;<br><br>   <span class="hljs-comment">/** 主键 */</span><br>   <span class="hljs-keyword">private</span> Integer pId;<br>   <span class="hljs-comment">/** 商品名称 */</span><br>   <span class="hljs-keyword">private</span> String pName;<br>   <span class="hljs-comment">/** 商品价格 */</span><br>   <span class="hljs-keyword">private</span> Double pPrice;<br>   <span class="hljs-comment">/** 库存 */</span><br>   <span class="hljs-keyword">private</span> Integer stock;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="产品服务增加相关依赖"><a href="#产品服务增加相关依赖" class="headerlink" title="产品服务增加相关依赖"></a>产品服务增加相关依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.letcoding<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shop-product-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="修改订单服务"><a href="#修改订单服务" class="headerlink" title="修改订单服务"></a>修改订单服务</h3><h4 id="订单服务开启feign，修改订单启动类"><a href="#订单服务开启feign，修改订单启动类" class="headerlink" title="订单服务开启feign，修改订单启动类"></a>订单服务开启feign，修改订单启动类</h4><figure class="highlight less"><table><tr><td class="code"><pre><code class="hljs less"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * @ClassName OrderApplication</span><br><span class="hljs-comment"> * @Description</span><br><span class="hljs-comment"> * @Author will</span><br><span class="hljs-comment"> * @Date 2021/6/20 19:32</span><br><span class="hljs-comment"> */</span><br><span class="hljs-variable">@SpringBootApplication</span><br><span class="hljs-variable">@EnableDiscoveryClient</span><br><span class="hljs-variable">@ComponentScan</span>(basePackages = &#123;<span class="hljs-string">&quot;com.letcoding.order&quot;</span>,<span class="hljs-string">&quot;com.letcoding.product&quot;</span>&#125;)<br><span class="hljs-variable">@EnableFeignClients</span>(basePackages = <span class="hljs-string">&quot;com.letcoding.product&quot;</span>)<br>public class OrderApplication &#123;<br>    <span class="hljs-selector-tag">public</span> <span class="hljs-selector-tag">static</span> <span class="hljs-selector-tag">void</span> <span class="hljs-selector-tag">main</span>(String[] args) &#123;<br>        <span class="hljs-selector-tag">SpringApplication</span><span class="hljs-selector-class">.run</span>(OrderApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><ul>
<li>启动产品服务、订单服务，创建订单试一下</li>
<li>停止订单服务，再次下订单</li>
</ul>
<blockquote>
<p>&#x3D;&#x3D;简单说明一下，个人对于feign编码的习惯，还是遵循低耦合的原则，尽量不适用公共的vo等，同时尽量精简定义feign的相关对象，提供http的传输效率，因为feign的底层也是http请求，所以过大的请求和各服务之间的相互调用，对于feign这一块还是要注意的！&#x3D;&#x3D;</p>
<p>通过测试，我们发现，该方式请求不会正确的抛出异常来，所以如果想知道具体的fallback异常，请使用一下形式进行。</p>
</blockquote>
<figure class="highlight aspectj"><table><tr><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClientFallbackFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/9/12 21:42</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf</span>4j<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductFeignClientFallbackFactory</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">FallbackFactory</span>&lt;<span class="hljs-title">ProductFeignClient</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-function">ProductFeignClient <span class="hljs-title">create</span><span class="hljs-params">(Throwable cause)</span> </span>&#123;<br>        log.<span class="hljs-keyword">error</span>(<span class="hljs-string">&quot;FallbackFactory,服务不可用！&quot;</span>,cause);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ProductFeignClient</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/7/11 18:25</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@FeignClient(name = &quot;shop-product&quot;</span><br><span class="hljs-meta">//        , fallback = ProductFeignClientFallback.class</span><br><span class="hljs-meta">        , fallbackFactory = ProductFeignClientFallbackFactory.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ProductFeignClient</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_FALLBACK_MSG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;服务不可用！&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据产品id查询产品详情</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> productId</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;/api/queryProductInfoByProductId/&#123;productId&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> ProductVO <span class="hljs-title function_">queryProductInfoByProductId</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> Integer productId)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>&#x3D;&#x3D;注意: fallback和fallbackFactory只能使用其中一种方式&#x3D;&#x3D;</p>
</blockquote>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Cloud-Alibaba(5)-服务网关</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/Spring-Cloud-Alibaba(5)-%E6%9C%8D%E5%8A%A1%E7%BD%91%E5%85%B3/</url>
    <content><![CDATA[<h1 id="网关简介"><a href="#网关简介" class="headerlink" title="网关简介"></a>网关简介</h1><p>大家都都知道在微服务架构中，一个系统会被拆分为很多个微服务。那么作为客户端要如何去调用这么多的微服务呢？如果没有网关的存在，我们只能在客户端记录每个微服务的地址，然后分别去调用。</p>
<p><img src="https://i.loli.net/2021/09/19/7jYrw2bhAay6N9u.png" alt="image.png"></p>
<p>这样的架构，会存在着诸多的问题：</p>
<ul>
<li>客户端多次请求不同的微服务，增加客户端代码或配置编写的复杂性</li>
<li>认证复杂，每个服务都需要独立认证。</li>
<li>存在跨域请求，在一定场景下处理相对复杂。</li>
</ul>
<p>上面的这些问题可以借助<strong>API****网关</strong>来解决。</p>
<p>所谓的API网关，就是指系统的<strong>统一入口</strong>，它封装了应用程序的内部结构，为客户端提供统一服务，一些与业务本身功能无关的公共逻辑可以在这里实现，诸如认证、鉴权、监控、路由转发等等。</p>
<p>添加上API网关之后，系统的架构图变成了如下所示：</p>
<p><img src="https://i.loli.net/2021/09/19/is1e54KcNrktqMZ.png" alt="image.png"></p>
<p>我们也可以观察下，我们现在的整体架构图：</p>
<p><img src="https://i.loli.net/2021/09/19/EMeVtuJa9KjNdLp.png" alt="image.png"></p>
<p>在业界比较流行的网关，有下面这些：</p>
<ul>
<li><strong>Ngnix+lua</strong></li>
</ul>
<p>使用nginx的反向代理和负载均衡可实现对api服务器的负载均衡及高可用lua是一种脚本语言,可以来编写一些简单的逻辑, nginx支持lua脚本</p>
<ul>
<li><strong>Kong</strong></li>
</ul>
<p>基于Nginx+Lua开发，性能高，稳定，有多个可用的插件(限流、鉴权等等)可以开箱即用。 问题：只支持Http协议；二次开发，自由扩展困难；提供管理API，缺乏更易用的管控、配置方式。</p>
<ul>
<li><strong>Zuul</strong></li>
</ul>
<p>Netflflix开源的网关，功能丰富，使用JAVA开发，易于二次开发 问题：缺乏管控，无法动态配置；依赖组件较多；处理Http请求依赖的是Web容器，性能不如Nginx</p>
<ul>
<li><strong>Spring Cloud Gateway</strong></li>
</ul>
<p>Spring公司为了替换Zuul而开发的网关服务，将在下面具体介绍。</p>
<blockquote>
<p><strong>注意：SpringCloud alibaba技术栈中并没有提供自己的网关，我们可以采用Spring Cloud Gateway来做网关</strong></p>
</blockquote>
<h1 id="Gateway简介"><a href="#Gateway简介" class="headerlink" title="Gateway简介"></a>Gateway简介</h1><p>Spring Cloud Gateway是Spring公司基于Spring 5.0，Spring Boot 2.0 和 Project Reactor 等技术开发的网关，它旨在为微服务架构提供一种简单有效的统一的 API 路由管理方式。它的目标是替代Netflflix Zuul，其不仅提供统一的路由方式，并且基于 Filter 链的方式提供了网关基本的功能，例如：安全，监控和限流。</p>
<p><strong>优点：</strong></p>
<ul>
<li>性能强劲：是第一代网关Zuul的1.6倍</li>
<li>功能强大：内置了很多实用的功能，例如转发、监控、限流等</li>
<li>设计优雅，容易扩展</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>其实现依赖Netty与WebFlux，不是传统的Servlet编程模型，学习成本高</li>
<li>不能将其部署在Tomcat、Jetty等Servlet容器里，只能打成jar包执行</li>
<li>需要Spring Boot 2.0及以上的版本，才支持</li>
</ul>
<h1 id="Gateway快速入门"><a href="#Gateway快速入门" class="headerlink" title="Gateway快速入门"></a>Gateway快速入门</h1><blockquote>
<p>要求: 通过浏览器访问api网关,然后通过网关将请求转发到商品微服务</p>
</blockquote>
<h2 id="基础版"><a href="#基础版" class="headerlink" title="基础版"></a><strong>基础版</strong></h2><h3 id="创建新模块shop-gateway"><a href="#创建新模块shop-gateway" class="headerlink" title="创建新模块shop-gateway"></a>创建新模块<code>shop-gateway</code></h3><h3 id="导入相关网关依赖"><a href="#导入相关网关依赖" class="headerlink" title="导入相关网关依赖"></a>导入相关网关依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--gateway网关--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-gateway<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="创建项目基本包路径com-letcoding-gateway"><a href="#创建项目基本包路径com-letcoding-gateway" class="headerlink" title="创建项目基本包路径com.letcoding.gateway"></a>创建项目基本包路径<code>com.letcoding.gateway</code></h3><h3 id="创建shop-gateway模块启动类"><a href="#创建shop-gateway模块启动类" class="headerlink" title="创建shop-gateway模块启动类"></a>创建<code>shop-gateway</code>模块启动类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.letcoding.gateway;<br><br><span class="hljs-keyword">import</span> org.springframework.boot.SpringApplication;<br><span class="hljs-keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> ShopGatewayApplication</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/9/19 8:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopGatewayApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(ShopGatewayApplication.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span> <span class="hljs-comment"># 当前路由的标识, 要求唯一</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">http://localhost:8081</span> <span class="hljs-comment"># 请求要转发到的地址</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 路由的优先级,数字越小级别越高</span><br>          <span class="hljs-comment"># 断言(就是路由转发要满足的条件)</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/shop-product/**</span> <span class="hljs-comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span><br>          <span class="hljs-comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span> <span class="hljs-comment"># 转发之前去掉1层路径</span><br></code></pre></td></tr></table></figure>

<h3 id="启动服务，通过网关访问路径，请求测试"><a href="#启动服务，通过网关访问路径，请求测试" class="headerlink" title="启动服务，通过网关访问路径，请求测试"></a>启动服务，通过网关访问路径，请求测试</h3><blockquote>
<p><a href="http://localhost:7000/shop-product/product/info/1">http://localhost:7000/shop-product/product/info/1</a></p>
</blockquote>
<p><img src="https://i.loli.net/2021/09/19/sLn7iVPDWmHORjr.png" alt="image.png"></p>
<h2 id="增强版"><a href="#增强版" class="headerlink" title="增强版"></a>增强版</h2><blockquote>
<p>现在在配置文件中写死了转发路径的地址, 前面我们已经分析过地址写死带来的问题, 接下来我们从注册中心获取此地址。</p>
</blockquote>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--nacos客户端--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.cloud<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="添加注解，让注册中心能发现"><a href="#添加注解，让注册中心能发现" class="headerlink" title="添加注解，让注册中心能发现"></a>添加注解，让注册中心能发现</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> <span class="hljs-variable">ShopGatewayApplication</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> <span class="hljs-variable">will</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/9/19 8:23</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@EnableDiscoveryClient</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShopGatewayApplication</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>) &#123;<br>        <span class="hljs-title class_">SpringApplication</span>.<span class="hljs-title function_">run</span>(<span class="hljs-title class_">ShopGatewayApplication</span>.<span class="hljs-property">class</span>, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span> <span class="hljs-comment"># 当前路由的标识, 要求唯一</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lib://shop-product</span> <span class="hljs-comment"># 请求要转发到的地址</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">1</span> <span class="hljs-comment"># 路由的优先级,数字越小级别越高</span><br>          <span class="hljs-comment"># 断言(就是路由转发要满足的条件)</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/shop-product/**</span> <span class="hljs-comment"># 当请求路径满足Path指定的规则时,才进行路由转发</span><br>          <span class="hljs-comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span> <span class="hljs-comment"># 转发之前去掉1层路径</span><br></code></pre></td></tr></table></figure>

<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><blockquote>
<p>备注：这里说一个博猪开发的微服务开发的习惯：</p>
<ul>
<li>启动项目</li>
<li>打开对应环境配置的注册发现中心-<code>nacos</code></li>
<li>打开<code>服务管理</code>-<code>服务配置</code></li>
<li>查看服务是否启动成功</li>
<li>查看使用服务是否都在一个服务环境里面，<code>nacos</code>默认为<code>public</code>,不用环境服务调试的时候不通的！！！</li>
</ul>
<p>访问地址：<a href="http://localhost:7000/shop-product/product/info/1">http://localhost:7000/shop-product/product/info/1</a></p>
</blockquote>
<p><img src="https://i.loli.net/2021/09/19/sLn7iVPDWmHORjr.png" alt="image.png"></p>
<h2 id="简写版"><a href="#简写版" class="headerlink" title="简写版"></a>简写版</h2><blockquote>
<p>有人可能觉得上方配置可能太繁琐了，在开发中流行一句话<code>约定大于配置</code>，而<code>SpringCloud-gateway</code>也遵循了这么一个良好的规范，如果对于这一块不太了解的朋友，请先学习一下<code>SpringBoot</code>，对于<code>去配置化</code>有个大概的了解，同时对<code>SpringCloud</code>也有个基础。当然话归正题我还是不太建议这样配置的，当然日常开发中也很少使用到默认的配置，这里只限于练习配置。</p>
</blockquote>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>

<h3 id="启动测试-1"><a href="#启动测试-1" class="headerlink" title="启动测试"></a>启动测试</h3><blockquote>
<p>访问地址：<a href="http://localhost:7000/shop-product/product/info/1">http://localhost:7000/shop-product/product/info/1</a></p>
</blockquote>
<p><img src="https://i.loli.net/2021/09/19/sLn7iVPDWmHORjr.png" alt="image.png"></p>
<blockquote>
<p>这时候，就发现只要按照<strong>网关地址&#x2F;微服务&#x2F;接口</strong>的格式去访问，就可以得到成功响应。</p>
<p>同时这里也会发现我之前的命名规则和一些开发习惯，这个也会省去很大的功夫，所以我很建议个人再去开发的时候一定要好好设计一下自己的代码编写规范和实现的逻辑思路。</p>
</blockquote>
<h1 id="Gateway核心架构"><a href="#Gateway核心架构" class="headerlink" title="Gateway核心架构"></a>Gateway核心架构</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>路由(Route) 是 gateway 中最基本的组件之一，表示一个具体的路由信息载体。主要定义了下面的几个信息:</p>
<table>
<thead>
<tr>
<th>字段名</th>
<th>字段含义</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>路由标识符，区别于其他 Route</td>
</tr>
<tr>
<td>uri</td>
<td>路由指向的目的地 uri，即客户端请求最终被转发到的微服务</td>
</tr>
<tr>
<td>order</td>
<td>用于多个 Route 之间的排序，数值越小排序越靠前，匹配优先级越高</td>
</tr>
<tr>
<td>predicate</td>
<td>断言的作用是进行条件判断，只有断言都返回真，才会真正的执行路由</td>
</tr>
<tr>
<td>filter</td>
<td>过滤器用于修改请求和响应信息</td>
</tr>
</tbody></table>
<h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p><img src="https://i.loli.net/2021/09/20/SzuZbMWTQ6NwosE.png" alt="image-20210920231447150"></p>
<p>执行流程大体如下：</p>
<ul>
<li>Gateway Client向Gateway Server发送请求</li>
<li>请求首先会被HttpWebHandlerAdapter进行提取组装成网关上下文</li>
<li>然后网关的上下文会传递到DispatcherHandler，它负责将请求分发给RoutePredicateHandlerMapping</li>
<li>RoutePredicateHandlerMapping负责路由查找，并根据路由断言判断路由是否可用</li>
<li>如果过断言成功，由FilteringWebHandler创建过滤器链并调用6. 请求会一次经过PreFilter–微服务–PostFilter的方法，最终返回响应</li>
</ul>
<h2 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h2><p>Predicate(断言, 谓词) 用于进行条件判断，只有断言都返回真，才会真正的执行路由。</p>
<p>断言就是说: 在 <strong>什么条件下</strong> 才能进行路由转发</p>
<h3 id="内置路由断言工厂"><a href="#内置路由断言工厂" class="headerlink" title="内置路由断言工厂"></a>内置路由断言工厂</h3><p>SpringCloud Gateway包括许多内置的断言工厂，所有这些断言都与HTTP请求的不同属性匹配。具体如下：</p>
<ul>
<li><p>基于Datetime类型的断言工厂</p>
<p>此类型的断言根据时间做判断，主要有三个：</p>
<ul>
<li>AfterRoutePredicateFactory： 接收一个日期参数，判断请求日期是否晚于指定日期</li>
<li>BeforeRoutePredicateFactory： 接收一个日期参数，判断请求日期是否早于指定日期</li>
<li>BetweenRoutePredicateFactory： 接收两个日期参数，判断请求日期是否在指定时间段内</li>
</ul>
<blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-After=2019-12-31T23:59:59.789+08:00[Asia/Shanghai]</span><br></code></pre></td></tr></table></figure>
</blockquote>
</li>
<li><p>基于远程地址的断言工厂 RemoteAddrRoutePredicateFactory：接收一个IP地址段，判断请求主机地址是否在地址段中</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-RemoteAddr=192.168.1.1/24</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Cookie的断言工厂</li>
</ul>
<p>CookieRoutePredicateFactory：接收两个参数，cookie 名字和一个正则表达式。 判断请求cookie是否具有给定名称且值与正则表达式匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Cookie=chocolate,</span> <span class="hljs-string">ch.</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Header的断言工厂</li>
</ul>
<p>HeaderRoutePredicateFactory：接收两个参数，标题名称和正则表达式。 判断请求Header是否具有给定名称且值与正则表达式匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Header=X-Request-Id,</span> <span class="hljs-string">\d+</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Host的断言工厂</li>
</ul>
<p>HostRoutePredicateFactory：接收一个参数，主机名模式。判断请求的Host是否满足匹配规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Host=**.testhost.org</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Method请求方法的断言工厂</li>
</ul>
<p>MethodRoutePredicateFactory：接收一个参数，判断请求类型是否跟指定的类型匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Method=GET</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Path请求路径的断言工厂</li>
</ul>
<p>PathRoutePredicateFactory：接收一个参数，判断请求的URI部分是否满足路径规则。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Path=/foo/&#123;segment&#125;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于Query请求参数的断言工厂</li>
</ul>
<p>QueryRoutePredicateFactory ：接收两个参数，请求param和正则表达式， 判断请求参数是否具有给定名称且值与正则表达式匹配。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">-Query=baz,</span> <span class="hljs-string">ba.</span><br></code></pre></td></tr></table></figure>

<ul>
<li>基于路由权重的断言工厂</li>
</ul>
<p>WeightRoutePredicateFactory：接收一个[组名,权重], 然后对于同一个组内的路由按照权重转发</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">routes:</span><br>    <span class="hljs-string">-id:</span> <span class="hljs-attr">weight_route1 uri: host1 predicates:</span><br>    <span class="hljs-string">-Path=/product/**</span><br>    <span class="hljs-string">-Weight=group3,</span> <span class="hljs-number">1</span><br>    <span class="hljs-string">-id:</span> <span class="hljs-attr">weight_route2 uri: host2 predicates:</span><br>    <span class="hljs-string">-Path=/product/**</span><br>    <span class="hljs-string">-Weight=</span> <span class="hljs-string">group3,</span> <span class="hljs-number">9</span><br></code></pre></td></tr></table></figure>

<h3 id="内置路由断言工厂的使用"><a href="#内置路由断言工厂的使用" class="headerlink" title="内置路由断言工厂的使用"></a>内置路由断言工厂的使用</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-comment"># 路由数组[路由 就是指定当请求满足什么条件的时候转到哪个微服务]</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span> <span class="hljs-comment"># 当前路由的标识, 要求唯一</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lib://shop-product</span> <span class="hljs-comment"># 请求要转发到的地址</span><br>          <span class="hljs-attr">order:</span> <span class="hljs-number">0</span> <span class="hljs-comment"># 路由的优先级,数字越小级别越高</span><br>          <span class="hljs-comment"># 断言(就是路由转发要满足的条件)</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Method=POST</span><br>          <span class="hljs-comment"># 过滤器,请求在传递过程中可以通过过滤器对其进行一定的修改</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span> <span class="hljs-comment"># 转发之前去掉1层路径</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>一定要把<code>Path</code>路径转发去掉，要不然对应的method断言不会生效的。</p>
</blockquote>
<h3 id="自定义路由断言工厂"><a href="#自定义路由断言工厂" class="headerlink" title="自定义路由断言工厂"></a>自定义路由断言工厂</h3><p>我们来设定一个场景: 假设我们的应用仅仅让age在(min,max)之间的人来访问。</p>
<h4 id="编写年龄配置"><a href="#编写年龄配置" class="headerlink" title="编写年龄配置"></a>编写年龄配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-string">http://192.168.56.120:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>          <span class="hljs-comment"># 忽略大小写匹配，默认为 false。</span><br>          <span class="hljs-attr">lower-case-service-id:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://shop-product</span><br>          <span class="hljs-comment"># 断言</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/shop-product/**</span><br>            <span class="hljs-comment">#自定义Age断言工厂</span><br>            <span class="hljs-comment"># Age：自动找到 &quot;Age&quot; + &quot;RoutePredicateFactory&quot; 断言工厂</span><br>            <span class="hljs-comment"># 18,60: 断言工厂参数</span><br>            <span class="hljs-comment"># 限制年龄[18, 60)的人能访问</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Age=18,60</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br></code></pre></td></tr></table></figure>

<h4 id="自定义一个断言工厂-实现断言方法"><a href="#自定义一个断言工厂-实现断言方法" class="headerlink" title="自定义一个断言工厂, 实现断言方法"></a>自定义一个断言工厂, 实现断言方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.letcoding.gateway.predicate;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.handler.predicate.AbstractRoutePredicateFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.MultiValueMap;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> AgeRoutePredicateFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义年龄断言工厂</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/21 15:47</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeRoutePredicateFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractRoutePredicateFactory</span>&lt;AgeRoutePredicateFactory.Config&gt; &#123;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">AgeRoutePredicateFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(AgeRoutePredicateFactory.Config.class);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Predicate&lt;ServerWebExchange&gt; <span class="hljs-title function_">apply</span><span class="hljs-params">(Config config)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Predicate</span>&lt;ServerWebExchange&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(ServerWebExchange serverWebExchange)</span> &#123;<br>                <span class="hljs-comment">//取请求参数age，判断是否满足[18, 60)</span><br>                MultiValueMap&lt;String, String&gt; queryParams = serverWebExchange.getRequest().getQueryParams();<br>                log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;queryParams is &quot;</span>, JSONObject.toJSONString(queryParams));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> queryParams.getFirst(<span class="hljs-string">&quot;age&quot;</span>);<br>                log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;age is &quot;</span>,age);<br>                System.out.println(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>+age);<br>                <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(age) &amp;&amp; age.matches(<span class="hljs-string">&quot;[0-9]+&quot;</span>)) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">ageInt</span> <span class="hljs-operator">=</span> Integer.parseInt(age);<br>                    <span class="hljs-keyword">if</span> (ageInt &gt;= config.getMinAge() &amp;&amp; ageInt &lt; config.getMinAge()) &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-keyword">return</span> String.format(<span class="hljs-string">&quot;minAge: %s,MaxAge: %s&quot;</span>, config.getMinAge(),config.getMinAge());<br>            &#125;<br>        &#125;;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">shortcutFieldOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;minAge&quot;</span>, <span class="hljs-string">&quot;maxAge&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Validated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>&#123;<br>        <span class="hljs-keyword">private</span> Integer minAge;<br>        <span class="hljs-keyword">private</span> Integer maxAge;<br><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getMinAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> minAge;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMinAge</span><span class="hljs-params">(Integer minAge)</span> &#123;<br>            <span class="hljs-built_in">this</span>.minAge = minAge;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getMaxAge</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> maxAge;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMaxAge</span><span class="hljs-params">(Integer maxAge)</span> &#123;<br>            <span class="hljs-built_in">this</span>.maxAge = maxAge;<br>        &#125;<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="启动测试，分别测试一下请求"><a href="#启动测试，分别测试一下请求" class="headerlink" title="启动测试，分别测试一下请求"></a>启动测试，分别测试一下请求</h4><blockquote>
<p>#测试发现当age在(20,60)可以访问,其它范围不能访问<br><a href="http://localhost:7000/product-serv/product/1?age=30">http://localhost:7000/product-serv/product/1?age=30</a></p>
<p><a href="http://localhost:7000/product-serv/product/1?age=10">http://localhost:7000/product-serv/product/1?age=10</a></p>
<p><a href="http://localhost:7000/product-serv/product/1?age=80">http://localhost:7000/product-serv/product/1?age=80</a></p>
</blockquote>
<blockquote>
<p>注意：</p>
<ul>
<li>网关服务和产品的服务，一定要在同一个nacos、命名空间下面！！！！！</li>
<li>版本问题，博猪由于在最初选择springCloud和SpringcloudAlibaba的版本上不太兼容，导致博猪在进行自定义断言配置时出现问题，正确配置如下：</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud.version</span>&gt;</span>Greenwich.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud.version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span>2.1.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">spring-cloud-alibaba.version</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>版本问题很重要！！！！！！！</p>
</blockquote>
</blockquote>
<h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><ul>
<li>作用: 过滤器就是在请求的传递过程中,对请求和响应做一些手脚</li>
<li>生命周期: <code>Pre Post</code></li>
<li>分类: 局部过滤器(作用在某一个路由上) 全局过滤器(作用全部路由上)</li>
<li>在Gateway中, Filter的生命周期只有两个：“pre” 和 “post”。<ul>
<li>PRE：  这种过滤器在请求被路由之前调用。我们可利用这种过滤器实现身份验证、在集群中选择 请求的微服务、记录调试信息等。</li>
<li>POST：这种过滤器在路由到微服务以后执行。这种过滤器可用来为响应添加标准的HTTP Header、收集统计信息和指标、将响应从微服务发送给客户端等</li>
</ul>
</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/14957136-e577693a270026a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>Gateway 的Filter从作用范围可分为两种: GatewayFilter与GlobalFilter。</p>
<ul>
<li>GatewayFilter：应用到单个路由或者一个分组的路由上。</li>
<li>GlobalFilter：应用到所有的路由上</li>
</ul>
<h3 id="局部过滤器"><a href="#局部过滤器" class="headerlink" title="局部过滤器"></a>局部过滤器</h3><p>局部过滤器是针对单个路由的过滤器。</p>
<h4 id="内置局部过滤器"><a href="#内置局部过滤器" class="headerlink" title="内置局部过滤器"></a>内置局部过滤器</h4><p>在SpringCloud Gateway中内置了很多不同类型的网关路由过滤器。具体如下：</p>
<table>
<thead>
<tr>
<th>过滤器工厂</th>
<th>作用</th>
<th>参数</th>
</tr>
</thead>
<tbody><tr>
<td>AddRequestHeader</td>
<td>为原始请求添加Header</td>
<td>Header的名称及值</td>
</tr>
<tr>
<td>AddRequestParameter</td>
<td>为原始请求添加请求参数</td>
<td>参数名称及值</td>
</tr>
<tr>
<td>AddResponseHeader</td>
<td>为原始响应添加Header</td>
<td>Header的名称及值</td>
</tr>
<tr>
<td>DedupeResponseHeader</td>
<td>剔除响应头中重复的值</td>
<td>需要去重的Header名 称及去重策略</td>
</tr>
<tr>
<td>Hystrix</td>
<td>为路由引入Hystrix的断路器保护</td>
<td>HystrixCommand的名 称</td>
</tr>
<tr>
<td>FallbackHeaders</td>
<td>为fallbackUri的请求头中添加具 体的异常信息</td>
<td>Header的名称</td>
</tr>
<tr>
<td>PreﬁxPath</td>
<td>为原始请求路径添加前缀</td>
<td>前缀路径</td>
</tr>
<tr>
<td>PreserveHostHeader</td>
<td>为请求添加一个 preserveHostHeader&#x3D;true的属 性，路由过滤器会检查该属性以 决定是否要发送原始的Host</td>
<td>无</td>
</tr>
<tr>
<td>RequestRateLimiter</td>
<td>用于对请求限流，限流算法为令 牌桶</td>
<td>keyResolver、 rateLimiter、 statusCode、 denyEmptyKey、 emptyKeyStatus</td>
</tr>
<tr>
<td>RedirectTo</td>
<td>将原始请求重定向到指定的URL</td>
<td>http状态码及重定向的 url</td>
</tr>
<tr>
<td>RemoveHopByHopHeadersFilter</td>
<td>为原始请求删除IETF组织规定的 一系列Header</td>
<td>默认就会启用，可以通 过配置指定仅删除哪些 Header</td>
</tr>
<tr>
<td>RemoveRequestHeader</td>
<td>为原始请求删除某个Heade</td>
<td>Header名称</td>
</tr>
<tr>
<td>RemoveResponseHeader</td>
<td>为原始请求删除某个Heade</td>
<td>Header名称</td>
</tr>
<tr>
<td>RewritePath</td>
<td>重写原始的请求路径</td>
<td>原始路径正则表达式以 及重写后路径的正则表 达式</td>
</tr>
<tr>
<td>RewriteResponseHeader</td>
<td>重写原始响应中的某个Header</td>
<td>Header名称，值的正 则表达式，重写后的值</td>
</tr>
<tr>
<td>SaveSession</td>
<td>在转发请求之前，强制执行 WebSession::save操作</td>
<td>无</td>
</tr>
<tr>
<td>SecureHeaders</td>
<td>为原始响应添加一系列起安全作 用的响应头</td>
<td>无，支持修改这些安全 响应头的值</td>
</tr>
<tr>
<td>SetPath</td>
<td>修改原始的请求路径</td>
<td>修改后的路径</td>
</tr>
<tr>
<td>SetResponseHeader</td>
<td>修改原始响应中某个Header的值</td>
<td>Header名称，修改后 的值</td>
</tr>
<tr>
<td>SetStatus</td>
<td>修改原始响应的状态码</td>
<td>HTTP 状态码，可以是 数字，也可以是字符串</td>
</tr>
<tr>
<td>StripPreﬁx</td>
<td>用于截断原始请求的路径</td>
<td>使用数字表示要截断的 路径的数量</td>
</tr>
<tr>
<td>Retry</td>
<td>针对不同的响应进行重试</td>
<td>retries、statuses、 methods、series</td>
</tr>
<tr>
<td>RequestSize</td>
<td>设置允许接收最大请求包的大 小。如果请求包大小超过设置的 值，则返回   413 Payload Too Large</td>
<td>请求包大小，单位为字 节，默认值为5M</td>
</tr>
<tr>
<td>ModifyRequestBody</td>
<td>在转发请求之前修改原始请求体 内容</td>
<td>修改后的请求体内容</td>
</tr>
<tr>
<td>ModifyResponseBody</td>
<td>修改原始响应体的内容</td>
<td>修改后的响应体内容</td>
</tr>
</tbody></table>
<h4 id="内置局部过滤器使用"><a href="#内置局部过滤器使用" class="headerlink" title="内置局部过滤器使用"></a>内置局部过滤器使用</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://shop-product</span><br>          <span class="hljs-comment"># 断言</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/shop-product-server/**</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Age=16,80</span> <span class="hljs-comment"># 限制年龄只有在18到60岁之间的人能访问</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SetStatus=250</span><br></code></pre></td></tr></table></figure>

<h4 id="自定义局部过滤器"><a href="#自定义局部过滤器" class="headerlink" title="自定义局部过滤器"></a>自定义局部过滤器</h4><blockquote>
<p>场景如下:配置日志过滤器，从而实现日志的记录和拦截</p>
</blockquote>
<h5 id="在配置文件中-添加一个Log的过滤器配置"><a href="#在配置文件中-添加一个Log的过滤器配置" class="headerlink" title="在配置文件中,添加一个Log的过滤器配置"></a>在配置文件中,添加一个Log的过滤器配置</h5><figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">7000</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">shop-gateway</span><br>  <span class="hljs-attr">cloud:</span><br>    <span class="hljs-attr">nacos:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">server-addr:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.56</span><span class="hljs-number">.120</span><span class="hljs-string">:8848</span><br>        <span class="hljs-attr">namespace:</span> <span class="hljs-string">6d39b87a-55bb-4497-bec5-79bdd3b9789b</span><br>    <span class="hljs-attr">gateway:</span><br>      <span class="hljs-attr">discovery:</span><br>        <span class="hljs-attr">locator:</span><br>          <span class="hljs-comment"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span><br>          <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">routes:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">id:</span> <span class="hljs-string">shop-product</span><br>          <span class="hljs-attr">uri:</span> <span class="hljs-string">lb://shop-product</span><br>          <span class="hljs-comment"># 断言</span><br>          <span class="hljs-attr">predicates:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Path=/shop-product-server/**</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Age=16,80</span> <span class="hljs-comment"># 限制年龄只有在18到60岁之间的人能访问</span><br>          <span class="hljs-attr">filters:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">StripPrefix=1</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">SetStatus=250</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-string">Log=true,false</span> <span class="hljs-comment"># 控制日志是否开启</span><br></code></pre></td></tr></table></figure>

<h5 id="自定义一个过滤器工厂-实现方法"><a href="#自定义一个过滤器工厂-实现方法" class="headerlink" title="自定义一个过滤器工厂,实现方法"></a>自定义一个过滤器工厂,实现方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.letcoding.gateway.predicate;<br><br><span class="hljs-keyword">import</span> lombok.extern.slf4j.Slf4j;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilter;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.GatewayFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.validation.annotation.Validated;<br><span class="hljs-keyword">import</span> org.springframework.web.server.ServerWebExchange;<br><span class="hljs-keyword">import</span> reactor.core.publisher.Mono;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> LogGatewayFilterFactory</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 自定义日志局部过滤器</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/11/29 23:14</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LogGatewayFilterFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractGatewayFilterFactory</span>&lt;LogGatewayFilterFactory.Config&gt; &#123;<br><br>    <span class="hljs-comment">//构造函数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LogGatewayFilterFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(LogGatewayFilterFactory.Config.class);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 处理器逻辑</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> config</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> GatewayFilter <span class="hljs-title function_">apply</span><span class="hljs-params">(Config config)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFilter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>                <span class="hljs-keyword">if</span> (config.getConsoleLog()) &#123;<br>                    log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 控制台日志开启！&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (config.getCacheLog()) &#123;<br>                    log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;缓存开启！&quot;</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> chain.filter(exchange);<br>            &#125;<br>        &#125;;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读取配置文件中的参数赋值到配置类中</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> List&lt;String&gt; <span class="hljs-title function_">shortcutFieldOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> Arrays.asList(<span class="hljs-string">&quot;consoleLog&quot;</span>, <span class="hljs-string">&quot;cacheLog&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Validated</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>&#123;<br>        <span class="hljs-keyword">private</span> Boolean consoleLog;<br>        <span class="hljs-keyword">private</span> Boolean cacheLog;<br><br>        <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getConsoleLog</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> consoleLog;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setConsoleLog</span><span class="hljs-params">(Boolean consoleLog)</span> &#123;<br>            <span class="hljs-built_in">this</span>.consoleLog = consoleLog;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">getCacheLog</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> cacheLog;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCacheLog</span><span class="hljs-params">(Boolean cacheLog)</span> &#123;<br>            <span class="hljs-built_in">this</span>.cacheLog = cacheLog;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="全局过滤器"><a href="#全局过滤器" class="headerlink" title="全局过滤器"></a>全局过滤器</h3><p>全局过滤器作用于所有路由, 无需配置。通过全局过滤器可以实现对权限的统一校验，安全性验证等功 能。</p>
<h4 id="内置全局过滤器"><a href="#内置全局过滤器" class="headerlink" title="内置全局过滤器"></a>内置全局过滤器</h4><p>SpringCloud Gateway内部也是通过一系列的内置全局过滤器对整个路由转发进行处理如下：</p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Egy1gx38l614m2j30ro0dp0zv.jpg" alt="image.png"></p>
<h4 id="自定义全局过滤器"><a href="#自定义全局过滤器" class="headerlink" title="自定义全局过滤器"></a>自定义全局过滤器</h4><p>内置的过滤器已经可以完成大部分的功能，但是对于企业开发的一些业务功能处理，还是需要我们 自己编写过滤器来实现的，那么我们一起通过代码的形式自定义一个过滤器，去完成统一的权限校验。<br>开发中的鉴权逻辑：</p>
<ul>
<li>当客户端第一次请求服务时，服务端对用户进行信息认证（登录）</li>
<li>认证通过，将用户信息进行加密形成token，返回给客户端，作为登录凭证</li>
<li>以后每次请求，客户端都携带认证的token</li>
<li>服务端对token进行解密，判断是否有效。</li>
</ul>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Egy1gx38vs1tmyj30j409rmyc.jpg" alt="9cb33b2e-12fb-40af-bd44-cac813ea0398.png"></p>
<p>如上图，对于验证用户是否已经登录鉴权的过程可以在网关统一检验。<br>检验的标准就是请求中是否携带token凭证以及token的正确性。<br>下面的我们自定义一个GlobalFilter，去校验所有请求的请求参数中是否包含“token”，如何不包含请求<br>参数“token”则不转发路由，否则执行正常的逻辑。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> AuthGlobalFilter</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/5 18:33</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthGlobalFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">GlobalFilter</span>, Ordered &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACCESS_TOKEN</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ACCESS_TOKEN&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Mono&lt;Void&gt; <span class="hljs-title function_">filter</span><span class="hljs-params">(ServerWebExchange exchange, GatewayFilterChain chain)</span> &#123;<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">headers</span> <span class="hljs-operator">=</span> exchange.getRequest().getHeaders();<br>        <span class="hljs-keyword">if</span> (!headers.containsKey(ACCESS_TOKEN)) &#123;<br>            log.error(<span class="hljs-string">&quot;请求没有权限！&quot;</span>);<br>            exchange.getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);<br>            <span class="hljs-keyword">return</span> exchange.getResponse().setComplete();<br>        &#125;<br>        <span class="hljs-keyword">return</span> chain.filter(exchange);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 注册排序，数值越小，优先级越高</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getOrder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="网关限流"><a href="#网关限流" class="headerlink" title="网关限流"></a>网关限流</h2><p>网关是所有请求的公共入口，所以可以在网关进行限流，而且限流的方式也很多，我们本次采用前 面学过的Sentinel组件来实现网关的限流。Sentinel支持对SpringCloud Gateway、Zuul等主流网关进 行限流。</p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Egy1gx38zo4wjwj30jy0ccjvt.jpg" alt="4c7e1362-4a28-43a6-be67-3e0372335856.png"></p>
<p>从1.6.0版本开始，Sentinel提供了SpringCloud Gateway的适配模块，可以提供两种资源维度的限流：</p>
<ul>
<li>route维度：即在Spring配置文件中配置的路由条目，资源名为对应的routeId</li>
<li>自定义API维度：用户可以利用Sentinel提供的API来自定义一些API分组</li>
</ul>
<h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- 导入sentinel限流 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba.csp<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>sentinel-spring-cloud-gateway-adapter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h3 id="编写配置类"><a href="#编写配置类" class="headerlink" title="编写配置类"></a>编写配置类</h3><p>基于Sentinel 的Gateway限流是通过其提供的Filter来完成的，使用时只需注入对应的 <code>SentinelGatewayFilter</code>实例以及 <code>SentinelGatewayBlockExceptionHandler</code> 实例即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> GatewayConfiguration</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Author</span> will</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Date</span> 2021/12/5 18:55</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GatewayConfiguration</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;ViewResolver&gt; viewResolvers;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ServerCodecConfigurer serverCodecConfigurer;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">GatewayConfiguration</span><span class="hljs-params">(List&lt;ViewResolver&gt; viewResolvers, ServerCodecConfigurer serverCodecConfigurer)</span> &#123;<br>        <span class="hljs-built_in">this</span>.viewResolvers = viewResolvers;<br>        <span class="hljs-built_in">this</span>.serverCodecConfigurer = serverCodecConfigurer;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个限流的过滤器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> GlobalFilter <span class="hljs-title function_">sentinelGatewayFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayFilter</span>();<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 初始化一个限流过滤器</span><br><span class="hljs-comment">     * resource-资源名称，对应的路由id</span><br><span class="hljs-comment">     * count-限流阈值</span><br><span class="hljs-comment">     * 统计时间窗口，单位是秒，默认是一秒</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initGatewayRules</span><span class="hljs-params">()</span> &#123;<br>        Set&lt;GatewayFlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>        rules.add(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;shop-product&quot;</span>)<br>                        .setCount(<span class="hljs-number">1</span>)<br>                        .setIntervalSec(<span class="hljs-number">1</span>)<br><br>        );<br>        GatewayRuleManager.loadRules(rules);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 配置限流异常处理器</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Order(Ordered.HIGHEST_PRECEDENCE)</span><br>    <span class="hljs-keyword">public</span> SentinelGatewayBlockExceptionHandler <span class="hljs-title function_">sentinelGatewayBlockExceptionHandler</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SentinelGatewayBlockExceptionHandler</span>(viewResolvers, serverCodecConfigurer);<br>    &#125;<br><br>    <span class="hljs-meta">@PostConstruct</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBlockHandlers</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">BlockRequestHandler</span> <span class="hljs-variable">blockRequestHandler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BlockRequestHandler</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> Mono&lt;ServerResponse&gt; <span class="hljs-title function_">handleRequest</span><span class="hljs-params">(ServerWebExchange serverWebExchange, Throwable throwable)</span> &#123;<br>                Map&lt;String, Object&gt; resultMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>                resultMap.put(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">0</span>);<br>                resultMap.put(<span class="hljs-string">&quot;message&quot;</span>, <span class="hljs-string">&quot;接口被限流&quot;</span>);<br>                <span class="hljs-keyword">return</span> ServerResponse.status(HttpStatus.OK)<br>                        .contentType(MediaType.APPLICATION_JSON_UTF8)<br>                        .body(BodyInserters.fromObject(resultMap));<br>            &#125;<br>        &#125;;<br>        GatewayCallbackManager.setBlockHandler(blockRequestHandler);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在一秒钟内多次访问<a href="http://localhost:7000/shop-product-server/product/info/1?age=30%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E9%99%90%E6%B5%81%E5%90%AF%E4%BD%9C%E7%94%A8%E4%BA%86%E3%80%82">http://localhost:7000/shop-product-server/product/info/1?age=30就可以看到限流启作用了。</a></p>
<p><img src="http://tva1.sinaimg.cn/large/006seI3Egy1gx393xzeq2j30ru0adju6.jpg" alt="Snipaste_2021-12-05_20-55-13.png"></p>
<h3 id="自定义API分组"><a href="#自定义API分组" class="headerlink" title="自定义API分组"></a>自定义API分组</h3><p>自定义API分组是一种更细粒度的限流规则定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 配置初始化的限流参数</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initGatewayRules</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;GatewayFlowRule&gt; rules = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    rules.add(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api1&quot;</span>).setCount(<span class="hljs-number">1</span>).setIntervalSec(<span class="hljs-number">1</span>));<br>    rules.add(<span class="hljs-keyword">new</span><br>            <span class="hljs-title class_">GatewayFlowRule</span>(<span class="hljs-string">&quot;product_api2&quot;</span>).setCount(<span class="hljs-number">1</span>).setIntervalSec(<span class="hljs-number">1</span>));<br>    GatewayRuleManager.loadRules(rules);<br>&#125;<br><br><span class="hljs-comment">//自定义API分组 </span><br><span class="hljs-meta">@PostConstruct</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initCustomizedApis</span><span class="hljs-params">()</span> &#123;<br>    Set&lt;ApiDefinition&gt; definitions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;();<br>    <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api1&quot;</span>)<br>            .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                <span class="hljs-comment">// 以/product-serv/product/api1 开头的请求</span><br>                add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>().setPattern(<span class="hljs-string">&quot;/product- serv/product/api1/**&quot;</span>).<br>                        setMatchStrategy(SentinelGatewayConstants.URL_MATCH_STRATEGY_PREFIX));<br>            &#125;&#125;);<br>    <span class="hljs-type">ApiDefinition</span> <span class="hljs-variable">api2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiDefinition</span>(<span class="hljs-string">&quot;product_api2&quot;</span>)<br>            .setPredicateItems(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;ApiPredicateItem&gt;() &#123;&#123;<br>                <span class="hljs-comment">// 以/product-serv/product/api2/demo1 完成的url路径匹配</span><br>                add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ApiPathPredicateItem</span>().setPattern(<span class="hljs-string">&quot;/product- serv/product/api2/demo1&quot;</span>));<br>            &#125;&#125;);<br>    definitions.add(api1);<br>    definitions.add(api2);<br>    GatewayApiDefinitionManager.loadApiDefinitions(definitions);<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>SpringCloud</tag>
        <tag>SpringCloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot爬虫</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Spring/SpringBoot%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<h1 id="SpringBoot爬虫"><a href="#SpringBoot爬虫" class="headerlink" title="SpringBoot爬虫"></a>SpringBoot爬虫</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>此文章只是为了学习http请求、jsoup、SpringBoot集成等技术，不是故意爬取数据，文章仅仅记录学习过程！</p>
</blockquote>
<h1 id="什么是爬虫"><a href="#什么是爬虫" class="headerlink" title="什么是爬虫"></a>什么是爬虫</h1><h2 id="爬虫简介"><a href="#爬虫简介" class="headerlink" title="爬虫简介"></a>爬虫简介</h2><blockquote>
<p>网络爬虫（又被称为网页<a href="https://baike.baidu.com/item/%E8%9C%98%E8%9B%9B/8135707">蜘蛛</a>，网络机器人，在<a href="https://baike.baidu.com/item/FOAF">FOAF</a>社区中间，更经常的称为网页追逐者），是一种按照一定的规则，自动地抓取<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91/215515">万维网</a>信息的程序或者脚本。</p>
<p>　　简单来说就是通过编写脚本模拟浏览器发起请求获取数据。</p>
</blockquote>
<h2 id="爬虫分类"><a href="#爬虫分类" class="headerlink" title="爬虫分类"></a>爬虫分类</h2><ul>
<li>通用网络爬虫（General Purpose Web Crawler）：爬取一整张页面源码数据. 抓取系统(爬虫)</li>
<li>聚焦网络爬虫（Focused Web Crawler）：爬取的是一张页面中局部的数据(数据解析)</li>
<li>增量式网络爬虫（Incremental Web Crawler）：用于监测网站数据更新的情况,从而爬取网站中最新更新出来的数据</li>
<li>深层网络爬虫（Deep Web Crawler）:Web 页面按存在方式可以分为表层网页（Surface Web）和深层网页（Deep Web，也称 Invisible Web Pages 或 Hidden Web）。 表层网页是指传统搜索引擎可以索引的页面，以超链接可以到达的静态网页为主构成的 Web 页面。Deep Web 是那些大部分内容不能通过静态链接获取的、隐藏在搜索表单后的，只有用户提交一些关键词才能获得的 Web 页面。</li>
</ul>
<h2 id="反爬机制与反反爬策略"><a href="#反爬机制与反反爬策略" class="headerlink" title="反爬机制与反反爬策略"></a>反爬机制与反反爬策略</h2><p>爬虫：使用任何技术手段，批量获取网站信息的一种方式。</p>
<p>反爬虫：使用任何技术手段，阻止别人批量获取自己网站信息的一种方式。</p>
<p>反爬方式：</p>
<ul>
<li><code>robots.txt协议</code></li>
<li><code>UA（User-Agent用户访问网站时候的浏览器标识）限制</code></li>
<li>UA反爬随机请求头</li>
<li>ip限制（限制ip访问频率和次数进行反爬）————-构造自己的 IP 代理池，然后每次访问时随机选择代理</li>
<li>Ajax动态加载——-使用审查元素分析”请求“对应的链接:在url请求的response中进行局部搜索当前内容，如果没有就点击左边任意请求，进行ctrl+f全局搜索，找到对应的请求(抓包工具推荐:fiddler)</li>
<li>验证码反爬虫或者模拟登陆</li>
<li>cookie限制</li>
</ul>
<h1 id="爬虫案例学习"><a href="#爬虫案例学习" class="headerlink" title="爬虫案例学习"></a>爬虫案例学习</h1><h2 id="案例需求"><a href="#案例需求" class="headerlink" title="案例需求"></a>案例需求</h2><blockquote>
<p>前面介绍了几种爬虫的分类，这里我们使用聚焦网络爬虫，抓取汽车之家上的汽车评测数据。<a href="https://www.autohome.com.cn/bestauto/">https://www.autohome.com.cn/bestauto/</a></p>
<p>我们需要抓取汽车之家上面所有的汽车评测数据</p>
<p><img src="https://i.loli.net/2021/05/09/gU3m18fBsMroERz.png" alt="image.png"></p>
</blockquote>
<p>在页面上我们分析，需要抓取以下部分的数据:</p>
<ul>
<li>车型信息</li>
<li>评测信息</li>
</ul>
<blockquote>
<p>排名是动态生成的，我们这里不做抓取，可以后期单独处理排名</p>
</blockquote>
<ul>
<li>编辑点评</li>
<li>评测图片</li>
</ul>
<blockquote>
<p>有5张图片，页面显示的是小图，我们需要打开超链接获取大图的url地址，再单独下载图片</p>
</blockquote>
<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="使用技术"><a href="#使用技术" class="headerlink" title="使用技术"></a>使用技术</h3><ul>
<li>JDK1.8+</li>
<li>SpringBoot2.X</li>
<li>MyBatisPlus</li>
<li>SpringMVC</li>
<li>HttpClient</li>
<li>Jsoup</li>
<li>Quartz</li>
</ul>
<h3 id="搭建工程"><a href="#搭建工程" class="headerlink" title="搭建工程"></a>搭建工程</h3><h4 id="设置依赖"><a href="#设置依赖" class="headerlink" title="设置依赖"></a>设置依赖</h4><ul>
<li>新建MAVEN项目</li>
<li>设置父工程</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure>

<ul>
<li>设置项目依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mybatisplus.version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">mybatisplus.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">alibaba.boot.druid</span>&gt;</span>1.1.22<span class="hljs-tag">&lt;/<span class="hljs-name">alibaba.boot.druid</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;mybatisplus.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;alibaba.boot.druid&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 工具类 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-lang3<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-io<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- quartz依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- HttpClient --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- jsoup --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jsoup<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.10.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.6<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h4 id="设置配置"><a href="#设置配置" class="headerlink" title="设置配置"></a>设置配置</h4><blockquote>
<p>配置路径：src&#x2F;main&#x2F;resources</p>
</blockquote>
<ul>
<li>创建<code>application.yml</code></li>
</ul>
<blockquote>
<p>配置总体环境，方便切换环境</p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">spider-autohome</span><br></code></pre></td></tr></table></figure>

<ul>
<li>创建测试环境配置<code>application-dev.yml</code></li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">max-swallow-size:</span> <span class="hljs-string">100MB</span><br><br><span class="hljs-comment">#配置数据源</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>      <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">com.mysql.cj.jdbc.Driver</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.56.120:3306/spider-autohome?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-comment"># 初始化连接大小</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 最小空闲连接数</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 可关闭的空闲连接间隔时间</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 配置连接在池中的最小生存时间</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-string">from</span> <span class="hljs-string">dual</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-open-prepared-statements:</span> <span class="hljs-number">50</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 配置监控统计拦截的filters</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat</span><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-number">123456</span><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">50MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">50MB</span><br><br><span class="hljs-comment"># 配置mybatis-plus日志打印</span><br><span class="hljs-attr">mybatis-plus:</span><br>  <span class="hljs-attr">configuration:</span><br>    <span class="hljs-attr">log-impl:</span> <span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure>

<h2 id="SpringBoot入门"><a href="#SpringBoot入门" class="headerlink" title="SpringBoot入门"></a>SpringBoot入门</h2><blockquote>
<p>这里先实现入门程序，用以熟悉SpringBoot的使用。</p>
<p>需求：浏览器访问，获取数据库时间</p>
</blockquote>
<h3 id="创建启动引导类"><a href="#创建启动引导类" class="headerlink" title="创建启动引导类"></a>创建启动引导类</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SpiderAutoHomeApplication</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(SpiderAutoHomeApplication.class,args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写测试DAO"><a href="#编写测试DAO" class="headerlink" title="编写测试DAO"></a>编写测试DAO</h3><ul>
<li>创建dao文件夹，创建<code>TestDao</code>接口文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">TestDao</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询当前时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Select(&quot;SELECT NOW()&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryNowDate</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写测试SERVICE"><a href="#编写测试SERVICE" class="headerlink" title="编写测试SERVICE"></a>编写测试SERVICE</h3><ul>
<li>创建service文件夹，创建<code>TestService</code>文件</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">TestService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询当前时间</span><br><span class="hljs-comment">     * @return</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">queryNowDate</span>()</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写测试SERVICE实现"><a href="#编写测试SERVICE实现" class="headerlink" title="编写测试SERVICE实现"></a>编写测试SERVICE实现</h3><ul>
<li>在service文件夹下创建impl文件夹，创建<code>TestServiceImpl</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">TestService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestDao testDao;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryNowDate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> testDao.queryNowDate();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写请求CONTROLLER"><a href="#编写请求CONTROLLER" class="headerlink" title="编写请求CONTROLLER"></a>编写请求CONTROLLER</h3><ul>
<li>创建controller文件夹，创建<code>TestController</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TestService testService;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询当前时间</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(value = &quot;/queryNowDate&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">queryNowDate</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> testService.queryNowDate();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><ul>
<li>启动application启动类</li>
<li>在浏览器输入请求测试地址：<code>http://localhost:8080/test/queryNowDate</code></li>
<li>查看返回结果:<code>2021-05-09 09:31:42</code></li>
</ul>
<h2 id="开发分析"><a href="#开发分析" class="headerlink" title="开发分析"></a>开发分析</h2><h3 id="流程分析"><a href="#流程分析" class="headerlink" title="流程分析"></a>流程分析</h3><blockquote>
<p>分析发现，评测页的url是:</p>
<p><code>https://www.autohome.com.cn/bestauto/1</code></p>
<p>最后一个参数是页码数，我们只需要按顺序从第一页开始，把所有的页面都抓取下来就可以了</p>
</blockquote>
<h4 id="抓取页面的流程如下"><a href="#抓取页面的流程如下" class="headerlink" title="抓取页面的流程如下"></a>抓取页面的流程如下</h4><p><img src="https://ftp.bmp.ovh/imgs/2021/05/9a5699ef90a52691.jpg"></p>
<h4 id="抓取评测数据步骤"><a href="#抓取评测数据步骤" class="headerlink" title="抓取评测数据步骤"></a>抓取评测数据步骤</h4><ul>
<li>根据url抓取html页面</li>
<li>对html页面进行解析，获取该页面所有的评测数据</li>
<li>遍历所有的评测数据</li>
<li>判断遍历的评测数据是否已保存，</li>
<li>如果已保存再次遍历下一条评测数据</li>
<li>如果未保存执行下一步</li>
<li>保存评测数据到数据库中</li>
</ul>
<h3 id="数据库表设计"><a href="#数据库表设计" class="headerlink" title="数据库表设计"></a>数据库表设计</h3><blockquote>
<p>根据以上需求，设计数据库表。sql如下：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> `car_test` (<br>  `id` <span class="hljs-type">bigint</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="hljs-string">&#x27;主键id&#x27;</span>,<br>  `title` <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测车辆的名字&#x27;</span>,<br>  `test_speed` <span class="hljs-type">int</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测项目-加速(0-100公里/小时),单位毫秒&#x27;</span>,<br>  `test_brake` <span class="hljs-type">int</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测项目-刹车(100-0公里/小时),单位毫米&#x27;</span>,<br>  `test_oil` <span class="hljs-type">int</span>(<span class="hljs-number">150</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测项目-实测油耗(升/100公里)，单位毫升&#x27;</span>,<br>  `editor_name1` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测编辑1&#x27;</span>,<br>  `editor_remark1` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;点评内容1&#x27;</span>,<br>  `editor_name2` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测编辑2&#x27;</span>,<br>  `editor_remark2` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;点评内容2&#x27;</span>,<br>  `editor_name3` <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测编辑3&#x27;</span>,<br>  `editor_remark3` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;点评内容3&#x27;</span>,<br>  `image` <span class="hljs-type">varchar</span>(<span class="hljs-number">1000</span>) <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;评测图片，5张图片名，中间用,分隔&#x27;</span>,<br>  `created` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;创建时间&#x27;</span>,<br>  `updated` datetime <span class="hljs-keyword">DEFAULT</span> <span class="hljs-keyword">NULL</span> COMMENT <span class="hljs-string">&#x27;更新时间&#x27;</span>,<br>  <span class="hljs-keyword">PRIMARY</span> KEY (`id`)<br>) ENGINE<span class="hljs-operator">=</span>InnoDB AUTO_INCREMENT<span class="hljs-operator">=</span><span class="hljs-number">7</span> <span class="hljs-keyword">DEFAULT</span> CHARSET<span class="hljs-operator">=</span>utf8 COMMENT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;汽车之家评测表&#x27;</span>;<br></code></pre></td></tr></table></figure>

<h3 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h3><h4 id="编写实体ENTITY"><a href="#编写实体ENTITY" class="headerlink" title="编写实体ENTITY"></a>编写实体ENTITY</h4><ul>
<li>创建module【这个依据个人喜好】文件夹，创建<code>CarTest</code>实体对象和数据库表进行映射</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@TableName(value = &quot;car_test&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTest</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String title;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> testSpeed;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> testBrake;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> testOil;<br>    <span class="hljs-keyword">private</span> String editorName1;<br>    <span class="hljs-keyword">private</span> String editorRemark1;<br>    <span class="hljs-keyword">private</span> String editorName2;<br>    <span class="hljs-keyword">private</span> String editorRemark2;<br>    <span class="hljs-keyword">private</span> String editorName3;<br>    <span class="hljs-keyword">private</span> String editorRemark3;<br>    <span class="hljs-keyword">private</span> String image;<br>    <span class="hljs-keyword">private</span> Date created;<br>    <span class="hljs-keyword">private</span> Date updated;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="编写DAO"><a href="#编写DAO" class="headerlink" title="编写DAO"></a>编写DAO</h4><ul>
<li>在dao文件夹下面创建<code>CarTestDao</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarTestDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;CarTest&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="编写SERVICE"><a href="#编写SERVICE" class="headerlink" title="编写SERVICE"></a>编写SERVICE</h4><ul>
<li>在service文件夹下面创建<code>CarTestService</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">CarTestService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IService</span>&lt;CarTest&gt; &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询标题</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> page          当前页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> pageSize      分页大小</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> Page&lt;CarTest&gt; <span class="hljs-title function_">queryTitleByPage</span><span class="hljs-params">(<span class="hljs-type">long</span> page, <span class="hljs-type">long</span> pageSize)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="编写SERVICE实现"><a href="#编写SERVICE实现" class="headerlink" title="编写SERVICE实现"></a>编写SERVICE实现</h4><ul>
<li>service文件夹下impl文件夹新建<code>CarTestServiceImpl</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CarTestServiceImpl</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ServiceImpl</span>&lt;CarTestDao,CarTest&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">CarTestService</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Page&lt;CarTest&gt; <span class="hljs-title function_">queryTitleByPage</span><span class="hljs-params">(<span class="hljs-type">long</span> page, <span class="hljs-type">long</span> pageSize)</span> &#123;<br>        Page&lt;CarTest&gt; queryPage = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Page</span>&lt;&gt;(page, pageSize);<br>        QueryWrapper&lt;CarTest&gt; queryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>        queryWrapper.select(<span class="hljs-string">&quot;title&quot;</span>);<br>        <span class="hljs-keyword">return</span>  baseMapper.selectPage(queryPage, queryWrapper);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="爬取数据"><a href="#爬取数据" class="headerlink" title="爬取数据"></a>爬取数据</h2><h3 id="HTTP连接池管理器"><a href="#HTTP连接池管理器" class="headerlink" title="HTTP连接池管理器"></a>HTTP连接池管理器</h3><blockquote>
<p>因为我们爬取数据是使用的HTTP请求，我们需要一个管理HTTP连接的一个工具，所以我们定义一个HTTP连接池管理工具，交给Spring进行管理。</p>
<p>使用以下两个注解</p>
<p>@Configuration注解声明配置类。</p>
<p>@Bean注解声明如何创建这实例</p>
</blockquote>
<ul>
<li>新建config文件夹，创建<code>HttpClientManagerCfg</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpClientManagerCfg</span> &#123;<br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> PoolingHttpClientConnectionManager <span class="hljs-title function_">poolingHttpClientConnectionManager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建连接管理器</span><br>        <span class="hljs-type">PoolingHttpClientConnectionManager</span> <span class="hljs-variable">httpClientConnectionManager</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PoolingHttpClientConnectionManager</span>();<br>        <span class="hljs-comment">// 设置最大连接数</span><br>        httpClientConnectionManager.setMaxTotal(<span class="hljs-number">50</span>);<br>        <span class="hljs-comment">// 设置每个并发连接数</span><br>        httpClientConnectionManager.setDefaultMaxPerRoute(<span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">return</span> httpClientConnectionManager;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="定时关闭失效连接"><a href="#定时关闭失效连接" class="headerlink" title="定时关闭失效连接"></a>定时关闭失效连接</h3><blockquote>
<p>这里使用Quartz定时任务来处理定时关闭失效连接</p>
</blockquote>
<ul>
<li>新建job文件夹，创建<code>CloseHttpConnectionJob</code>文件,编写定时任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@DisallowConcurrentExecution</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CloseHttpConnectionJob</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext context)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) context.getJobDetail().getJobDataMap().get(<span class="hljs-string">&quot;context&quot;</span>);<br>        <span class="hljs-type">PoolingHttpClientConnectionManager</span> <span class="hljs-variable">httpClientPool</span> <span class="hljs-operator">=</span> applicationContext.getBean(PoolingHttpClientConnectionManager.class);<br>        httpClientPool.closeExpiredConnections();<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; closeExpiredConnections&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="定时任务配置"><a href="#定时任务配置" class="headerlink" title="定时任务配置"></a>定时任务配置</h3><ul>
<li>在config目录下雪创建<code>QuartzConfig</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">QuartzConfig</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义关闭无效连接任务</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;closeHttpConnectionJob&quot;)</span><br>    <span class="hljs-keyword">public</span> JobDetailFactoryBean <span class="hljs-title function_">closeHttpConnectionJob</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">JobDetailFactoryBean</span> <span class="hljs-variable">jobDetailFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDetailFactoryBean</span>();<br>        jobDetailFactoryBean.setApplicationContextJobDataKey(<span class="hljs-string">&quot;context&quot;</span>);<br>        jobDetailFactoryBean.setJobClass(CloseHttpConnectionJob.class);<br>        jobDetailFactoryBean.setDurability(<span class="hljs-literal">true</span>);<br><br>        <span class="hljs-keyword">return</span> jobDetailFactoryBean;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义关闭无效连接触发器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean(&quot;closeHttpConnectionJobTrigger&quot;)</span><br>    <span class="hljs-keyword">public</span> CronTriggerFactoryBean <span class="hljs-title function_">closeHttpConnectionJobTrigger</span><span class="hljs-params">(</span><br><span class="hljs-params">            <span class="hljs-meta">@Qualifier(value = &quot;closeHttpConnectionJob&quot;)</span> JobDetailFactoryBean itemJobBean)</span> &#123;<br>        <span class="hljs-type">CronTriggerFactoryBean</span> <span class="hljs-variable">tigger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CronTriggerFactoryBean</span>();<br>        tigger.setJobDetail(itemJobBean.getObject());<br>        tigger.setCronExpression(<span class="hljs-string">&quot;0/5 * * * * ? &quot;</span>);<br>        <span class="hljs-keyword">return</span> tigger;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 定义调度器</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SchedulerFactoryBean <span class="hljs-title function_">schedulerFactory</span><span class="hljs-params">(CronTrigger[] cronTriggerImpl)</span> &#123;<br>        <span class="hljs-type">SchedulerFactoryBean</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SchedulerFactoryBean</span>();<br>        bean.setTriggers(cronTriggerImpl);<br>        <span class="hljs-keyword">return</span> bean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写APISERVICE业务接口"><a href="#编写APISERVICE业务接口" class="headerlink" title="编写APISERVICE业务接口"></a>编写APISERVICE业务接口</h3><blockquote>
<p>需要实现两个功能的下载：</p>
<p>请求获取页面数据[GET]</p>
<p>请求下载图片[GET]</p>
</blockquote>
<ul>
<li>新建api.service目录，创建<code>AutoHomeApiService</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">AutoHomeApiService</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用get请求获取页面数据</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHtml</span><span class="hljs-params">(String url)</span>;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 使用get请求下载图片,返回图片名称</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> url</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImage</span><span class="hljs-params">(String url)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="编写APISERVICE实现业务接口"><a href="#编写APISERVICE实现业务接口" class="headerlink" title="编写APISERVICE实现业务接口"></a>编写APISERVICE实现业务接口</h3><ul>
<li>在api.service下面创建impl文件夹，创建<code>AutoHomeApiServiceImpl</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@Slf4j</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoHomeApiServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AutoHomeApiService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> PoolingHttpClientConnectionManager connectionManager;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getHtml</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-comment">// 使用连接池管理器获取连接</span><br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.custom().setConnectionManager(connectionManager).build();<br>        <span class="hljs-comment">// 创建httpGet请求</span><br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 发起请求</span><br>             httpResponse = httpClient.execute(httpGet);<br>            <span class="hljs-comment">// 判断请求是否成功</span><br>            <span class="hljs-keyword">if</span> (httpResponse != <span class="hljs-literal">null</span> &amp;&amp; httpResponse.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-comment">// 判断是否有响应体</span><br>                <span class="hljs-keyword">if</span> (httpResponse.getEntity() != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果有响应体，则进行解析</span><br>                    html = EntityUtils.toString(httpResponse.getEntity(), Charsets.UTF_8);<br>                    <span class="hljs-keyword">return</span> html;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;获取汽车之家信息异常：&#123;&#125;&quot;</span>, e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (httpResponse != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    httpResponse.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    log.error(<span class="hljs-string">&quot;获取汽车之家信息响应关闭异常：&#123;&#125;&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getImage</span><span class="hljs-params">(String url)</span> &#123;<br>        <span class="hljs-type">CloseableHttpClient</span> <span class="hljs-variable">httpClient</span> <span class="hljs-operator">=</span> HttpClients.custom().setConnectionManager(connectionManager).build();<br>        <span class="hljs-type">HttpGet</span> <span class="hljs-variable">httpGet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpGet</span>(url);<br>        <span class="hljs-type">CloseableHttpResponse</span> <span class="hljs-variable">httpResponse</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            httpResponse = httpClient.execute(httpGet);<br>            <span class="hljs-comment">// 判断请求是否成功</span><br>            <span class="hljs-keyword">if</span> (httpResponse != <span class="hljs-literal">null</span> &amp;&amp; httpResponse.getStatusLine().getStatusCode() == <span class="hljs-number">200</span>) &#123;<br>                <span class="hljs-comment">// 判断是否有响应体</span><br>                <span class="hljs-keyword">if</span> (httpResponse.getEntity() != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-comment">// 如果有响应体，则进行解析</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">contentTypeVal</span> <span class="hljs-operator">=</span> httpResponse.getFirstHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>).getValue();<br>                    <span class="hljs-keyword">if</span>(contentTypeVal.contains(<span class="hljs-string">&quot;image/&quot;</span>))&#123;<br>                        <span class="hljs-type">String</span> <span class="hljs-variable">extName</span> <span class="hljs-operator">=</span>  contentTypeVal.split(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">1</span>];<br>                        fileName = UUID.randomUUID().toString().replace(<span class="hljs-string">&quot;-&quot;</span>,<span class="hljs-string">&quot;&quot;</span>) + <span class="hljs-string">&quot;.&quot;</span> + extName;<br>                        <span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:/test/autohome-image/&quot;</span> + fileName));<br>                        httpResponse.getEntity().writeTo(os);<br>                        <span class="hljs-keyword">return</span> fileName;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>            log.error(<span class="hljs-string">&quot;获取汽车之家评测图片异常：&#123;&#125;&quot;</span>, e);<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span> (httpResponse != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    httpResponse.close();<br>                &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>                    e.printStackTrace();<br>                    log.error(<span class="hljs-string">&quot;获取汽车之家评测图片响应关闭异常：&#123;&#125;&quot;</span>, e);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="测试APISERVICE业务实现接口"><a href="#测试APISERVICE业务实现接口" class="headerlink" title="测试APISERVICE业务实现接口"></a>测试APISERVICE业务实现接口</h3><blockquote>
<p>这里使用SpringBoot的测试组件，需要添加如下两个注解：</p>
<ul>
<li>@RunWith(value &#x3D; SpringJUnit4ClassRunner.class)</li>
</ul>
<p>让测试运行在spring的环境，这样我们测试的时候就可以和开发的时候一样编写代码,例如使用@Autowired注解直接注入</p>
<ul>
<li>@SpringBootTest(classes &#x3D; Application.class)</li>
</ul>
<p>执行当前的这个类是测试类,测试代码如下</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = SpiderAutoHomeApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoHomeApiServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AutoHomeApiService autoHomeApiService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TitleFilter titleFilter;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CarTestService carTestService;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试获取HTML内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getHtml</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> autoHomeApiService.getHtml(<span class="hljs-string">&quot;https://www.autohome.com.cn/bestauto/&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;html = &quot;</span> + html);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试获取图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getImage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> autoHomeApiService.getImage(<span class="hljs-string">&quot;https://car2.autoimg.cn/cardfs/product/g24/M09/AE/EB/800x0_1_q87_autohomecar__wKgHIVpxGh6AFSN1AAY8kcz3Aww921.jpg&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;image = &quot;</span> + image);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="去重过滤器"><a href="#去重过滤器" class="headerlink" title="去重过滤器"></a>去重过滤器</h2><p>在使用网络爬虫过程中，去重是一个不可避免的问题，这里需要对抓取的数据内容进行过滤，就是对车辆幸好名称进行去重过滤，避免同样条数据反复保存到数据库中。</p>
<p>传统的去重，可以使用Map或者Set集合、哈希表的方式来实现去重，在数据量较小的情况下，使用这种方式没有问题。可是当我们需要大量爬去数据的时候，这种方式就存在很大问题。因为会极大的占用内存和系统资源，导致爬虫系统崩溃。这里将会使用布隆过滤器。</p>
<h3 id="Bloom过滤器介绍"><a href="#Bloom过滤器介绍" class="headerlink" title="Bloom过滤器介绍"></a>Bloom过滤器介绍</h3><p>　布隆过滤器主要用于判断一个元素是否在一个集合中，它可以使用一个位数组简洁的表示一个数组。它的空间效率和查询时间远远超过一般的算法，但是它存在一定的误判的概率，适用于容忍误判的场景。如果布隆过滤器判断元素存在于一个集合中，那么大概率是存在在集合中，如果它判断元素不存在一个集合中，那么一定不存在于集合中。常常被用于大数据去重。</p>
<p><strong>算法思想</strong></p>
<p>　　布隆过滤器算法主要思想就是利用k个哈希函数计算得到不同的哈希值，然后映射到相应的位数组的索引上，将相应的索引位上的值设置为1。判断该元素是否出现在集合中，就是利用k个不同的哈希函数计算哈希值，看哈希值对应相应索引位置上面的值是否是1，如果有1个不是1，说明该元素不存在在集合中。但是也有可能判断元素在集合中，但是元素不在，这个元素所有索引位置上面的1都是别的元素设置的，这就导致一定的误判几率。布隆过滤的思想如下图所示：</p>
<p><img src="https://ftp.bmp.ovh/imgs/2021/05/193a8c2fc8057747.png"></p>
<h3 id="布隆过滤器实现"><a href="#布隆过滤器实现" class="headerlink" title="布隆过滤器实现"></a>布隆过滤器实现</h3><ul>
<li>创建util目录，创建<code>TitleFilter</code>文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TitleFilter</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_SIZE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> &lt;&lt; <span class="hljs-number">24</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] seeds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">31</span>, <span class="hljs-number">37</span>, <span class="hljs-number">61</span>&#125;;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">BitSet</span> <span class="hljs-variable">bits</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BitSet</span>(DEFAULT_SIZE);<br>    <span class="hljs-keyword">private</span> SimpleHash[] func = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>[seeds.length];<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">TitleFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; seeds.length; i++) &#123;<br>            func[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleHash</span>(DEFAULT_SIZE, seeds[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(String value)</span> &#123;<br>        <span class="hljs-keyword">for</span> (SimpleHash f : func) &#123;<br>            bits.set(f.hash(value), <span class="hljs-literal">true</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">contains</span><span class="hljs-params">(String value)</span> &#123;<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">ret</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">for</span> (SimpleHash f : func) &#123;<br>            ret = ret &amp;&amp; bits.get(f.hash(value));<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 内部类，simpleHash</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SimpleHash</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> cap;<br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> seed;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">SimpleHash</span><span class="hljs-params">(<span class="hljs-type">int</span> cap, <span class="hljs-type">int</span> seed)</span> &#123;<br>            <span class="hljs-built_in">this</span>.cap = cap;<br>            <span class="hljs-built_in">this</span>.seed = seed;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(String value)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> value.length();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>                result = seed * result + value.charAt(i);<br>            &#125;<br>            <span class="hljs-keyword">return</span> (cap - <span class="hljs-number">1</span>) &amp; result;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="初始化去重过滤器"><a href="#初始化去重过滤器" class="headerlink" title="初始化去重过滤器"></a>初始化去重过滤器</h3><blockquote>
<p>项目一启动，就应该创建去重过滤器。</p>
<p>编写以下代码实现过滤器初始化</p>
</blockquote>
<h4 id="CarTestService增加分页查询方法"><a href="#CarTestService增加分页查询方法" class="headerlink" title="CarTestService增加分页查询方法"></a>CarTestService增加分页查询方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 分页查询标题</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> page          当前页</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> pageSize      分页大小</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> Page&lt;CarTest&gt; <span class="hljs-title function_">queryTitleByPage</span><span class="hljs-params">(<span class="hljs-type">long</span> page, <span class="hljs-type">long</span> pageSize)</span>;<br></code></pre></td></tr></table></figure>

<h4 id="CarTestService增加分页查询方法实现"><a href="#CarTestService增加分页查询方法实现" class="headerlink" title="CarTestService增加分页查询方法实现"></a>CarTestService增加分页查询方法实现</h4><figure class="highlight reasonml"><table><tr><td class="code"><pre><code class="hljs reasonml">@Override<br>public Page&lt;CarTest&gt; query<span class="hljs-constructor">TitleByPage(<span class="hljs-params">long</span> <span class="hljs-params">page</span>, <span class="hljs-params">long</span> <span class="hljs-params">pageSize</span>)</span> &#123;<br>    Page&lt;CarTest&gt; queryPage = <span class="hljs-keyword">new</span> Page&lt;&gt;(page, pageSize);<br>    QueryWrapper&lt;CarTest&gt; queryWrapper = <span class="hljs-keyword">new</span> QueryWrapper&lt;&gt;<span class="hljs-literal">()</span>;<br>    queryWrapper.select(<span class="hljs-string">&quot;title&quot;</span>);<br>    return  baseMapper.select<span class="hljs-constructor">Page(<span class="hljs-params">queryPage</span>, <span class="hljs-params">queryWrapper</span>)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="实现初始化去重过滤器"><a href="#实现初始化去重过滤器" class="headerlink" title="实现初始化去重过滤器"></a>实现初始化去重过滤器</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TitleFilterConfig</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CarTestService carTestService;<br><br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> TitleFilter <span class="hljs-title function_">titleFilter</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">// 创建车辆标题过滤器</span><br>        <span class="hljs-type">TitleFilter</span> <span class="hljs-variable">titleFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TitleFilter</span>();<br>        <span class="hljs-comment">// 从数据库查询车辆标题，分页查询</span><br>        <span class="hljs-type">long</span> <span class="hljs-variable">page</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">pageSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">repatedFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">do</span> &#123;<br>            Page&lt;CarTest&gt; carTestPage = carTestService.queryTitleByPage(page, pageSize);<br>            <span class="hljs-keyword">if</span> (!carTestPage.hasNext()) &#123;<br>                repatedFlag = <span class="hljs-literal">false</span>;<br>            &#125;<span class="hljs-keyword">else</span> &#123;<br>                page += <span class="hljs-number">1</span>;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (CarTest record : carTestPage.getRecords()) &#123;<br>                titleFilter.add(record.getTitle());<br>            &#125;<br>        &#125; <span class="hljs-keyword">while</span> (repatedFlag);<br>        <span class="hljs-keyword">return</span> titleFilter;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="实现爬取数据"><a href="#实现爬取数据" class="headerlink" title="实现爬取数据"></a>实现爬取数据</h2><blockquote>
<p>首先实现数据爬取逻辑，先在测试方法中实现</p>
</blockquote>
<h3 id="实现爬取测试方法"><a href="#实现爬取测试方法" class="headerlink" title="实现爬取测试方法"></a>实现爬取测试方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class="hljs-meta">@SpringBootTest(classes = SpiderAutoHomeApplication.class)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AutoHomeApiServiceTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> AutoHomeApiService autoHomeApiService;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> TitleFilter titleFilter;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> CarTestService carTestService;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试获取HTML内容</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getHtml</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> autoHomeApiService.getHtml(<span class="hljs-string">&quot;https://www.autohome.com.cn/bestauto/&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;html = &quot;</span> + html);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试获取图片</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getImage</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">image</span> <span class="hljs-operator">=</span> autoHomeApiService.getImage(<span class="hljs-string">&quot;https://car2.autoimg.cn/cardfs/product/g24/M09/AE/EB/800x0_1_q87_autohomecar__wKgHIVpxGh6AFSN1AAY8kcz3Aww921.jpg&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;image = &quot;</span> + image);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 获取评测数据</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetEvaluatingResult</span><span class="hljs-params">()</span> &#123;<br>        List&lt;CarTest&gt; saveList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">baseUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.autohome.com.cn/bestauto/&quot;</span>;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> autoHomeApiService.getHtml(baseUrl + i);<br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> Jsoup.parse(html);<br>            <span class="hljs-type">Elements</span> <span class="hljs-variable">carElements</span> <span class="hljs-operator">=</span> document.getElementsByClass(<span class="hljs-string">&quot;uibox&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Element carElement : carElements) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">carTitle</span> <span class="hljs-operator">=</span> carElement.getElementsByClass(<span class="hljs-string">&quot;uibox-title uibox-title-border&quot;</span>).text();<br>               <span class="hljs-comment">/* if (titleFilter.contains(carTitle)) &#123;</span><br><span class="hljs-comment">                    continue;</span><br><span class="hljs-comment">                &#125;*/</span><br>                <span class="hljs-type">CarTest</span> <span class="hljs-variable">carTest</span> <span class="hljs-operator">=</span> marshalCarElement(carElement);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">imageNames</span> <span class="hljs-operator">=</span> marshalImageNames(carElement);<br>                carTest.setImage(imageNames);<br>                saveList.add(carTest);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(saveList)) &#123;<br>                carTestService.saveBatch(saveList);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析数据下载评测图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> carElement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">marshalImageNames</span><span class="hljs-params">(Element carElement)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">carImageName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        List&lt;String&gt; imageNameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">imageElements</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.piclist-box.fn-clear ul.piclist02 a&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element imageElement : imageElements) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">imageUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https:&quot;</span> + imageElement.getElementsByTag(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">imageName</span> <span class="hljs-operator">=</span> autoHomeApiService.getImage(imageUrl);<br>            imageNameList.add(imageName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(imageNameList)) &#123;<br>            carImageName =  StringUtils.join(imageNameList, <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> carImageName;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析数据封装成汽车评测对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> carElement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> CarTest <span class="hljs-title function_">marshalCarElement</span><span class="hljs-params">(Element carElement)</span> &#123;<br>        <span class="hljs-type">CarTest</span> <span class="hljs-variable">carTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CarTest</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">carTitle</span> <span class="hljs-operator">=</span> carElement.getElementsByClass(<span class="hljs-string">&quot;uibox-title uibox-title-border&quot;</span>).text();<br>        carTest.setTitle(carTitle);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testSpeed</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(2) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestSpeed(covertStrToNum(testSpeed));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testBrake</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(3) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestBrake(covertStrToNum(testBrake));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testOil</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(4) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestOil(covertStrToNum(testOil));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName1</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(2) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName1(editorName1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark1</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(2) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark1(editorRemark1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName2</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(3) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName2(editorName2);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark2</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(3) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark2(editorRemark2);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName3</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(4) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName3(editorName3);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark3</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(4) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark3(editorRemark3);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        carTest.setCreated(currentDate);<br>        carTest.setUpdated(currentDate);<br>        <span class="hljs-keyword">return</span> carTest;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把字符串去掉最后一个数，转为乘以1000的数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">covertStrToNum</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;--&quot;</span>.equals(str)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 字符串去掉随后一个数</span><br>            str = StringUtils.substring(str, <span class="hljs-number">0</span>, str.length() - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 转换为小数并乘以1000</span><br>            <span class="hljs-type">Number</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Float.valueOf(str) * <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">return</span> num.intValue();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            System.out.println(str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="整合任务"><a href="#整合任务" class="headerlink" title="整合任务"></a>整合任务</h2><blockquote>
<p>把测试方法中的爬取数据代码改造为任务，再使用Quartz定时任务定时处理，就可以实现定时抓取汽车评测数据，能够获取最新的数据了</p>
</blockquote>
<h3 id="改造任务"><a href="#改造任务" class="headerlink" title="改造任务"></a>改造任务</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Slf4j</span><br><span class="hljs-meta">@DisallowConcurrentExecution</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CrawlerAutoHomeJob</span>  <span class="hljs-keyword">extends</span> <span class="hljs-title class_">QuartzJobBean</span> &#123;<br><br>    <span class="hljs-keyword">private</span> AutoHomeApiService autoHomeApiService;<br>    <span class="hljs-keyword">private</span> TitleFilter titleFilter;<br>    <span class="hljs-keyword">private</span> CarTestService carTestService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">executeInternal</span><span class="hljs-params">(JobExecutionContext context)</span> <span class="hljs-keyword">throws</span> JobExecutionException &#123;<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; start crawlerAutoHomeJob&quot;</span>);<br>        <span class="hljs-comment">// 获取spring容器</span><br>        <span class="hljs-type">ApplicationContext</span> <span class="hljs-variable">applicationContext</span> <span class="hljs-operator">=</span> (ApplicationContext) context.getJobDetail().getJobDataMap()<br>                .get(<span class="hljs-string">&quot;context&quot;</span>);<br><br>        <span class="hljs-comment">// 获取抓取数据服务</span><br>        <span class="hljs-built_in">this</span>.autoHomeApiService = applicationContext.getBean(AutoHomeApiService.class);<br>        <span class="hljs-comment">// 获取汽车评测服务</span><br>        <span class="hljs-built_in">this</span>.carTestService = applicationContext.getBean(CarTestService.class);<br>        <span class="hljs-comment">// 获取过滤器</span><br>        <span class="hljs-built_in">this</span>.titleFilter = applicationContext.getBean(TitleFilter.class);<br><br>        List&lt;CarTest&gt; saveList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">188</span>; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">baseUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https://www.autohome.com.cn/bestauto/&quot;</span> + i;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">html</span> <span class="hljs-operator">=</span> autoHomeApiService.getHtml(baseUrl);<br>            <span class="hljs-type">Document</span> <span class="hljs-variable">document</span> <span class="hljs-operator">=</span> Jsoup.parse(html);<br>            <span class="hljs-type">Elements</span> <span class="hljs-variable">carElements</span> <span class="hljs-operator">=</span> document.getElementsByClass(<span class="hljs-string">&quot;uibox&quot;</span>);<br>            <span class="hljs-keyword">for</span> (Element carElement : carElements) &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">carTitle</span> <span class="hljs-operator">=</span> carElement.getElementsByClass(<span class="hljs-string">&quot;uibox-title uibox-title-border&quot;</span>).text();<br>               <span class="hljs-comment">/* if (titleFilter.contains(carTitle)) &#123;</span><br><span class="hljs-comment">                    continue;</span><br><span class="hljs-comment">                &#125;*/</span><br>                <span class="hljs-type">CarTest</span> <span class="hljs-variable">carTest</span> <span class="hljs-operator">=</span> marshalCarElement(carElement);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">imageNames</span> <span class="hljs-operator">=</span> marshalImageNames(carElement);<br>                carTest.setImage(imageNames);<br>                saveList.add(carTest);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(saveList)) &#123;<br>                carTestService.saveBatch(saveList);<br>            &#125;<br>        &#125;<br>        log.info(<span class="hljs-string">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; end crawlerAutoHomeJob&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析数据下载评测图片</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> carElement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br><br>    <span class="hljs-keyword">private</span> String <span class="hljs-title function_">marshalImageNames</span><span class="hljs-params">(Element carElement)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">carImageName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        List&lt;String&gt; imageNameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">Elements</span> <span class="hljs-variable">imageElements</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.piclist-box.fn-clear ul.piclist02 a&quot;</span>);<br>        <span class="hljs-keyword">for</span> (Element imageElement : imageElements) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">imageUrl</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;https:&quot;</span> + imageElement.getElementsByTag(<span class="hljs-string">&quot;img&quot;</span>).attr(<span class="hljs-string">&quot;src&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">imageName</span> <span class="hljs-operator">=</span> autoHomeApiService.getImage(imageUrl);<br>            imageNameList.add(imageName);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(imageNameList)) &#123;<br>            carImageName =  StringUtils.join(imageNameList, <span class="hljs-string">&quot;,&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> carImageName;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 解析数据封装成汽车评测对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> carElement</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> CarTest <span class="hljs-title function_">marshalCarElement</span><span class="hljs-params">(Element carElement)</span> &#123;<br>        <span class="hljs-type">CarTest</span> <span class="hljs-variable">carTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CarTest</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">carTitle</span> <span class="hljs-operator">=</span> carElement.getElementsByClass(<span class="hljs-string">&quot;uibox-title uibox-title-border&quot;</span>).text();<br>        carTest.setTitle(carTitle);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testSpeed</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(2) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestSpeed(covertStrToNum(testSpeed));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testBrake</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(3) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestBrake(covertStrToNum(testBrake));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">testOil</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox1 dd:nth-child(4) &gt; div.dd-div2&quot;</span>).first().text();<br>        carTest.setTestOil(covertStrToNum(testOil));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName1</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(2) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName1(editorName1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark1</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(2) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark1(editorRemark1);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName2</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(3) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName2(editorName2);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark2</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(3) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark2(editorRemark2);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorName3</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(4) &gt; div.dd-div1&quot;</span>).first().text();<br>        carTest.setEditorName3(editorName3);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">editorRemark3</span> <span class="hljs-operator">=</span> carElement.select(<span class="hljs-string">&quot;.tabbox2.tabbox-score dd:nth-child(4) &gt; div.dd-div3&quot;</span>).first().text();<br>        carTest.setEditorRemark3(editorRemark3);<br>        <span class="hljs-type">Date</span> <span class="hljs-variable">currentDate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>        carTest.setCreated(currentDate);<br>        carTest.setUpdated(currentDate);<br>        <span class="hljs-keyword">return</span> carTest;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 把字符串去掉最后一个数，转为乘以1000的数字</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> str</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">covertStrToNum</span><span class="hljs-params">(String str)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;--&quot;</span>.equals(str)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-comment">// 字符串去掉随后一个数</span><br>            str = StringUtils.substring(str, <span class="hljs-number">0</span>, str.length() - <span class="hljs-number">1</span>);<br>            <span class="hljs-comment">// 转换为小数并乘以1000</span><br>            <span class="hljs-type">Number</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> Float.valueOf(str) * <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">return</span> num.intValue();<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>            System.out.println(str);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="增加定时任务"><a href="#增加定时任务" class="headerlink" title="增加定时任务"></a>增加定时任务</h3><ul>
<li>在定时任务配置<code>QuartzConfig</code>中添加爬取汽车之家的定时任务</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义定时爬取评测任务任务</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean(&quot;crawlerAutoHomeJob&quot;)</span><br><span class="hljs-keyword">public</span> JobDetailFactoryBean <span class="hljs-title function_">crawlerAutoHomeJob</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">JobDetailFactoryBean</span> <span class="hljs-variable">jobDetailFactoryBean</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JobDetailFactoryBean</span>();<br>    jobDetailFactoryBean.setApplicationContextJobDataKey(<span class="hljs-string">&quot;context&quot;</span>);<br>    jobDetailFactoryBean.setJobClass(CrawlerAutoHomeJob.class);<br>    jobDetailFactoryBean.setDurability(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-keyword">return</span> jobDetailFactoryBean;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 定义关闭无效连接触发器</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Bean(&quot;crawlerAutoHomeJobTrigger&quot;)</span><br><span class="hljs-keyword">public</span> CronTriggerFactoryBean <span class="hljs-title function_">crawlerAutoHomeJobTrigger</span><span class="hljs-params">(</span><br><span class="hljs-params">        <span class="hljs-meta">@Qualifier(value = &quot;crawlerAutoHomeJob&quot;)</span> JobDetailFactoryBean itemJobBean)</span> &#123;<br>    <span class="hljs-type">CronTriggerFactoryBean</span> <span class="hljs-variable">tigger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CronTriggerFactoryBean</span>();<br>    tigger.setJobDetail(itemJobBean.getObject());<br>    tigger.setCronExpression(<span class="hljs-string">&quot;0/5 * * * * ? &quot;</span>);<br>    <span class="hljs-keyword">return</span> tigger;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Spring</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Common</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/</url>
    <content><![CDATA[<h1 id="Apache-Common包简介"><a href="#Apache-Common包简介" class="headerlink" title="Apache Common包简介"></a>Apache Common包简介</h1><p>Apache Commons是对JDK的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题，减少重复劳动。官网网址:<a href="http://commons.apache.org/">http://commons.apache.org</a></p>
<h1 id="Common包包含哪些类？"><a href="#Common包包含哪些类？" class="headerlink" title="Common包包含哪些类？"></a>Common包包含哪些类？</h1><blockquote>
<p>请参考：<a href="http://commons.apache.org/">Apache Common官方网站</a></p>
</blockquote>
<h2 id="常用包梳理"><a href="#常用包梳理" class="headerlink" title="常用包梳理"></a>常用包梳理</h2><p>| 包名         | 介绍     |<br>| ————- |:————-:| <br>| commons-lang      | 提供字符串处理、数值处理、对象等工具方法 |<br>| commons-collections | 集合工具类,用来操作各种集合     |<br>| commons-io         | IO流操作的工具类     |<br>| commons-beanutils  | Java Bean 操作和封装工具     |  <br>| commons-dbcp2     | 数据库连接池实现  |<br>| commons-pool2      | 对象池实现,用于数据库连接池等 |<br>| commons-fileupload | HTML文件上传工具     | <br>| commons-codec      | 编码&#x2F;解码算法,如Base64、Hex、MD5等 |  <br>| commons-net        | 网络工具,如FTP、Telnet、DNS等 |<br>| commons-configuration | 配置文件解析器   |<br>| commons-vfs        | 虚拟文件系统,对各种文件系统的包装| <br>| commons-digester   | XML解析器    | <br>| commons-logging    | 日志记录器抽象层|<br>| commons-validator  | 数据校验器|</p>
<h3 id="Commons-BeanUtils"><a href="#Commons-BeanUtils" class="headerlink" title="Commons BeanUtils"></a>Commons BeanUtils</h3><p>针对Bean的一个工具集。由于Bean往往是有一堆get和set组成，所以BeanUtils也是在此基础上进行一些包装。它利用Java的反射机制，从动态的生成对bean的getter和setter的调用代码，到模拟创建一个动态的bean，等等。<br>这个包看似简单，却是很多开源项目的基石：如在著名的Struts和Spring Framework中，我们都能找到BeanUtils的影子。大家猜猜看，有哪位名人是BeanUtils的作者之一？没错，就是Struts的创始人Craig McClanahan。<br>一个比较常用的功能是Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。</p>
<h4 id="模块介绍"><a href="#模块介绍" class="headerlink" title="模块介绍"></a>模块介绍</h4><table>
<thead>
<tr>
<th>包名</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>beanutils</td>
<td>核心包，主要是一些常用的工具类及接口定义</td>
</tr>
<tr>
<td>converters</td>
<td>转换String到需要类型的类，实现Converter接口</td>
</tr>
<tr>
<td></td>
<td>这些转换器实现了 LocaleConverter 接口,并提供了根据本地语言环境格式化对象到字符串以及解析字符串到对象的功能。<br/>主要用途是:<br/>国际化:    根据不同语言环境解析和格式化数值<br/>本地化的 Bean 操作:    解析不同本地语言环境的请求参数到 Bean</td>
</tr>
<tr>
<td>expression</td>
<td>统一的表达式语言接口,定义表达式解析、求值和设置属性值等方法。</td>
</tr>
</tbody></table>
<h4 id="代码案例"><a href="#代码案例" class="headerlink" title="代码案例"></a>代码案例</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> lombok.Data;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.BeanUtils;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.ConvertUtils;  <br><span class="hljs-keyword">import</span> org.apache.commons.beanutils.converters.DateConverter;  <br><span class="hljs-keyword">import</span> org.junit.Test;  <br>  <br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;  <br><span class="hljs-keyword">import</span> java.util.Arrays;  <br><span class="hljs-keyword">import</span> java.util.Date;  <br><span class="hljs-keyword">import</span> java.util.HashMap;  <br><span class="hljs-keyword">import</span> java.util.Map;  <br>  <br><span class="hljs-comment">/**  </span><br><span class="hljs-comment"> * CovertTest * <span class="hljs-doctag">@author</span> will */</span><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BeanUtilTest</span> &#123;  <br>  <br>    <span class="hljs-comment">//将字符串转换为指定类型  </span><br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCovertToInteger</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> ConvertUtils.convert(<span class="hljs-string">&quot;123&quot;</span>, Integer.class);  <br>        <span class="hljs-keyword">if</span> (i <span class="hljs-keyword">instanceof</span> Integer) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;it can cast to integer&quot;</span>);  <br>            System.out.println(<span class="hljs-string">&quot;the number result is &quot;</span> + (Integer) i);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            System.err.print(<span class="hljs-string">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//将字符串数组转换为指定类型数组  </span><br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConvertArrToIntegerArr</span><span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">convert</span> <span class="hljs-operator">=</span> ConvertUtils.convert(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;, Integer.class);  <br>        <span class="hljs-keyword">if</span> (convert <span class="hljs-keyword">instanceof</span> Integer[]) &#123;  <br>            System.out.println(<span class="hljs-string">&quot;it can cast to Integer Array&quot;</span>);  <br>            Integer[] integers = (Integer[]) convert;  <br>            Arrays.stream(integers).forEach(System.out::println);  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            System.err.print(<span class="hljs-string">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-comment">//将字符串转换为日期类型  </span><br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testCovertToDate</span> <span class="hljs-params">()</span> &#123;  <br>        <span class="hljs-comment">// 日期格式转换  </span><br>        <span class="hljs-type">DateConverter</span> <span class="hljs-variable">dateConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DateConverter</span>();  <br>        dateConverter.setPatterns(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;yyyy-MM-dd&quot;</span>,<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&#125;);  <br>        ConvertUtils.register(dateConverter, Date.class);  <br>        <span class="hljs-type">Object</span> <span class="hljs-variable">convert</span> <span class="hljs-operator">=</span> ConvertUtils.convert(<span class="hljs-string">&quot;2023-12-01&quot;</span>, Date.class);  <br>        System.out.println(convert);  <br>        <span class="hljs-comment">// 常规时间类型转换  </span><br>        System.out.println(ConvertUtils.convert(<span class="hljs-string">&quot;2023-06-30 09:53:55&quot;</span>, Date.class));  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Test</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBeanUtil</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &#123;  <br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String, Object&gt;();  <br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;will&quot;</span>);  <br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;18&quot;</span>);  <br>  <br>        <span class="hljs-comment">// 将map数据拷贝到Java Bean中  </span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>        BeanUtils.populate(p, map);  <br>        System.out.println(<span class="hljs-string">&quot;p is &quot;</span> + p);  <br>        <span class="hljs-comment">// 对象拷贝  </span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>        BeanUtils.copyProperties(p1, p);  <br>        System.out.println(<span class="hljs-string">&quot;p1 is &quot;</span> + p1);  <br>        <span class="hljs-comment">// 拷贝指定的属性  </span><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();  <br>        BeanUtils.copyProperty(p2,<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;will_yang&quot;</span>);  <br>        System.out.println(<span class="hljs-string">&quot;p2 is &quot;</span> + p2);  <br>        <span class="hljs-comment">// 设置指定的属性  </span><br>        BeanUtils.setProperty(p2, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-number">20</span>);  <br>        System.out.println(<span class="hljs-string">&quot;p2 is &quot;</span> + p2);  <br>        <span class="hljs-comment">//对象克隆  </span><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">bean</span> <span class="hljs-operator">=</span> BeanUtils.cloneBean(p2);  <br>        System.out.println(<span class="hljs-string">&quot;bean = &quot;</span> + bean);  <br>    &#125;  <br>  <br>    <span class="hljs-meta">@Data</span>  <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;  <br>        <span class="hljs-keyword">private</span> String name;  <br>        <span class="hljs-keyword">private</span> String age;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Commons-Codec"><a href="#Commons-Codec" class="headerlink" title="Commons Codec"></a>Commons Codec</h2><p>是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。</p>
<h3 id="二进制相关"><a href="#二进制相关" class="headerlink" title="二进制相关"></a>二进制相关</h3><p>二进制包主要提供16进制、Base64、Base32等的编解码工具类。</p>
<h4 id="16进制（Hex类）"><a href="#16进制（Hex类）" class="headerlink" title="16进制（Hex类）"></a>16进制（Hex类）</h4><p>十六进制常用于将二进制以更简短的方式展示，比如MD5是128位，展现起来太长，而转换为16进制后只需要32个字符即可表示出来。<br>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// byte数组转为16进制字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">hex</span> <span class="hljs-operator">=</span> Hex.encodeHexString(<span class="hljs-string">&quot;123&quot;</span>.getBytes());<br>System.out.println(hex);<br><span class="hljs-comment">// 16进制字符串解码</span><br><span class="hljs-type">byte</span>[] src = Hex.decodeHex(hex);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(src));<br></code></pre></td></tr></table></figure>

<h4 id="2-Base64，Base32，Base16"><a href="#2-Base64，Base32，Base16" class="headerlink" title="2. Base64，Base32，Base16"></a>2. Base64，Base32，Base16</h4><p>Base64是网络上最常见的用于传输二进制数据的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。Base32就是使用32个可打印字符，Base16就是使用16个（实际上相当于16进制）。</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>名称</td>
<td>编码表字符串</td>
<td>位数不足是否会补全 &#x3D;</td>
</tr>
<tr>
<td>base16</td>
<td>数字0<del>9 和 字母 A</del>F</td>
<td>不会，位数刚好是 4 的倍数</td>
</tr>
<tr>
<td>base32</td>
<td>大写字母A<del>Z 和 数字2</del>7</td>
<td>会</td>
</tr>
<tr>
<td>base64</td>
<td>Base大写字母A-Z，小写字母a-z，数字0~9以及”+”，”&#x2F;“</td>
<td>会</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// base64编码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">base64</span> <span class="hljs-operator">=</span> Base64.encodeBase64String(<span class="hljs-string">&quot;测试&quot;</span>.getBytes());<br>System.out.println(base64);<br><span class="hljs-comment">// base64解码</span><br><span class="hljs-type">byte</span>[] src = Base64.decodeBase64(base64);<br>System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(src));<br><span class="hljs-comment">// 字符串是否是base64</span><br>Base64.isBase64(base64);<br><br><span class="hljs-comment">// Base32 Base16 同理</span><br></code></pre></td></tr></table></figure>

<p>Codec还提供了Base系列的流处理，以流的方式去处理Base编解码，示例如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 以流方式提供Base64编码和解码</span><br><span class="hljs-comment">// 附：&quot;123&quot;的base64编码为&quot;MTIz&quot;</span><br><br><span class="hljs-comment">// 对输入流做base64编码</span><br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(<span class="hljs-string">&quot;123&quot;</span>.getBytes());<br><span class="hljs-type">Base64InputStream</span> <span class="hljs-variable">ebis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Base64InputStream</span>(is, <span class="hljs-literal">true</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">enc</span> <span class="hljs-operator">=</span> IOUtils.toString(ebis, <span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">// MTIz</span><br><br><span class="hljs-comment">// 对base64数据流做解码</span><br>is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(enc.getBytes());<br><span class="hljs-type">Base64InputStream</span> <span class="hljs-variable">dbis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Base64InputStream</span>(is, <span class="hljs-literal">false</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">dec</span> <span class="hljs-operator">=</span> IOUtils.toString(dbis, <span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">// 123</span><br><br><span class="hljs-comment">// -----------------------</span><br><br><span class="hljs-comment">// 将数据做base64编码写入输出流</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">Base64OutputStream</span> <span class="hljs-variable">ebos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Base64OutputStream</span>(baos, <span class="hljs-literal">true</span>);<br>IOUtils.write(data, ebos, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">enc2</span> <span class="hljs-operator">=</span> baos.toString(); <span class="hljs-comment">// MTIz</span><br><br><span class="hljs-comment">// 将base64数据做解码写入输出流</span><br>baos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><span class="hljs-type">Base64OutputStream</span> <span class="hljs-variable">dbos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Base64OutputStream</span>(baos, <span class="hljs-literal">false</span>);<br>IOUtils.write(data, dbos, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">dec2</span> <span class="hljs-operator">=</span> dbos.toString(); <span class="hljs-comment">// 123</span><br></code></pre></td></tr></table></figure>

<h3 id="URL相关"><a href="#URL相关" class="headerlink" title="URL相关"></a>URL相关</h3><p>URL之所以要进行编码，是因为URL中有些字符会引起歧义。</p>
<p>例如URL参数字符串中使用key&#x3D;value键值对这样的形式来传参，键值对之间以&amp;符号分隔，如&#x2F;s?q&#x3D;abc&amp;ie&#x3D;utf-8。如果你的value字符串中包含了&#x3D;或者&amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;和&#x3D;符号进行转义，也就是对其进行编码。</p>
<p>又如URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。</p>
<p>URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p>
<p>编解码示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">URLCodec</span> <span class="hljs-variable">urlCodec</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLCodec</span>();<br><span class="hljs-comment">// url编码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">encUrl</span> <span class="hljs-operator">=</span> urlCodec.encode(<span class="hljs-string">&quot;http://x.com?f=哈&quot;</span>);<br>System.out.println(encUrl);<br><span class="hljs-comment">// url解码</span><br><span class="hljs-type">String</span> <span class="hljs-variable">decUrl</span> <span class="hljs-operator">=</span> urlCodec.decode(encUrl);<br>System.out.println(decUrl);<br></code></pre></td></tr></table></figure>

<h3 id="摘要算法"><a href="#摘要算法" class="headerlink" title="摘要算法"></a>摘要算法</h3><p>摘要算法是一种单向的散列算法，它满足以下几个特点。</p>
<ul>
<li>输入长度是任意的</li>
<li>输出长度是固定的</li>
<li>对每一个给定的输入，计算输出是很容易的</li>
<li>不可逆，无法通过输出推算出原数据</li>
<li>输出不依赖于输入。就是输入数据变动一个字节结果会相差很多</li>
</ul>
<p>由于摘要算法以上特点，主要用于数据完整性校验。例如网上的资源一般会提供一个摘要值（一般用MD5算法），用户下载后可以通过工具对资源做MD5后和网上给定的值比较，如果不一致说明文件不完整了，可能是下载过程网络波动内容有丢失，也可能被人篡改过。</p>
<p>也可以做数据的指纹，比如网盘秒传，就是利用摘要值做判断。客户端上传前先对文件做摘要值，传给服务端，服务端发现有相同摘要的文件说明两个文件内容是一致的，这样就无需上传直接将文件存储路径指向这个文件就可以了，既实现了秒传，还节约了服务器磁盘空间（不同用户相同内容的文件实际上指向的是同一份文件）。</p>
<p>很多系统也将密码做md5后存储，其中这种方式并不安全。md5已经很很多公开结果了，并且使用彩虹表碰撞也很容易破解了。所以并不建议使用md5存储密码。密码推荐使用BCrypt算法。</p>
<p>摘要算法主要有以下几个</p>
<ul>
<li>MD(Message Digest)：消息摘要</li>
<li>SHA(Secure Hash Algorithm)：安全散列</li>
<li>MAC(Message Authentication Code)：消息认证码</li>
</ul>
<p><strong>1. MD系列</strong></p>
<p>主要有MD2、MD4、MD5，目前一般常用MD5</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如果使用Java自带的api需要十多行才能实现md5算法</span><br><br><span class="hljs-comment">// 对数据做md5，参数支持字符串，字节数据，输入流</span><br><span class="hljs-type">String</span> <span class="hljs-variable">md5</span> <span class="hljs-operator">=</span> DigestUtils.md5Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>

<p><strong>2. SHA系列</strong></p>
<p>SHA系列有SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，SHA3-224、SHA3-256、SHA3-384、SHA3-512等。目前安全起见一般选择256以上，推荐384以上。当然摘要越长则计算耗时也越长，需要根据需求权衡。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 参数支持字符串，字节数据，输入流</span><br><span class="hljs-type">String</span> <span class="hljs-variable">sha1</span> <span class="hljs-operator">=</span> DigestUtils.sha1Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha256</span> <span class="hljs-operator">=</span> DigestUtils.sha256Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha384</span> <span class="hljs-operator">=</span> DigestUtils.sha384Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha512</span> <span class="hljs-operator">=</span> DigestUtils.sha512Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha3_256</span> <span class="hljs-operator">=</span> DigestUtils.sha3_256Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha3_384</span> <span class="hljs-operator">=</span> DigestUtils.sha3_384Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">sha3_512</span> <span class="hljs-operator">=</span> DigestUtils.sha3_512Hex(<span class="hljs-string">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>

<p><strong>3. HMAC系列</strong></p>
<p>HMAC(keyed-Hash Message Authentication Code)系列是包含密钥的散列算法，包含了MD和SHA两个系列的消息摘要算法。融合了MD，SHA：</p>
<p>MD系列：HMacMD2，HMacMD4，HMacMD5</p>
<p>SHA系列：HMacSHA1，HMacSHA224，HMacSHA256，HMacSHA38</p>
<p>，HMacSHA512</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;asdf3234asdf3234asdf3234asdf3234&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">valueToDigest</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;测试数据&quot;</span>; <span class="hljs-comment">// valueToDigest参数支持字节数据，流，文件等</span><br><span class="hljs-comment">// 做HMAC-MD5摘要</span><br><span class="hljs-type">String</span> <span class="hljs-variable">hmacMd5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacUtils</span>(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);<br><span class="hljs-comment">// 做HMAC-sha摘要</span><br><span class="hljs-type">String</span> <span class="hljs-variable">hmacSha256</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);<br><span class="hljs-type">String</span> <span class="hljs-variable">hmacSha384</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);<br><span class="hljs-type">String</span> <span class="hljs-variable">hmacSha512</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);<br></code></pre></td></tr></table></figure>

<h2 id="Commons-Collections"><a href="#Commons-Collections" class="headerlink" title="Commons Collections"></a>Commons Collections</h2><p>Apache Commons Collections 是对 java.util.Collection 的扩展。</p>
<p>目前 <strong>Collections</strong> 包有两个：</p>
<ul>
<li>commons-collections</li>
<li>commons-collections4<br>commons-collections 最新版本是3.2.2，不支持泛型，目前官方已不在维护。<br>collections4 目前最新版本是4.4，最低要求 Java8 以上。<br>相对于 collections 来说完全支持 Java8 的特性并且支持泛型，该版本无法兼容旧有版本，于是为了避免冲突改名为 collections4。推荐直接使用该版本。（注：两个版本可以共存，使用时需要注意）。<br>这里使用3.2.2版本的中包名做下介绍：</li>
</ul>
<table>
<thead>
<tr>
<th>包名</th>
<th>介绍</th>
</tr>
</thead>
<tbody><tr>
<td>collections</td>
<td>CommonsCollections自定义的一组公用的接口和工具类</td>
</tr>
<tr>
<td>bag</td>
<td>实现Bag接口的一组类</td>
</tr>
<tr>
<td>bidimap</td>
<td>实现BidiMap系列接口的一组类</td>
</tr>
<tr>
<td>buffer</td>
<td>实现Buffer接口的一组类</td>
</tr>
<tr>
<td>collection</td>
<td>实现java.util.Collection接口的一组类</td>
</tr>
<tr>
<td>comparators</td>
<td>实现java.util.Comparator接口的一组类</td>
</tr>
<tr>
<td>functors</td>
<td>Commons Collections自定义的一组功能类</td>
</tr>
<tr>
<td>iterators</td>
<td>实现java.util.Iterator接口的一组类</td>
</tr>
<tr>
<td>keyvalue</td>
<td>实现集合和键&#x2F;值映射相关的一组类</td>
</tr>
<tr>
<td>list</td>
<td>实现java.util.List接口的一组类</td>
</tr>
<tr>
<td>map</td>
<td>实现Map系列接口的一组类</td>
</tr>
<tr>
<td>set</td>
<td>实现Set系列接口的一组类</td>
</tr>
</tbody></table>
<h3 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h3><h4 id="CollectionUtils"><a href="#CollectionUtils" class="headerlink" title="CollectionUtils"></a>CollectionUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;);<br><span class="hljs-type">List</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>&#125;);<br><span class="hljs-comment">// 判断是否为空（null或空list都为true）</span><br>CollectionUtils.isEmpty(list1);<br><span class="hljs-comment">// 添加元素（忽略null元素）</span><br>CollectionUtils.addIgnoreNull(list1, str);<br><span class="hljs-comment">// list是否包含subList中的所有元素</span><br>CollectionUtils.containsAll(list1, list2); <span class="hljs-comment">// false</span><br><span class="hljs-comment">// list是否包含subList中的任意一个元素</span><br>CollectionUtils.containsAny(list1, list2); <span class="hljs-comment">// true</span><br><span class="hljs-comment">// list1 减去 list2</span><br>CollectionUtils.subtract(list1, list2); <span class="hljs-comment">// [&quot;3&quot;]</span><br><span class="hljs-comment">// 合并两个list并去重</span><br>CollectionUtils.union(list1, list2); <span class="hljs-comment">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br><span class="hljs-comment">// 取两个list同时存在的元素</span><br>CollectionUtils.intersection(list1, list2); <span class="hljs-comment">// [1&quot;, &quot;2&quot;]</span><br></code></pre></td></tr></table></figure>

<h4 id="ListUtils"><a href="#ListUtils" class="headerlink" title="ListUtils"></a>ListUtils</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">List</span> <span class="hljs-variable">list1</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>&#125;);<br><span class="hljs-type">List</span> <span class="hljs-variable">list2</span> <span class="hljs-operator">=</span> Arrays.asList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>&#125;);<br><span class="hljs-comment">// 同CollectionUtils, 返回结果为List</span><br>ListUtils.subtract(list1, list2); <span class="hljs-comment">// [&quot;3&quot;]</span><br>ListUtils.union(list1, list2); <span class="hljs-comment">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br>ListUtils.intersection(list1, list2); <span class="hljs-comment">// [1&quot;, &quot;2&quot;]</span><br><span class="hljs-comment">// 判断两个集合中的内容是否完全相同（顺序也一致）</span><br>ListUtils.isEqualList(list1, list2); <span class="hljs-comment">// false</span><br><span class="hljs-comment">// list1如果为null则转换为空List</span><br>ListUtils.emptyIfNull(list1);<br><span class="hljs-comment">// list1中所有元素做Hash</span><br>ListUtils.hashCodeForList(list1);<br></code></pre></td></tr></table></figure>

<p>除了以上介绍了两个还有 MapUtils，SetUtils，EnumerationUtils，IterableUtils 等不是很常用就不多做介绍了。</p>
<h3 id="集合扩展"><a href="#集合扩展" class="headerlink" title="集合扩展"></a>集合扩展</h3><h4 id="FixedSizeList"><a href="#FixedSizeList" class="headerlink" title="FixedSizeList"></a>FixedSizeList</h4><p>FixedSizeList 用于装饰另一个 List 以阻止修改其大小。不支持添加、删除、清除等操作。set 方法是允许的（因为它不会改变列表大小），下面看代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; sourceList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-comment">// 装饰一下原list</span><br>List&lt;String&gt; list = FixedSizeList.fixedSizeList(sourceList);<br>list.set(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;11&quot;</span>);<br>println(list); <span class="hljs-comment">// [11,2,3]</span><br><span class="hljs-comment">// 以下改变容器size的操作会抛出异常</span><br>list.add(<span class="hljs-string">&quot;4&quot;</span>); <span class="hljs-comment">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.remove(<span class="hljs-string">&quot;5&quot;</span>); <span class="hljs-comment">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.clear(); <span class="hljs-comment">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br></code></pre></td></tr></table></figure>

<h4 id="SetUniqueList"><a href="#SetUniqueList" class="headerlink" title="SetUniqueList"></a>SetUniqueList</h4><p>SetUniqueList 用来装饰另一个 List 以确保不存在重复元素，内部使用了 Set 来判断重复问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; sourceList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class="hljs-string">&quot;1&quot;</span>);<br>sourceList.add(<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-comment">// 元素不重复的list</span><br>SetUniqueList&lt;String&gt; list = SetUniqueList.setUniqueList(sourceList);<br><span class="hljs-comment">// 存在则不处理，不会影响原来顺序</span><br>list.add(<span class="hljs-string">&quot;2&quot;</span>);<br>println(list); <span class="hljs-comment">// [1,2]</span><br></code></pre></td></tr></table></figure>

<h4 id="TransformedList"><a href="#TransformedList" class="headerlink" title="TransformedList"></a>TransformedList</h4><p>TransformedList 装饰另一个 List 以转换添加的对象。add 和 set 方法受此类影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; sourceList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class="hljs-string">&quot;1&quot;</span>);<br>sourceList.add(<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-comment">// 转换list,在添加元素的时候会通过第二个参数Transformer转换一下</span><br><span class="hljs-comment">// （Transformer接口只有一个抽象方法可以使用lambda表达式）</span><br>       <br><span class="hljs-comment">// transformingList不会对原list的已有元素做转换</span><br>TransformedList&lt;String&gt; list = TransformedList.transformingList(sourceList, e -&gt; e.concat(<span class="hljs-string">&quot;_&quot;</span>));<br>list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>println(list); <span class="hljs-comment">// [1, 2, a_]</span><br><br><span class="hljs-comment">// transformedList会对原list的已有元素做转换</span><br>list = TransformedList.transformedList(sourceList, e -&gt; e.concat(<span class="hljs-string">&quot;_&quot;</span>));<br>list.add(<span class="hljs-string">&quot;a&quot;</span>);<br>println(list); <span class="hljs-comment">// [1_, 2_, a_]</span><br></code></pre></td></tr></table></figure>

<h4 id="PredicatedList"><a href="#PredicatedList" class="headerlink" title="PredicatedList"></a>PredicatedList</h4><p>PredicatedList 装饰另一个 List ，装饰后的 List 在添加元素的时候会调用 Predicate 接口来判断元素，匹配通过才会被添加到集合中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; sourceList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><span class="hljs-comment">// 在添加元素的时候会通过第二个参数Predicate判断一下是否符合要求，符合要求才添加进来</span><br>PredicatedList&lt;String&gt; list = PredicatedList.predicatedList(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), e -&gt; e.startsWith(<span class="hljs-string">&quot;_&quot;</span>));<br>list.add(<span class="hljs-string">&quot;_4&quot;</span>);<br>println(list); <span class="hljs-comment">// [_4]</span><br><br><span class="hljs-comment">// 以下会抛异常：java.lang.IllegalArgumentException: Cannot add Object &#x27;4&#x27;</span><br>list.add(<span class="hljs-string">&quot;4&quot;</span>);<br></code></pre></td></tr></table></figure>

<h4 id="ListOrderedSet"><a href="#ListOrderedSet" class="headerlink" title="ListOrderedSet"></a>ListOrderedSet</h4><p>ListOrderedSet 有序的Set，顺序按照元素添加顺序排列，类似 List</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 有序的set，按照插入顺序排序</span><br>Set&lt;String&gt; set = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListOrderedSet</span>&lt;&gt;();<br>set.add(<span class="hljs-string">&quot;aa&quot;</span>);<br>set.add(<span class="hljs-string">&quot;11&quot;</span>);<br>set.add(<span class="hljs-string">&quot;哈哈&quot;</span>);<br>println(set); <span class="hljs-comment">// [aa,11,哈哈]</span><br></code></pre></td></tr></table></figure>

<h4 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h4><p>Bag 接口是带计数功能的集合扩展，它继承了 Collection 接口，可以当做集合来使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// bag 带计数功能的集合</span><br>Bag&lt;String&gt; bag = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashBag</span>&lt;&gt;();<br>bag.add(<span class="hljs-string">&quot;a&quot;</span>);<br>bag.add(<span class="hljs-string">&quot;b&quot;</span>);<br>bag.add(<span class="hljs-string">&quot;a&quot;</span>);<br>println(bag.size()); <span class="hljs-comment">// 3</span><br>println(bag.getCount(<span class="hljs-string">&quot;a&quot;</span>)); <span class="hljs-comment">// 2</span><br></code></pre></td></tr></table></figure>

<h3 id="Map扩展"><a href="#Map扩展" class="headerlink" title="Map扩展"></a>Map扩展</h3><h4 id="MultiValuedMap"><a href="#MultiValuedMap" class="headerlink" title="MultiValuedMap"></a>MultiValuedMap</h4><p>MultiValuedMap 和正常的 Map 有点区别，同一个 key 允许存放多个 value，这些 value 会放到一个 List 中。这个功能如果用 Java 的 Map 我们需要构造一个 <code>Map&lt;String, List&lt;String&gt;&gt;</code> 加个各种操作来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// list实现，允许value重复</span><br>ListValuedMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayListValuedHashMap</span>&lt;&gt;(); <br>map.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>map.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;李四&quot;</span>);<br>map.put(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>);<br>map.put(<span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;12&quot;</span>);<br><span class="hljs-comment">// 注意：value的泛型是String, 但是get方法返回的是List&lt;String&gt;</span><br>List&lt;String&gt; users2 = map.get(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// [张三,李四,张三]</span><br><br><span class="hljs-comment">// multiMap的其他方法</span><br>map.containsKey(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// true</span><br>map.containsValue(<span class="hljs-string">&quot;张三&quot;</span>); <span class="hljs-comment">// true</span><br>map.containsMapping(<span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;张三&quot;</span>); <span class="hljs-comment">// true</span><br><br><span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> map.size(); <span class="hljs-comment">// 4</span><br><br>Collection&lt;String&gt; ss = map.values();<span class="hljs-comment">// [张三,李四,张三,12]</span><br>map.remove(<span class="hljs-string">&quot;user&quot;</span>); <span class="hljs-comment">// 清空user的所有value</span><br><span class="hljs-comment">// 转换为原生map</span><br>Map&lt;String, Collection&lt;String&gt;&gt; jMap = map.asMap();<br></code></pre></td></tr></table></figure>

<h4 id="CaseInsensitiveMap"><a href="#CaseInsensitiveMap" class="headerlink" title="CaseInsensitiveMap"></a>CaseInsensitiveMap</h4><p>key大小写不敏感的Map</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// key大小写不敏感</span><br>Map&lt;String, Integer&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CaseInsensitiveMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;one&quot;</span>, <span class="hljs-number">1</span>);<br>map.put(<span class="hljs-string">&quot;two&quot;</span>, <span class="hljs-number">2</span>);<br><span class="hljs-type">Integer</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;ONE&quot;</span>);<br>println(o); <span class="hljs-comment">// 1</span><br></code></pre></td></tr></table></figure>

<h4 id="OrderedMap"><a href="#OrderedMap" class="headerlink" title="OrderedMap"></a>OrderedMap</h4><p>有顺序的 Map，按照插入顺序排序。如果使用 hashMap 的话 key 会按照 hash 值排序，可能和插入顺序一样，也可能不一样。key 数量和不同 JDK 版本都可能影响顺序，这是由于不同版本 jdk map 的 hash 算法有区别，hash 算法和当前 map 的容量也有关系。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// key有序：按照插入顺序</span><br>OrderedMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListOrderedMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;哈哈&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>map.put(<span class="hljs-string">&quot;此处&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>map.put(<span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br>map.put(<span class="hljs-string">&quot;dd&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);<br><span class="hljs-comment">// 得到的keySet有序</span><br>Set&lt;String&gt; set = map.keySet(); <span class="hljs-comment">// 哈哈,此处,cc,dd</span><br><span class="hljs-type">String</span> <span class="hljs-variable">nk</span> <span class="hljs-operator">=</span> map.nextKey(<span class="hljs-string">&quot;此处&quot;</span>); <span class="hljs-comment">// cc</span><br><span class="hljs-type">String</span> <span class="hljs-variable">pk</span> <span class="hljs-operator">=</span> map.previousKey(<span class="hljs-string">&quot;此处&quot;</span>); <span class="hljs-comment">// 哈哈</span><br></code></pre></td></tr></table></figure>

<h4 id="LRUMap"><a href="#LRUMap" class="headerlink" title="LRUMap"></a>LRUMap</h4><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>
<p>各种缓存框架都有对 LRU 算法的支持，如 EhCache，GuavaCache，Redis 等，可以说是很常用的一种算法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">LRUMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LRUMap</span>&lt;&gt;(<span class="hljs-number">2</span>);<br>map.put(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>map.put(<span class="hljs-string">&quot;bb&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>map.put(<span class="hljs-string">&quot;cc&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-comment">// 最早没有被使用的aa将被移出</span><br>println(map); <span class="hljs-comment">// [bb:2, cc:3]</span><br><span class="hljs-comment">// 访问一次bb，此时在put的话将会移出最早没有被访问的cc</span><br>map.get(<span class="hljs-string">&quot;bb&quot;</span>);<br>map.put(<span class="hljs-string">&quot;dd&quot;</span>, <span class="hljs-string">&quot;4&quot;</span>);<br>println(map); <span class="hljs-comment">// [bb:2, dd:4]</span><br></code></pre></td></tr></table></figure>

<h4 id="PassiveExpiringMap"><a href="#PassiveExpiringMap" class="headerlink" title="PassiveExpiringMap"></a>PassiveExpiringMap</h4><p>装饰一个 Map 以在达到过期时间时删除过期条目。当在 Map 中放置键值对时，此装饰器使用 ExpirationPolicy 来确定条目应保持多长时间，由到期时间值定义。当对 Map 做操作的时候才会检查元素是否过期并触发删除操作。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 存活一秒钟</span><br><span class="hljs-type">int</span> <span class="hljs-variable">ttlMillis</span> <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>;<br>PassiveExpiringMap.ExpirationPolicy&lt;String, String&gt; ep = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassiveExpiringMap</span>.ConstantTimeToLiveExpirationPolicy&lt;&gt;(ttlMillis);<br>PassiveExpiringMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PassiveExpiringMap</span>&lt;&gt;(ep);<br>map.put(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;1&quot;</span>);<br>map.put(<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>);<br>map.put(<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-string">&quot;3&quot;</span>);<br><span class="hljs-comment">// 等待一秒后在获取</span><br>Thread.sleep(<span class="hljs-number">1000</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">vc</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;c&quot;</span>);<br>println(vc); <span class="hljs-comment">// null</span><br></code></pre></td></tr></table></figure>

<h4 id="6-ReferenceMap"><a href="#6-ReferenceMap" class="headerlink" title="6. ReferenceMap"></a>6. ReferenceMap</h4><p>ReferenceMap 允许垃圾收集器删除映射。可以指定使用什么类型的引用来存储映射的键和值。如果使用的不是强引用，则垃圾收集器可以在键或值变得不可访问，或者 JVM 内存不足时删除映射。用它做一个简易的缓存不会导致存放内容过多导致内存溢出。</p>
<h4 id="BidiMap"><a href="#BidiMap" class="headerlink" title="BidiMap"></a>BidiMap</h4><p>BidiMap 允许在 key 和 value 之间进行双向查找。其中一个键可以查找一个值，一个值可以同样轻松地查找一个键。这个接口扩展了 Map，value 不允许重复，如果重复将同时覆盖旧的键值对。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 双向map, 可通过value获取key</span><br><span class="hljs-comment">// value也不允许重复，如果重复将会覆盖旧值</span><br>BidiMap&lt;String, String&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeBidiMap</span>&lt;&gt;();<br>map.put(<span class="hljs-string">&quot;dog&quot;</span>, <span class="hljs-string">&quot;狗&quot;</span>);<br>map.put(<span class="hljs-string">&quot;cat&quot;</span>, <span class="hljs-string">&quot;猫&quot;</span>);<br><span class="hljs-comment">// value重复的话key也会被覆盖，相当于&quot;cat2:猫&quot;会覆盖掉&quot;cat:猫&quot;</span><br><span class="hljs-comment">// map.put(&quot;cat2&quot;, &quot;猫&quot;);</span><br>println(map); <span class="hljs-comment">// &#123;cat=猫, dog=狗&#125;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> map.getKey(<span class="hljs-string">&quot;狗&quot;</span>);<br>println(key); <span class="hljs-comment">// dog</span><br><br><span class="hljs-comment">// 反向，value变为key，key变为value</span><br>BidiMap&lt;String, String&gt; iMap = map.inverseBidiMap();<br>println(iMap); <span class="hljs-comment">// &#123;狗=dog, 猫=cat&#125;</span><br>println(iMap.get(<span class="hljs-string">&quot;狗&quot;</span>)); <span class="hljs-comment">// dog</span><br><br><span class="hljs-comment">// 对反向map操作同时影响原map</span><br>iMap.put(<span class="hljs-string">&quot;鱼&quot;</span>, <span class="hljs-string">&quot;fish&quot;</span>);<br>println(iMap); <span class="hljs-comment">// &#123;狗=dog, 猫=cat, 鱼=fish&#125;</span><br>println(map); <span class="hljs-comment">// &#123;cat=猫, dog=狗, fish=鱼&#125;</span><br></code></pre></td></tr></table></figure>

<h2 id="Commons-Compress"><a href="#Commons-Compress" class="headerlink" title="Commons Compress"></a>Commons Compress</h2><p>压缩、解压缩文件的组件，可以操作rar、cpio、Unix dump、tar、zip、gzip、XZ、Pack200和bzip2格式的压缩文件。</p>
<h3 id="压缩"><a href="#压缩" class="headerlink" title="压缩"></a>压缩</h3><p>压缩：按某种算法减小文件所占用空间的大小<br>解压：按对应的逆向算法恢复文件</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>GzipCompressorOutputStream</td>
<td>压缩<code>&quot;*.gz</code>“文件</td>
</tr>
<tr>
<td>GzipCompressorInputStream</td>
<td>解压<code>&quot;*.gz</code>“文件</td>
</tr>
<tr>
<td>BZip2CompressorOutputStream</td>
<td>压缩<code>&quot;*.bz2</code>“文件</td>
</tr>
<tr>
<td>BZip2CompressorInputStream</td>
<td>解压<code>&quot;*.bz2</code>“文件</td>
</tr>
<tr>
<td>XZCompressorOutputStream</td>
<td>压缩<code>&quot;*.xz</code>“文件</td>
</tr>
<tr>
<td>XZCompressorInputStream</td>
<td>解压<code>&quot;*.xz</code>“文件</td>
</tr>
<tr>
<td>FramedLZ4CompressorOutputStream</td>
<td>压缩<code>&quot;*.lz4</code>“文件</td>
</tr>
<tr>
<td>FramedLZ4CompressorInputStream</td>
<td>解压<code>&quot;*.lz4</code>“文件</td>
</tr>
<tr>
<td>BlockLZ4CompressorOutputStream</td>
<td>压缩<code>&quot;*.block_lz4</code>“文件</td>
</tr>
<tr>
<td>BlockLZ4CompressorInputStream</td>
<td>解压<code>&quot;*.block_lz4</code>“文件</td>
</tr>
<tr>
<td>Pack200CompressorOutputStream</td>
<td>压缩<code>&quot;*.pack</code>“文件</td>
</tr>
<tr>
<td>Pack200CompressorInputStream</td>
<td>解压<code>&quot;*.pack</code>“文件</td>
</tr>
<tr>
<td>DeflateCompressorOutputStream</td>
<td>压缩<code>&quot;*.deflate</code>“文件</td>
</tr>
<tr>
<td>DeflateCompressorInputStream</td>
<td>解压<code>&quot;*.deflate</code>“文件</td>
</tr>
<tr>
<td>LZMACompressorOutputStream</td>
<td>压缩<code>&quot;*.lzma</code>“文件</td>
</tr>
<tr>
<td>LZMACompressorInputStream</td>
<td>解压<code>&quot;*.lzma</code>“文件</td>
</tr>
<tr>
<td>FramedSnappyCompressorOutputStream</td>
<td>压缩<code>&quot;*.sz</code>“文件</td>
</tr>
<tr>
<td>FramedSnappyCompressorInputStream</td>
<td>解压<code>&quot;*.sz</code>“文件</td>
</tr>
<tr>
<td>ZCompressorInputStream</td>
<td>解压<code>&quot;*.Z</code>“文件</td>
</tr>
</tbody></table>
<h4 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h4><p>gzip是Unix，Linux上常用的压缩工具，也是当今的WEB站点上非常流行的压缩技术。其有压缩级别等概念，可以通过GzipParameters去设置。JDK8也自带了GZIPInputStream类，用法类似。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// gzip压缩</span><br><span class="hljs-type">String</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.js&quot;</span>;<br><span class="hljs-type">GzipParameters</span> <span class="hljs-variable">parameters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GzipParameters</span>();<br>parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);<br>parameters.setOperatingSystem(<span class="hljs-number">3</span>);<br>parameters.setFilename(FilenameUtils.getName(file));<br>parameters.setComment(<span class="hljs-string">&quot;Test file&quot;</span>);<br>parameters.setModificationTime(System.currentTimeMillis());<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(file + <span class="hljs-string">&quot;.gz&quot;</span>);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">GzipCompressorOutputStream</span> <span class="hljs-variable">gzos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GzipCompressorOutputStream</span>(fos, parameters);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(file)) &#123;<br>    IOUtils.copy(is, gzos);<br>&#125;<br><span class="hljs-comment">// gzip解压</span><br><span class="hljs-type">String</span> <span class="hljs-variable">gzFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.js.gz&quot;</span>;<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(gzFile);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">GzipCompressorInputStream</span> <span class="hljs-variable">gis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GzipCompressorInputStream</span>(is)) &#123;<br>    <span class="hljs-type">GzipParameters</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> gis.getMetaData();<br>    <span class="hljs-type">File</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/test.js&quot;</span>);<br>    FileUtils.copyToFile(gis, targetFile);<br>    targetFile.setLastModified(p.getModificationTime());<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="bz2"><a href="#bz2" class="headerlink" title="bz2"></a>bz2</h4><p>bz2是Linux下常见的压缩文件格式，是由具有高压缩率的压缩工具bzip2生成，以后缀为.bz2结尾的压缩文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 压缩bz2</span><br><span class="hljs-type">String</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.tar&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.tar.bz2&quot;</span>;<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetFile);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">BZip2CompressorOutputStream</span> <span class="hljs-variable">bzos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BZip2CompressorOutputStream</span>(os);<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile)) &#123;<br>    IOUtils.copy(is, bzos);<br>&#125;<br><span class="hljs-comment">// 解压bz2</span><br><span class="hljs-type">String</span> <span class="hljs-variable">bzFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.tar.bz2&quot;</span>;<br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(bzFile);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">BZip2CompressorInputStream</span> <span class="hljs-variable">bzis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BZip2CompressorInputStream</span>(is)) &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.tar&quot;</span>);<br>    FileUtils.copyToFile(bzis, targetFile);<br>&#125;<br></code></pre></td></tr></table></figure>

<p>其他压缩算法的使用方式和bz2基本一致，这里就不做代码示例了。</p>
<h3 id="归档"><a href="#归档" class="headerlink" title="归档"></a>归档</h3><p>归档：将许多零散的文件整理为一个文件，文件总大小基本不变<br>解包：从归档文件中释放文件</p>
<table>
<thead>
<tr>
<th>类名</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>TarArchiveOutputStream</td>
<td>归档<code>*.tar</code>文件</td>
</tr>
<tr>
<td>TarArchiveInputStream</td>
<td>解包<code>*.tar</code>文件</td>
</tr>
<tr>
<td>ZipArchiveOutputStream</td>
<td>归档压缩<code>*.zip</code>文件</td>
</tr>
<tr>
<td>ZipArchiveInputStream</td>
<td>解包解压<code>*.zip</code>文件</td>
</tr>
<tr>
<td>JarArchiveOutputStream</td>
<td>归档压缩<code>*.jar</code>文件</td>
</tr>
<tr>
<td>JarArchiveInputStream</td>
<td>解包解压<code>*.jar</code>文件</td>
</tr>
<tr>
<td>DumpArchiveOutputStream</td>
<td>归档<code>*.dump</code>文件</td>
</tr>
<tr>
<td>DumpArchiveInputStream</td>
<td>解包<code>*.dump</code>文件</td>
</tr>
<tr>
<td>CpioArchiveOutputStream</td>
<td>归档压缩<code>*.cpio</code>文件</td>
</tr>
<tr>
<td>CpioArchiveInputStream</td>
<td>解包解压<code>*.cpio</code>文件</td>
</tr>
<tr>
<td>ArArchiveOutputStream</td>
<td>归档压缩<code>*.ar</code>文件</td>
</tr>
<tr>
<td>ArArchiveInputStream</td>
<td>解包解压<code>*.ar</code>文件</td>
</tr>
<tr>
<td>ArjArchiveInputStream</td>
<td>解包解压<code>*.arj</code>文件</td>
</tr>
<tr>
<td>SevenZOutputFile</td>
<td>归档压缩<code>*.7z</code>文件</td>
</tr>
<tr>
<td>SevenZFile</td>
<td>解包解压<code>*.7z</code>文件</td>
</tr>
</tbody></table>
<p>其中zip，jar，cpio，ar，7z既支持归档也支持压缩，能在归档的过程中做压缩处理。</p>
<p>由于他们会处理一个个零散的文件，所以会有ArchiveEntry的概念，即一个ArchiveEntry代表归档包内的一个目录或文件。</p>
<h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><p>tar是Unix和Linux系统上的常用的压缩归档工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为”tar”。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// tar压缩</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tar</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">File</span> <span class="hljs-variable">srcDir</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/test&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">targetFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.tar&quot;</span>;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">TarArchiveOutputStream</span> <span class="hljs-variable">tos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveOutputStream</span>(<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(targetFile))) &#123;<br>        tarRecursive(tos, srcDir, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 递归压缩目录下的文件和目录</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">tarRecursive</span><span class="hljs-params">(TarArchiveOutputStream tos, File srcFile, String basePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nextBasePath</span> <span class="hljs-operator">=</span> basePath + srcFile.getName() + <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-keyword">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class="hljs-comment">// 空目录</span><br>            <span class="hljs-type">TarArchiveEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveEntry</span>(srcFile, nextBasePath);<br>            tos.putArchiveEntry(entry);<br>            tos.closeArchiveEntry();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (File file : files) &#123;<br>                tarRecursive(tos, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">TarArchiveEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveEntry</span>(srcFile, basePath + srcFile.getName());<br>        tos.putArchiveEntry(entry);<br>        FileUtils.copyFile(srcFile, tos);<br>        tos.closeArchiveEntry();<br>    &#125;<br>&#125;<br><span class="hljs-comment">// tar解压</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">untar</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/test.tar&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">outPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test&quot;</span>;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">TarArchiveInputStream</span> <span class="hljs-variable">tis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveInputStream</span>(is)) &#123;<br>        TarArchiveEntry nextEntry;<br>        <span class="hljs-keyword">while</span> ((nextEntry = tis.getNextTarEntry()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nextEntry.getName();<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outPath, name);<br>            <span class="hljs-comment">//如果是目录，创建目录</span><br>            <span class="hljs-keyword">if</span> (nextEntry.isDirectory()) &#123;<br>                file.mkdir();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//文件则写入具体的路径中</span><br>                FileUtils.copyToFile(tis, file);<br>                file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="7z"><a href="#7z" class="headerlink" title="7z"></a>7z</h4><p>7z 是一种全新的压缩格式，它拥有极高的压缩比。</p>
<p>7z 格式的主要特征：</p>
<ul>
<li>开放的结构</li>
<li>高压缩比</li>
<li>强大的 AES-256 加密</li>
<li>能够兼容任意压缩、转换、加密算法</li>
<li>最高支持 16000000000 GB 的文件压缩</li>
<li>以 Unicode 为标准的文件名</li>
<li>支持固实压缩</li>
<li>支持文件头压缩</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 7z压缩</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_7z</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">SevenZOutputFile</span> <span class="hljs-variable">outputFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SevenZOutputFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/test.7z&quot;</span>))) &#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">srcFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/test&quot;</span>);<br>        _7zRecursive(outputFile, srcFile, <span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// 递归压缩目录下的文件和目录</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">_7zRecursive</span><span class="hljs-params">(SevenZOutputFile _7zFile, File srcFile, String basePath)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">nextBasePath</span> <span class="hljs-operator">=</span> basePath + srcFile.getName() + <span class="hljs-string">&quot;/&quot;</span>;<br>        <span class="hljs-comment">// 空目录</span><br>        <span class="hljs-keyword">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class="hljs-type">SevenZArchiveEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> _7zFile.createArchiveEntry(srcFile, nextBasePath);<br>            _7zFile.putArchiveEntry(entry);<br>            _7zFile.closeArchiveEntry();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (File file : files) &#123;<br>                _7zRecursive(_7zFile, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">SevenZArchiveEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> _7zFile.createArchiveEntry(srcFile, basePath + srcFile.getName());<br>        _7zFile.putArchiveEntry(entry);<br>        <span class="hljs-type">byte</span>[] bs = FileUtils.readFileToByteArray(srcFile);<br>        _7zFile.write(bs);<br>        _7zFile.closeArchiveEntry();<br>    &#125;<br>&#125;<br> <span class="hljs-comment">// 7z解压</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">un7z</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">outPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test&quot;</span>;<br>    <span class="hljs-keyword">try</span> (<span class="hljs-type">SevenZFile</span> <span class="hljs-variable">archive</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SevenZFile</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;test.7z&quot;</span>))) &#123;<br>        SevenZArchiveEntry entry;<br>        <span class="hljs-keyword">while</span> ((entry = archive.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outPath, entry.getName());<br>            <span class="hljs-keyword">if</span> (entry.isDirectory()) &#123;<br>                file.mkdirs();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (entry.hasStream()) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span> [] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span> [<span class="hljs-number">1024</span>];<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">baos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; (len = archive.read(buf)) &gt; <span class="hljs-number">0</span>;) &#123;<br>                    baos.write(buf, <span class="hljs-number">0</span>, len);<br>                &#125;<br>                FileUtils.writeByteArrayToFile(file, baos.toByteArray());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="修改归档文件"><a href="#修改归档文件" class="headerlink" title="修改归档文件"></a>修改归档文件</h3><p>有时候我们会有修改归档内文件的需求，比如添加、删除一个文件，修改其中的文件内容等，当然我们也可以全部解压出来改完后在压缩回去。这样除了代码量多一些外，归档文件大也会导致操作时间过长。那么有没有办法用代码去动态的修改归档文件里的内容呢？</p>
<p>org.apache.commons.compress.changes包下正好就提供了一些类用于动态的修改归档文件里的内容。下面看一个简单的例子</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">tarFile</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test.tar&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(tarFile);<br><span class="hljs-comment">// 替换后会覆盖原test.tar，如果是windows可能会由于文件被访问而覆盖报错</span><br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(tarFile);<br><span class="hljs-keyword">try</span> (<span class="hljs-type">TarArchiveInputStream</span> <span class="hljs-variable">tais</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveInputStream</span>(is);<br>     <span class="hljs-type">TarArchiveOutputStream</span> <span class="hljs-variable">taos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveOutputStream</span>(os)) &#123;<br>    <span class="hljs-type">ChangeSet</span> <span class="hljs-variable">changes</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeSet</span>();<br>    <span class="hljs-comment">// 删除&quot;test.tar中&quot;的&quot;dir/1.txt&quot;文件</span><br>    changes.delete(<span class="hljs-string">&quot;dir/1.txt&quot;</span>);<br>    <span class="hljs-comment">// 删除&quot;test.tar&quot;中的&quot;t&quot;目录</span><br>    changes.delete(<span class="hljs-string">&quot;t&quot;</span>);<br>    <span class="hljs-comment">// 添加文件，如果已存在则替换</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">addFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;/a.txt&quot;</span>);<br>    <span class="hljs-type">ArchiveEntry</span> <span class="hljs-variable">addEntry</span> <span class="hljs-operator">=</span> taos.createArchiveEntry(addFile, addFile.getName());<br>    <span class="hljs-comment">// add可传第三个参数：true: 已存在则替换(默认值)， false: 不替换</span><br>    changes.add(addEntry, <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(addFile));<br>    <span class="hljs-comment">// 执行修改</span><br>    <span class="hljs-type">ChangeSetPerformer</span> <span class="hljs-variable">performer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ChangeSetPerformer</span>(changes);<br>    <span class="hljs-type">ChangeSetResults</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> performer.perform(tais, taos);<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h4><p>commons-compress还提供了一些简单的工厂类用户动态的获取压缩流和归档流。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 使用factory动态获取归档流</span><br><span class="hljs-type">ArchiveStreamFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArchiveStreamFactory</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">archiveName</span> <span class="hljs-operator">=</span> ArchiveStreamFactory.TAR;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/in.tar&quot;</span>);<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;/out.tar&quot;</span>);<br><span class="hljs-comment">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class="hljs-type">ArchiveInputStream</span> <span class="hljs-variable">ais</span> <span class="hljs-operator">=</span> factory.createArchiveInputStream(archiveName, is);<br><span class="hljs-type">ArchiveOutputStream</span> <span class="hljs-variable">aos</span> <span class="hljs-operator">=</span> factory.createArchiveOutputStream(archiveName, os);<br><span class="hljs-comment">// 其他业务操作</span><br><br><span class="hljs-comment">// ------------------------</span><br><br><span class="hljs-comment">// 使用factory动态获取压缩流</span><br><span class="hljs-type">CompressorStreamFactory</span> <span class="hljs-variable">factory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CompressorStreamFactory</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">compressName</span> <span class="hljs-operator">=</span> CompressorStreamFactory.GZIP;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/in.gz&quot;</span>);<br><span class="hljs-type">OutputStream</span> <span class="hljs-variable">os</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;/out.gz&quot;</span>);<br><span class="hljs-comment">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class="hljs-type">CompressorInputStream</span> <span class="hljs-variable">cis</span> <span class="hljs-operator">=</span> factory.createCompressorInputStream(compressName, is);<br><span class="hljs-type">CompressorOutputStream</span> <span class="hljs-variable">cos</span> <span class="hljs-operator">=</span> factory.createCompressorOutputStream(compressName, os);<br><span class="hljs-comment">// 其他业务操作</span><br></code></pre></td></tr></table></figure>

<h4 id="同时解压解包"><a href="#同时解压解包" class="headerlink" title="同时解压解包"></a>同时解压解包</h4><p>上面说了很多都是单一的操作，那么如果解压”test.tar.gz”这种归档和压缩于一体的文件呢？</p>
<p>其实很简单，我们不需要先解压在解包，可以一步同时完成解压和解包，只需要将对应的流包装一下即可（不得不感叹Java IO的装饰者模式设计真的很巧妙）。下面看代码示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 解压 解包test.tar.gz文件</span><br><span class="hljs-type">String</span> <span class="hljs-variable">outPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/test&quot;</span>;<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;/test.tar.gz&quot;</span>);<br><span class="hljs-comment">// 先解压，所以需要先用gzip流包装文件流</span><br><span class="hljs-type">CompressorInputStream</span> <span class="hljs-variable">gis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">GzipCompressorInputStream</span>(is);<br><span class="hljs-comment">// 在解包，用tar流包装gzip流</span><br><span class="hljs-keyword">try</span> (<span class="hljs-type">ArchiveInputStream</span> <span class="hljs-variable">tgis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TarArchiveInputStream</span>(gis)) &#123;<br>    ArchiveEntry nextEntry;<br>    <span class="hljs-keyword">while</span> ((nextEntry = tgis.getNextEntry()) != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nextEntry.getName();<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outPath, name);<br>        <span class="hljs-comment">// 如果是目录，创建目录</span><br>        <span class="hljs-keyword">if</span> (nextEntry.isDirectory()) &#123;<br>            file.mkdir();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 文件则写入具体的路径中</span><br>            FileUtils.copyToFile(tgis, file);<br>            file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="Commons-Configuration"><a href="#Commons-Configuration" class="headerlink" title="Commons Configuration"></a>Commons Configuration</h2><p>是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载配置信息。</p>
<h2 id="Commons-CSV"><a href="#Commons-CSV" class="headerlink" title="Commons CSV"></a>Commons CSV</h2><p>是一个用来读写各种Comma Separated Value(CSV)格式文件的Java类库。</p>
<h2 id="Commons-Daemon"><a href="#Commons-Daemon" class="headerlink" title="Commons Daemon"></a>Commons Daemon</h2><p>实现将普通的Java应用变成系统的后台服务,例如 Tomcat 就是利用这个项目来实现作为 Linux 和 Windows 的服务启动和停止的。</p>
<h2 id="Commons-DBCP"><a href="#Commons-DBCP" class="headerlink" title="Commons DBCP"></a>Commons DBCP</h2><p>数据库连接池。</p>
<h2 id="Commons-DBUtils"><a href="#Commons-DBUtils" class="headerlink" title="Commons DBUtils"></a>Commons DBUtils</h2><p>是JDBC工具组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。</p>
<h2 id="Commons-Digester"><a href="#Commons-Digester" class="headerlink" title="Commons Digester"></a>Commons Digester</h2><p>是XML到Java对象的映射工具集。</p>
<h2 id="Commons-Email"><a href="#Commons-Email" class="headerlink" title="Commons Email"></a>Commons Email</h2><p>是邮件操作组件，对Java Mail API进行了封装，提供了常用的邮件发送和接收类，简化邮件操作。该组件依赖Java Mail API。</p>
<h2 id="Commons-Exec"><a href="#Commons-Exec" class="headerlink" title="Commons Exec"></a>Commons Exec</h2><p>提供一些常用的方法用来执行外部进程，如执行exe文件或命令行。</p>
<h2 id="Commons-FileUpload"><a href="#Commons-FileUpload" class="headerlink" title="Commons FileUpload"></a>Commons FileUpload</h2><p>为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。</p>
<h2 id="Commons-IO"><a href="#Commons-IO" class="headerlink" title="Commons IO"></a>Commons IO</h2><p>是处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。</p>
<h2 id="Commons-JCI"><a href="#Commons-JCI" class="headerlink" title="Commons JCI"></a>Commons JCI</h2><p>提供通用的Java编译器接口。</p>
<h2 id="Commons-Lang3"><a href="#Commons-Lang3" class="headerlink" title="Commons Lang3"></a>Commons Lang3</h2><p>是处理Java基本对象方法的工具类包，该类包提供对字符、数组等基本对象的操作，弥补了java.lang api基本处理方法上的不足。</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html">API 文档</a></li>
</ul>
<table>
<thead>
<tr>
<th>工具类</th>
<th>简介</th>
</tr>
</thead>
<tbody><tr>
<td>ArrayUtils</td>
<td>用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等</td>
</tr>
<tr>
<td>BitField</td>
<td>用于操作位元，提供了一些方便而安全的方法</td>
</tr>
<tr>
<td>BooleanUtils</td>
<td>用于操作和转换boolean或者Boolean及相应的数组</td>
</tr>
<tr>
<td>CharEncoding</td>
<td>包含了Java环境支持的字符编码，提供是否支持某种编码的判断</td>
</tr>
<tr>
<td>CharRange</td>
<td>用于设定字符范围并做相应检查</td>
</tr>
<tr>
<td>CharSet</td>
<td>用于设定一组字符作为范围并做相应检查</td>
</tr>
<tr>
<td>CharSetUtils</td>
<td>用于操作CharSet</td>
</tr>
<tr>
<td>CharUtils</td>
<td>用于操作char值和Character对象</td>
</tr>
<tr>
<td>ClassUtils</td>
<td>用于对Java类的操作，不使用反射</td>
</tr>
<tr>
<td>ObjectUtils</td>
<td>用于操作Java对象，提供null安全的访问和其他一些功能</td>
</tr>
<tr>
<td>RandomStringUtils</td>
<td>用于生成随机的字符串</td>
</tr>
<tr>
<td>SerializationUtils</td>
<td>用于处理对象序列化，提供比一般Java序列化更高级的处理能力</td>
</tr>
<tr>
<td>StringEscapeUtils</td>
<td>用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码</td>
</tr>
<tr>
<td>StringUtils</td>
<td>处理String的核心类，提供了相当多的功能</td>
</tr>
<tr>
<td>SystemUtils</td>
<td>在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断</td>
</tr>
<tr>
<td>Validate</td>
<td>提供验证的操作，有点类似assert断言</td>
</tr>
<tr>
<td>WordUtils</td>
<td>用于处理单词大小写、换行等</td>
</tr>
</tbody></table>
<h2 id="Commons-Logging"><a href="#Commons-Logging" class="headerlink" title="Commons Logging"></a>Commons Logging</h2><p>提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。类包给中间件&#x2F;日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。</p>
<h2 id="Commons-Math"><a href="#Commons-Math" class="headerlink" title="Commons Math"></a>Commons Math</h2><p>轻量级自容器的数学和统计计算方法类包，包含大多数常用的数值算法。</p>
<h2 id="Commons-Net"><a href="#Commons-Net" class="headerlink" title="Commons Net"></a>Commons Net</h2><p>封装了各种网络协议的客户端，支持FTP、NNTP、SMTP、POP3、Telnet等协议。</p>
<h2 id="Commons-Pool"><a href="#Commons-Pool" class="headerlink" title="Commons Pool"></a>Commons Pool</h2><p>提供了一整套用于实现对象池化的框架，以及若干各具特色的对象池实现，可以有效地减少处理对象池化时的工作量。类包用于提高像文件句柄、数据库连接、socket通信这类大对象的调用效率，简单的说就是一种对象一次创建多次使用的技术。</p>
<h2 id="Commons-Primitives"><a href="#Commons-Primitives" class="headerlink" title="Commons Primitives"></a>Commons Primitives</h2><p>提供了一个更小，更快和更易使用的对Java基本类型的支持。</p>
<h2 id="Commons-Validator"><a href="#Commons-Validator" class="headerlink" title="Commons Validator"></a>Commons Validator</h2><p>提供了一个简单的、可扩展的框架来在一个XML文件中定义校验器(校验方法)和校验规则。支持校验规则的和错误消息的国际化。</p>
<h2 id="Apache-HttpClient"><a href="#Apache-HttpClient" class="headerlink" title="Apache HttpClient"></a>Apache HttpClient</h2><p>曾经是Apache Commons的子项目，后来独立出来。HttpClient简化HTTP客户端与服务器的各种通讯，实现HTTP客户端程序（也就是浏览器程序）的功能。</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>工具类</tag>
        <tag>Apache Common</tag>
      </tags>
  </entry>
  <entry>
    <title>Google Guava</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Google%20Guava/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 <code>[collections]</code> 、缓存<code> [caching]</code> 、原生类型支持 <code>[primitives support]</code> 、并发库<code> [concurrency libraries]</code> 、通用注解<code> [common annotations]</code> 、字符串处理<code> [string processing]</code> 、<code>I/O</code> 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。</p>
<p>guava的优点：</p>
<ul>
<li>高效设计良好的API，被Google的开发者设计，实现和使用</li>
<li>遵循高效的java语法实践</li>
<li>使代码更刻度，简洁，简单</li>
<li>节约时间，资源，提高生产力</li>
</ul>
<h1 id="推荐网址"><a href="#推荐网址" class="headerlink" title="推荐网址"></a>推荐网址</h1><ul>
<li><a href="https://github.com/google/guava/wiki/Home">Guava Wiki</a></li>
<li><a href="https://guava.dev/releases/snapshot-jre/api/docs/">Guava API Doc</a></li>
<li><a href="https://github.com/google/guava">Guava Github</a></li>
<li><a href="http://ifeve.com/google-guava/">Guava 中文教程 - ifeve.com</a></li>
</ul>
<h1 id="使用Guava"><a href="#使用Guava" class="headerlink" title="使用Guava"></a>使用Guava</h1><blockquote>
<p>注意：JDK 1.8 or higher.</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.guava<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>guava<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>28.2-jre<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>  <span class="hljs-comment">&lt;!-- or, for Android: --&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>28.2-android<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h1 id="内容简介"><a href="#内容简介" class="headerlink" title="内容简介"></a>内容简介</h1><h2 id="基本工具-Basic-utilities"><a href="#基本工具-Basic-utilities" class="headerlink" title="基本工具 [Basic utilities]"></a>基本工具 <code>[Basic utilities]</code></h2><p>让使用Java语言变得更舒适</p>
<h3 id="Optional"><a href="#Optional" class="headerlink" title="Optional"></a>Optional</h3><blockquote>
<p> 使用和避免null：null是模棱两可的，会引起令人困惑的错误，有些时候它让人很不舒服。很多Guava工具类用快速失败拒绝null值，而不是盲目地接受</p>
</blockquote>
<p>Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）。</p>
<p>这里讲的optional 也是指jdk中的optional，其实二者类似，但是编码使用gauva的optional，阿里巴巴编程规范会提醒换成jdk自带的optional。</p>
<p>这里强调一下Optional的用法。</p>
<ul>
<li><strong>不要用isPressent判断一个对象是否为空</strong><br>这种用法不但没有减少null的防御性检查，而且增加了Optional包装的过程，违背了Optional设计的初衷，因此开发中要避免这种糟糕的使用</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> <span class="hljs-title class_">TestEnum</span> &#123;<br>    <span class="hljs-comment">/***</span><br><span class="hljs-comment">     * 编号和对应的名称</span><br><span class="hljs-comment">     */</span><br>    a(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;aname&quot;</span>),<br>    b(<span class="hljs-string">&quot;bbbb&quot;</span>, <span class="hljs-string">&quot;bname&quot;</span>),<br>    c(<span class="hljs-string">&quot;cccc&quot;</span>, <span class="hljs-string">&quot;cname&quot;</span>),<br>    ;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String code;<br>    <span class="hljs-meta">@Getter</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    TestEnum(String code, String name) &#123;<br>        <span class="hljs-built_in">this</span>.code = code;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getNameByCod</span><span class="hljs-params">(String code)</span> &#123;<br>        Optional&lt;String&gt; nameOfCode = Arrays.stream(TestEnum.values())<br>                .filter(item -&gt; StringUtils.equals(item.code, code))<br>                .map(TestEnum::getName)<br>                .findFirst();<br>        <span class="hljs-comment">//不要这样使用optional 这样optional的意义：优雅的处理空指针 就不存在了</span><br>        <span class="hljs-keyword">if</span> (nameOfCode.isPresent()) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不存在&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 请使用orElseThrow 和orElse</span><br>        <span class="hljs-keyword">return</span> nameOfCode.orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不存在&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li><strong>考虑让方法返回optional</strong></li>
</ul>
<p>《Effective Java》中对方法返回Optional的一些观点:</p>
<ul>
<li>容器（包括，集合，映射，数组，stream，optional）都不应该包装在Optional进行返回，返回空的容器能让客户端免于处理一个Optional</li>
<li>如果无法返回结果，且没有返回结果客户端必须进行特殊的处理，那么就应该声明返回optional</li>
<li>返回optional并不是一个不需要成本的操作，无论返回空，还是非空，使用optional作为返回值的方法都是需要初始化的，所以optional在看重性能的情况下使用不当是一种性能的浪费</li>
<li>永远不要返回基本类型对于包装类型的Optional，这需要进行基本类型-&gt;包装类型-&gt;optional的三层包装，可以使用OptionalInt，optionallong等。</li>
</ul>
<h3 id="PreConditions前置条件检查"><a href="#PreConditions前置条件检查" class="headerlink" title="PreConditions前置条件检查"></a>PreConditions前置条件检查</h3><p>前置条件: 让方法中的条件检查更简单</p>
<p>根据参数分为三种：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>没有额外参数</td>
<td>抛出的异常中没有错误消息</td>
</tr>
<tr>
<td>有一个Object对象作为额外参数</td>
<td>抛出的异常使用Object.toString() 作为错误消息</td>
</tr>
<tr>
<td>有一个String对象作为额外参数，并且有一组任意数量的附加Object对象</td>
<td>这个变种处理异常消息的方式有点类似printf，但考虑GWT的兼容性和效率，只支持%s指示符。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">test1</span><span class="hljs-params">(Integer index, List&lt;String&gt;list)</span>&#123;<br>    <span class="hljs-keyword">if</span> (Objects.isNull(index))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;index不可以为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(list))&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;list不可以为空&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (index&lt;<span class="hljs-number">0</span>||index&gt;=list.size())&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(String.format(<span class="hljs-string">&quot;越界无法获取，下标%S&quot;</span>,index));<br>    &#125;<br>    <span class="hljs-keyword">return</span> list.get(index);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">test2</span><span class="hljs-params">(Integer index, List&lt;String&gt;list)</span>&#123;<br>    Preconditions.checkNotNull(index,<span class="hljs-string">&quot;index不可以为空&quot;</span>);<br>    Preconditions.checkNotNull(list,<span class="hljs-string">&quot;list不可以为空&quot;</span>);<br>    Preconditions.checkElementIndex(index,list.size(),String.format(<span class="hljs-string">&quot;越界无法获取，下标%S&quot;</span>,index));<br>    Preconditions.checkArgument(index &gt;= <span class="hljs-number">0</span>&amp;&amp;index&lt;list.size(),<span class="hljs-string">&quot;越界无法获取，下标%S&quot;</span>,index);<br>    <span class="hljs-keyword">return</span> list.get(index);<br>&#125;<br><br></code></pre></td></tr></table></figure>

<p>test1 缺点：if看起来臃肿，优点：可用抛出我们系统的自定义异常便于前端反馈<br>test2 优点：简单直接，缺点：抛出的都是jdk中的异常，通一异常处理可能无法返回正确提示的通一结果集给前端<br>我们可用写一个带异常Class的工具类或者直接代理guava中的Predition 加一层try catch 使我其抛出我们系统的自定义异常。</p>
<h3 id="ComparisonChain和Ordering"><a href="#ComparisonChain和Ordering" class="headerlink" title="ComparisonChain和Ordering"></a>ComparisonChain和Ordering</h3><p>想象一个场景，人先根据age排序后根据height排序</p>
<h4 id="实现comparable"><a href="#实现comparable" class="headerlink" title="实现comparable"></a>实现comparable</h4><p>这是常规写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Builder</span><br><span class="hljs-meta">@NoArgsConstructor</span><br><span class="hljs-meta">@AllArgsConstructor</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">People</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Comparable</span>&lt;People&gt; &#123;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Integer height;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(People o)</span> &#123;<br>        <span class="hljs-keyword">if</span> (!Objects.equals(<span class="hljs-built_in">this</span>.age, o.age)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age - o.age;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.height - o.height;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">People</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> People.builder().build();<br>        <span class="hljs-type">People</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> People.builder().build();<br>        List&lt;People&gt; list = Arrays.asList(p1, p2);<br>        Collections.sort(list);<br>        System.out.println(list);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//你或许会写得更高级一点 如下</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(People o)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ageCompare</span> <span class="hljs-operator">=</span> Ints.compare(<span class="hljs-built_in">this</span>.age, o.age);<br>        <span class="hljs-keyword">if</span> (ageCompare==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> Ints.compare(<span class="hljs-built_in">this</span>.height, o.height);<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> ageCompare;<br>        &#125;<br>    &#125;<br><br></code></pre></td></tr></table></figure>

<p>上述代码缺点：</p>
<ul>
<li>写法繁琐  </li>
<li>忽略了空指针， return this.age - o.age; 这一句存在空指针的情况，对null进行拆箱直接NPE（NullPoint Exception，及空指针异常）  </li>
<li>维护复杂，再加一个存款，加逻辑复杂。</li>
</ul>
<h4 id="JAVA8使用Stream进行操作"><a href="#JAVA8使用Stream进行操作" class="headerlink" title="JAVA8使用Stream进行操作"></a>JAVA8使用Stream进行操作</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(People o)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">thisAge</span> <span class="hljs-operator">=</span> Optional.ofNullable(<span class="hljs-built_in">this</span>.age).orElse(Integer.MAX_VALUE);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">thisHeight</span> <span class="hljs-operator">=</span> Optional.ofNullable(<span class="hljs-built_in">this</span>.height).orElse(Integer.MAX_VALUE);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oAge</span> <span class="hljs-operator">=</span> Optional.ofNullable(o.age).orElse(Integer.MAX_VALUE);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oHeight</span> <span class="hljs-operator">=</span> Optional.ofNullable(o.height).orElse(Integer.MAX_VALUE);<br>    <span class="hljs-keyword">if</span> (thisAge!=oAge)&#123;<br>        <span class="hljs-keyword">return</span> thisAge-oAge;<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> thisHeight - oHeight;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<p>上述代码，规避了NPE,但是缺点依旧存在：</p>
<ul>
<li>Stream复杂的写法，导致语法不明显，逻辑不通俗易懂。</li>
<li>维护复杂，如果增加条件则需要变更方法。</li>
</ul>
<h4 id="ComparisonChain"><a href="#ComparisonChain" class="headerlink" title="ComparisonChain"></a>ComparisonChain</h4><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareTo</span><span class="hljs-params">(People o)</span> &#123;  <br>    <span class="hljs-keyword">return</span> ComparisonChain.start()  <br>            .compare(<span class="hljs-built_in">this</span>.getAge(), o.getAge(), Ordering.natural().nullsFirst())  <br>            .compare(<span class="hljs-built_in">this</span>.getHeight(), o.getHeight(), Ordering.natural().nullsFirst())  <br>            .result();  <br>&#125;<br></code></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>优雅的处理空指针，传入比较器 Ordering.natural().nullsFirst() 让null在最前面</li>
<li>语义化明显：先比较age 后比较 height，null在最前面</li>
<li>更易于维护，只需要加一行</li>
</ul>
<h4 id="Ordering"><a href="#Ordering" class="headerlink" title="Ordering"></a>Ordering</h4><p>Ordering是Guava流畅风格比较器Comparator的实现，它可以用来构建复杂的比较器，以完成排序的功能。</p>
<p>从实现上说Ordering实例就是一个特殊的Comparator实例。Ordering把很多基于Comparator的静态方法比如</p>
<p>Collections.max包装成自己的实例方法(非静态方法)，并且提供了链式调用方法，来定制和增强现有的比较器。</p>
<h5 id="创建排序器"><a href="#创建排序器" class="headerlink" title="创建排序器"></a>创建排序器</h5><p>常见的排序器可以由下面的静态方法创建</p>
<ul>
<li>natural()</li>
</ul>
<p>对可排序类型做自然排序，如数字按照大小，日期按照先后顺序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Lists.newArrayList(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>);<br>    list.sort(Ordering.natural());<br>    System.out.println(list.toString());<span class="hljs-comment">//[1, 3, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure>

<ul>
<li>usingToString()</li>
</ul>
<p>按对象的字符串形式做字典排序，即使用toString()返回的字符串按字典顺序进行排序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;String&gt; stringList = Lists.newArrayList(<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-string">&quot;lisi&quot;</span>,<span class="hljs-string">&quot;wangwu&quot;</span>);<br>        Collections.sort(stringList,Ordering.usingToString());<br>        System.out.println(stringList.toString());<span class="hljs-comment">//[lisi, wangwu, zhangsan]</span><br>        list.sort(Ordering.usingToString());<br>        System.out.println(list.toString());<span class="hljs-comment">//[1, 3, 5, 6, 7, 8, 9]</span><br></code></pre></td></tr></table></figure>

<ul>
<li>from()<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">User</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>());<br><span class="hljs-type">User</span> <span class="hljs-variable">lisi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>());<br>List&lt;User&gt; users =  Lists.newArrayList(zhangsan,lisi);<br><span class="hljs-comment">//按照age字段进行排序</span><br>Ordering&lt;User&gt; ordering1 = Ordering.from(Comparator.comparingInt(u -&gt; u.getAge()));<br>users.sort(ordering1);<br>System.out.println(users.toString());<br></code></pre></td></tr></table></figure></li>
</ul>
<h5 id="链式调用方法"><a href="#链式调用方法" class="headerlink" title="链式调用方法"></a>链式调用方法</h5><ul>
<li><p>reverse()<br>获取语义相反的排序器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Lists.newArrayList(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>,<span class="hljs-number">6</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>);<br>list.sort(Ordering.natural().reverse());<br>System.out.println(list.toString());<span class="hljs-comment">//[9, 8, 7, 6, 5, 3, 1]</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>nullsFirst()<br>使用当前排序器，但额外把null值排到最前面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list1 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//Collections.sort(list1); // 出现异常...</span><br>Collections.sort(list1, Ordering.natural().nullsFirst());<br>System.out.println(list1);<span class="hljs-comment">//[null, 1, 2, 3, 5, 8]</span><br></code></pre></td></tr></table></figure></li>
<li><p>nullsLast()<br>使用当前排序器，但额外把null值排到最后面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list2 = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>);<br><span class="hljs-comment">//Collections.sort(list1); // 出现异常...</span><br>Collections.sort(list1, Ordering.natural().nullsLast());<br>System.out.println(list1);<span class="hljs-comment">//[1, 2, 3, 5, 8, null]</span><br></code></pre></td></tr></table></figure></li>
<li><p>compound(Comparator)<br>成另一个比较器，以处理当前排序器中的相等情况</p>
</li>
</ul>
<p>首先按照年龄进行排序，如果年龄相同则按照薪水排序</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Comparator&lt;UserPojo&gt; objectComparator = Comparator.comparingInt(u -&gt; u.getAge());<br>        Comparator&lt;UserPojo&gt; objectComparator2 = Comparator.comparing(u -&gt; u.getSalary());<br>        Ordering&lt;UserPojo&gt; ordering1 = Ordering.from(objectComparator).compound(objectComparator2);<br>        <span class="hljs-type">UserPojo</span> <span class="hljs-variable">zhangsan</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPojo</span>(<span class="hljs-string">&quot;张三&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>(),<span class="hljs-number">1000</span>);<br>        <span class="hljs-type">UserPojo</span> <span class="hljs-variable">lisi</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPojo</span>(<span class="hljs-string">&quot;李四&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>(),<span class="hljs-number">2000</span>);<br>        <span class="hljs-type">UserPojo</span> <span class="hljs-variable">wangwu</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPojo</span>(<span class="hljs-string">&quot;王五&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>(),<span class="hljs-number">3000</span>);<br>        <span class="hljs-type">UserPojo</span> <span class="hljs-variable">amao</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserPojo</span>(<span class="hljs-string">&quot;杨猫&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Company</span>(),<span class="hljs-number">4000</span>);<br>        List&lt;UserPojo&gt; users =  Lists.newArrayList(zhangsan,lisi,wangwu,amao);<br>        users.sort(ordering1);<br>        <span class="hljs-comment">//[UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]</span><br>        System.out.println(users.toString());<br></code></pre></td></tr></table></figure>

<ul>
<li>onResultOf(Function)<br>把比较器的元素使用Function函数转化成一个值result，再对这个值应用Ordering的比较方法。result的排序顺序就是最后的排序顺序<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;UserPojo&gt; users2 =  Lists.newArrayList(zhangsan,lisi,wangwu,amao,<span class="hljs-literal">null</span>);<br>        Ordering&lt;UserPojo&gt; fOrdering = Ordering.natural().onResultOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Function</span>&lt;UserPojo, Comparable&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-meta">@Nullable</span> Comparable <span class="hljs-title function_">apply</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> UserPojo userPojo)</span> &#123;<br>                <span class="hljs-keyword">return</span> userPojo.getSalary();<br>            &#125;<br>        &#125;).nullsFirst();<br>        users2.sort(fOrdering);<br>        <span class="hljs-comment">//[null, UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]</span><br>        System.out.println(users2.toString());<br></code></pre></td></tr></table></figure></li>
</ul>
<p>注意</p>
<blockquote>
<p>注意链式排序器的调用顺序–从右往左的顺序，上面Ordering.natural().onResultOf().nullsFirst();<br>先调用apply方法获取salary值，并把salary为null的元素放到最前面，然后把剩下的进行自然排序<br>所以如果将nullsFirst放在onResultOf的左边则会报异常</p>
</blockquote>
<h5 id="运用排序器"><a href="#运用排序器" class="headerlink" title="运用排序器"></a>运用排序器</h5><ul>
<li><p>greatestOf(Iterable iterable,int k)<br>获取可迭代对象中最大的k个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; result = Ordering.natural().greatestOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)),<span class="hljs-number">2</span>);<br>       System.out.println(result);<span class="hljs-comment">//[5, 4]</span><br></code></pre></td></tr></table></figure>
</li>
<li><p>leastOf(Iterable iterable,int k)<br>对元素按照从小到大排序，并返回前k个元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; result1 = Ordering.natural().leastOf(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>)),<span class="hljs-number">2</span>);<br>System.out.println(result1);<span class="hljs-comment">//[1, 2]</span><br></code></pre></td></tr></table></figure></li>
<li><p>isOrdered(Iterable)<br>判断可迭代对象是否已按照排序器排序:允许有排序值相等的元素</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>);<br>Collections.sort(list);<br><span class="hljs-type">boolean</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> Ordering.natural().isOrdered(list);<br>System.out.println(order);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure></li>
<li><p>sortedCopy(Iterable)<br>返回一个新的已经排序的列表，原来的列表顺序不会变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; nums = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br>List&lt;Integer&gt; resultCopy = Ordering.natural().sortedCopy(nums);<br>System.out.println(resultCopy); <span class="hljs-comment">// [1, 3, 4]</span><br>System.out.println(nums); <span class="hljs-comment">// [4, 1, 3]</span><br></code></pre></td></tr></table></figure></li>
<li><p>min(E,E,…)<br>返回最小值，如果有多个，则返回第一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Ordering.natural().min(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br>System.out.println(min);<br></code></pre></td></tr></table></figure></li>
<li><p>max(E,E,…)<br>返回最大值，如果有多个，则返回第一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">Integer</span> <span class="hljs-variable">max</span> <span class="hljs-operator">=</span> Ordering.natural().max(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>);<br>System.out.println(max)<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h3><p>使用场景：</p>
<p>如定义一系列状态比如吃饭，睡觉，过马路，需要根据这个状态判断是否可以玩手机，可以在类中定义集合包装这个三个状态，如果当前状态属于三个之一那么不可以玩手机，你可以使用基本的hashset，但是hashset的元素可以被更改，导致可能方法的判断和原本的语义出现出入</p>
<p>优点</p>
<p>当对象被不可信的库调用时，不可变形式是安全的；<br>不可变对象被多个线程调用时，不存在竞态条件问题<br>不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变 形式有更好的内存利用率（分析和测试细节）；<br>不可变对象因为有固定不变，可以作为常量来安全使用</p>
<h3 id="新集合类型"><a href="#新集合类型" class="headerlink" title="新集合类型"></a>新集合类型</h3><h4 id="Multiset"><a href="#Multiset" class="headerlink" title="Multiset"></a>Multiset</h4><p>可以用两种方式看待Multiset：</p>
<ul>
<li>没有元素顺序限制的ArrayList<br>  当把Multiset看成普通的Collection时，它表现得就像无序的ArrayList<ul>
<li>add(E)添加单个给定元素</li>
<li>iterator()返回一个迭代器，包含Multiset的所有元素（包括重复的元素）</li>
<li>size()返回所有元素的总个数（包括重复的元素）</li>
<li>Map&lt;E, Integer&gt;，键为元素，值为计数0</li>
</ul>
</li>
<li>Multiset看作Map&lt;E, Integer&gt;时，它也提供了符合性能期望的查询操作：<br>  - count(Object)返回给定元素的计数。HashMultiset.count的复杂度为O(1)，TreeMultiset.count的复杂度为O(log n)。<br>  - entrySet()返回Set&lt;Multiset.Entry&gt;，和Map的entrySet类似。<br>  - elementSet()返回所有不重复元素的Set，和Map的keySet()类似。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiSetTest</span> &#123;<br><br>    <span class="hljs-comment">/****</span><br><span class="hljs-comment">     * java 8 一下</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; <span class="hljs-title function_">statisticsWordCount1</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        Map&lt;String, Integer&gt; countMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">if</span> (list == <span class="hljs-literal">null</span> || list.size() == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> countMap;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (String s : list) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">nowCount</span> <span class="hljs-operator">=</span> countMap.getOrDefault(s, <span class="hljs-number">0</span>);<br>            countMap.put(s, nowCount + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> countMap;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * java 8</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; <span class="hljs-title function_">statisticsWordCount2</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        list = Optional.ofNullable(list).orElse(Collections.emptyList());<br>        <span class="hljs-keyword">return</span> list.stream()<br>                .collect(Collectors.groupingBy(t -&gt; t,<br>                        Collectors.reducing(<span class="hljs-number">0</span>, num -&gt; <span class="hljs-number">1</span>, Integer::sum)));<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * guava api</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Integer&gt; <span class="hljs-title function_">statisticsWordCount3</span><span class="hljs-params">(List&lt;String&gt; list)</span> &#123;<br>        list = Optional.ofNullable(list).orElse(Collections.emptyList());<br>        HashMultiset&lt;String&gt; multiset = HashMultiset.create(list);<br>        System.out.println(multiset);<br>        <span class="hljs-keyword">return</span> multiset.stream()<br>                .collect(Collectors.toMap(item -&gt; item, multiset::count, BinaryOperator.maxBy(Ordering.natural())));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Map&lt;String, Integer&gt; map = statisticsWordCount3(Arrays.asList(<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>));<br>        map.forEach((k, v) -&gt; System.out.println(k + <span class="hljs-string">&quot;-&quot;</span> + v));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="SortedMultiset"><a href="#SortedMultiset" class="headerlink" title="SortedMultiset"></a>SortedMultiset</h4><p>Multiset 接口的变种，它支持高效地获取指定范围的子集。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SortMultiSetTest</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在不改变源money 元素的情况下 统计介于min和max间的钱</span><br><span class="hljs-comment">     * money中的null 视为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Float&gt; <span class="hljs-title function_">findMoneyBetween1</span><span class="hljs-params">(<span class="hljs-type">float</span> min, <span class="hljs-type">float</span> max, List&lt;Float&gt; money)</span> &#123;<br>        money = Optional.ofNullable(money).orElse(Collections.emptyList());<br>        <span class="hljs-keyword">return</span> money.stream().map(item -&gt; Optional.ofNullable(item).orElse(<span class="hljs-number">0F</span>))<br>                .filter(item -&gt; item &gt; min &amp;&amp; item &lt; max)<br>                .collect(Collectors.toList());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 在不改变源money 元素的情况下 统计介于min和max间的钱</span><br><span class="hljs-comment">     * money中的null 视为0</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Float&gt; <span class="hljs-title function_">findMoneyBetween2</span><span class="hljs-params">(<span class="hljs-type">float</span> min, <span class="hljs-type">float</span> max, List&lt;Float&gt; money)</span> &#123;<br>        money = Optional.ofNullable(money).orElse(Collections.emptyList());<br>        TreeMultiset&lt;Float&gt; treeMultiset = TreeMultiset.create(Ordering.&lt;Float&gt;natural().onResultOf(f1 -&gt; Optional.ofNullable(f1).orElse(<span class="hljs-number">0F</span>)));<br>        treeMultiset.addAll(money);<br>        <span class="hljs-keyword">return</span> Lists.newLinkedList(treeMultiset.subMultiset(min, BoundType.CLOSED, max, BoundType.CLOSED));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="Multimap"><a href="#Multimap" class="headerlink" title="Multimap"></a>Multimap</h4><p>Guava的 Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Collection&lt;Integer&gt;&gt; <span class="hljs-title function_">mergeMap1</span><span class="hljs-params">(Map&lt;String, Integer&gt; map1, Map&lt;String, Integer&gt; map2)</span> &#123;<br>    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());<br>    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());<br>    Set&lt;String&gt; allKey = Stream.of(map1.keySet(), map2.keySet()).flatMap(Collection::stream).collect(Collectors.toSet());<br>    Map&lt;String, Collection&lt;Integer&gt;&gt; resMap = Maps.newHashMap();<br>    <span class="hljs-keyword">for</span> (String key : allKey) &#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> map1.get(key);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> map2.get(key);<br>        Set&lt;Integer&gt; tempSet = Sets.newHashSet();<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(integer1)) &#123;<br>            tempSet.add(integer1);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (Objects.nonNull(integer2)) &#123;<br>            tempSet.add(integer2);<br>        &#125;<br>        resMap.put(key, tempSet);<br>    &#125;<br>    <span class="hljs-keyword">return</span> resMap;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Map&lt;String, Collection&lt;Integer&gt;&gt; <span class="hljs-title function_">mergeMap2</span><span class="hljs-params">(Map&lt;String, Integer&gt; map1, Map&lt;String, Integer&gt; map2)</span> &#123;<br>    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());<br>    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());<br>    Multimap&lt;String, Integer&gt; multimap = HashMultimap.create();<br>    map1.forEach(multimap::put);<br>    map2.forEach(multimap::put);<br>    <span class="hljs-keyword">return</span> multimap.asMap();<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h4 id="BiMap"><a href="#BiMap" class="headerlink" title="BiMap"></a>BiMap</h4><p>BiMap是特殊的Map：</p>
<ul>
<li>可以用 inverse()反转BiMap&lt;K, V&gt;的键值映射</li>
<li>保证值是唯一的，因此 values()返回Set而不是普通的Collection</li>
<li>在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。如果对特定值，你想要强制替换它的键，请使用 BiMap.forcePut(key, value)。<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BiMapLearn</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//想象这是用户id 和用户名对应map</span><br>        <span class="hljs-comment">//你需要根据id查询用户名。根据用户名查询id（用户名同样不可以重复）</span><br>        HashBiMap&lt;String, String&gt; userNameAndIdMap = HashBiMap.create();<br>        userNameAndIdMap.put(<span class="hljs-string">&quot;2017015600&quot;</span>,<span class="hljs-string">&quot;陈兴cupk&quot;</span>);<br>        userNameAndIdMap.put(<span class="hljs-string">&quot;80309525&quot;</span>,<span class="hljs-string">&quot;陈兴cmbnk&quot;</span>);<br>        <span class="hljs-comment">// 重复value 会抛出异常ava.lang.IllegalArgumentException:</span><br>        <span class="hljs-comment">// value already present: 陈兴cmbnk</span><br><span class="hljs-comment">//        userNameAndIdMap.put(&quot;309525&quot;,&quot;陈兴cmbnk&quot;);</span><br>        <span class="hljs-comment">//forcePut 可以强制替换 key -value 组合</span><br><span class="hljs-comment">//        userNameAndIdMap.forcePut(&quot;309525&quot;,&quot;陈兴cmbnk&quot;);</span><br>        System.out.println(userNameAndIdMap.get(<span class="hljs-string">&quot;2017015600&quot;</span>));<br>        System.out.println(userNameAndIdMap.inverse().get(<span class="hljs-string">&quot;陈兴cmbnk&quot;</span>));<br>        System.out.println(userNameAndIdMap.get(<span class="hljs-string">&quot;80309525&quot;</span>));<br>        <span class="hljs-comment">//set类型的key value</span><br>        Set&lt;String&gt; strings = userNameAndIdMap.keySet();<br>        Set&lt;String&gt; values = userNameAndIdMap.values();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h4 id="Table"><a href="#Table" class="headerlink" title="Table"></a>Table</h4><p>使用场景：当你需要多个字段作为key时，你可能为这个key编写一个类，重写equals和hashMap。或者使用形同Map&lt;FirstName, Map&lt;LastName, Person&gt;&gt;的map结构，前者编码繁琐，后者使用不友好（第一个get后判空，后才能左第二次get）</p>
<p>Guava为此提供了新集合类型Table，它有两个支持所有类型的键：”行”和”列”。Table提供多种视图，以便你从各种角度使用它：</p>
<p>rowMap()：用Map&lt;R, Map&lt;C, V&gt;&gt;表现Table&lt;R, C, V&gt;。同样的， rowKeySet()返回”行”的集合Set。</p>
<p>row ：用Map&lt;C, V&gt;返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。</p>
<p>类似的列访问方法：columnMap()、columnKeySet()、column。（基于列的访问会比基于的行访问稍微低效点）</p>
<p>cellSet()：用元素类型为Table.Cell的Set表现Table&lt;R, C, V&gt;。Cell类似于Map.Entry，但它是用行和列两个键区分的。</p>
<p>使用案例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TableLearn</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(getNameByAgeAndNo1(<span class="hljs-number">17</span>, <span class="hljs-string">&quot;201715600&quot;</span>));<br>        System.out.println(getNameByAgeAndNo2(<span class="hljs-number">17</span>, <span class="hljs-string">&quot;201715600&quot;</span>));<br>    &#125;<br><br>	<span class="hljs-comment">//根据年龄和编号 获取名字，编写KeyOfAgeAndNo 重写equals hashcode</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getNameByAgeAndNo1</span><span class="hljs-params">(<span class="hljs-type">int</span> age,String no)</span>&#123;<br>        HashMap&lt;KeyOfAgeAndNo, String&gt; memory = Maps.newHashMap();<br>        memory.put(KeyOfAgeAndNo.of(<span class="hljs-number">17</span>,<span class="hljs-string">&quot;201715600&quot;</span>),<span class="hljs-string">&quot;大一的陈兴&quot;</span>);<br>        memory.put(KeyOfAgeAndNo.of(<span class="hljs-number">14</span>,<span class="hljs-string">&quot;0929&quot;</span>),<span class="hljs-string">&quot;高一的陈兴&quot;</span>);<br>        memory.put(KeyOfAgeAndNo.of(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;80303697&quot;</span>),<span class="hljs-string">&quot;实习的陈兴&quot;</span>);<br><br>        <span class="hljs-keyword">return</span> Optional.ofNullable(memory.get(KeyOfAgeAndNo.of(age, no)))<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查无此人&quot;</span>));<br>    &#125;<br>	<span class="hljs-comment">//编写KeyOfAgeAndNo 重写equals hashcode</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KeyOfAgeAndNo</span>&#123;<br>        Integer age;<br>        String no;<br>        <span class="hljs-keyword">static</span> KeyOfAgeAndNo <span class="hljs-title function_">of</span><span class="hljs-params">( Integer age,String no)</span>&#123;<br>            <span class="hljs-type">KeyOfAgeAndNo</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyOfAgeAndNo</span>();<br>            res.age=age;<br>            res.no=no;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> KeyOfAgeAndNo)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-type">KeyOfAgeAndNo</span> <span class="hljs-variable">that</span> <span class="hljs-operator">=</span> (KeyOfAgeAndNo) o;<br>            <span class="hljs-keyword">return</span> Objects.equals(age, that.age) &amp;&amp;<br>                    Objects.equals(no, that.no);<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> Objects.hash(age, no);<br>        &#125;<br>    &#125;<br>	<span class="hljs-comment">//使用table </span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getNameByAgeAndNo2</span><span class="hljs-params">(<span class="hljs-type">int</span> age,String no)</span>&#123;<br>        HashBasedTable&lt;Integer ,String,String&gt;table=HashBasedTable.create();<br>        table.put(<span class="hljs-number">17</span>,<span class="hljs-string">&quot;201715600&quot;</span>,<span class="hljs-string">&quot;大一的陈兴&quot;</span>);<br>        table.put(<span class="hljs-number">14</span>,<span class="hljs-string">&quot;0929&quot;</span>,<span class="hljs-string">&quot;高一的陈兴&quot;</span>);<br>        table.put(<span class="hljs-number">20</span>,<span class="hljs-string">&quot;80303697&quot;</span>,<span class="hljs-string">&quot;实习的陈兴&quot;</span>);<br>        <span class="hljs-keyword">return</span> Optional.ofNullable(table.get(age, no))<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;查无此人&quot;</span>));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h4 id="ClassToInstanceMap"><a href="#ClassToInstanceMap" class="headerlink" title="ClassToInstanceMap"></a>ClassToInstanceMap</h4><ul>
<li>使用场景，类型指向实例，使用普通map需要</li>
<li>示例<br>  getInstanceByClass1需要进行强转因为map get方法返回object类型，不能限制key的类型<br>  getInstanceByClass2则没有这种需要 且可以限定key的类型<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassToInstanceMapLearn</span> &#123;<br><span class="hljs-comment">//静态内部类实现单例 和ClassToInstanceMap 使用没有必要关系</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SingletonHolder</span> &#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ClassToInstanceMapLearn INSTANCE;<br><br>        <span class="hljs-keyword">static</span> &#123;<br>            INSTANCE = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassToInstanceMapLearn</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ClassToInstanceMapLearn</span><span class="hljs-params">()</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;ClassToInstanceMapLearn Constructor&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClassToInstanceMapLearn <span class="hljs-title function_">newInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SingletonHolder.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Map&lt;Class&lt;?&gt;, ? <span class="hljs-built_in">super</span> ClassToInstanceMapLearn&gt; Memory1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Memory1.put(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());<br>        <span class="hljs-comment">//加入从 简单工场拿SingletonHolder实例 强转化 将抛出异常</span><br>        Memory1.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassToInstanceMapLearn</span>&gt; T <span class="hljs-title function_">getInstanceByClass1</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">//需要强转需要去判断 是否是clazz的实例 错误写法</span><br>        <span class="hljs-keyword">return</span> (T) Optional.ofNullable(Memory1.get(clazz))<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不存在&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ClassToInstanceMap&lt;? <span class="hljs-built_in">super</span> ClassToInstanceMapLearn&gt; Memory2 = MutableClassToInstanceMap.create();<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        Memory2.putInstance(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());<br>        <span class="hljs-comment">//无法加入</span><br><span class="hljs-comment">//        Memory2.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassToInstanceMapLearn</span>&gt; T <span class="hljs-title function_">getInstanceByClass2</span><span class="hljs-params">(Class&lt;T&gt; clazz)</span> &#123;<br>        <span class="hljs-comment">//不需要强转</span><br>        <span class="hljs-keyword">return</span> Optional.ofNullable(Memory2.getInstance(clazz))<br>                .orElseThrow(() -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;不存在&quot;</span>));<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        System.out.println(getInstanceByClass1(ClassToInstanceMapLearn.class));<br>         System.out.println(getInstanceByClass2(ClassToInstanceMapLearn.class));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="集合-Collections"><a href="#集合-Collections" class="headerlink" title="集合[Collections]"></a>集合<code>[Collections]</code></h2><p>Guava对JDK集合的扩展，这是Guava最成熟和为人所知的部分<br>guava 中的集合工具常常以集合名称加s出现</p>
<ul>
<li>Collections2 因为java存在Collections guava加了2</li>
<li>Lists</li>
<li>Maps</li>
<li>Sets<br>等等 上面介绍的新集合类型也存在对应的工具类<br>这些工具类的共性<strong>都存在静态工厂方法</strong><br>为什么要使用静态工厂方法，它相比于构造方法（这里的静态工厂方法不是指，设计模式中的工厂模式）<br>《Effective Java》第一条 使用静态工厂方法代替构造器，给予了解答</li>
<li>静态工厂方法有名字<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//这一句是什么意思</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">big1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">10</span>));<br>System.out.println(big1);<br><span class="hljs-comment">//这一句又是什么意思</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">big2</span> <span class="hljs-operator">=</span> BigInteger.probablePrime(<span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>(<span class="hljs-number">10</span>));<br>System.out.println(big2);<br></code></pre></td></tr></table></figure></li>
<li>静态工厂方法，不必每次都生成一个对象<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//虽然下面两句都在放屁，但是前者的屁更臭</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt() % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br><span class="hljs-comment">//每次生成一个新对象</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Boolean</span>(flag);<br><span class="hljs-comment">//不会生成新对象</span><br><span class="hljs-type">Boolean</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> Boolean.valueOf(flag);<br></code></pre></td></tr></table></figure></li>
<li>静态工厂方法可以返回任何原返回类型的子类型，如guava中的api</li>
<li>静态工厂的返回对象的类可也随着每次调用而变化，取决于入参类似于简单工厂模式</li>
<li>静态工厂方法返回的对象所属的类可以在，在编写百行该静态工厂方法的类时不存在，如JDBC数据库连接</li>
</ul>
<h3 id="Collections2"><a href="#Collections2" class="headerlink" title="Collections2"></a>Collections2</h3><ul>
<li>过滤<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">filterLearn</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">null</span>);<br>    Collection&lt;Integer&gt; filter = Collections2.filter(list, Objects::nonNull);<br>    System.out.println(list);<br>    System.out.println(filter);<br>    <span class="hljs-comment">//返回一个继承了AbstractCollection的集合</span><br>    System.out.println(filter.getClass());<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>转换<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Collections2Test</span> &#123;<br>    <span class="hljs-keyword">private</span> Integer nums;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Collections2Test</span><span class="hljs-params">(Integer nums)</span> &#123;<br>        <span class="hljs-built_in">this</span>.nums = nums;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">transformLearn</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">Collections2Test</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collections2Test</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-type">Collections2Test</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> ne <span class="hljs-title function_">Collections2Test</span><span class="hljs-params">(<span class="hljs-number">2</span>)</span>;<br>        <span class="hljs-type">Collections2Test</span> <span class="hljs-variable">c3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Collections2Test</span>(<span class="hljs-number">3</span>);<br>        List&lt;Collections2Test&gt; list = Arrays.asList(c1, c2, c3);<br>        Collection&lt;Integer&gt; transform = Collections2.transform(list,<br>                t -&gt; Optional.ofNullable(t)<br>                        .orElse(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Collections2Test</span>(<span class="hljs-number">0</span>)).nums);<br>        System.out.println(transform);<br>        System.out.println(transform.getClass());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li>
<li>全排列<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ArrayList&lt;Integer&gt; list = Lists.newArrayList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>    Collection&lt;List&lt;Integer&gt;&gt; lists = Collections2.orderedPermutations(list);<br>    lists.forEach(System.out::println);<br>    Collection&lt;List&lt;Integer&gt;&gt; permutations = Collections2.permutations(list);<br>    System.out.println(<span class="hljs-string">&quot;====&quot;</span>);<br>    permutations.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><ul>
<li>切割<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//获取一个字符串中的全部字符，返回不可变集合</span><br>ImmutableList&lt;Character&gt; chars = Lists.charactersOf(<span class="hljs-string">&quot;123&quot;</span>);<br>System.out.println(chars);<br><span class="hljs-comment">//按照大小分割list</span><br>ArrayList&lt;Integer&gt; intList = Lists.newArrayList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br>List&lt;List&lt;Integer&gt;&gt; partitionList = Lists.partition(intList, <span class="hljs-number">2</span>);<br>System.out.println(partitionList);<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><ul>
<li>交集<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HashSet&lt;Integer&gt; set1 = Sets.newHashSet(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br>HashSet&lt;Integer&gt; set2 = Sets.newHashSet(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br><span class="hljs-comment">//返回交集</span><br>Sets.SetView&lt;Integer&gt; intersection = Sets.intersection(set1, set2);<br>System.out.println(intersection);<br></code></pre></td></tr></table></figure></li>
<li>差集<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回set1中存在 s2中不存在的元素</span><br>System.out.println(Sets.difference(set1, set2));<br>System.out.println(Sets.difference(set2, set1));<br></code></pre></td></tr></table></figure></li>
<li>并集<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//返回并集</span><br>Sets.SetView&lt;Integer&gt; union = Sets.union(set1, set2);<br>System.out.println(union);<br></code></pre></td></tr></table></figure></li>
<li>过滤<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">System.out.println(Sets.filter(union, t -&gt; t % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="Maps"><a href="#Maps" class="headerlink" title="Maps"></a>Maps</h3><ul>
<li>uniqueIndex 根据传入的function生成map<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">ArrayList&lt;Integer&gt; list1 = Lists.newArrayList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br><span class="hljs-comment">//传入function根据function生成map 要求 key 不可重复</span><br>ImmutableMap&lt;String, Integer&gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);<br></code></pre></td></tr></table></figure></li>
<li>获取两个map的不同<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//如果你预计hashMap的大小请使用这个方法</span><br>HashMap&lt;String, Integer&gt; map1 = Maps.newHashMapWithExpectedSize(<span class="hljs-number">3</span>);<br>map1.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-number">1</span>);<br>map1.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-number">2</span>);<br>map1.put(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-number">3</span>);<br>map1.put(<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-number">3</span>);<br>map1.put(<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-number">5</span>);<br>ArrayList&lt;Integer&gt; list1 = Lists.newArrayList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>);<br><span class="hljs-comment">//传入function根据function生成map 要求 key 不可重复</span><br>ImmutableMap&lt;String, Integer&gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);<br>MapDifference&lt;String, Integer&gt; difference = Maps.difference(map1, integerImmutableMap);<br><span class="hljs-comment">//左边独有key</span><br>Map&lt;String, Integer&gt; mapLeft = difference.entriesOnlyOnLeft();<br><span class="hljs-comment">//右边独有key</span><br>Map&lt;String, Integer&gt; mapRight = difference.entriesOnlyOnRight();<br><span class="hljs-comment">//两个map相同key 但是不同value</span><br>Map&lt;String, MapDifference.ValueDifference&lt;Integer&gt;&gt; valueDifferenceMap = difference.entriesDiffering();<br><span class="hljs-comment">//左边map的值 有边map的值</span><br>System.out.println(valueDifferenceMap.get(<span class="hljs-string">&quot;4&quot;</span>).rightValue());<br>System.out.println(valueDifferenceMap.get(<span class="hljs-string">&quot;4&quot;</span>).leftValue());<br></code></pre></td></tr></table></figure></li>
<li>过滤<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//过滤map 中的Entries</span><br>Map&lt;String, Integer&gt; filterEntriesMap = Maps.filterEntries(map1, e -&gt; &#123;<br>    <span class="hljs-keyword">assert</span> e != <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> StringUtils.equals(e.getKey(), String.valueOf(e.getValue()));<br>&#125;);<br><span class="hljs-comment">//过滤key</span><br>Map&lt;String, Integer&gt; filterKeysMap = Maps.filterKeys(map1, StringUtils::isNotBlank);<br><span class="hljs-comment">//过滤value</span><br>Map&lt;String, Integer&gt; filterValuesMap = Maps.filterValues(map1, v -&gt; &#123;<br>    <span class="hljs-keyword">assert</span> v != <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">return</span> v % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>;<br>&#125;);<br></code></pre></td></tr></table></figure></li>
<li>根据map构造转换器<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HashBiMap&lt;String, Integer&gt; biMapForConverter = HashBiMap.create(integerImmutableMap);<br>Converter&lt;String, Integer&gt; converter = Maps.asConverter(biMapForConverter);<br>System.out.println(converter.convert(<span class="hljs-string">&quot;1&quot;</span>));<br>Iterable&lt;Integer&gt; convertRes = converter.convertAll(Arrays.asList(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;2&quot;</span>));<br></code></pre></td></tr></table></figure></li>
<li>转换<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Map&lt;String, String&gt; transformEntriesMap = Maps.transformEntries(map1, (key, value) -&gt; String.valueOf(map1.get(key)));<br><span class="hljs-comment">//同样还存在</span><br><span class="hljs-comment">//        Maps.transformValues()</span><br></code></pre></td></tr></table></figure></li>
</ul>
<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><h3 id="连接器-Joiner"><a href="#连接器-Joiner" class="headerlink" title="连接器[Joiner]"></a>连接器<code>[Joiner]</code></h3><p><strong>连接任何实现了Iterable结果的类型</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list = Arrays.asList(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">5</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//跳过null</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> Joiner.on(<span class="hljs-string">&quot;-&quot;</span>).skipNulls().join(list);<br>System.out.println(str1);<br><span class="hljs-comment">//用NNNN代替空</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> Joiner.on(<span class="hljs-string">&quot;-&quot;</span>).useForNull(<span class="hljs-string">&quot;NNNN&quot;</span>).join(list);<br>System.out.println(str2);<br><span class="hljs-comment">//空指针</span><br>String str3= Joiner.on(<span class="hljs-string">&quot;-&quot;</span>).join(list);<br>System.out.println(str3);<br></code></pre></td></tr></table></figure>
<ul>
<li>连接map<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">HashMap&lt;String, String&gt; map = Maps.newHashMap();<br>map.put(<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>);<br>map.put(<span class="hljs-string">&quot;b&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>);<br><span class="hljs-comment">//每一个k-v连接方式为\n  kv连接方式为-&gt;</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> Joiner.on(<span class="hljs-string">&quot;\n&quot;</span>).withKeyValueSeparator(<span class="hljs-string">&quot;-&gt;&quot;</span>).join(map);<br>System.out.println(str1);<br></code></pre></td></tr></table></figure></li>
<li>连接实现了Appendable的任何类型<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-type">StringBuilder</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> Joiner.on(<span class="hljs-string">&quot;-&quot;</span>).appendTo(<span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(), Arrays.asList(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;2&quot;</span>));<br>System.out.println(str3);<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="分割器-Splitter"><a href="#分割器-Splitter" class="headerlink" title="分割器[Splitter]"></a>分割器<code>[Splitter]</code></h3><ul>
<li>分隔成list<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String str=<span class="hljs-string">&quot;1-2  -3 - 4- - - &quot;</span>;<br>List&lt;String&gt; list1 = Splitter.fixedLength(<span class="hljs-number">2</span>).splitToList(str);<br>System.out.println(list1);<br>List&lt;String&gt; list2 = Splitter.on(<span class="hljs-string">&quot;-&quot;</span>).splitToList(str);<br>System.out.println(list2);<br>List&lt;String&gt; list3 = Splitter.on(<span class="hljs-string">&quot;-&quot;</span>).trimResults().splitToList(str);<br>System.out.println(list3);<br></code></pre></td></tr></table></figure></li>
<li>分割成map<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">String str2=<span class="hljs-string">&quot;1#2-2#3-3#1&quot;</span>;<br><span class="hljs-comment">//每一组entry使用的是-分割 k和v使用的#分割</span><br>Map&lt;String, String&gt; map = Splitter.on(<span class="hljs-string">&quot;-&quot;</span>).withKeyValueSeparator(<span class="hljs-string">&quot;#&quot;</span>).split(str2);<br>map.forEach((k,v)-&gt; System.out.println(k+<span class="hljs-string">&quot;-&gt;&quot;</span>+v));<br></code></pre></td></tr></table></figure></li>
<li>分割成Iterable<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java">Iterable&lt;String&gt; stringIterable = Splitter.on(<span class="hljs-string">&quot;-&quot;</span>).split(str);<br>stringIterable.iterator().forEachRemaining(System.out::println);<br></code></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符匹配器"><a href="#字符匹配器" class="headerlink" title="字符匹配器"></a>字符匹配器</h3><figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//删除字符</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;/1/2/3/4&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> CharMatcher.is(<span class="hljs-string">&#x27;/&#x27;</span>).removeFrom(str);<br>System.out.println(str1);<br><span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> CharMatcher.anyOf(<span class="hljs-string">&quot;/1&quot;</span>).removeFrom(str);<br>System.out.println(str2);<br><span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> CharMatcher.noneOf(<span class="hljs-string">&quot;12/&quot;</span>).removeFrom(str);<br>System.out.println(str3);<br><br><span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> CharMatcher.inRange(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>).removeFrom(str);<br>System.out.println(str4);<br><span class="hljs-comment">//替换</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str5</span> <span class="hljs-operator">=</span> CharMatcher.inRange(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>).replaceFrom(<span class="hljs-string">&quot;a1b2c3&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>System.out.println(str5);<br><span class="hljs-comment">//裁剪</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str6</span> <span class="hljs-operator">=</span> CharMatcher.inRange(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>).trimTrailingFrom(<span class="hljs-string">&quot;a1b2c3&quot;</span>);<br>System.out.println(str6);<br><span class="hljs-comment">//比对</span><br>System.out.println(CharMatcher.inRange(<span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>).matchesAllOf(<span class="hljs-string">&quot;1b2&quot;</span>));<br></code></pre></td></tr></table></figure>

<h3 id="字符集和大小写格式"><a href="#字符集和大小写格式" class="headerlink" title="字符集和大小写格式"></a>字符集和大小写格式</h3><ul>
<li>Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。</li>
<li>CaseFormat</li>
</ul>
<h2 id="缓存-Caches"><a href="#缓存-Caches" class="headerlink" title="缓存[Caches]"></a>缓存<code>[Caches]</code></h2><p>Guava Cache：本地缓存实现，支持多种缓存过期策略</p>
<h2 id="函数式风格-Functional-idioms"><a href="#函数式风格-Functional-idioms" class="headerlink" title="函数式风格[Functional idioms]"></a>函数式风格<code>[Functional idioms]</code></h2><p>Guava的函数式支持可以显著简化代码，但请谨慎使用它</p>
<h2 id="并发-Concurrency"><a href="#并发-Concurrency" class="headerlink" title="并发[Concurrency]"></a>并发<code>[Concurrency]</code></h2><p>强大而简单的抽象，让编写正确的并发代码更简单</p>
<ul>
<li>ListenableFuture：完成后触发回调的Future</li>
<li>Service框架：抽象可开启和关闭的服务，帮助你维护服务的状态逻辑</li>
</ul>
<h2 id="字符串处理-Strings"><a href="#字符串处理-Strings" class="headerlink" title="字符串处理[Strings]"></a>字符串处理<code>[Strings]</code></h2><p>非常有用的字符串工具，包括分割、连接、填充等操作</p>
<h2 id="原生类型-Primitives"><a href="#原生类型-Primitives" class="headerlink" title="原生类型[Primitives]"></a>原生类型<code>[Primitives]</code></h2><p>扩展 JDK 未提供的原生类型（如int、char）操作， 包括某些类型的无符号形式</p>
<h2 id="区间-Ranges"><a href="#区间-Ranges" class="headerlink" title="区间[Ranges]"></a>区间<code>[Ranges]</code></h2><p>可比较类型的区间API，包括连续和离散类型</p>
<h2 id="I-x2F-O"><a href="#I-x2F-O" class="headerlink" title="I&#x2F;O"></a>I&#x2F;O</h2><p>简化I&#x2F;O尤其是I&#x2F;O流和文件的操作，针对Java5和6版本</p>
<h2 id="散列-Hash"><a href="#散列-Hash" class="headerlink" title="散列[Hash]"></a>散列<code>[Hash]</code></h2><p>提供比Object.hashCode()更复杂的散列实现，并提供布鲁姆过滤器的实现</p>
<h2 id="事件总线-EventBus"><a href="#事件总线-EventBus" class="headerlink" title="事件总线[EventBus]"></a>事件总线<code>[EventBus]</code></h2><p>发布-订阅模式的组件通信，但组件不需要显式地注册到其他组件中</p>
<h2 id="数学运算-Math"><a href="#数学运算-Math" class="headerlink" title="数学运算[Math]"></a>数学运算<code>[Math]</code></h2><p>优化的、充分测试的数学工具类</p>
<h2 id="反射-Reflection"><a href="#反射-Reflection" class="headerlink" title="反射[Reflection]"></a>反射<code>[Reflection]</code></h2><p>Guava 的 Java 反射机制工具类</p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>常用类库详解</category>
      </categories>
      <tags>
        <tag>常用开发库</tag>
        <tag>工具类</tag>
        <tag>Google Guava</tag>
      </tags>
  </entry>
  <entry>
    <title>BeetlSql&amp;ProtoBuffer实践Demo</title>
    <url>/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/Beetl&amp;BeetlSql/BeetlSql&amp;ProtoBuffer%E5%AE%9E%E8%B7%B5Demo/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>由于开发架构问题，公司使用的基于SpringBoot+BeetlSql+ProtoBuffer的架子来处理业务,由于BeetlSQL和Protobuffer有些小众，特记录一下。</p>
</blockquote>
<h1 id="项目架构介绍"><a href="#项目架构介绍" class="headerlink" title="项目架构介绍"></a>项目架构介绍</h1><ul>
<li>本文采用SpringBoot+BeetlSQL+ProtoBuffer进行快速搭建开发</li>
<li>PDMAN表快速设计与维护</li>
</ul>
<h1 id="项目准备工作"><a href="#项目准备工作" class="headerlink" title="项目准备工作"></a>项目准备工作</h1><h2 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a>SQL语句</h2><blockquote>
<p>员工信息表</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `inter_employee` (<br>  `id` varchar(32) NOT NULL COMMENT &#x27;id&#x27;,<br>  `name` varchar(32) NOT NULL COMMENT &#x27;姓名&#x27;,<br>  `email` varchar(128) NOT NULL COMMENT &#x27;邮箱&#x27;,<br>  `sex` char(1) NOT NULL COMMENT &#x27;性别 0-男；1-女；2-未知&#x27;,<br>  `dept_id` bigint NOT NULL COMMENT &#x27;所属部门id&#x27;,<br>  `org_id` varchar(32) NOT NULL COMMENT &#x27;所属机构id&#x27;,<br>  `status` char(1) NOT NULL COMMENT &#x27;状态 0-无效；1-有效&#x27;,<br>  `created_by` varchar(32) DEFAULT NULL COMMENT &#x27;创建人&#x27;,<br>  `created_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `updated_by` varchar(32) DEFAULT NULL COMMENT &#x27;更新人&#x27;,<br>  `updated_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;机构员工信息&#x27;;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>员工岗位表</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs mysql">CREATE TABLE `inter_employee_job_duty` (<br>  `id` varchar(32) NOT NULL COMMENT &#x27;id&#x27;,<br>  `emp_id` varchar(32) NOT NULL COMMENT &#x27;员工ID&#x27;,<br>  `emp_job` varchar(32) NOT NULL COMMENT &#x27;员工岗位 CODE-开发；HR-人事经理&#x27;,<br>  `job_name` varchar(32) NOT NULL COMMENT &#x27;岗位名称 CODE-开发；HR-人事经理&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;机构员工岗位表 员工可能会存在多个岗位，权限以角色为主，数据权限以岗位为主,员工-岗位：one2many关系&#x27;;<br></code></pre></td></tr></table></figure>

<h2 id="相关环境"><a href="#相关环境" class="headerlink" title="相关环境"></a>相关环境</h2><ul>
<li>jdk 1.8+</li>
<li>mysql 5.7</li>
<li>Lombok</li>
</ul>
<h1 id="项目案例"><a href="#项目案例" class="headerlink" title="项目案例"></a>项目案例</h1><h2 id="项目层级"><a href="#项目层级" class="headerlink" title="项目层级"></a>项目层级</h2><figure class="highlight tex"><table><tr><td class="code"><pre><code class="hljs tex">├── pom.xml<br>├── src<br>│   ├── main<br>│   │   ├── Doc<br>│   │   ├── java<br>│   │   ├── protobuf<br>│   │   └── resources<br>│   └── test<br>│       └── java<br></code></pre></td></tr></table></figure>

<h2 id="相关依赖"><a href="#相关依赖" class="headerlink" title="相关依赖"></a>相关依赖</h2><blockquote>
<h3 id="引入springboot父项目依赖"><a href="#引入springboot父项目依赖" class="headerlink" title="引入springboot父项目依赖"></a>引入springboot父项目依赖</h3></blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.3.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<h3 id="设置相关版本"><a href="#设置相关版本" class="headerlink" title="设置相关版本"></a>设置相关版本</h3></blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.reporting.outputEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">log4jdbc.version</span>&gt;</span>1.16<span class="hljs-tag">&lt;/<span class="hljs-name">log4jdbc.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fastjson.version</span>&gt;</span>1.2.54<span class="hljs-tag">&lt;/<span class="hljs-name">fastjson.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">druid.version</span>&gt;</span>1.1.14<span class="hljs-tag">&lt;/<span class="hljs-name">druid.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<p>引入相关依赖</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring boot start --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Spring boot end --&gt;</span><br>    <span class="hljs-comment">&lt;!-- beetlSql --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.ibeetl<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>beetl-framework-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.1.81.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--监控sql日志 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.bgee.log4jdbc-log4j2<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4jdbc-log4j2-jdbc4.1<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;log4jdbc.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--Mysql依赖包 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- druid数据源驱动 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--lombok插件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- fastjson --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;fastjson.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--google protobuf 引用 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.protobuf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protobuf-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.google.protobuf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protobuf-java-util<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.6.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>

<blockquote>
<h3 id="引入ProtoBuffer和Maven编译工具"><a href="#引入ProtoBuffer和Maven编译工具" class="headerlink" title="引入ProtoBuffer和Maven编译工具"></a>引入ProtoBuffer和Maven编译工具</h3></blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 跳过单元测试 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">skipTests</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">skipTests</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.8.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">source</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">target</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-resources-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-comment">&lt;!-- set encoding to something not platform dependent --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">encoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">encoding</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.os72<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>protoc-jar-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.7.0.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">executions</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">execution</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">phase</span>&gt;</span>generate-sources<span class="hljs-tag">&lt;/<span class="hljs-name">phase</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">addProtoSources</span>&gt;</span>all<span class="hljs-tag">&lt;/<span class="hljs-name">addProtoSources</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includeStdTypes</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">includeStdTypes</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includeMavenTypes</span>&gt;</span>direct<span class="hljs-tag">&lt;/<span class="hljs-name">includeMavenTypes</span>&gt;</span><br>                        <span class="hljs-comment">&lt;!-- &lt;type&gt;java-shaded&lt;/type&gt; &lt;addSources&gt;none&lt;/addSources&gt; --&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">outputDirectory</span>&gt;</span>src/main/java<span class="hljs-tag">&lt;/<span class="hljs-name">outputDirectory</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">includeDirectories</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- &lt;include&gt;com/idasound/protobuf&lt;/include&gt; --&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">includeDirectories</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">inputDirectories</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>src/main/protobuf<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br>                            <span class="hljs-comment">&lt;!-- &lt;include&gt;$&#123;project.basedir&#125;&lt;/include&gt; --&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">inputDirectories</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">execution</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">executions</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">pluginManagement</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--This plugin&#x27;s configuration is used to store Eclipse m2e settings</span><br><span class="hljs-comment">                only. It has no influence on the Maven build itself. --&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.eclipse.m2e<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lifecycle-mapping<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">lifecycleMappingMetadata</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">pluginExecutions</span>&gt;</span><br>                            <span class="hljs-tag">&lt;<span class="hljs-name">pluginExecution</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">pluginExecutionFilter</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span><br>                                        com.github.os72<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span><br>                                        protoc-jar-maven-plugin<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">versionRange</span>&gt;</span><br>                                        [3.6.0.1,)<br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">versionRange</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">goals</span>&gt;</span><br>                                        <span class="hljs-tag">&lt;<span class="hljs-name">goal</span>&gt;</span>run<span class="hljs-tag">&lt;/<span class="hljs-name">goal</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;/<span class="hljs-name">goals</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">pluginExecutionFilter</span>&gt;</span><br>                                <span class="hljs-tag">&lt;<span class="hljs-name">action</span>&gt;</span><br>                                    <span class="hljs-tag">&lt;<span class="hljs-name">ignore</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">ignore</span>&gt;</span><br>                                <span class="hljs-tag">&lt;/<span class="hljs-name">action</span>&gt;</span><br>                            <span class="hljs-tag">&lt;/<span class="hljs-name">pluginExecution</span>&gt;</span><br>                        <span class="hljs-tag">&lt;/<span class="hljs-name">pluginExecutions</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">lifecycleMappingMetadata</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">pluginManagement</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure>

<h2 id="相关配置"><a href="#相关配置" class="headerlink" title="相关配置"></a>相关配置</h2><blockquote>
<h4 id="配置application-yml文件"><a href="#配置application-yml文件" class="headerlink" title="配置application.yml文件"></a>配置application.yml文件</h4></blockquote>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">profiles:</span><br>    <span class="hljs-attr">active:</span> <span class="hljs-string">dev</span><br>  <span class="hljs-attr">application:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">beetlSqlDemo-api</span><br><br><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">context-path:</span> <span class="hljs-string">/beetlSqlDemo</span><br></code></pre></td></tr></table></figure>

<blockquote>
<h4 id="配置dev【application-dev-yml】环境"><a href="#配置dev【application-dev-yml】环境" class="headerlink" title="配置dev【application-dev.yml】环境"></a>配置dev【application-dev.yml】环境</h4></blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">server:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br>  <span class="hljs-attr">tomcat:</span><br>    <span class="hljs-attr">max-swallow-size:</span> <span class="hljs-string">100MB</span><br><br><span class="hljs-comment">#配置数据源</span><br><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">datasource:</span><br>    <span class="hljs-attr">druid:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">com.alibaba.druid.pool.DruidDataSource</span><br>      <span class="hljs-attr">driverClassName:</span> <span class="hljs-string">net.sf.log4jdbc.sql.jdbcapi.DriverSpy</span><br>      <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:log4jdbc:mysql://localhost:3306/beetsql_Demo?serverTimezone=Asia/Shanghai&amp;characterEncoding=utf8&amp;useSSL=false&amp;&amp;allowPublicKeyRetrieval=true</span><br>      <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>      <span class="hljs-attr">password:</span> <span class="hljs-number">12345678</span><br><br>      <span class="hljs-comment"># 初始化连接大小</span><br>      <span class="hljs-attr">initial-size:</span> <span class="hljs-number">5</span><br>      <span class="hljs-comment"># 最小空闲连接数</span><br>      <span class="hljs-attr">min-idle:</span> <span class="hljs-number">5</span><br>      <span class="hljs-attr">max-active:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">max-wait:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 可关闭的空闲连接间隔时间</span><br>      <span class="hljs-attr">time-between-eviction-runs-millis:</span> <span class="hljs-number">60000</span><br>      <span class="hljs-comment"># 配置连接在池中的最小生存时间</span><br>      <span class="hljs-attr">min-evictable-idle-time-millis:</span> <span class="hljs-number">300000</span><br>      <span class="hljs-attr">validation-query:</span> <span class="hljs-string">select</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-string">from</span> <span class="hljs-string">dual</span><br>      <span class="hljs-attr">test-while-idle:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">test-on-borrow:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-attr">test-on-return:</span> <span class="hljs-literal">false</span><br>      <span class="hljs-comment"># 打开PSCache，并且指定每个连接上PSCache的大小</span><br>      <span class="hljs-attr">pool-prepared-statements:</span> <span class="hljs-literal">true</span><br>      <span class="hljs-attr">max-open-prepared-statements:</span> <span class="hljs-number">50</span><br>      <span class="hljs-attr">max-pool-prepared-statement-per-connection-size:</span> <span class="hljs-number">20</span><br>      <span class="hljs-comment"># 配置监控统计拦截的filters</span><br>      <span class="hljs-attr">filters:</span> <span class="hljs-string">stat</span><br><br>      <span class="hljs-attr">stat-view-servlet:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/druid/*</span><br>        <span class="hljs-attr">reset-enable:</span> <span class="hljs-literal">false</span><br>        <span class="hljs-attr">login-username:</span> <span class="hljs-string">admin</span><br>        <span class="hljs-attr">login-password:</span> <span class="hljs-number">123456</span><br><br>      <span class="hljs-attr">web-stat-filter:</span><br>        <span class="hljs-attr">url-pattern:</span> <span class="hljs-string">/*</span><br>        <span class="hljs-attr">exclusions:</span> <span class="hljs-string">&quot;*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*&quot;</span><br><br>  <span class="hljs-attr">servlet:</span><br>    <span class="hljs-attr">multipart:</span><br>      <span class="hljs-attr">max-file-size:</span> <span class="hljs-string">50MB</span><br>      <span class="hljs-attr">max-request-size:</span> <span class="hljs-string">50MB</span><br><br><span class="hljs-attr">sys:</span><br>  <span class="hljs-attr">log:</span><br>    <span class="hljs-attr">isSaveLog:</span> <span class="hljs-literal">true</span><br><br><span class="hljs-attr">logging:</span><br>  <span class="hljs-attr">file:</span> <span class="hljs-string">D:/logs/beetsqlDemo/dev/beetsqlDemo.log</span><br>  <span class="hljs-attr">config:</span> <span class="hljs-string">classpath:logback-dev.xml</span><br></code></pre></td></tr></table></figure>

<blockquote>
<h4 id="配置日志"><a href="#配置日志" class="headerlink" title="配置日志"></a>配置日志</h4></blockquote>
<ul>
<li><p>配置logback文件</p>
<blockquote>
<ul>
<li><p>创建log4jdbc.log4j2.properties文件</p>
</li>
<li><p>配置如下属性：</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># If you use SLF4J. First, you need to tell log4jdbc-log4j2 that you want to use the SLF4J logger</span><br><span class="hljs-attr">log4jdbc.spylogdelegator.name</span>=<span class="hljs-string">net.sf.log4jdbc.log.slf4j.Slf4jSpyLogDelegator</span><br></code></pre></td></tr></table></figure></li>
</ul>
</blockquote>
</li>
<li><p>配置logback</p>
<blockquote>
<ul>
<li><p>创建logback-dev.xml</p>
</li>
<li><p>配置如下属性：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">scan</span>=<span class="hljs-string">&quot;true&quot;</span> <span class="hljs-attr">scanPeriod</span>=<span class="hljs-string">&quot;60 seconds&quot;</span> <span class="hljs-attr">debug</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">contextName</span>&gt;</span>beetlSqlDemo<span class="hljs-tag">&lt;/<span class="hljs-name">contextName</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_HOME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;D:/logs/beetSqlDemo/dev&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;LOG_NAME&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;beetlSqlDemo&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--&lt;springProperty scope=&quot;context&quot; name=&quot;LOG_HOME&quot; source=&quot;sys.log.output.path&quot;/&gt;--&gt;</span><br><br>    <span class="hljs-comment">&lt;!--输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;console&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%black(%contextName-) %red(%d&#123;yyyy-MM-dd HH:mm:ss&#125;) %green([%thread]) %highlight(%-5level) %boldMagenta(%logger&#123;36&#125;) - %gray(%msg%n)<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">charset</span>&gt;</span>utf-8<span class="hljs-tag">&lt;/<span class="hljs-name">charset</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;FILE_LOG_OUT&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">file</span>&gt;</span>$&#123;LOG_HOME&#125;/$&#123;LOG_NAME&#125;.log<span class="hljs-tag">&lt;/<span class="hljs-name">file</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">append</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">append</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">encoder</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%contextName- %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %class&#123;36&#125; %L %M - %msg%xEx%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">encoder</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">rollingPolicy</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;$&#123;file.separator&#125;$&#123;LOG_NAME&#125;.%d&#123;yyyy-MM-dd&#125;.%i.log<span class="hljs-tag">&lt;/<span class="hljs-name">fileNamePattern</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxHistory</span>&gt;</span>180<span class="hljs-tag">&lt;/<span class="hljs-name">maxHistory</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">maxFileSize</span>&gt;</span>100MB<span class="hljs-tag">&lt;/<span class="hljs-name">maxFileSize</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">rollingPolicy</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--普通日志输出到控制台--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.wabestway&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE_LOG_OUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;com.idasound.isb&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE_LOG_OUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--监控sql日志输出 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.sqlonly&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;INFO&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE_LOG_OUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.resultset&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;ERROR&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;FILE_LOG_OUT&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.resultsettable&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;OFF&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.connection&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;OFF&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.sqltiming&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;OFF&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">logger</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;jdbc.audit&quot;</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;OFF&quot;</span> <span class="hljs-attr">additivity</span>=<span class="hljs-string">&quot;false&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;console&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">logger</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><br></code></pre></td></tr></table></figure></li>
</ul>
</blockquote>
</li>
</ul>
<h2 id="Demo实现"><a href="#Demo实现" class="headerlink" title="Demo实现"></a>Demo实现</h2><h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><blockquote>
<p>创建员工信息</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.model;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.AssignID;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.Table;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 机构员工信息</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: InterEmployee.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 13:43:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Table(name=&quot;inter_employee&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployee</span> &#123;<br>    <span class="hljs-meta">@AssignID</span><br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String name; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-keyword">private</span> String email; <span class="hljs-comment">//邮箱</span><br>    <span class="hljs-keyword">private</span> String sex; <span class="hljs-comment">//性别 0-男；1-女；2-未知</span><br>    <span class="hljs-keyword">private</span> Long deptId; <span class="hljs-comment">//所属部门id</span><br>    <span class="hljs-keyword">private</span> String orgId; <span class="hljs-comment">//所属机构id</span><br>    <span class="hljs-keyword">private</span> String status; <span class="hljs-comment">//状态 0-无效；1-有效</span><br>    <span class="hljs-keyword">private</span> String createdBy; <span class="hljs-comment">//创建人</span><br>    <span class="hljs-meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createdTime; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-keyword">private</span> String updatedBy; <span class="hljs-comment">//更新人</span><br>    <span class="hljs-meta">@JsonFormat(pattern=&quot;yyyy-MM-dd HH:mm:ss&quot;,timezone=&quot;GMT+8&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updatedTime; <span class="hljs-comment">//更新时间</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; jobDuties;<br><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<p>创建岗位表</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.model;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.AssignID;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.Table;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 机构员工岗位表 员工可能会存在多个岗位，权限以角色为主，数据权限以岗位为主,员工-岗位：one2many关系</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Title</span>: InterEmployeeJobDuty.java</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:24:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Table(name=&quot;inter_employee_job_duty&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployeeJobDuty</span> &#123;<br>    <span class="hljs-meta">@AssignID</span><br>    <span class="hljs-keyword">private</span> String id; <span class="hljs-comment">//id</span><br>    <span class="hljs-keyword">private</span> String empId; <span class="hljs-comment">//员工ID</span><br>    <span class="hljs-keyword">private</span> String empJob; <span class="hljs-comment">//员工岗位 CODE-开发；HR-人事经理</span><br>    <span class="hljs-keyword">private</span> String jobName; <span class="hljs-comment">//岗位名称 CODE-开发；HR-人事经理</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="SQL文件"><a href="#SQL文件" class="headerlink" title="SQL文件"></a>SQL文件</h3><blockquote>
<p>**BeetlSql的SQL文件扫描默认路径为resources&#x2F;sql，所以我们为了简便开发使用Beetlsql的默认配置。</p>
</blockquote>
<ul>
<li><p>在resources下创建一个名字为<em>sql</em>文件夹</p>
</li>
<li><p>增加文件，实现相关业务</p>
<blockquote>
<ul>
<li><p>interEmployeeExtra.md</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">listCols</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    t.id id, t.name name, t.email email, t.sex sex, t.dept_id deptId, t.org_id orgId, t.status status</span><br><span class="hljs-code">    , t.created_by createdBy, t.created_time createdTime, t.updated_by updatedBy, t.updated_time updatedTime</span><br><span class="hljs-code"></span><br><span class="hljs-section">queryByCondition</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    select #use(&quot;listCols&quot;)# </span><br><span class="hljs-code">    from inter_employee t</span><br><span class="hljs-code">    where #use(&quot;condition&quot;)# </span><br><span class="hljs-code"></span><br><span class="hljs-section">queryByCondition$count</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    select count(1) total,count(t.id) empNums</span><br><span class="hljs-code">    from inter_employee t</span><br><span class="hljs-code">    where #use(&quot;condition&quot;)# </span><br><span class="hljs-code"></span><br><br><span class="hljs-section">condition</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    1 = 1  </span><br><span class="hljs-code">    @if(!isEmpty(id))&#123;</span><br><span class="hljs-code">        and t.id = #id#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(name))&#123;</span><br><span class="hljs-code">        and t.name = #name#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(email))&#123;</span><br><span class="hljs-code">        and t.email = #email#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(sex))&#123;</span><br><span class="hljs-code">        and t.sex = #sex#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(deptId))&#123;</span><br><span class="hljs-code">        and t.dept_id = #deptId#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(orgId))&#123;</span><br><span class="hljs-code">        and t.org_id = #orgId#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(status))&#123;</span><br><span class="hljs-code">        and t.status = #status#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(createdBy))&#123;</span><br><span class="hljs-code">        and t.created_by = #createdBy#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(createdTime))&#123;</span><br><span class="hljs-code">        and t.created_time = #createdTime#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(updatedBy))&#123;</span><br><span class="hljs-code">        and t.updated_by = #updatedBy#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(updatedTime))&#123;</span><br><span class="hljs-code">        and t.updated_time = #updatedTime#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(jobDuties))&#123;</span><br><span class="hljs-code">        and EXISTS (SELECT 1 FROM inter_employee_job_duty jd WHERE jd.emp_id = t.id AND jd.emp_job IN (#join(jobDuties)#))</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code"></span><br><span class="hljs-section">delInterEmployeeById</span><br><span class="hljs-section">===</span><br><span class="hljs-bullet">*</span> 逻辑删除<br><br><span class="hljs-code">    update inter_employee t set t.status = &#x27;0&#x27;, t.updated_by = #updatedBy#, t.updated_time = now() where t.id = #id#</span><br><span class="hljs-code"></span><br><span class="hljs-section">batchDelInterEmployeeByIds</span><br><span class="hljs-section">===</span><br><span class="hljs-bullet">*</span> 批量逻辑删除<br><br><span class="hljs-code">    update inter_employee t set t.status = &#x27;0&#x27;, t.updated_by = #updatedBy#, t.updated_time = now() where t.id  in( #join(ids)#)</span><br></code></pre></td></tr></table></figure></li>
<li><p>interEmployeeJobDutyExtra.md</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown"><span class="hljs-section">listCols</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    t.id id, t.emp_id empId, t.emp_job empJob, t.job_name jobName</span><br><span class="hljs-code"></span><br><span class="hljs-section">queryByCondition</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    select #use(&quot;listCols&quot;)# </span><br><span class="hljs-code">    from inter_employee_job_duty t</span><br><span class="hljs-code">    where #use(&quot;condition&quot;)# </span><br><span class="hljs-code"></span><br><span class="hljs-section">queryByCondition$count</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    select count(1)</span><br><span class="hljs-code">    from inter_employee_job_duty t</span><br><span class="hljs-code">    where #use(&quot;condition&quot;)# </span><br><span class="hljs-code"></span><br><br><span class="hljs-section">condition</span><br><span class="hljs-section">===</span><br><span class="hljs-code">    1 = 1  </span><br><span class="hljs-code">    @if(!isEmpty(id))&#123;</span><br><span class="hljs-code">        and t.id = #id#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(empId))&#123;</span><br><span class="hljs-code">        and t.emp_id = #empId#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(empJob))&#123;</span><br><span class="hljs-code">        and t.emp_job = #empJob#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code">    @if(!isEmpty(jobName))&#123;</span><br><span class="hljs-code">        and t.job_name = #jobName#</span><br><span class="hljs-code">    @&#125;</span><br><span class="hljs-code"></span><br><span class="hljs-section">delInterEmployeeJobDutyById</span><br><span class="hljs-section">===</span><br><span class="hljs-bullet">*</span> 逻辑删除<br><br><span class="hljs-code">    update inter_employee_job_duty t set t.status = &#x27;0&#x27;, t.updated_by = #updatedBy#, t.updated_time = now() where t.id = #id#</span><br><span class="hljs-code"></span><br><span class="hljs-section">batchDelInterEmployeeJobDutyByIds</span><br><span class="hljs-section">===</span><br><span class="hljs-bullet">*</span> 批量逻辑删除<br><br><span class="hljs-code">    update inter_employee_job_duty t set t.status = &#x27;0&#x27;, t.updated_by = #updatedBy#, t.updated_time = now() where t.id  in( #join(ids)#)</span><br></code></pre></td></tr></table></figure></li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h3><blockquote>
<p>创建repository文件夹</p>
</blockquote>
<ul>
<li>InterEmployeeDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.repository;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.ext.MyBaseMapper;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployee;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlResource;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlStatement;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployee Dao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 13:43:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SqlResource(&quot;interEmployeeExtra&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterEmployeeDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">MyBaseMapper</span>&lt;InterEmployee&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: query      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: PageQuery </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployee&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(PageQuery query)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployee      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: List </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;InterEmployee&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(InterEmployee interEmployee)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployee      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;id,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delInterEmployeeById</span><span class="hljs-params">(String id, String updatedBy)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: batchDelAppUserByIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: updatedBy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;ids,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">batchDelInterEmployeeByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>InterEmployeeJobDutyDao</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.repository;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployeeJobDuty;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlResource;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlStatement;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.mapper.BaseMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployeeJobDuty Dao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:24:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SqlResource(&quot;interEmployeeJobDutyExtra&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterEmployeeJobDutyDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;InterEmployeeJobDuty&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: query      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: PageQuery </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(PageQuery query)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: List </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;id,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delInterEmployeeJobDutyById</span><span class="hljs-params">(String id, String updatedBy)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: batchDelAppUserByIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: updatedBy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;ids,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">batchDelInterEmployeeJobDutyByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h3><h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><ul>
<li>InterEmployeeService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.repository;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployeeJobDuty;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlResource;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.annotatoin.SqlStatement;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.mapper.BaseMapper;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployeeJobDuty Dao</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:24:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@SqlResource(&quot;interEmployeeJobDutyExtra&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterEmployeeJobDutyDao</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;InterEmployeeJobDuty&gt; &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: query      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: PageQuery </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(PageQuery query)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 不分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: List </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;id,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delInterEmployeeJobDutyById</span><span class="hljs-params">(String id, String updatedBy)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: batchDelAppUserByIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: updatedBy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: int </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@SqlStatement(params = &quot;ids,updatedBy&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">batchDelInterEmployeeJobDutyByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>InterEmployeeJobDutyService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.service;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployeeJobDuty;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployeeJobDuty Service</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:24:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterEmployeeJobDutyService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 分页查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: pageNum 页码</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: pageSize 每页数量</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: InterEmployeeJobDuty 参数对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: orderBy 排序方式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: pageQuery</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(<span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize, InterEmployeeJobDuty paramDto, String orderBy)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件查询，不分页</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryInterEmployeeJobDutyList</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: list</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> List&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryInterEmployeeJobDutyList</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询InterEmployeeJobDuty</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryInterEmployeeJobDutyById  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: id      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: void </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> InterEmployeeJobDuty <span class="hljs-title function_">queryInterEmployeeJobDutyById</span><span class="hljs-params">(String id)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存InterEmployeeJobDuty</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: queryByCondition  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveInterEmployeeJobDuty</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 更新InterEmployeeJobDuty</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: updateInterEmployeeJobDuty  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: interEmployeeJobDuty      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: boolean      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateInterEmployeeJobDuty</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 逻辑删除InterEmployeeJobDuty</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: delInterEmployeeJobDutyById  </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: id      </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: updatedBy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: boolean </span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delInterEmployeeJobDutyById</span><span class="hljs-params">(String id, String updatedBy)</span>;<br>    <br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 批量逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@Title</span>: batchDelInterEmployeeJobDutyByIds</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span>: updatedBy</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span>: boolean</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@throws</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">batchDelInterEmployeeJobDutyByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="接口实现"><a href="#接口实现" class="headerlink" title="接口实现"></a>接口实现</h4><blockquote>
<p>在service下创建impl文件夹进行service的接口实现。</p>
</blockquote>
<ul>
<li>InterEmployeeServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.service.impl;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.common.MyPageQuery;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployee;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.repository.InterEmployeeDao;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.service.InterEmployeeService;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.SQLManager;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> javax.transaction.Transactional;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployee ServiceImpl</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>:</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 13:43:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployeeServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterEmployeeService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SQLManager sqlManager;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> InterEmployeeDao interEmployeeDao;<br><br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployee&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(<span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize, InterEmployee paramDto, String orderBy)</span> &#123;<br>        PageQuery&lt;InterEmployee&gt; pageQuery = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageQuery</span>&lt;InterEmployee&gt;(pageNum, pageSize, paramDto);<br>        pageQuery.setOrderBy(orderBy);<br>        sqlManager.pageQuery(<span class="hljs-string">&quot;interEmployeeExtra.queryByCondition&quot;</span>, InterEmployee.class, pageQuery);<br>        <span class="hljs-keyword">return</span> pageQuery;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> MyPageQuery&lt;InterEmployee&gt; <span class="hljs-title function_">querySummary</span><span class="hljs-params">(<span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize, InterEmployee paramDto, String orderBy)</span> &#123;<br>        MyPageQuery&lt;InterEmployee&gt; myPageQuery = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyPageQuery</span>&lt;&gt;();<br>        PageQuery&lt;InterEmployee&gt; pageQuery = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageQuery</span>&lt;InterEmployee&gt;(pageNum, pageSize, paramDto);<br>        pageQuery.setOrderBy(orderBy);<br>        myPageQuery.setPageQuery(pageQuery);<br><br>        interEmployeeDao.pageQuery(<span class="hljs-string">&quot;queryByCondition&quot;</span>, InterEmployee.class, myPageQuery);<br><br>        <span class="hljs-keyword">return</span> myPageQuery;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> List&lt;InterEmployee&gt; <span class="hljs-title function_">queryInterEmployeeList</span><span class="hljs-params">(InterEmployee interEmployee)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeDao.queryByCondition(interEmployee);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> InterEmployee <span class="hljs-title function_">queryInterEmployeeById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> (InterEmployee) interEmployeeDao.single(id);<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveInterEmployee</span><span class="hljs-params">(InterEmployee interEmployee)</span> &#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(interEmployee.getStatus())) &#123;<br>            interEmployee.setStatus(<span class="hljs-string">&quot;1&quot;</span>);<br>        &#125;<br>        interEmployee.setCreatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        interEmployee.setUpdatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        interEmployeeDao.insert(interEmployee);<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateInterEmployee</span><span class="hljs-params">(InterEmployee interEmployee)</span> &#123;<br>        interEmployee.setUpdatedTime(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeDao.updateTemplateById(interEmployee);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delInterEmployeeById</span><span class="hljs-params">(String id, String updatedBy)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeDao.delInterEmployeeById(id, updatedBy);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">batchDelInterEmployeeByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeDao.batchDelInterEmployeeByIds(ids, updatedBy);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<ul>
<li>InterEmployeeJobDutyServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.service.impl;<br><br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployeeJobDuty;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.repository.InterEmployeeJobDutyDao;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.service.InterEmployeeJobDutyService;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.SQLManager;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> javax.transaction.Transactional;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployeeJobDuty ServiceImpl</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:24:13</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployeeJobDutyServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterEmployeeJobDutyService</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> SQLManager sqlManager;<br>    <span class="hljs-meta">@Autowired</span>  <br>    <span class="hljs-keyword">private</span> InterEmployeeJobDutyDao interEmployeeJobDutyDao;<br>    <br>    <span class="hljs-keyword">public</span> PageQuery&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryByCondition</span><span class="hljs-params">(<span class="hljs-type">long</span> pageNum, <span class="hljs-type">long</span> pageSize, InterEmployeeJobDuty paramDto, String orderBy)</span> &#123;<br>        PageQuery&lt;InterEmployeeJobDuty&gt; pageQuery = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PageQuery</span>&lt;InterEmployeeJobDuty&gt;(pageNum, pageSize, paramDto);<br>        pageQuery.setOrderBy(orderBy);<br>        sqlManager.pageQuery(<span class="hljs-string">&quot;interEmployeeJobDutyExtra.queryByCondition&quot;</span>, InterEmployeeJobDuty.class, pageQuery);<br>        <span class="hljs-keyword">return</span> pageQuery;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> List&lt;InterEmployeeJobDuty&gt; <span class="hljs-title function_">queryInterEmployeeJobDutyList</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeJobDutyDao.queryByCondition(interEmployeeJobDuty);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> InterEmployeeJobDuty <span class="hljs-title function_">queryInterEmployeeJobDutyById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeJobDutyDao.single(id);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveInterEmployeeJobDuty</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span> &#123;<br><br>        interEmployeeJobDutyDao.insert(interEmployeeJobDuty);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">updateInterEmployeeJobDuty</span><span class="hljs-params">(InterEmployeeJobDuty interEmployeeJobDuty)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeJobDutyDao.updateTemplateById(interEmployeeJobDuty);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">delInterEmployeeJobDutyById</span><span class="hljs-params">(String id, String updatedBy)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeJobDutyDao.delInterEmployeeJobDutyById(id, updatedBy);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-meta">@Transactional</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">batchDelInterEmployeeJobDutyByIds</span><span class="hljs-params">(List&lt;String&gt; ids, String updatedBy)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> interEmployeeJobDutyDao.batchDelInterEmployeeJobDutyByIds(ids, updatedBy);<br>        <span class="hljs-keyword">if</span>(result &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="ProtoBuffer"><a href="#ProtoBuffer" class="headerlink" title="ProtoBuffer"></a>ProtoBuffer</h3><blockquote>
<p>创建一个<em>protobuf</em>的文件夹，与resources、java平级</p>
</blockquote>
<ul>
<li><p>创建protobuf文件夹</p>
</li>
<li><p>创建protobuf文件</p>
<blockquote>
<ul>
<li>interEmployee.proto</li>
</ul>
</blockquote>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-keyword">package</span> beetsqlDemo;<br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;com.bossyang.beetsqlDemo.proto.api&quot;</span>;<br><span class="hljs-keyword">option</span> java_outer_classname = <span class="hljs-string">&quot;InterEmployeeProto&quot;</span>;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeDto</span> &#123;<br>    <span class="hljs-type">string</span> id = <span class="hljs-number">1</span>; <span class="hljs-comment">//id</span><br>    <span class="hljs-type">string</span> name = <span class="hljs-number">2</span>; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">string</span> email = <span class="hljs-number">3</span>; <span class="hljs-comment">//邮箱</span><br>    <span class="hljs-type">string</span> sex = <span class="hljs-number">4</span>; <span class="hljs-comment">//性别 0-男；1-女；2-未知</span><br>    <span class="hljs-type">string</span> deptId = <span class="hljs-number">5</span>; <span class="hljs-comment">//所属部门id</span><br>    <span class="hljs-type">string</span> orgId = <span class="hljs-number">6</span>; <span class="hljs-comment">//所属机构id</span><br>    <span class="hljs-type">string</span> status = <span class="hljs-number">7</span>; <span class="hljs-comment">//状态 0-无效；1-有效</span><br>    <span class="hljs-type">string</span> createdBy = <span class="hljs-number">8</span>; <span class="hljs-comment">//创建人</span><br>    <span class="hljs-type">string</span> createdTime = <span class="hljs-number">9</span>; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-type">string</span> updatedBy = <span class="hljs-number">10</span>; <span class="hljs-comment">//更新人</span><br>    <span class="hljs-type">string</span> updatedTime = <span class="hljs-number">11</span>; <span class="hljs-comment">//更新时间</span><br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeQueryReq</span> &#123;<br>    <span class="hljs-type">int64</span> page = <span class="hljs-number">1</span>; <span class="hljs-comment">//页码</span><br>    <span class="hljs-type">int64</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">//每页数量</span><br>    <span class="hljs-type">string</span> id = <span class="hljs-number">3</span>; <span class="hljs-comment">//id</span><br>    <span class="hljs-type">string</span> name = <span class="hljs-number">4</span>; <span class="hljs-comment">//姓名</span><br>    <span class="hljs-type">string</span> email = <span class="hljs-number">5</span>; <span class="hljs-comment">//邮箱</span><br>    <span class="hljs-type">string</span> sex = <span class="hljs-number">6</span>; <span class="hljs-comment">//性别 0-男；1-女；2-未知</span><br>    <span class="hljs-type">string</span> deptId = <span class="hljs-number">7</span>; <span class="hljs-comment">//所属部门id</span><br>    <span class="hljs-type">string</span> orgId = <span class="hljs-number">8</span>; <span class="hljs-comment">//所属机构id</span><br>    <span class="hljs-type">string</span> status = <span class="hljs-number">9</span>; <span class="hljs-comment">//状态 0-无效；1-有效</span><br>    <span class="hljs-type">string</span> createdBy = <span class="hljs-number">10</span>; <span class="hljs-comment">//创建人</span><br>    <span class="hljs-type">string</span> createdTime = <span class="hljs-number">11</span>; <span class="hljs-comment">//创建时间</span><br>    <span class="hljs-type">string</span> updatedBy = <span class="hljs-number">12</span>; <span class="hljs-comment">//更新人</span><br>    <span class="hljs-type">string</span> updatedTime = <span class="hljs-number">13</span>; <span class="hljs-comment">//更新时间</span><br>    <span class="hljs-keyword">repeated</span> <span class="hljs-type">string</span> jobDuties = <span class="hljs-number">14</span>;<span class="hljs-comment">//员工岗位集合</span><br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeQueryRes</span> &#123;<br>    <span class="hljs-type">int64</span> total = <span class="hljs-number">1</span>; <span class="hljs-comment">//总数</span><br>    <span class="hljs-type">int64</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">//当前列表大小</span><br>    <span class="hljs-keyword">repeated</span> InterEmployeeDto list=<span class="hljs-number">3</span>;<span class="hljs-comment">//列表</span><br>    <span class="hljs-type">int64</span> empNums = <span class="hljs-number">4</span>;<span class="hljs-comment">//员工数量</span><br>&#125;<br></code></pre></td></tr></table></figure>

<blockquote>
<ul>
<li>interEmployeeJobDuty.proto</li>
</ul>
</blockquote>
</li>
</ul>
<figure class="highlight protobuf"><table><tr><td class="code"><pre><code class="hljs protobuf">syntax = <span class="hljs-string">&quot;proto3&quot;</span>;<br><span class="hljs-keyword">package</span> beetsqlDemo;<br><span class="hljs-keyword">option</span> java_package = <span class="hljs-string">&quot;com.bossyang.beetsqlDemo.proto.api&quot;</span>;<br><span class="hljs-keyword">option</span> java_outer_classname = <span class="hljs-string">&quot;InterEmployeeJobDutyProto&quot;</span>;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeJobDutyDto</span> &#123;<br>    <span class="hljs-type">string</span> id = <span class="hljs-number">1</span>; <span class="hljs-comment">//id</span><br>    <span class="hljs-type">string</span> empId = <span class="hljs-number">2</span>; <span class="hljs-comment">//员工ID</span><br>    <span class="hljs-type">string</span> empJob = <span class="hljs-number">3</span>; <span class="hljs-comment">//员工岗位 CODE-开发；HR-人事经理</span><br>    <span class="hljs-type">string</span> jobName = <span class="hljs-number">4</span>; <span class="hljs-comment">//岗位名称 CODE-开发；HR-人事经理</span><br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeJobDutyQueryReq</span> &#123;<br>    <span class="hljs-type">int64</span> page = <span class="hljs-number">1</span>; <span class="hljs-comment">//页码</span><br>    <span class="hljs-type">int64</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">//每页数量</span><br>    <span class="hljs-type">string</span> id = <span class="hljs-number">3</span>; <span class="hljs-comment">//id</span><br>    <span class="hljs-type">string</span> empId = <span class="hljs-number">4</span>; <span class="hljs-comment">//员工ID</span><br>    <span class="hljs-type">string</span> empJob = <span class="hljs-number">5</span>; <span class="hljs-comment">//员工岗位 CODE-开发；HR-人事经理</span><br>    <span class="hljs-type">string</span> jobName = <span class="hljs-number">6</span>; <span class="hljs-comment">//岗位名称 CODE-开发；HR-人事经理</span><br>&#125;<br><span class="hljs-keyword">message </span><span class="hljs-title class_">InterEmployeeJobDutyQueryRes</span> &#123;<br>    <span class="hljs-type">int64</span> total = <span class="hljs-number">1</span>; <span class="hljs-comment">//总数</span><br>    <span class="hljs-type">int64</span> size = <span class="hljs-number">2</span>; <span class="hljs-comment">//当前列表大小</span><br>    <span class="hljs-keyword">repeated</span> InterEmployeeJobDutyDto list=<span class="hljs-number">3</span>;<span class="hljs-comment">//列表</span><br>&#125;<br></code></pre></td></tr></table></figure>

<h3 id="业务实现"><a href="#业务实现" class="headerlink" title="业务实现"></a>业务实现</h3><blockquote>
<p>创建api文件夹进行业务实现以及前端交互</p>
</blockquote>
<h4 id="业务Service"><a href="#业务Service" class="headerlink" title="业务Service"></a>业务Service</h4><h5 id="业务接口定义"><a href="#业务接口定义" class="headerlink" title="业务接口定义"></a>业务接口定义</h5><blockquote>
<p>在api下面创建service文件夹，进行业务的接口定义</p>
</blockquote>
<ul>
<li>InterEmployeeApiService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.api.service;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.common.BaseResponse;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployee;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.proto.api.InterEmployeeProto;<br><span class="hljs-keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployee ApiService</span><br><span class="hljs-comment"> * 解析&amp;校验&amp;组装</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 13:43:25</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">InterEmployeeApiService</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queryReqProto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployees</span><span class="hljs-params">(InterEmployeeProto.InterEmployeeQueryReq queryReqProto)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据条件查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> queryReqProto</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(InterEmployeeProto.InterEmployeeQueryReq queryReqProto)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id查询</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployeeById</span><span class="hljs-params">(String id)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 保存或更新</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interEmployee</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">saveOrUpdateInterEmployee</span><span class="hljs-params">(InterEmployee interEmployee)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> id</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">delInterEmployeeById</span><span class="hljs-params">(String id)</span>;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据id批量逻辑删除</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> ids</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">batchDelInterEmployeeByIds</span><span class="hljs-params">(String ids)</span>;<br>&#125;<br></code></pre></td></tr></table></figure>

<h5 id="业务接口实现"><a href="#业务接口实现" class="headerlink" title="业务接口实现"></a>业务接口实现</h5><blockquote>
<p>在service下面创建impl文件夹，进行业务接口的实现</p>
</blockquote>
<ul>
<li>InterEmployeeApiServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.api.service.impl;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSON;<br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.api.service.InterEmployeeApiService;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.common.BaseResponse;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.common.MyPageQuery;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployee;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.proto.api.InterEmployeeProto;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.service.InterEmployeeService;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.util.UuidUtil;<br><span class="hljs-keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;<br><span class="hljs-keyword">import</span> com.google.protobuf.util.JsonFormat;<br><span class="hljs-keyword">import</span> org.beetl.sql.core.engine.PageQuery;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.util.StringUtils;<br><br><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployee ApiServiceImpl</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:28:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployeeApiServiceImpl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InterEmployeeApiService</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JsonFormat.<span class="hljs-type">Parser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> JsonFormat.parser().ignoringUnknownFields();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JsonFormat.<span class="hljs-type">Printer</span> <span class="hljs-variable">printer</span> <span class="hljs-operator">=</span> JsonFormat.printer().preservingProtoFieldNames().includingDefaultValueFields();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br>    <br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> InterEmployeeService interEmployeeService;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployees</span><span class="hljs-params">(InterEmployeeProto.InterEmployeeQueryReq queryReqProto)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException &#123;<br>        <span class="hljs-type">InterEmployee</span> <span class="hljs-variable">interEmployee</span> <span class="hljs-operator">=</span> JSONObject.parseObject(JsonFormat.printer().print(queryReqProto), InterEmployee.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderBy</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; t.updated_time desc &quot;</span>;<br>        PageQuery&lt;InterEmployee&gt; pageQuery = interEmployeeService.queryByCondition(queryReqProto.getPage(), queryReqProto.getSize(), interEmployee, orderBy);<br>        InterEmployeeProto.InterEmployeeQueryRes.<span class="hljs-type">Builder</span> <span class="hljs-variable">interEmployeeRes</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeQueryRes.newBuilder();<br>        pageQuery.getList().forEach(dto -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                InterEmployeeProto.InterEmployeeDto.<span class="hljs-type">Builder</span> <span class="hljs-variable">protoDto</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeDto.newBuilder();<br>                parser.merge(JSONObject.toJSONStringWithDateFormat(dto, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>), protoDto);<br>                interEmployeeRes.addList(protoDto);<br>            &#125; <span class="hljs-keyword">catch</span> (InvalidProtocolBufferException e) &#123;<br>                logger.error(<span class="hljs-string">&quot;查询结果转proto转换异常：&quot;</span>, e);<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        interEmployeeRes.setSize(pageQuery.getPageSize());<br>        interEmployeeRes.setTotal(pageQuery.getTotalRow());<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess(JSONObject.parseObject(printer.print(interEmployeeRes.build())));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">test</span><span class="hljs-params">(InterEmployeeProto.InterEmployeeQueryReq queryReqProto)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException &#123;<br>        <span class="hljs-type">InterEmployee</span> <span class="hljs-variable">interEmployee</span> <span class="hljs-operator">=</span> JSONObject.parseObject(JsonFormat.printer().print(queryReqProto), InterEmployee.class);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">orderBy</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot; t.updated_time desc &quot;</span>;<br>        MyPageQuery&lt;InterEmployee&gt; myPageQuery = interEmployeeService.querySummary(queryReqProto.getPage(), queryReqProto.getSize(), interEmployee, orderBy);<br>        InterEmployeeProto.InterEmployeeQueryRes.<span class="hljs-type">Builder</span> <span class="hljs-variable">interEmployeeRes</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeQueryRes.newBuilder();<br>        <span class="hljs-type">PageQuery</span> <span class="hljs-variable">pageQuery</span> <span class="hljs-operator">=</span> myPageQuery.getPageQuery();<br>        pageQuery.getList().forEach(dto -&gt; &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                InterEmployeeProto.InterEmployeeDto.<span class="hljs-type">Builder</span> <span class="hljs-variable">protoDto</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeDto.newBuilder();<br>                parser.merge(JSONObject.toJSONStringWithDateFormat(dto, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>), protoDto);<br>                interEmployeeRes.addList(protoDto);<br>            &#125; <span class="hljs-keyword">catch</span> (InvalidProtocolBufferException e) &#123;<br>                logger.error(<span class="hljs-string">&quot;查询结果转proto转换异常：&quot;</span>, e);<br>                e.printStackTrace();<br>            &#125;<br>        &#125;);<br>        interEmployeeRes.setEmpNums(myPageQuery.getSummaryMap().get(<span class="hljs-string">&quot;empNums&quot;</span>));<br>        interEmployeeRes.setSize(pageQuery.getPageSize());<br>        interEmployeeRes.setTotal(pageQuery.getTotalRow());<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess(JSONObject.parseObject(printer.print(interEmployeeRes.build())));<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployeeById</span><span class="hljs-params">(String id)</span> &#123;<br>        <span class="hljs-type">InterEmployee</span> <span class="hljs-variable">interEmployee</span> <span class="hljs-operator">=</span> interEmployeeService.queryInterEmployeeById(id);<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess(JSONObject.parseObject(JSON.toJSONStringWithDateFormat(interEmployee, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">saveOrUpdateInterEmployee</span><span class="hljs-params">(InterEmployee interEmployee)</span> &#123;<br>        <span class="hljs-comment">//校验参数</span><br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(interEmployee.getId())) &#123;<span class="hljs-comment">//保存</span><br>            interEmployee.setId(UuidUtil.getUUID32());<br>            interEmployee.setCreatedBy(<span class="hljs-string">&quot;admin&quot;</span>);<br>            interEmployee.setOrgId(UuidUtil.getUUID32());<br>            interEmployeeService.saveInterEmployee(interEmployee);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//更新</span><br>            interEmployeeService.updateInterEmployee(interEmployee);<br>        &#125;<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess(JSONObject.parseObject(JSON.toJSONStringWithDateFormat(interEmployee, <span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)));<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">delInterEmployeeById</span><span class="hljs-params">(String id)</span> &#123;<br>        interEmployeeService.delInterEmployeeById(id,<span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess();<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">batchDelInterEmployeeByIds</span><span class="hljs-params">(String ids)</span> &#123;<br>        interEmployeeService.batchDelInterEmployeeByIds(Arrays.asList(ids.split(<span class="hljs-string">&quot;,&quot;</span>)), <span class="hljs-string">&quot;admin&quot;</span>);<br>        <span class="hljs-keyword">return</span> BaseResponse.setResultSuccess();<br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure>

<h4 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h4><blockquote>
<p>在api文件夹下面创建controller文件夹</p>
</blockquote>
<ul>
<li>InterEmployeeController</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.bossyang.beetsqlDemo.api.controller;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.api.service.InterEmployeeApiService;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.common.BaseResponse;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.model.InterEmployee;<br><span class="hljs-keyword">import</span> com.bossyang.beetsqlDemo.proto.api.InterEmployeeProto;<br><span class="hljs-keyword">import</span> com.google.protobuf.InvalidProtocolBufferException;<br><span class="hljs-keyword">import</span> com.google.protobuf.util.JsonFormat;<br><span class="hljs-keyword">import</span> org.apache.commons.lang3.StringUtils;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * InterEmployee 接口</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span>: </span><br><span class="hljs-comment"> * <span class="hljs-doctag">@date</span>: 2020年05月31日 16:28:46</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> V1.0</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/api&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InterEmployeeController</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(<span class="hljs-built_in">this</span>.getClass());<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> JsonFormat.<span class="hljs-type">Parser</span> <span class="hljs-variable">parser</span> <span class="hljs-operator">=</span> JsonFormat.parser().ignoringUnknownFields();<br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> InterEmployeeApiService interEmployeeApiService;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ENTITY_NAME</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;interEmployee&quot;</span>;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询机构员工信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/interEmployee/list&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployees</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String reqJson)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException &#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(reqJson)) &#123;<br>            <span class="hljs-keyword">return</span> BaseResponse.lossParam(<span class="hljs-string">&quot;reqJson&quot;</span>);<br>        &#125;<br>        InterEmployeeProto.InterEmployeeQueryReq.<span class="hljs-type">Builder</span> <span class="hljs-variable">queryReqProto</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeQueryReq.newBuilder();<br>        <span class="hljs-keyword">try</span> &#123;<br>            parser.merge(reqJson, queryReqProto);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidProtocolBufferException e) &#123;<br>            e.printStackTrace();<br>            logger.error(<span class="hljs-string">&quot;请求Json转换异常&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> BaseResponse.setResultError(<span class="hljs-string">&quot;查询异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.queryInterEmployees(queryReqProto.build());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询机构员工信息</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@PostMapping(value = &quot;/interEmployee/listTest&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployeesTest</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String reqJson)</span> <span class="hljs-keyword">throws</span> InvalidProtocolBufferException &#123;<br>        <span class="hljs-keyword">if</span>(StringUtils.isEmpty(reqJson)) &#123;<br>            <span class="hljs-keyword">return</span> BaseResponse.lossParam(<span class="hljs-string">&quot;reqJson&quot;</span>);<br>        &#125;<br>        InterEmployeeProto.InterEmployeeQueryReq.<span class="hljs-type">Builder</span> <span class="hljs-variable">queryReqProto</span> <span class="hljs-operator">=</span> InterEmployeeProto.InterEmployeeQueryReq.newBuilder();<br>        <span class="hljs-keyword">try</span> &#123;<br>            parser.merge(reqJson, queryReqProto);<br>        &#125; <span class="hljs-keyword">catch</span> (InvalidProtocolBufferException e) &#123;<br>            e.printStackTrace();<br>            logger.error(<span class="hljs-string">&quot;请求Json转换异常&quot;</span>, e);<br>            <span class="hljs-keyword">return</span> BaseResponse.setResultError(<span class="hljs-string">&quot;查询异常&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.test(queryReqProto.build());<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(value = &quot;/interEmployee/info/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">queryInterEmployeeById</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.queryInterEmployeeById(id);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(value = &quot;/interEmployee/save&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">saveInterEmployee</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> InterEmployee interEmployee)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.saveOrUpdateInterEmployee(interEmployee);<br>    &#125;<br>    <span class="hljs-meta">@PutMapping(value = &quot;/interEmployee/update&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">updateInterEmployee</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> InterEmployee interEmployee)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.saveOrUpdateInterEmployee(interEmployee);<br>    &#125;<br><br>    <span class="hljs-meta">@DeleteMapping(value = &quot;/interEmployee/del/&#123;id&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> BaseResponse&lt;JSONObject&gt; <span class="hljs-title function_">delInterEmployee</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable</span> String id)</span> &#123;<br>        <span class="hljs-keyword">return</span> interEmployeeApiService.delInterEmployeeById(id);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>

<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>启动运行application</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><blockquote>
<p>本案例采用DocwayAPI接口管理平台存储和定义接口，具体接口如下：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201007194602.png" alt="image-20201007194602045"></p>
</blockquote>
<ul>
<li>运行查询接口进行测试</li>
</ul>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201007195402.png" alt="image-20201007195402355"></p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201007195655.png" alt="image-20201007195654916"></p>
<p>响应结果：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201007195737.png" alt="image-20201007195736833"></p>
<p>后台运行结果：</p>
<p><img src="https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201007195837.png" alt="image-20201007195836747"></p>
]]></content>
      <categories>
        <category>好好码代码吖</category>
        <category>JAVA</category>
        <category>Beetl&amp;BeetlSql</category>
      </categories>
      <tags>
        <tag>BeetlSql</tag>
        <tag>Beetl</tag>
        <tag>ProtoBuffer</tag>
      </tags>
  </entry>
</search>
