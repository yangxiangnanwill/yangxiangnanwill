{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"centos\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "title": "Crontab-定时任务",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<h1 id=\"Linux-Crontab-定时任务\"><a href=\"#Linux-Crontab-定时任务\" class=\"headerlink\" title=\"Linux Crontab 定时任务\"></a>Linux Crontab 定时任务</h1><blockquote>\n<p>很多时候，我们需要定时执行某个应用或者某段脚本，在linux上，可以使用cron服务，它有点类似于Windows上的任务计划程序。</p>\n</blockquote>\n<h2 id=\"crond和crontab\"><a href=\"#crond和crontab\" class=\"headerlink\" title=\"crond和crontab\"></a>crond和crontab</h2><p>首先需要分清楚两个概念：crond和crontab。crond是后台守护进程的名称（d代表daemon），用来实际执行脚本，它在系统中是一直运行的。可以通过下面的方式查看到它：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl | grep crond<br></code></pre></td></tr></table></figure>\n\n<p>crontab是一个工具，用来列出cron中当前运行的作业（应用或脚本等）、向cron中添加作业、编辑作业、删除作业。它并不是一直在后台运行的，是一个短时的命令行工具，执行完就结束了。</p>\n<p>可以简单理解crond和crontab组合起来提供cron服务。</p>\n<p>大体流程如下：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F634d76f98ad0252888ea044489e3d5bf.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1627445494&t=e65617a03bb7ecea66217142dd0da756\" alt=\"img\"></p>\n<h2 id=\"crontab配置文件\"><a href=\"#crontab配置文件\" class=\"headerlink\" title=\"crontab配置文件\"></a>crontab配置文件</h2><p>Linux下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab命令。使用以下命令进行查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat /etc/crontab<br></code></pre></td></tr></table></figure>\n\n<p>配置文件可以看到如下解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash；第二行PATH变量指定了系统执行命令的路径；第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户；第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p>\n<h2 id=\"crontab文件含义\"><a href=\"#crontab文件含义\" class=\"headerlink\" title=\"crontab文件含义\"></a>crontab文件含义</h2><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute hour day month week command</p>\n<p><img src=\"https://www.linuxprobe.com/wp-content/uploads/2016/09/crontab.png\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>“<em>&quot;代表所有的取值范围内的数字，如月份字段为</em>，则表示1到12个月；</p>\n<p>“&#x2F;“代表每一定时间间隔的意思，如分钟字段为*&#x2F;10，表示每10分钟执行1次。</p>\n<p>“-“代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。</p>\n<p>“,”分散的数字（不一定连续），如1,2,3,4,7,9。</p>\n<p>注：由于各个地方每周第一天不一样，因此Sunday&#x3D;0（第一天）或Sunday&#x3D;7（最后1天）。</p>\n<h2 id=\"crontab命令详解\"><a href=\"#crontab命令详解\" class=\"headerlink\" title=\"crontab命令详解\"></a>crontab命令详解</h2><blockquote>\n<p>因为crond是一个守护进程，所以在系统开机后，通过<code>systemctl start crond</code>启动一次以后（默认自动启动的），几乎就不需要再管它了，之后的操作都通过crontab来完成。</p>\n</blockquote>\n<h3 id=\"查看现有任务\"><a href=\"#查看现有任务\" class=\"headerlink\" title=\"查看现有任务\"></a>查看现有任务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>no crontab for root<br></code></pre></td></tr></table></figure>\n\n<p>因为现在没有任务，所以显示的是 no crontab for root，可见，任务是根据用户进行区分的。</p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><p>为了便于测试，我们可以创建这样一个简单的脚本(位于~&#x2F;tmp&#x2F;job1.sh)：在一个文件末尾追加当前时间。脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">date +&#x27;%F %T&#x27; &gt;&gt; ~/tmp/job1.log<br></code></pre></td></tr></table></figure>\n\n<p>创建完成后记得赋予一下执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">chmod</span> 755 job1.sh</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，需要配置多久运行一次。这里通过cron表达式来设置，它非常灵活，可以很简单也可以很复杂。cron表达式的应用广泛，不止用在系统层面，在其他各种编程语言的类库当中，都有类似的实现，语法略有不同。使用下面的命令可以查看linux系统中cron表达式的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> /etc/crontab</span> <br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>如果需要查看更详细的用法，可以使用 <code># man crontab</code> 命令查看。</p>\n<p>整理后如下表所示：</p>\n<blockquote>\n<p><strong>注意：</strong>不同的cron应用存在很大差异，比如crontab不支持“秒”，特殊字符也支持的比较少（支持,-*&#x2F;）。而其他一些应用，则支持“秒”和更多的特殊字符。这里为了更完备一些，所以全都列出来了，省的以后再去总结。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">必须</th>\n<th align=\"left\">取值范围</th>\n<th align=\"left\">可设置的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">分</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-59</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">时</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-23</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(月)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-31</td>\n<td align=\"left\">,-*?&#x2F;LW</td>\n</tr>\n<tr>\n<td align=\"left\">月</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-12 或者 jan-dec</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(周)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-7（0和7都是星期天） 或者 sun-sat</td>\n<td align=\"left\">,-*?&#x2F;L#</td>\n</tr>\n<tr>\n<td align=\"left\">年</td>\n<td align=\"left\">否</td>\n<td align=\"left\">留空，1970-2099</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n</tbody></table>\n<p>几个特殊字符的含义：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">全部。意思是在该时间的任意点都应当执行</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">不指定，任意。仅用于 日(月)和日(周)。0 0 5 * ? 代表每个月的第5天零点，不论星期几。 0 0 ? * 1 代表每周一，不论是当月的哪天。</td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td align=\"left\">多个值的分隔符，例如1,5,10</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">代表连续值，例如1-20</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">步长。例如 5&#x2F;15，代表从5开始，以15为步长。因此，当5&#x2F;15位于分钟的位置时，表示小时内的第5、20、35和50分钟。</td>\n</tr>\n<tr>\n<td align=\"left\">L</td>\n<td align=\"left\">最后一天。可以是每月最后一天或者每周最后一天。如果用在 天(周)字段，并且前面加数字，则表示最后一个周N。例如5L，表示最后一个周五（5表示周五，L表示最后）。</td>\n</tr>\n<tr>\n<td align=\"left\">W</td>\n<td align=\"left\">工作日，指周一到周五的任意一天</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">表示第几个的意思，例如 6#3，表示当月第3个星期六（6表示周六，3表示第3个）</td>\n</tr>\n</tbody></table>\n<p>几个简单的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">表达式</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">* * * * *</td>\n<td align=\"left\">每分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">30 * * * *</td>\n<td align=\"left\">每小时的30分执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">*&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">0&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次，且仅在0,5,15,20…55分执行</td>\n</tr>\n<tr>\n<td align=\"left\">5 0 * * *</td>\n<td align=\"left\">每天的00:05执行一次</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意：</strong>crontab中 日(周)不接受“?”的写法，在很多其他应用中则可以，例如Quartz.Net库：<a href=\"https://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/crontrigger.html\">https://www.quartz-scheduler.net/</a></p>\n</blockquote>\n<blockquote>\n<p><strong>提示：</strong>更多的用法，可以参考：<a href=\"https://crontab.guru/\">https://crontab.guru</a></p>\n</blockquote>\n<p>接下来，如果我们想要每分钟执行一下前面创建的job1.sh脚本，需要再创建一个crontab作业(jobs.cron，后缀名无所谓，这里只是为了便于识别)，其中包含了cron表达式，用于表明job1.sh执行的周期：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<p>使用crontab将它加入到计划中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>再次查看当前计划，可以看到这样的结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除定时任务\"><a href=\"#删除定时任务\" class=\"headerlink\" title=\"删除定时任务\"></a>删除定时任务</h3><p>先将job1.sh复制一份，稍作修改，然后编辑一下jobs.cron，将job2.sh也加入进去：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>然后重新加入到cron服务中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>接着查看一下当前cron中的作业：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>可以看到上面有job1.sh和job2.sh两个作业，其效果相当于将jobs.cron文件的内容拷贝进去。</p>\n<p>如果想要删除作业，则执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -r</span><br></code></pre></td></tr></table></figure>\n\n<p>这样会删除所有作业，如果只想删除一个，或者想对作业进行编辑，可以使用下面的命令。</p>\n<h3 id=\"编辑定时任务\"><a href=\"#编辑定时任务\" class=\"headerlink\" title=\"编辑定时任务\"></a>编辑定时任务</h3><p><code>crontab -e</code> 命令会调用编辑器（通常是vi或者vim），直接编辑计划作业，相当于编辑jobs.cron。只不过编辑完立即生效，不需要再执行crontab进行加载。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -e</span><br>crontab: installing new crontab<br></code></pre></td></tr></table></figure>\n\n<p>统一期间，个人不建议使用crontab -e编辑计划，而是编辑jobs.cron，然后进行加载。这样的话jobs.cron文件相当于一个备份，方便日后恢复。</p>\n<h2 id=\"查看作业日志\"><a href=\"#查看作业日志\" class=\"headerlink\" title=\"查看作业日志\"></a>查看作业日志</h2><p>在作业执行出现异常（或作业脚本写日志）时，cron服务会输出日志，在我的CentOS7系统上，查看的地址位于&#x2F;var&#x2F;log下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> /var/log | grep cron</span><br>cron<br>cron-20180819<br>cron-20180826<br>cron-20180902<br>cron-20180909<br></code></pre></td></tr></table></figure>\n\n<p>如果想让自己编写的作业输出日志，可以这样编写jobs.cron：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh &gt;&gt; /var/log/job1.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure>\n\n<p>上面的意思是将stdout和stderr输出到&#x2F;var&#x2F;log&#x2F;job1.log。</p>\n<p>修改job1.sh，在底部加入<code>echo hello</code>。然后调用<code>crontab jobs.cron</code>重新加载，然后在&#x2F;var&#x2F;log目录下可以看到job1.log，其中包含了输出的文本“hello”。</p>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Crontab"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Jenkins/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Jenkins/",
            "title": "Jenkins",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<blockquote>\n<p>持续集成：Continuous Integration，简称CI，意思是，在一个项目中，任何人对代码库的任何改动，都会触发CI服务器自动对项目进行构建，自动运行测试，甚至自动部署到测试环境。这样做的好处就是，随时发现问题，随时修复。因为修复问题的成本随着时间的推移而增长，越早发现，修复成本越低。</p>\n</blockquote>\n<h1 id=\"持续集成工具\"><a href=\"#持续集成工具\" class=\"headerlink\" title=\"持续集成工具\"></a>持续集成工具</h1><h2 id=\"Travis-CI\"><a href=\"#Travis-CI\" class=\"headerlink\" title=\"Travis CI\"></a>Travis CI</h2><p>在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，在网页上点几下就好，用起来更方便。最重要的是，它对开源项目是免费的。私有项目会收费。</p>\n<h2 id=\"Jenkins\"><a href=\"#Jenkins\" class=\"headerlink\" title=\"Jenkins\"></a>Jenkins</h2><p>Jenkins是一个用Java编写的开源的持续集成工具。官方网站：<a href=\"https://jenkins.io/\">https://jenkins.io/</a><br>Jenkins能实时监控持续集成过程中所存在的问题，提供详细的日志文件和提醒功能，还能用图表的形式，形象地展示项目构建的趋势和稳定性。</p>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Jenkins自动化部署可以解决集成、测试、部署等重复性的工作，工具集成的效率明显高于人工操作；并且持续集成可以更早的获取代码变更的信息，从而更早的进入测试阶段，更早的发现问题，这样解决问题的成本就会显著下降：持续集成缩短了从开发、集成、测试、部署各个环节的时间，从而也就缩短了中间出现的等待时间；持续集成也意味着开发、集成、测试、部署得以持续。。<br>使用Maven（Ant）等来实现lava项目自动化构建发布部署。这些工具可以帮助在构建过程中实现自动化发布、回滚等动作。</p>\n<blockquote>\n<p>Jenkins提供Docker、war等部署方式，博猪比较倾向于yum源安装方式，同时作为一个服务启动。</p>\n</blockquote>\n<h1 id=\"安装教程\"><a href=\"#安装教程\" class=\"headerlink\" title=\"安装教程\"></a>安装教程</h1><h2 id=\"系统要求\"><a href=\"#系统要求\" class=\"headerlink\" title=\"系统要求\"></a>系统要求</h2><p>最低推荐配置:</p>\n<ul>\n<li>256MB可用内存</li>\n<li>1GB可用磁盘空间(作为一个Docker容器运行jenkins的话推荐10GB)</li>\n</ul>\n<p>为小团队推荐的硬件配置:</p>\n<ul>\n<li>1GB+可用内存</li>\n<li>50 GB+ 可用磁盘空间</li>\n</ul>\n<p>软件配置:</p>\n<ul>\n<li>Java 8—无论是Java运行时环境（JRE）还是Java开发工具包（JDK）都可以。</li>\n</ul>\n<blockquote>\n<p><strong>注意:</strong> 如果将Jenkins作为Docker 容器运行，这不是必需的</p>\n</blockquote>\n<h2 id=\"下载Jenkins\"><a href=\"#下载Jenkins\" class=\"headerlink\" title=\"下载Jenkins\"></a>下载Jenkins</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo wget -O /etc/yum.repos.d/jenkins.repo \\<br>    https://pkg.jenkins.io/redhat/jenkins.repo<br>sudo rpm --import https://pkg.jenkins.io/redhat/jenkins.io.key<br>sudo yum upgrade<br>sudo yum install epel-release java-11-openjdk-devel<br>sudo yum install jenkins<br>sudo systemctl daemon-reload<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"查看Jenkins状态\"><a href=\"#查看Jenkins状态\" class=\"headerlink\" title=\"查看Jenkins状态\"></a>查看Jenkins状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl status jenkins<br></code></pre></td></tr></table></figure>\n\n<p>如果是开启状态，关闭，以便更改配置。关闭命令如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl stop jenkins<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义配置\"><a href=\"#自定义配置\" class=\"headerlink\" title=\"自定义配置\"></a>自定义配置</h2><blockquote>\n<p>配置路径如下：  &#x2F;etc&#x2F;sysconfig</p>\n</blockquote>\n<h3 id=\"自定义配置路径\"><a href=\"#自定义配置路径\" class=\"headerlink\" title=\"自定义配置路径\"></a>自定义配置路径</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_HOME=&quot;/opt/jenkins&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义默认用户\"><a href=\"#自定义默认用户\" class=\"headerlink\" title=\"自定义默认用户\"></a>自定义默认用户</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_USER=&quot;root&quot;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义访问路径\"><a href=\"#自定义访问路径\" class=\"headerlink\" title=\"自定义访问路径\"></a>自定义访问路径</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">JENKINS_PORT=&quot;9955&quot;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"重启-amp-amp-启动Jenkins服务\"><a href=\"#重启-amp-amp-启动Jenkins服务\" class=\"headerlink\" title=\"重启&amp;&amp;启动Jenkins服务\"></a>重启&amp;&amp;启动Jenkins服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo systemctl start jenkins<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问-amp-amp-解锁Jenkins\"><a href=\"#访问-amp-amp-解锁Jenkins\" class=\"headerlink\" title=\"访问&amp;&amp;解锁Jenkins\"></a>访问&amp;&amp;解锁Jenkins</h2><blockquote>\n<p>访问地址为：linux+端口号，如上配置为：<code>http://192.168.56.121:9955</code>，访问后，进入一下配置页面。</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/04/Fwx6D1kGHqt2ogX.png\" alt=\"image-20211004202424221\"></p>\n<p>按照上方提示，输入一下命令,输入密码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat /opt/jenkins/secrets/initialAdminPassword<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"按照插件\"><a href=\"#按照插件\" class=\"headerlink\" title=\"按照插件\"></a>按照插件</h2><p>默认按照推荐按照即可。</p>\n<p><img src=\"https://i.loli.net/2021/10/04/EZwmnHSxribWpd5.png\" alt=\"image-20211004203303329\"></p>\n<h2 id=\"初始化用户\"><a href=\"#初始化用户\" class=\"headerlink\" title=\"初始化用户\"></a>初始化用户</h2><blockquote>\n<p>创建初始化用户，用户名：opser,密码：admin</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/04/OEiDtgdlAYW65kz.png\" alt=\"image-20211004204936715\"></p>\n<p>Jenkins初始URL默认不进行配置</p>\n<p><img src=\"https://i.loli.net/2021/10/04/YRJmbgUFoj1xhnB.png\" alt=\"image-20211004205136257\"></p>\n<h2 id=\"安装完成，开始使用\"><a href=\"#安装完成，开始使用\" class=\"headerlink\" title=\"安装完成，开始使用\"></a>安装完成，开始使用</h2><p><img src=\"https://i.loli.net/2021/10/04/kdETlSe1rw7N5py.png\" alt=\"image-20211004205218802\"></p>\n<h1 id=\"Jenkins优化\"><a href=\"#Jenkins优化\" class=\"headerlink\" title=\"Jenkins优化\"></a>Jenkins优化</h1><h2 id=\"插件优化\"><a href=\"#插件优化\" class=\"headerlink\" title=\"插件优化\"></a>插件优化</h2><blockquote>\n<p>由于Jenkins默认使用国外的镜像，所以插件下载安装速度极慢，所以我们需要更改插件仓库。</p>\n<p><strong>注意：该仓库更改必须要在没有下载插件之前！</strong></p>\n</blockquote>\n<ul>\n<li><p>进入Jenkins目录，<code>/opt/jenkins</code></p>\n</li>\n<li><p>复制并重命名文件<code>hudson.model.UpdateCenter.xml</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cp hudson.model.UpdateCenter.xml hudson.model.UpdateCenter.xml.bak<br></code></pre></td></tr></table></figure></li>\n<li><p>修改<code>hudson.model.UpdateCenter.xml</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">url改为<br>https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json<br></code></pre></td></tr></table></figure></li>\n<li><p>修改<code>default.json</code></p>\n</li>\n<li><p>配置default.json</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">vim /var/lib/jenkins/updates/default.json<br></code></pre></td></tr></table></figure></li>\n<li><p>全局替换</p>\n<blockquote>\n<p>把  updates.jenkins-ci.org&#x2F;download  替换为  mirrors.tuna.tsinghua.edu.cn&#x2F;jenkins</p>\n<p>地址修改把  <code>www.google.com</code> 替换为  <code>www.baidu.com</code></p>\n</blockquote>\n</li>\n<li><p>重启服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl restart jenkins<br></code></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"页面优化\"><a href=\"#页面优化\" class=\"headerlink\" title=\"页面优化\"></a>页面优化</h2><blockquote>\n<p>装完Jenkins之后，我们发现有一部分菜单汉化了，有一部分菜单没有汉化，这让人很不爽，所以我们需要调整一下让页面保持统一！</p>\n</blockquote>\n<ul>\n<li><code>系统管理</code>-<code>插件管理</code>-<code>已安装</code>，中搜索，<code>Localization: Chinese (Simplified)</code></li>\n<li>卸载，重装，同时安装<code>locale</code>插件</li>\n<li><code>系统管理</code>-<code>系统配置</code>-<code>Locale</code>-<code>Default Language</code>,填写<code>zh_CN</code>,勾选<code>Ignore browser preference and force this language to all users</code></li>\n<li>重启</li>\n</ul>\n<h1 id=\"Jenkins操作\"><a href=\"#Jenkins操作\" class=\"headerlink\" title=\"Jenkins操作\"></a>Jenkins操作</h1><h2 id=\"基本配置\"><a href=\"#基本配置\" class=\"headerlink\" title=\"基本配置\"></a>基本配置</h2><h3 id=\"配置一览\"><a href=\"#配置一览\" class=\"headerlink\" title=\"配置一览\"></a>配置一览</h3><p><img src=\"https://i.loli.net/2021/10/05/KNfwrISu3cqpzoB.jpg\" alt=\"img\"></p>\n<h3 id=\"构建环境配置\"><a href=\"#构建环境配置\" class=\"headerlink\" title=\"构建环境配置\"></a>构建环境配置</h3><p>指定构建时所依赖的环境参数，如jdk版本，可以手动安装jdk，也可以在【全局工具配置】中指定好jdk版本，在首次构建时会自动安装，首次构建下载时间较长，耐心等待即可。</p>\n<p>以NodeJS自动安装为例：</p>\n<p><img src=\"https://i.loli.net/2021/10/05/w3ypsOPzqZ4QM2d.jpg\" alt=\"img\"></p>\n<h2 id=\"插件管理\"><a href=\"#插件管理\" class=\"headerlink\" title=\"插件管理\"></a>插件管理</h2><p>构建模块大多以插件形式存在，使用前需安装，否则无法找到对应构建项。</p>\n<p><img src=\"https://i.loli.net/2021/10/05/BQ7LWwcZgriysMS.jpg\" alt=\"img\"></p>\n<h2 id=\"服务器配置\"><a href=\"#服务器配置\" class=\"headerlink\" title=\"服务器配置\"></a>服务器配置</h2><p>系统管理-&gt;系统配置-&gt;Publish over SSH，点击[新增]按钮添加服务器，按要求填写服务器信息，如果没有找到此选项，可先在【插件管理】中安装Publish over SSH插件。</p>\n<p><img src=\"https://i.loli.net/2021/10/05/e96JzP8iSpvhcy7.jpg\" alt=\"img\"></p>\n<p>说明：Remote Directory指定的目录会作为文件上传时的根目录。</p>\n<h2 id=\"Java应用构建配置\"><a href=\"#Java应用构建配置\" class=\"headerlink\" title=\"Java应用构建配置\"></a>Java应用构建配置</h2><h3 id=\"新建任务\"><a href=\"#新建任务\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><p>以构建Maven项目为例，选择一个Maven构建风格，可以省去许多maven配置，如果已经有一个相同配置，可选择输入名称进行复制。</p>\n<p>Maven setting.xml配置文件：</p>\n<blockquote>\n<p>&#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;tools&#x2F;hudson.tasks.Maven_MavenInstallation&#x2F;maven&#x2F;conf&#x2F;</p>\n</blockquote>\n<p><img src=\"https://i.loli.net/2021/10/05/QqhzG2svYTgujEN.jpg\" alt=\"img\"></p>\n<h3 id=\"构建包留存策略\"><a href=\"#构建包留存策略\" class=\"headerlink\" title=\"构建包留存策略\"></a>构建包留存策略</h3><p><img src=\"https://i.loli.net/2021/10/05/BsxnbpaRHl6qdGM.jpg\" alt=\"img\"></p>\n<h3 id=\"源码仓库\"><a href=\"#源码仓库\" class=\"headerlink\" title=\"源码仓库\"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg\" alt=\"img\"></p>\n<p>配置源码仓库，指定动态tag分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/sSY6haTOtJcqI2M.jpg\" alt=\"img\"></p>\n<h3 id=\"自动构建选项\"><a href=\"#自动构建选项\" class=\"headerlink\" title=\"自动构建选项\"></a>自动构建选项</h3><p>取消触发自动构建的选项</p>\n<p><img src=\"https://i.loli.net/2021/10/05/RBLYzZElcywuX7U.jpg\" alt=\"img\"></p>\n<h3 id=\"构建\"><a href=\"#构建\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p><img src=\"https://i.loli.net/2021/10/05/i84axClGu2AokXY.jpg\" alt=\"img\"></p>\n<p>在jekenis服务器本地构建，使用jekenis服务器的maven配置进行编译构建</p>\n<h3 id=\"上传\"><a href=\"#上传\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>构建成功后上传到指定部署服务器，仅编译成功后进行上传</p>\n<p><img src=\"https://i.loli.net/2021/10/05/xyuPw2FXsRdIDpL.jpg\" alt=\"img\"></p>\n<ul>\n<li>Name：在服务列表中选择上传目标；</li>\n<li>Source files：指定上传的jar包，支持正则通配（根据构建目录距离jar包位置的不同，会自动在服务器端创建不同深度的目录）。</li>\n<li>Remote directory：可以指定上传目录，目录位于配置服务器时指定的根目录之下。</li>\n<li>Exec command：上传成功后在上传后的服务器上执行的命令或脚本。</li>\n</ul>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n<h2 id=\"Js应用构建\"><a href=\"#Js应用构建\" class=\"headerlink\" title=\"Js应用构建\"></a>Js应用构建</h2><h3 id=\"新建任务-1\"><a href=\"#新建任务-1\" class=\"headerlink\" title=\"新建任务\"></a>新建任务</h3><p>选择一个自由风格的构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/W48lXhm1DkjRvag.jpg\" alt=\"img\"></p>\n<h3 id=\"构建包留存策略-1\"><a href=\"#构建包留存策略-1\" class=\"headerlink\" title=\"构建包留存策略\"></a>构建包留存策略</h3><p><img src=\"https://i.loli.net/2021/10/05/5XyWcCawtzI9JlV.jpg\" alt=\"img\"></p>\n<h3 id=\"源码仓库-1\"><a href=\"#源码仓库-1\" class=\"headerlink\" title=\"源码仓库\"></a>源码仓库</h3><p>正式环境采用参数化构建，只用Git参数指定构建tag分支，默认master分支</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zMtvPDfjFoXyO8S.jpg\" alt=\"img\"></p>\n<p>配置源码仓库，指定动态tag分支</p>\n<p><img src=\"https://i.loli.net/2021/10/06/sgqaEWYKMb5rA8z.png\" alt=\"image-20211006134146871\"></p>\n<h3 id=\"自动构建选项-1\"><a href=\"#自动构建选项-1\" class=\"headerlink\" title=\"自动构建选项\"></a>自动构建选项</h3><p>取消自动构建选项</p>\n<p><img src=\"https://i.loli.net/2021/10/05/WUG6PSjmNKFaH37.jpg\" alt=\"img\"></p>\n<h3 id=\"构建环境\"><a href=\"#构建环境\" class=\"headerlink\" title=\"构建环境\"></a>构建环境</h3><p>指定构建环境，选择已配置的nodejs构建环境，在jekenis本地服务器进行编译构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/gcNnHvzawXFKC76.jpg\" alt=\"img\"></p>\n<h3 id=\"构建-1\"><a href=\"#构建-1\" class=\"headerlink\" title=\"构建\"></a>构建</h3><p>在jekenis本地服务器进行编译构建</p>\n<p><img src=\"https://i.loli.net/2021/10/05/j2Z4QHn5qYSolFM.jpg\" alt=\"img\"></p>\n<p>为方便后续上传，在构建环节执行了压缩命令，可视情况而定。</p>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n<h3 id=\"上传-1\"><a href=\"#上传-1\" class=\"headerlink\" title=\"上传\"></a>上传</h3><p>将编译并压缩后的前端文件上传到指定服务器</p>\n<p><img src=\"https://i.loli.net/2021/10/05/zjxrTqCF4QGvNLH.jpg\" alt=\"img\"></p>\n<p>在服务器列表中选择目标，指定上传文件，填写上传成功后需执行的命令。因VUE编译多次会生成不同的文件，故需将编译后的文件一次性上传多个负载的服务器。</p>\n<p>即重新选择一次上传步骤：</p>\n<p><img src=\"https://i.loli.net/2021/10/05/m5ODJEU6vIx9n3L.jpg\" alt=\"img\"></p>\n<p><img src=\"https://i.loli.net/2021/10/05/2Dsf1Mg7rq4vYdn.jpg\" alt=\"img\"></p>\n<blockquote>\n<p>注：整体涉及到的编译脚本详见“项目编译脚本”</p>\n</blockquote>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Jenkins"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Maven/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Maven/",
            "title": "Maven",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Maven是意第绪语，意思是“知识的积累者”，最初是为了简化Jakarta Turbine项目中的构建过程。有几个项目，每个项目都有自己的Ant构建文件，所有项目都略有不同。JAR已检入CVS。我们想要一种标准的方式来构建项目，清晰地定义项目的组成，一种简单的方式来发布项目信息，以及一种在多个项目中共享JAR的方式。</p>\n<p>结果是一个可以用于构建和管理任何基于Java的项目的工具。我们希望我们已经创建了一些东西，可以使Java开发人员的日常工作更加轻松，并且通常有助于理解任何基于Java的项目。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>Maven官网地址：<a href=\"https://maven.apache.org/\">https://maven.apache.org/</a></p>\n<p><img src=\"https://i.loli.net/2021/10/06/wi56hbVS1LqjZYd.png\" alt=\"image-20211006143204542\"></p>\n<p>进入上方官网地址，点击左侧<code>Download</code>，进入下载页面。</p>\n<p><img src=\"https://i.loli.net/2021/10/06/km3iteEFAHdKxsz.png\" alt=\"image-20211006143351772\"></p>\n<p>右键点击超链接，复制链接地址。</p>\n<p>链接服务器，进入安装目录,博猪安装在：<code>/opt</code></p>\n<p>使用<code>wget</code>进行下载，如果没有<code>wget</code>，请使用<code>yum -y install wget</code>先用yum安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">wget https://dlcdn.apache.org/maven/maven-3/3.8.3/binaries/apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">tar -zxvf apache-maven-3.8.3-bin.tar.gz<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>进入<code>/etc/profile.d/</code>目录，增加<code>maven.sh</code>环境脚本。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">vim maven.sh<br></code></pre></td></tr></table></figure>\n\n<p>增加环境变量</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-built_in\">export</span> MAVEN_HOME=/opt/apache-maven-3.8.3<br><span class=\"hljs-built_in\">export</span> PATH=<span class=\"hljs-variable\">$&#123;MAVEN_HOME&#125;</span>/bin:<span class=\"hljs-variable\">$&#123;PATH&#125;</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意：如果是以普通用户身份运行，则需要增加可执行权限</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\">sudo <span class=\"hljs-built_in\">chmod</span> +x /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>\n</blockquote>\n<p>使用<code>source</code>命令加载环境变量：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">source /etc/profile.d/maven.sh<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"验证安装\"><a href=\"#验证安装\" class=\"headerlink\" title=\"验证安装\"></a>验证安装</h2><p>想要验证 Maven 软件安装，使用<code>mvn -version</code>命令，它将会打印出 Maven 版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">mvn -version<br></code></pre></td></tr></table></figure>\n\n<p>你将会看到类似下面的输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">Apache Maven 3.8.3 (cecedd343002696d0abb50b32b541b8a6ba2883f)<br>Maven home: /opt/apache-maven-3.8.3<br>Java version: 11.0.5, vendor: Oracle Corporation, runtime: /usr/lib/jvm/java-11-openjdk-11.0.5.10-0.el8_0.x86_64<br>Default locale: en_US, platform encoding: UTF-8<br>OS name: &quot;linux&quot;, version: &quot;4.18.0-80.7.1.el8_0.x86_64&quot;, arch: &quot;amd64&quot;, family: &quot;unix&quot;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"配置国内镜像仓库\"><a href=\"#配置国内镜像仓库\" class=\"headerlink\" title=\"配置国内镜像仓库\"></a>配置国内镜像仓库</h1><p>配置maven仓库，设置阿里镜像仓库，一定要配置一下，国内的下载jar快些。</p>\n<p>设置本地仓库存储地址：<code>/opt/apache-maven-3.8.3/repo</code>,进入配置路径</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cd /opt/apache-maven-3.8.3/conf<br>vi settings.xml<br></code></pre></td></tr></table></figure>\n\n<p>修改仓库存储地址</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">&lt;localRepository&gt;<span class=\"hljs-regexp\">/opt/</span>apache-maven-<span class=\"hljs-number\">3.8</span>.<span class=\"hljs-number\">3</span><span class=\"hljs-regexp\">/repo&lt;/</span>localRepository&gt;<br></code></pre></td></tr></table></figure>\n\n<p>修改镜像仓库</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirror</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">id</span>&gt;</span>alimaven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">id</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">name</span>&gt;</span>aliyun maven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">name</span>&gt;</span><br>       <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">url</span>&gt;</span><br>      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mirrorOf</span>&gt;</span>central<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirrorOf</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mirror</span>&gt;</span><br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Maven"
            ]
        }
    ]
}