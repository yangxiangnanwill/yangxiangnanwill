{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"工具\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Typora%E6%95%99%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Typora%E6%95%99%E7%A8%8B/",
            "title": "Typora教程",
            "date_published": "2024-01-03T13:13:21.665Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>本篇介绍一下博猪经常使用的一个工具的教程，也是博猪用于总结开发和记录学习笔记的一个神器，说先说明一点，博猪纯纯的处女座，所以对于某些东西还是有较高的要求的，但是这款工具都满足了博猪的要求，最主要的事情就是开源（免费）和用着爽。废话不多说，下面博猪带给你史上Typora保姆级教程。</p>\n<p>Typora 一直是我认为桌面端笔记应用应有的终极形态。用一句话概况话来说就是，「它的<strong>功能之强大、设计之冷静、体验之美妙、理念之先进</strong>，我认为值得所有笔记应用厂商学习。」</p>\n<p>参考文章：</p>\n<p><a href=\"https://sspai.com/post/54912/\">少数派</a></p>\n<p><a href=\"https://blog.csdn.net/qq_33159059/article/details/87910522\">CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/tian_ci/article/details/85257667\">CSDN博客</a></p>\n</blockquote>\n<h1 id=\"Typora简介\"><a href=\"#Typora简介\" class=\"headerlink\" title=\"Typora简介\"></a>Typora简介</h1><h2 id=\"Typora-是什么？\"><a href=\"#Typora-是什么？\" class=\"headerlink\" title=\"Typora 是什么？\"></a>Typora 是什么？</h2><p>Typora 是一款<strong>支持实时预览的 Markdown 文本编辑器</strong>。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是<strong>完全免费</strong>的。</p>\n<p>在这篇文章中，我希望以「Typora 是什么」这个问题为线索，向大家全面介绍这款令人爱不释手的笔记应用。</p>\n<h2 id=\"一个-Markdown-文本编辑器\"><a href=\"#一个-Markdown-文本编辑器\" class=\"headerlink\" title=\"一个 Markdown 文本编辑器\"></a>一个 Markdown 文本编辑器</h2><p>Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 <a href=\"https://typora.io/\">Typora 官网</a> 上他们将 Typora 描述为 「A truly <strong>minimal</strong> markdown editor. 」。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/49c4cdef47bf81018b9871a628523064.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\"></p>\n<h3 id=\"关于-Markdown\"><a href=\"#关于-Markdown\" class=\"headerlink\" title=\"关于 Markdown\"></a>关于 Markdown</h3><p>Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。</p>\n<p>由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 <a href=\"https://github.github.com/gfm/\">GFM 标准</a>，它是由著名代码托管网站 <a href=\"https://github.com/\">GitHub</a> 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 <code>文件 - 偏好设置 - Markdown 语法偏好 - 严格模式</code> 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 <a href=\"http://support.typora.io/Strict-Mode/\">这篇文档</a> 中查看。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/a35f8fd5e9d968edfe5a0b02b54d0881.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">严格模式</p>\n<h3 id=\"写得舒服\"><a href=\"#写得舒服\" class=\"headerlink\" title=\"写得舒服\"></a>写得舒服</h3><p>一个文本编辑器，<strong>写得舒服</strong>是关键。我曾说过，「更有趣的是，一个笔记应用不会因为它支持 Markdown 语法而高级或易用很多。」，细枝末节处的人性化考虑才是最重要的。而 Typora 的编辑体验显然是经过深思熟虑设计的产物。</p>\n<p>我认为：一个优秀的笔记应用应该给用户<strong>选择 Markdown 语法风格的权利</strong>。而 Typora 在这一点上是我目前见过所有 Markdown 笔记应用中做得最好的。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/ea30087c6f93d0fa3c5a313c8cdce357.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">文本编辑设置</p>\n<p>通过打开 <code>文件 - 偏好设置</code> 你会发现 Typora 为编辑体验的考虑细致到了令人叹为观止的程度。Typora 中提供了大量有关 Markdown 偏好的设置，据此，你可以构建一个几乎完全适合自己的 Markdown 编辑器。下面我将依次介绍一些与文本编辑体验有关的功能亮点。</p>\n<h4 id=\"智能标点\"><a href=\"#智能标点\" class=\"headerlink\" title=\"智能标点\"></a>智能标点</h4><p>我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 <code>&quot;</code> <code>&#39;</code> 转化为更美观的弯引号 <code>“</code> <code>‘</code> <code>’</code> <code>”</code>。具体内容你可以在官方的 <a href=\"http://support.typora.io/SmartyPants/\">这篇文档</a> 中查看。关于直弯引号在 macOS 上如何输入你也可以看 <a href=\"https://sspai.com/post/38342\">这篇文章</a>。</p>\n<h4 id=\"图片插入\"><a href=\"#图片插入\" class=\"headerlink\" title=\"图片插入\"></a>图片插入</h4><p>Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：</p>\n<ul>\n<li>直接使用 <code>右键 - 复制 Ctrl + V</code> 将网络图片、剪贴板图片复制到文档中</li>\n<li>拖动本地图片到文档中</li>\n</ul>\n<p>Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">复制图片</p>\n<p>你也完全可以使用图床来保证文档在分享后图片仍能正常显示。</p>\n<p>更强大的是，Typora 支持在拖动或 <code>Ctrl + V</code> 网络图片后自动将其保存到本地。你可以在 <code>文件 - 偏好设置 - 编辑器 - 图片插入</code> 中选择复制到哪个路径，什么情况下需要复制。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/717da653ad91e938c5f1f40555b9c057.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">图片插入</p>\n<p>这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。</p>\n<h4 id=\"打字机模式和专注模式\"><a href=\"#打字机模式和专注模式\" class=\"headerlink\" title=\"打字机模式和专注模式\"></a>打字机模式和专注模式</h4><p><strong>「打字机模式」</strong>使得你所编辑的那一行永远处于屏幕正中。</p>\n<p><strong>「专注模式」</strong>使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。</p>\n<p>你可以在 <code>视图 - 专注模式 / 打字机模式</code> 中勾选使用这两个模式。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif\" alt=\"img\">两种模式</p>\n<h4 id=\"实时预览\"><a href=\"#实时预览\" class=\"headerlink\" title=\"实时预览\"></a>实时预览</h4><p>我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下<strong>「所见即所得」</strong>的美妙。<em>他们把这称为 Hybrid View。</em></p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/f99c9ce02e2728ec6c64b443947fc67e.gif\" alt=\"img\">所见即所得</p>\n<p>为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个<strong>「源代码模式」</strong>。你可以通过 <code>视图 - 源代码模式</code> 或左下角的 <code>&lt;/&gt;</code> 按钮进入。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/bcda9c4e35725b7297a6b90d8745564e.gif\" alt=\"img\">源代码模式</p>\n<h4 id=\"大纲-x2F-文件侧边栏\"><a href=\"#大纲-x2F-文件侧边栏\" class=\"headerlink\" title=\"大纲 &#x2F; 文件侧边栏\"></a>大纲 &#x2F; 文件侧边栏</h4><p><img src=\"https://cdn.sspai.com/2019/05/24/f2461efb5ac297facfcd9f72cc5da6be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">侧边栏</p>\n<p>Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。</p>\n<p>你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，因此我认为文件侧边栏这个功能还是很鸡肋的。</p>\n<h4 id=\"空格与换行\"><a href=\"#空格与换行\" class=\"headerlink\" title=\"空格与换行\"></a>空格与换行</h4><p>Typora 在空格与换行部分主要是使用 <a href=\"http://www.commonmark.cn/w/\">CommonMark</a> 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。</p>\n<ul>\n<li><strong>空格：</strong>在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。<br>你可以在源代码模式下，为每个空格前加一个 <code>\\</code> 转义符，或者直接使用 HTML 风格的 <code>&amp;nbps;</code> 来保持连续的空格。</li>\n<li><strong>软换行：</strong>需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 <code>Shift + Enter</code> 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。</li>\n<li><strong>硬换行：</strong>你可以通过 <code>空格 + 空格 + Shift + Enter</code> 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。</li>\n<li><strong>换段：</strong>你可以通过 <code>Enter</code> 完成一次换段。Typora 会自动帮你完成两次 <code>Shift + Enter</code> 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。</li>\n<li><strong>Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：</strong>CR 表示回车 <code>\\r</code> ，即回到一行的开头，而 LF 表示换行 <code>\\n</code> ，即另起一行。<br>所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix &#x2F; Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 <code>文件 - 偏好设置 - 编辑器 - 默认换行符</code> 中对此进行切换。</li>\n</ul>\n<p>下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 <a href=\"http://support.typora.io/Line-Break/\">这篇文档</a> 中查阅。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/5c2fbaa53b27666a7fd0b07ac3e100bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">空格、换行、换段</p>\n<h4 id=\"emoji-表情\"><a href=\"#emoji-表情\" class=\"headerlink\" title=\"emoji 表情\"></a>emoji 表情</h4><p>如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：</p>\n<ol>\n<li><strong>输入法联想：</strong>优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。</li>\n<li><strong>复制 emoji 符号：</strong>优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。</li>\n</ol>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/b2601a694aba07b8a68615ca59bcc495.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">输入法联想</p>\n<p>在 Typora 中，你可以用 <code>:emoji:</code> 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/ff26eeb5ff2d6fae16cab163ebfcd096.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">Typora 中输入 emoji</p>\n<h2 id=\"一个学术文档编辑器\"><a href=\"#一个学术文档编辑器\" class=\"headerlink\" title=\"一个学术文档编辑器\"></a>一个学术文档编辑器</h2><p>除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。</p>\n<h3 id=\"LaTeX\"><a href=\"#LaTeX\" class=\"headerlink\" title=\"LaTeX\"></a>LaTeX</h3><blockquote>\n<p>LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。</p>\n</blockquote>\n<p>Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：</p>\n<ol>\n<li><strong>行内公式（inline）：</strong>用 <code>$...$</code> 括起公式，公式会出现在行内。</li>\n<li><strong>块间公式（display）：</strong>用 <code>$$...$$</code> 括起公式（注意 <code>$$</code> 后需要换行），公式会默认显示在行中间。</li>\n</ol>\n<p>具体的 LaTeX 语法在此不赘述了，你可以在 <a href=\"https://blog.csdn.net/happyday_d/article/details/83715440\">这篇文章</a> 中查看。</p>\n<h3 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h3><p>Typora 中代码的插入也可以分为行内和块间两种：</p>\n<ol>\n<li>行内代码：用 <code>...</code> 或 <code>...</code> 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。</li>\n<li>代码块：输入 &#96;&#96;&#96;&#96;&#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。<br>除此以外，你也可以直接换行开始写，而后再选择语言。</li>\n</ol>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/a8c283ba4f1ba09d41331b87e2eef3b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">代码块</p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><p>在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">| 左对齐 | 右对齐 | 居中对齐 |<br>| :-----| ----: | :----: |<br>| 单元格 | 单元格 | 单元格 |<br>| 单元格 | 单元格 | 单元格 |<br></code></pre></td></tr></table></figure>\n\n<p>乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。</p>\n<p>好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 <code>鼠标右键 - 插入 - 表格</code> ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/51bf2f290592e1ddbadb95765c04f297.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">Typora 表格</p>\n<h3 id=\"链接引用与脚注\"><a href=\"#链接引用与脚注\" class=\"headerlink\" title=\"链接引用与脚注\"></a>链接引用与脚注</h3><p><strong>链接引用</strong>类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 <code>[]:</code> 的语法来为你的文档加上链接引用。</p>\n<p><strong>脚注</strong>在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 <code>[^ number ]</code> ，再在下方通过 <code>[^ number ]:</code> 在文档中插入脚注。注意不要遗漏了脚注编号 <code>number</code> 前后的空格。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/5f82606e6d89fe1eb24705c4ca6b895d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">链接引用和脚注</p>\n<h3 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h3><p>除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。</p>\n<ul>\n<li><strong>快速打开：</strong>你可以通过 <code>文件 - 快速打开...</code> 或 <code>Ctrl + P</code> 快捷键快速打开最近的文档。</li>\n<li><strong>保存：</strong>Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。</li>\n<li><strong>导入：</strong>Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。</li>\n<li><strong>导出：</strong>Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 <strong>Pandoc 插件</strong>来导出更多例如 docx，LaTeX 等格式。</li>\n</ul>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/ba295f21f0b71646bb36a0517e868ced.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">导出</p>\n<h2 id=\"一个伪装成文本编辑器的浏览器\"><a href=\"#一个伪装成文本编辑器的浏览器\" class=\"headerlink\" title=\"一个伪装成文本编辑器的浏览器\"></a>一个伪装成文本编辑器的浏览器</h2><p>当我的一个朋友问我「Typora 有什么好写的？」时，我回答「Typora 是一个伪装成文本编辑器的浏览器」。是的，事实上如果你有一定的计算机基础，你可以找到许多有关于「Typora 其实是一个浏览器」的蛛丝马迹。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/13837bcdcded9ae406e8c4aac5f2d752.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">图片插入</p>\n<p>在图片插入的选项中，Typora 用了「复制图片到 .&#x2F;${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。</p>\n<p>再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。</p>\n<p>当然，最明显的一点是当你按下 <code>Shift + F12</code> 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/da8c9b305a222cb5fadb41c12da81a12.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">审查元素</p>\n<h3 id=\"伪装从何而来？\"><a href=\"#伪装从何而来？\" class=\"headerlink\" title=\"伪装从何而来？\"></a>伪装从何而来？</h3><p>当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。</p>\n<p>John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，<strong>在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。</strong></p>\n<p>我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。</p>\n<p>如果我说，我们每一篇文稿都是一个网页，那就很好理解了。Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。</p>\n<h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><p>HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的<strong>文本、段落、标题等</strong>的记号。</p>\n<p>你可以把一张网页想象成一幅数字油画，HTML 就是那个黑白线条的底，上面写满了数字标记，示意你哪一块区域要涂什么颜色。而 CSS 则负责在对应的区域涂上颜色，甚至加上一些装饰等。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/7ce3d9ed245eed902e833405b9464103.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">数字油画</p>\n<h4 id=\"HTML-标签\"><a href=\"#HTML-标签\" class=\"headerlink\" title=\"HTML 标签\"></a>HTML 标签</h4><p>Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">HTML 标签</p>\n<p>事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 <a href=\"http://support.typora.io/HTML/\">官方文档</a> 中查阅。</p>\n<p>有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。</p>\n<h4 id=\"导出为-HTML\"><a href=\"#导出为-HTML\" class=\"headerlink\" title=\"导出为 HTML\"></a>导出为 HTML</h4><p>Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。</p>\n<p>除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 <code>Ctrl +C</code> 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 <code>Ctrl + V</code> 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/3d818c18934632b043fcf4ad9be1d046.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">公众号</p>\n<p>具体如何用 Typora 完成公众号写作，你可以在 <a href=\"https://sspai.com/post/40524\">这篇文章</a> 中进一步了解。</p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 <code>文件 - 偏好设置 - 主题 - 打开主题文件夹</code> 看到这些 CSS 文件。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/7d3cfbc92721733e16ed63d72a48a572.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">主题</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/98a04c4f9129e0f018d15bc790b376c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">主题文件夹</p>\n<p>选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 <a href=\"http://theme.typora.io/\">官网</a> 下载更多的主题。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/efcf65ba993c4bb0b058d6eb8258df6f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">主题商店</p>\n<p>除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。我自己就写了一份名为 WeChat 的 CSS 文件，来符合我公众号特定的排版需求，例如正文是 15px，页边距是 8，小标题是 18px 等等。</p>\n<p><img src=\"https://cdn.sspai.com/2019/05/24/317ac1df25fcfc817c03f92d6086764e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1\" alt=\"img\">CSS 文件</p>\n<p>使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。</p>\n<h3 id=\"YAML-front-matter\"><a href=\"#YAML-front-matter\" class=\"headerlink\" title=\"YAML front-matter\"></a>YAML front-matter</h3><p>Typora 支持在文档头部加上基于 YAML 的 front-matter 信息，这一特性适用于把 Markdown 文档分类归档上传到用 Hexo 框架搭建的博客中。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>如果你看过 Typora 的 <a href=\"https://typora.io/dev_release.html\">更新日志</a> 你会发现它早在 2015 年 12 月 19 日就发布了 0.7.0 (alpha) 版本，但到目前为止它仍处于 beta 阶段。<em>截止到笔者写作这篇文章的初稿时，Typora 的版本号为 0.9.9.24.6 (beta)。</em></p>\n<p>我想，能够潜心三年多打磨、测试一个产品，开发者们一定是倾注了极大的心血到这款笔记应用中。而在使用中，我也能体会到开发者的良苦用心。他们不想做知识的储备中心，不想做快速的草稿、笔记应用，也不想做任何和生产力无关的功能和特性。对于 Typora 的设计和构想，只有唯一的宗旨——<strong>「生产效率」</strong>。</p>\n<p>因为移动端生产效率低，所以只有桌面端应用。因为左顾右盼的两栏式预览影响思路，所以他们甚至去掉了 Markdown 语法标记，只留下最终呈现的样式。因为 Markdown 是为了 HTML 呈现而设计的，所以他们提供了从入门到高级的一系列 Web 辅助功能…… 这一切都只是为了纯粹的<strong>生产效率</strong>。如果我们回头想想，Markdown 语言本身，当初不也是为了高效地生成简单网页而诞生的吗？</p>\n<p>最后，让我们一起期待这款<strong>顶级桌面文本生产力工具</strong>的正式版的到来吧！😆</p>\n<h1 id=\"快捷键操作\"><a href=\"#快捷键操作\" class=\"headerlink\" title=\"快捷键操作\"></a>快捷键操作</h1><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>作用</th>\n<th>快捷键</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ctrl + 1</td>\n<td>一级 标题</td>\n<td>Ctrl + B</td>\n<td>字体加粗</td>\n</tr>\n<tr>\n<td>Ctrl + 2</td>\n<td>二级标题</td>\n<td>Ctrl + I</td>\n<td>字体倾斜</td>\n</tr>\n<tr>\n<td>Ctrl + 3</td>\n<td>三级标题</td>\n<td>Ctrl + U</td>\n<td>下划线</td>\n</tr>\n<tr>\n<td>Ctrl + 4</td>\n<td>四级标题</td>\n<td>Ctrl + Home</td>\n<td>返回顶部</td>\n</tr>\n<tr>\n<td>Ctrl + 5</td>\n<td>五级标题</td>\n<td>Ctrl + End</td>\n<td>返回底部</td>\n</tr>\n<tr>\n<td>Ctrl + 6</td>\n<td>六级标题</td>\n<td>Ctrl + T</td>\n<td>创建表格</td>\n</tr>\n<tr>\n<td>Ctrl + L</td>\n<td>选中一行</td>\n<td>Ctrl + K</td>\n<td>创造超链接</td>\n</tr>\n<tr>\n<td>Ctrl + D</td>\n<td>选择一个单词</td>\n<td>Ctrl + F</td>\n<td>搜索</td>\n</tr>\n<tr>\n<td>Ctrl + E</td>\n<td>选中相同格式的文字</td>\n<td>Ctrl + H</td>\n<td>搜索并替换</td>\n</tr>\n<tr>\n<td>Alt + Shift + 5</td>\n<td>删除线</td>\n<td>Ctrl + Shift + I</td>\n<td>插入图片</td>\n</tr>\n</tbody></table>\n<h1 id=\"高级进阶\"><a href=\"#高级进阶\" class=\"headerlink\" title=\"高级进阶\"></a>高级进阶</h1><h2 id=\"优化标题排版（带序号）\"><a href=\"#优化标题排版（带序号）\" class=\"headerlink\" title=\"优化标题排版（带序号）\"></a>优化标题排版（带序号）</h2><blockquote>\n<p><code>俗话说：“授之以鱼，不如授之以渔”。</code>在讲如何添加自动编号功能之前，我要先讲一下如何修改的，不能不明所以。</p>\n</blockquote>\n<p>Typora的底层是一个浏览器，或者说是一个Electron应用。不信，你可以按下快捷键<code>Shift + F12</code>，或者点击<code>视图</code>中的<code>打开开发者工具</code>按钮：<br><img src=\"https://img-blog.csdnimg.cn/20190225023640443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>就可以看到熟悉的浏览器控制台调试界面了：</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190225023703930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70\" alt=\"在这里插入图片描述\"></p>\n<p>既然知道Typora的实现基于浏览器，那么就好办了。各个界面肯定都是HTML语言渲染出来的，那么，我们就可以通过添加CSS样式表，来添加自动编号的功能。好在Typora官方提前想到了这个事，专门出了篇官方文章来告诉我们怎么去添加自定义的样式文件。</p>\n<p>知道了怎么添加自定义样式文件，还得知道怎么去定制样式表。语言吗，肯定是CSS。剩下的就差定位编辑区、导航窗格区和目录树区对应的元素了。最简洁的方法，就是使用元素选择键去定位，下图中的红色按钮就是：</p>\n<p>三个区域的元素定位如下：</p>\n<blockquote>\n<ol>\n<li>正文标题： #write</li>\n<li>[TOC]目录树区: .md-toc-content</li>\n<li>侧边栏的目录大纲区: .sidebar-content<br>到此，前菜都已准备好。</li>\n</ol>\n</blockquote>\n<p>自动编号功能<br><strong>那么，开始准备主菜。</strong></p>\n<p>编写css样式文件，命名为：<code>base.user.css</code>。要完成自动编号功能，必须借助CSS3中的如下特性：</p>\n<blockquote>\n<p>计数器：counter(基准计数器)，用于计算基准计数器的值<br>计数器增量：counter-increment，设置每次增长的量<br>重置计数器：counter-reset，用于将当前标题的计数器重置到指定的基准计数器<br>子代类型选择器：nth-of-type，可以从子代中选择出同一类型元素中的指定元素</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-class\">.sidebar-content</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h1<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h1</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h2<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h2</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h3<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h3</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h4<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h4</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h5<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h5</span> &#123;<br>    <span class=\"hljs-attribute\">counter-reset</span>: h6<br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h1</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h1;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h2</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h2;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h3</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h3;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h4</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h4;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h5</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h5;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h5) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br> <br><span class=\"hljs-selector-class\">.outline-h6</span>&gt;<span class=\"hljs-selector-class\">.outline-item</span>&gt;<span class=\"hljs-selector-class\">.outline-label</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br>    <span class=\"hljs-attribute\">counter-increment</span>: h6;<br>    <span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h5) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h6) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><br><br><span class=\"hljs-comment\">/** initialize css counter */</span><br><span class=\"hljs-selector-id\">#write</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h1<br>&#125;<br><span class=\"hljs-selector-tag\">h1</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h2<br>&#125;<br><span class=\"hljs-selector-tag\">h2</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h3<br>&#125;<br><span class=\"hljs-selector-tag\">h3</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h4<br>&#125;<br><span class=\"hljs-selector-tag\">h4</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h5<br>&#125;<br><span class=\"hljs-selector-tag\">h5</span> &#123;<br><span class=\"hljs-attribute\">counter-reset</span>: h6<br>&#125;<br><span class=\"hljs-comment\">/** put counter result into headings */</span><br><span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h1</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h1;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h2</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h2;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h3</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h3</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-class\">.md-heading</span><span class=\"hljs-selector-pseudo\">:before</span> <span class=\"hljs-comment\">/** override the default style for focused headings */</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h3;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h4</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h4</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-class\">.md-heading</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h4;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h5</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h5</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-class\">.md-heading</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h5;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h5) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><span class=\"hljs-selector-id\">#write</span> <span class=\"hljs-selector-tag\">h6</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h6</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-class\">.md-heading</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">counter-increment</span>: h6;<br><span class=\"hljs-attribute\">content</span>: <span class=\"hljs-built_in\">counter</span>(h1) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h2) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h3) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h4) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h5) <span class=\"hljs-string\">&quot;.&quot;</span> <span class=\"hljs-built_in\">counter</span>(h6) <span class=\"hljs-string\">&quot; &quot;</span><br>&#125;<br><span class=\"hljs-comment\">/** override the default style for focused headings */</span><br><span class=\"hljs-selector-id\">#write</span>&gt;<span class=\"hljs-selector-tag\">h3</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-id\">#write</span>&gt;<span class=\"hljs-selector-tag\">h4</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-id\">#write</span>&gt;<span class=\"hljs-selector-tag\">h5</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-id\">#write</span>&gt;<span class=\"hljs-selector-tag\">h6</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h3</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h4</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h5</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span>,<br><span class=\"hljs-selector-tag\">h6</span><span class=\"hljs-selector-class\">.md-focus</span><span class=\"hljs-selector-pseudo\">:before</span> &#123;<br><span class=\"hljs-attribute\">color</span>: inherit;<br><span class=\"hljs-attribute\">border</span>: inherit;<br><span class=\"hljs-attribute\">border-radius</span>: inherit;<br><span class=\"hljs-attribute\">position</span>: inherit;<br><span class=\"hljs-attribute\">left</span>:initial;<br><span class=\"hljs-attribute\">float</span>: none;<br><span class=\"hljs-attribute\">top</span>:initial;<br><span class=\"hljs-attribute\">font-size</span>: inherit;<br><span class=\"hljs-attribute\">padding-left</span>: inherit;<br><span class=\"hljs-attribute\">padding-right</span>: inherit;<br><span class=\"hljs-attribute\">vertical-align</span>: inherit;<br><span class=\"hljs-attribute\">font-weight</span>: inherit;<br><span class=\"hljs-attribute\">line-height</span>: inherit;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Typora侧边栏的大纲视图折叠-win系统\"><a href=\"#Typora侧边栏的大纲视图折叠-win系统\" class=\"headerlink\" title=\"Typora侧边栏的大纲视图折叠( win系统 )\"></a>Typora侧边栏的大纲视图折叠( win系统 )</h2><h3 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h3><p><img src=\"https://img-blog.csdnimg.cn/20181226094905721.gif\" alt=\"在这里插入图片描述\"></p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><p><code>文件 ⇒ 偏好设置 ⇒ 勾选&quot;侧边栏&quot;</code><br><img src=\"https://img-blog.csdnimg.cn/20181226093929134.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20181226093934973.png\" alt=\"在这里插入图片描述\"><br><img src=\"https://img-blog.csdnimg.cn/20181226101055865.gif\" alt=\"在这里插入图片描述\"></p>\n",
            "tags": [
                "工具",
                "Typora"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/",
            "title": "PostMan教程",
            "date_published": "2024-01-03T13:13:21.665Z",
            "content_html": "<blockquote>\n<p>推荐一款接口测试工具！POSTMAN！ 简单来说，四个词，简单实用大方美观！</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>用户在开发或者调试网络程序或者是网页B&#x2F;S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！<strong>Postman</strong>在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>postman在2018年之后就不再支持浏览器版本，所以，想要使用它就必须先下载客户端再安装使用，下面就以Windows系统为例进行安装 。</p>\n</blockquote>\n<h2 id=\"下载与安装\"><a href=\"#下载与安装\" class=\"headerlink\" title=\"下载与安装\"></a>下载与安装</h2><p>postman安装步骤：</p>\n<ul>\n<li>访问postman官方网站，下载最新版本，访问地址：<a href=\"https://links.jianshu.com/go?to=https://www.getpostman.com/downloads/\">Postman | Download Postman App</a></li>\n<li>postman分两个版本：稳定版和尝鲜版（Postman Canary）</li>\n<li>进入到下载页面，根据自己电脑下载对应的版本</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180614.png\" alt=\"img\"></p>\n<ul>\n<li>双击下载的安装包，进入到安装界面，直到用户登录和注册界面。</li>\n<li><ul>\n<li>若个人使用，选择跳过即可，这时会进入到postman主界面，至此postman安装成功。</li>\n</ul>\n</li>\n<li><ul>\n<li>若团队使用，可以进行注册，注册后使用账号可以加入团队工作区</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>成功进入postman页面后，接下来我们正式进行postman的系统教程吧</p>\n</blockquote>\n<h2 id=\"设置postman主题\"><a href=\"#设置postman主题\" class=\"headerlink\" title=\"设置postman主题\"></a>设置postman主题</h2><p>右上角的设置里可以设置postman的主题</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180553.png\" alt=\"img\"></p>\n<p>这里，出于个人习惯，我把它设置成了黑色</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180542.png\" alt=\"img\"></p>\n<hr>\n<h2 id=\"postman基础功能介绍\"><a href=\"#postman基础功能介绍\" class=\"headerlink\" title=\"postman基础功能介绍\"></a>postman基础功能介绍</h2><p>首先，看一下它的基础功能：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180528.png\" alt=\"img\"></p>\n<p>collection在postman里面相当于一个文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。</p>\n<h2 id=\"发送第一个请求\"><a href=\"#发送第一个请求\" class=\"headerlink\" title=\"发送第一个请求\"></a>发送第一个请求</h2><p>这里我们做一个普通接口的简单的示例：</p>\n<p>如果你是第一次使用postman发送请求，下面这个例子可以作为一个最基本的入门，可以帮我们建立一个初始印象 。</p>\n<ol>\n<li>打开postman，点击+加号打开一个新的请求页。</li>\n<li>在请求的URL中输入请求地址：<a href=\"http://www.weather.com.cn/data/sk/101010100.html\">http://www.weather.com.cn/data/sk/101010100.html</a></li>\n<li>点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据。</li>\n</ol>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104113814.png\" alt=\"image-20210104113810137\"></p>\n<p>这样就完成了一次简单的天气查询接口的请求</p>\n<h1 id=\"postman基础功能\"><a href=\"#postman基础功能\" class=\"headerlink\" title=\"postman基础功能\"></a>postman基础功能</h1><h2 id=\"常见类型的接口请求\"><a href=\"#常见类型的接口请求\" class=\"headerlink\" title=\"常见类型的接口请求\"></a>常见类型的接口请求</h2><p>常见的接口有如下四种类型，分别是含有查询参数的接口，表单类型的接口，json类型的接口以及含有上传文件的接口，以下就对这四种类型接口及如何在postman中请求进行说明 。</p>\n<h3 id=\"查询参数的接口请求\"><a href=\"#查询参数的接口请求\" class=\"headerlink\" title=\"查询参数的接口请求\"></a>查询参数的接口请求</h3><h4 id=\"什么是查询参数\"><a href=\"#什么是查询参数\" class=\"headerlink\" title=\"什么是查询参数?\"></a>什么是查询参数?</h4><p>所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数，比如：<a href=\"http://cx.shouji.360.cn/phonearea.php?number=13012345678\">http://cx.shouji.360.cn/phonearea.php?number=13012345678</a> 。在这个接口中，查询参数就是:<strong>number&#x3D;13012345678</strong> 。而这一部分是由有键值对组成，格式为：key1&#x3D;value1&amp;key2&#x3D;value2, 如果有多组键值对，要用&amp;隔开 。</p>\n<h4 id=\"postman如何请求\"><a href=\"#postman如何请求\" class=\"headerlink\" title=\"postman如何请求\"></a>postman如何请求</h4><p>在postman中实现对这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。</p>\n<p>针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。</p>\n<p>具体实现步骤：</p>\n<ul>\n<li>打开postman，新建一个请求。</li>\n<li>在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略</li>\n<li>接口URL中输入地址，点击Send按钮就可以发送请求了 。</li>\n</ul>\n<blockquote>\n<p>说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。</p>\n</blockquote>\n<h3 id=\"表单类型的接口请求\"><a href=\"#表单类型的接口请求\" class=\"headerlink\" title=\"表单类型的接口请求\"></a>表单类型的接口请求</h3><h4 id=\"什么是表单-？\"><a href=\"#什么是表单-？\" class=\"headerlink\" title=\"什么是表单 ？\"></a>什么是表单 ？</h4><p>我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。</p>\n<p>不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，那么什么是表单类型呢 ？ 简单理解就是在请求头中查看<strong>Content-Type，它的值如果是:application&#x2F;x-www-form-urlencoded</strong> .那么就说明客户端提交的数据是以表单形式提交的 。</p>\n<h4 id=\"postman中如何请求？\"><a href=\"#postman中如何请求？\" class=\"headerlink\" title=\"postman中如何请求？\"></a>postman中如何请求？</h4><p>如果在postman请求上图的接口，我们只需要填写四个参数，分别是(可以参考上图)：</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求URL：<a href=\"http://localhost/index.php?m=Home&c=User&a=do_login&t=0.21942974229794432\">http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432</a></li>\n<li>请求头：Content-Type：application&#x2F;x-www-form-urlencode</li>\n<li>请求体： username&#x3D;13088888888&amp;password&#x3D;123456&amp;verify_code&#x3D;8888</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。在postman中设置请求体类型为，需要<strong>选择body-&gt; x-www-form-urlencoded</strong></li>\n<li>查看响应数据。</li>\n</ol>\n<h3 id=\"上传文件的表单请求\"><a href=\"#上传文件的表单请求\" class=\"headerlink\" title=\"上传文件的表单请求\"></a>上传文件的表单请求</h3><p>在做接口测试时，我们经常会遇到需要上传文件的接口，比如微信的更新头像。这就需要用到：multipart&#x2F;form-data。它也属于一种表单，但它既支持表单请求，也支持文件上传。 它的请求报文中数据往往是下面这样的。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>multipart/form-data<br><br><span class=\"language-abnf\"><span class=\"hljs-attribute\">file</span><span class=\"hljs-operator\">=</span>a1.jpg</span><br></code></pre></td></tr></table></figure>\n\n<p>这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求URL：<a href=\"http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html\">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</a></li>\n<li>请求类型：multipart&#x2F;form-data</li>\n<li>请求体：file&#x3D;a1.jpg</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; form-data</strong> 。file中要选择File类型，然后上传本地的文件 。</li>\n<li>查看响应数据。</li>\n</ol>\n<h3 id=\"json类型的接口请求\"><a href=\"#json类型的接口请求\" class=\"headerlink\" title=\"json类型的接口请求\"></a>json类型的接口请求</h3><p>这应该是接口测试中最常见的一种情况了 ， 也就是请求体类型为json,我们来看下这个请求报文 。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">http://xxx/api/sys/login</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>application/json;charset=UTF-8<br><br><span class=\"language-json\"><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-attr\">&quot;account&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;root&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-attr\">&quot;password&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;123456&quot;</span><span class=\"hljs-punctuation\">&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求地址：<a href=\"http://xxx/api/sys/login\">http://xxx/api/sys/login</a></li>\n<li>请求体类型：json</li>\n<li>请求体数据：{“account”:”root”,”password”:”123456”}</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; raw -JSON</strong></li>\n<li>查看响应数据。</li>\n</ol>\n<h2 id=\"接口响应数据解析\"><a href=\"#接口响应数据解析\" class=\"headerlink\" title=\"接口响应数据解析\"></a>接口响应数据解析</h2><p>响应数据是发送请求后经过服务器处理后返回的结果，响应由三部分组成，分别是状态行、响应头、响应体。我们来看下postman的响应数据展示。</p>\n<p>在postman中的响应数据展示：</p>\n<ul>\n<li>状态行：Status：200 OK</li>\n<li>响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示</li>\n<li>响应体：Body</li>\n</ul>\n<p>那么这些数据对我们做接口测试有什么作用呢 ？</p>\n<ul>\n<li>Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码</li>\n<li>Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。</li>\n<li>Time 和Size 是我们做性能测试时，可以根据这两个参数来对所测接口的性能做一个简单的判断。</li>\n</ul>\n<p>接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .</p>\n<ul>\n<li>Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。</li>\n<li>Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。</li>\n<li>Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。</li>\n</ul>\n<h2 id=\"接口管理（Collection）\"><a href=\"#接口管理（Collection）\" class=\"headerlink\" title=\"接口管理（Collection）\"></a>接口管理（Collection）</h2><p>当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时还希望对这批用例做回归测试 。在postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。</p>\n<p>先对Collection功能的使用场景做个简单总结 。</p>\n<ul>\n<li>用例分类管理，方便后期维护</li>\n<li>可以进行批量用例回归测试 。</li>\n</ul>\n<p>那么Collection是如何去管理用例的呢 ？ 先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：</p>\n<ul>\n<li>点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）</li>\n<li>选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）</li>\n<li>选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>通过上面的操作，我们实现了一个最简单的demo模型。但实际上，有了这个功能才是postman学习的开始，因为很多功能都是基础这个功能的基础上进行的，比如用例的批量执行，Mock ，接口文档等功能 。</p>\n</blockquote>\n<h1 id=\"postman高级功能\"><a href=\"#postman高级功能\" class=\"headerlink\" title=\"postman高级功能\"></a>postman高级功能</h1><h2 id=\"批量执行接口请求\"><a href=\"#批量执行接口请求\" class=\"headerlink\" title=\"批量执行接口请求\"></a>批量执行接口请求</h2><p>当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？</p>\n<p>实现步骤：</p>\n<ul>\n<li>选中一个Collection，点击右三角，在弹出的界面点击RUN</li>\n<li>这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选中 。</li>\n<li>点击界面下方的RUN Collection，就会对Collection中选中的所有测试用例运行 。</li>\n</ul>\n<p>对上面的几个红框内的功能进行简单说明：</p>\n<ul>\n<li><strong>断言统计</strong>：左上角的两个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。</li>\n<li>Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。Export Result：导出运行结果，默认导出的结果json文件 。</li>\n<li>Retry: 重新运行，点击它会把该Collection重新运行一遍</li>\n<li>New：返回到Runner，可以重新选择用例的组合 。</li>\n</ul>\n<p>总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。</p>\n<h2 id=\"日志调试\"><a href=\"#日志调试\" class=\"headerlink\" title=\"日志调试\"></a>日志调试</h2><p>在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。</p>\n<p>在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“我是一条日志”)</p>\n<p>那么打印的日如何看呢 ？ 在postman中有俩个入口，第一个入口就是：view-show postman console 。第二个入口就是左下角Console 。</p>\n<p>这里面有几个比较实用的功能：</p>\n<ul>\n<li>搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。</li>\n<li>按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。</li>\n<li>查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。</li>\n<li>隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。</li>\n</ul>\n<p>总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。</p>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><h3 id=\"断言介绍\"><a href=\"#断言介绍\" class=\"headerlink\" title=\"断言介绍\"></a>断言介绍</h3><p>如果没有断言，我们只能做接口的功能测试，但有了断言后，就为我们做自动化提供了条件，并且在postman中的断言是非常方便和强大的 。</p>\n<p>我们先来了解下postman断言的一些特点 ，具体如下</p>\n<ul>\n<li>断言编写位置：Tests标签</li>\n<li>断言所用语言：JavaScript</li>\n<li>断言执行顺序：在响应体数据返回后执行 。</li>\n<li>断言执行结果查看：Test Results</li>\n</ul>\n<p>在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104120057.png\" alt=\"image-20210104120050195\"></p>\n<blockquote>\n<p>内置的断言功能，使用时点击对应的断言就可以自动生成到Tests文本框里面。</p>\n</blockquote>\n<p>接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。</p>\n<p>状态行中又包括状态码，状态消息 。在postman也可以对这两个进行断言</p>\n<h3 id=\"状态行中的断言\"><a href=\"#状态行中的断言\" class=\"headerlink\" title=\"状态行中的断言\"></a>状态行中的断言</h3><ul>\n<li>断言状态码：<strong>Status code: code is 200</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code is 200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);        <span class=\"hljs-comment\">//这里填写的200是预期结果，实际结果是请求返回结果</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言状态消息：<strong>Status code：code name has string</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code name has string&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-string\">&quot;OK&quot;</span>);   <span class=\"hljs-comment\">//断言响应状态消息包含OK</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应头中的断言\"><a href=\"#响应头中的断言\" class=\"headerlink\" title=\"响应头中的断言\"></a>响应头中的断言</h3><ul>\n<li>断言响应头中包含：Response headers:Content-Type header check</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Content-Type is present&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>); <span class=\"hljs-comment\">//断言响应头存在&quot;Content-Type&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"断言响应体-重点\"><a href=\"#断言响应体-重点\" class=\"headerlink\" title=\"断言响应体(重点)\"></a>断言响应体(重点)</h3><ul>\n<li>断言响应体中包含XXX字符串：Response body:Contains string</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Body matches string&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">&quot;string_you_want_to_search&quot;</span>);<br>&#125;);     <br><span class=\"hljs-comment\">//注解</span><br>pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">&quot;string&quot;</span>)      <span class=\"hljs-comment\">//获取响应文本中包含string</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言响应体等于XXX字符串：Response body : is equal to a string</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Body is correct&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">&quot;response_body_string&quot;</span>);<br>&#125;);<br><span class=\"hljs-comment\">//注解</span><br>pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">&quot;response_body_string&quot;</span>);   <span class=\"hljs-comment\">//获取响应体等于response_body_string</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言响应体(json)中某个键名对应的值：Response body : JSON value check</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Your test name&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>();<br>    pm.<span class=\"hljs-title function_\">expect</span>(jsonData.<span class=\"hljs-property\">value</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">eql</span>(<span class=\"hljs-number\">100</span>);<br>&#125;);<br><span class=\"hljs-comment\">//注解</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()   <span class=\"hljs-comment\">//获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错</span><br>pm.<span class=\"hljs-title function_\">expect</span>(jsonData.<span class=\"hljs-property\">value</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">eql</span>(<span class=\"hljs-number\">100</span>)  <span class=\"hljs-comment\">//获取jsonData中键名为value的值，然后和100进行比较</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应时间-一般用于性能测试\"><a href=\"#响应时间-一般用于性能测试\" class=\"headerlink\" title=\"响应时间(一般用于性能测试)\"></a>响应时间(一般用于性能测试)</h3><ul>\n<li>断言响应时间：Response time is less than 200ms</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Response time is less than 200ms&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">responseTime</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">be</span>.<span class=\"hljs-title function_\">below</span>(<span class=\"hljs-number\">200</span>);   <span class=\"hljs-comment\">//断言响应时间&lt;200ms</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><strong>案例说明</strong>：</p>\n<p>针对以下接口返回的数据进行断言：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;weatherinfo&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;city&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;北京&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;cityid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;101010100&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;temp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;27.9&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WD&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;南风&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WS&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;小于3级&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;SD&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;28%&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;AP&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1002hPa&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;njd&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;暂无实况&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WSE&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;3&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;time&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;17:55&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;sm&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2.1&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;isRadar&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;Radar&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;JC_RADAR_AZ9010_JB&quot;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>断言响应状态码是否为200</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;断言响应状态码为200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li><p>断言city是否等于北京</p>\n</li>\n<li><pre><code class=\"javascript\">pm.test(&quot;断言city等于北京&quot;, function () &#123;\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.weatherinfo.city).to.eql(&#39;北京&#39;);\n&#125;);\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">- 断言返回字符串中是否包含南风<br><br>  ```javascript<br>  pm.test(&quot;断言返回字符串中是否包含南风&quot;, <span class=\"hljs-keyword\">function</span> () &#123;<br>      pm.expect(pm.response.text()).<span class=\"hljs-keyword\">to</span>.<span class=\"hljs-keyword\">include</span>(&quot;南风&quot;);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104172943.png\" alt=\"image-20210104172941982\"></p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。</p>\n<h1 id=\"变量（全局-x2F-集合-x2F-环境）\"><a href=\"#变量（全局-x2F-集合-x2F-环境）\" class=\"headerlink\" title=\"变量（全局&#x2F;集合&#x2F;环境）\"></a>变量（全局&#x2F;集合&#x2F;环境）</h1><p>变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。</p>\n<p>对我们做接口测试来说，又是一个非常重要的功能 。</p>\n<p>在postman常用的三种变量分别是全局变量，环境变量，集合变量 。</p>\n<ul>\n<li><strong>全局变量</strong>：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。</li>\n<li><strong>环境变量</strong>：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。</li>\n<li><strong>集合变量</strong>：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。</li>\n</ul>\n<p>其中，他们的作用域范围依次从大到小：全局变量&gt;集合变量&gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。</p>\n<p>想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。</p>\n<ul>\n<li>定义变量（设置变量）</li>\n<li>获取变量（访问变量）</li>\n</ul>\n<h2 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h2><p>定义全局变量和环境变量，点击右上角的小齿轮，就可以根据需求定义全局变量或者环境变量了。</p>\n<h2 id=\"查看变量\"><a href=\"#查看变量\" class=\"headerlink\" title=\"查看变量\"></a>查看变量</h2><p>定义全局变量和环境变量，点击右上角的眼睛，已经定义的全局变量和环境变量，可以进行快速查看。</p>\n<h2 id=\"定义集合变量\"><a href=\"#定义集合变量\" class=\"headerlink\" title=\"定义集合变量\"></a>定义集合变量</h2><p>选择一个集合，打开查看更多动作(<code>...</code>)菜单，然后点击<code>Edit</code> 。选择“变量”选项卡以编辑或添加到集合变量。</p>\n<p>定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。</p>\n<h3 id=\"在URL，Params-Authorization-Headers-Body中定义\"><a href=\"#在URL，Params-Authorization-Headers-Body中定义\" class=\"headerlink\" title=\"在URL，Params , Authorization , Headers , Body中定义\"></a>在URL，Params , Authorization , Headers , Body中定义</h3><ul>\n<li>手工方式创建一个空的变量名</li>\n<li>在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中</li>\n</ul>\n<h3 id=\"在Tests，Pre-requests-Script\"><a href=\"#在Tests，Pre-requests-Script\" class=\"headerlink\" title=\"在Tests，Pre-requests Script\"></a>在Tests，Pre-requests Script</h3><ul>\n<li>定义全局变量：pm.collectionVariables.set(“变量名”,变量值)</li>\n<li>定义环境变量：pm.environment.set(“变量名”，变量值)</li>\n<li>定义集合变量：pm.variables.set(“变量名”,变量值)</li>\n</ul>\n<h2 id=\"获取变量\"><a href=\"#获取变量\" class=\"headerlink\" title=\"获取变量\"></a>获取变量</h2><p>定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。</p>\n<p>如果在<strong>请求参数中</strong>获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则： 。</p>\n<ul>\n<li>请求参数指的是：URL，Params , Authorization , Headers , Body</li>\n</ul>\n<p>如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：</p>\n<ul>\n<li>获取环境变量：pm.environment.get(‘变量名’)</li>\n<li>获取全局变量：pm.globals.get(‘变量名’)</li>\n<li>获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)</li>\n</ul>\n<ol>\n<li><blockquote>\n<p>变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"请求前置脚本\"><a href=\"#请求前置脚本\" class=\"headerlink\" title=\"请求前置脚本\"></a>请求前置脚本</h2><p>前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。</p>\n<p>可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？</p>\n<p>主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。总体来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。</p>\n<h2 id=\"接口关联\"><a href=\"#接口关联\" class=\"headerlink\" title=\"接口关联\"></a>接口关联</h2><p>在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？</p>\n<p>实现思路：</p>\n<ol>\n<li>提取上一个接口的返回数据值，</li>\n<li>将这个数据值保存到环境变量或全局变量中</li>\n<li>在下一个接口获取环境变量或全局变量</li>\n</ol>\n<p>案例：</p>\n<blockquote>\n<p>登录获取Token</p>\n</blockquote>\n<p>实现思路：</p>\n<ul>\n<li>请求接口</li>\n<li>解析返回值需要的字段</li>\n<li>将需要的字段赋值保存到全局变量里面</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104175249.png\" alt=\"image-20210104175246872\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code is 200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);<br>&#125;);<br> <br><span class=\"hljs-comment\">// 把responseBody转为json字符串</span><br><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(responseBody);<br><span class=\"hljs-comment\">// 设置环境变量token，供后面的接口引用</span><br>pm.<span class=\"hljs-property\">environment</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&quot;access_token&quot;</span>, <span class=\"hljs-string\">&#x27;AfisAuth &#x27;</span>+data.<span class=\"hljs-property\">token</span>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"常见返回值获取\"><a href=\"#常见返回值获取\" class=\"headerlink\" title=\"常见返回值获取\"></a>常见返回值获取</h1><p>在做接口测试时，请求接口返回的数据都是很复杂的json数据，有着多层嵌套，这样的数据层级在postman怎么获取呢 ？</p>\n<h2 id=\"多层json嵌套-获取user-id的值\"><a href=\"#多层json嵌套-获取user-id的值\" class=\"headerlink\" title=\"多层json嵌套, 获取user_id的值\"></a>多层json嵌套, 获取user_id的值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;user_id&quot;</span>: <span class=\"hljs-string\">&quot;1252163151781167104&quot;</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取user_id的值,通过.获取</span><br><span class=\"hljs-keyword\">var</span> user_id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">user_id</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"json中存在列表，获取points中的第二个元素\"><a href=\"#json中存在列表，获取points中的第二个元素\" class=\"headerlink\" title=\"json中存在列表，获取points中的第二个元素\"></a>json中存在列表，获取points中的第二个元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;roles&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;api&quot;</span>: [<br>                <span class=\"hljs-string\">&quot;API-USER-DELETE&quot;</span><br>            ],<br>            <span class=\"hljs-string\">&quot;points&quot;</span>: [<br>                <span class=\"hljs-string\">&quot;point-user-delete&quot;</span>,<br>                <span class=\"hljs-string\">&quot;POINT-USER-UPDATE&quot;</span>,<br>                <span class=\"hljs-string\">&quot;POINT-USER-ADD&quot;</span><br>            ]<br>        &#125;,<br>        <span class=\"hljs-string\">&quot;authCache&quot;</span>: <span class=\"hljs-literal\">null</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取user_id的值,通过下标获取列表中某个元素</span><br><span class=\"hljs-keyword\">var</span> user_id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">roles</span>.<span class=\"hljs-property\">points</span>[<span class=\"hljs-number\">1</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"列表中取最后一个元素\"><a href=\"#列表中取最后一个元素\" class=\"headerlink\" title=\"列表中取最后一个元素\"></a>列表中取最后一个元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">24</span>,<br>        <span class=\"hljs-string\">&quot;rows&quot;</span>: [<br>           <br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1066370498633486336&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;15812340003&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;zbz&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1071632760222810112&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;16612094236&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;llx&quot;</span><br>            &#125;,<br>            ...<br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1075383133106425856&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;13523679872&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;test001&quot;</span>,<br>       <br>            &#125;,<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取id的值,通过slice(-1)获取列表中最后一个元素。</span><br><span class=\"hljs-keyword\">var</span> id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">rows</span>.<span class=\"hljs-title function_\">slice</span>(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "工具",
                "PostMan"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA-Stram%E8%B0%83%E8%AF%95/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA-Stram%E8%B0%83%E8%AF%95/",
            "title": "IDEA-Stram调试",
            "date_published": "2024-01-03T13:13:21.664Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>JAVA8的lambda的stream编程，给我们带来了很流畅(牛逼)的编程体验，但带来的问题也很明显：</p>\n<p>下面粘贴一张博猪一个日常的代码片段：</p>\n<p><img src=\"https://i.loli.net/2021/05/16/GMO19Rr65Uykbad.png\" alt=\"image-20210516222157802.png\"></p>\n</blockquote>\n<p>上面代码看着很简洁(zhaungbi)，但是带来的问题也很直接：</p>\n<ul>\n<li>方法可读性不好</li>\n<li>调试困难，无法知道流程周转</li>\n</ul>\n<p>下面博猪给大家介绍一个博猪日常写stream时常用的一个神器：&#x3D;&#x3D;Stream-Trance&#x3D;&#x3D;,一个IDEA自带的调试神器，这个工具可以详细看到每一步操作的关系、结果，非常方便进行调试。</p>\n<h1 id=\"Stream调试\"><a href=\"#Stream调试\" class=\"headerlink\" title=\"Stream调试\"></a>Stream调试</h1><p>下面通过一个Demo，让博猪给你演示一下神器是如何使用的。首先给大家贴一下没有注释的代码（很装逼的代码）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">45</span>,<span class=\"hljs-number\">56</span>,<span class=\"hljs-number\">23</span>,<span class=\"hljs-number\">89</span>,<span class=\"hljs-number\">34</span>,<span class=\"hljs-number\">78</span>,<span class=\"hljs-number\">56</span>);<br>Map&lt;Boolean, List&lt;Integer&gt;&gt; collect = list.stream()<br>        .filter(i -&gt; i * <span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">60</span>)<br>        .sorted()<br>        .map(i -&gt; i - <span class=\"hljs-number\">10</span>)<br>        .distinct()<br>        .collect(Collectors.groupingBy(i -&gt; i &gt;= <span class=\"hljs-number\">50</span>, Collectors.toList()));<br>System.out.println(collect);<br></code></pre></td></tr></table></figure>\n\n<p>下面博猪贴一下有注释的代码，顺便理一下这一块的代码的流程：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//初始化数组</span><br>List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">45</span>, <span class=\"hljs-number\">56</span>, <span class=\"hljs-number\">23</span>, <span class=\"hljs-number\">89</span>, <span class=\"hljs-number\">34</span>, <span class=\"hljs-number\">78</span>, <span class=\"hljs-number\">56</span>);<br>Map&lt;Boolean, List&lt;Integer&gt;&gt; collect = list.stream()<br>        <span class=\"hljs-comment\">//过滤 当前数字*2后大于60的,结果：[45,56,89,34,78,56]</span><br>        .filter(i -&gt; i * <span class=\"hljs-number\">2</span> &gt; <span class=\"hljs-number\">60</span>)<br>        <span class=\"hljs-comment\">//默认排序,结果:[34,45,56,56,78,89]</span><br>        .sorted()<br>        <span class=\"hljs-comment\">//每个值-10，成一个map：结果：&#123;24,35,46,46,68,79&#125;</span><br>        .map(i -&gt; i - <span class=\"hljs-number\">10</span>)<br>        <span class=\"hljs-comment\">//去重,结果：&#123;24,35,46,68,79&#125;</span><br>        .distinct()<br>        <span class=\"hljs-comment\">//大于五十的分组，输出一个Map&lt;Boolean,Collection&gt;,结果：&#123;false=[24, 35, 46], true=[68, 79]&#125;</span><br>        .collect(Collectors.groupingBy(i -&gt; i &gt;= <span class=\"hljs-number\">50</span>, Collectors.toList()));<br>System.out.println(collect);<br></code></pre></td></tr></table></figure>\n\n<p>上面这段代码算是流程比较长的了，当然实际工作中可能遇到比这个还要复杂的，那博猪演示一下日常是怎么调试Stream流程的。</p>\n<ul>\n<li>在Stream那行打上断点。点击debug运行。</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/H9D6AIBzpVuUO1J.png\" alt=\"image-20210516224707120.png\"></p>\n<ul>\n<li>点击下方按钮</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/kCfM9RescBSY56T.png\" alt=\"image-20210516224817756.png\"></p>\n<ul>\n<li><p>然后自动进入当前 <code>Stream ​</code>跟踪调试窗口，默认Split 模式显示，上面会展示每个链式调用的选项卡，点击各个选项卡可以看对应每步的跟踪结果。如下面所示：</p>\n<ul>\n<li>初始流</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/irG98MsoLcwWK7j.png\" alt=\"image-20210516224947403.png\"></p>\n<ul>\n<li>过滤</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/pdXOtZ1eg3fEmCA.png\" alt=\"image-20210516225139631.png\"></p>\n<ul>\n<li>排序</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/KTpAJVIzayqiM7h.png\" alt=\"image-20210516225158100.png\"></p>\n<ul>\n<li>转map</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/uSknG6vzfbgQyEl.png\" alt=\"image-20210516225215527.png\"></p>\n<ul>\n<li>去重</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/sBdW1lf2NxVLUmg.png\" alt=\"image-20210516225230717.png\"></p>\n<ul>\n<li>结果</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/y6EzCFpfOjNmwo5.png\" alt=\"image-20210516225249902.png\"></p>\n</li>\n<li><p>还可以点击<code>Flat Mode</code>，查看完整的流程的运转</p>\n</li>\n</ul>\n<p><img src=\"https://i.loli.net/2021/05/16/dNqs9ZXwrbgi4De.png\" alt=\"image-20210516225407829.png\"></p>\n<h1 id=\"链式调试\"><a href=\"#链式调试\" class=\"headerlink\" title=\"链式调试\"></a>链式调试</h1><p>上方详细介绍了一下Stream的调试，但是平时也是使用一些Lambda的链式编程，那上述方法是否支持呢？</p>\n<p>比如下方代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> Optional.of(<span class=\"hljs-string\">&quot;will&quot;</span>)<br>        .map(s -&gt; s + <span class=\"hljs-string\">&quot; hello&quot;</span>)<br>        .map(s -&gt; s + <span class=\"hljs-string\">&quot; world!&quot;</span>).get();<br>System.out.println(str);<br></code></pre></td></tr></table></figure>\n\n<p>OK，我们按照上方进行调试，调试图如下方所示：</p>\n<p><img src=\"https://i.loli.net/2021/05/16/VKAsE5YGah8SIT2.png\" alt=\"image-20210516230237419.png\"></p>\n<p>可惜， <code>Trace Current Stream Chain ​</code>按钮是灰色状态，不能进入，因为那个按钮只能被 <code>Stream ​</code>调试所用。</p>\n<p><strong>那像这种非 Stream 链式调用怎么调试呢？</strong></p>\n<p>断点进入后，可以选中需要调试的部分链式代码片断，然后右键选中 <code>Evaluate Expression ​</code>菜单（ALT + F8）进入表达式计算窗口，点击 <code>Evaluate ​</code>按钮开始计算：</p>\n<p><img src=\"https://i.loli.net/2021/05/16/vNV6iIde2qsDzlC.png\" alt=\"image-20210516230402779.png\"></p>\n<p><img src=\"https://i.loli.net/2021/05/16/lqGKfRJrHC7XojM.png\" alt=\"image-20210516230429818.png\"></p>\n<p>计算无误，该表达式还可以自由编辑，非常强大。虽然没有像 <code>Stream ​</code>这样专属的调试面板，使用 <code>Evaluate Expression ​</code>也能达到调试链式调用的目的</p>\n",
            "tags": [
                "IDEA",
                "工具"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/",
            "title": "IDEA自定义目录",
            "date_published": "2024-01-03T13:13:21.664Z",
            "content_html": "<h1 id=\"自定义IntelliJ-IDEA配置和插件的存放目录\"><a href=\"#自定义IntelliJ-IDEA配置和插件的存放目录\" class=\"headerlink\" title=\"自定义IntelliJ IDEA配置和插件的存放目录\"></a>自定义IntelliJ IDEA配置和插件的存放目录</h1><blockquote>\n<p>因为个人电脑配置和个人习惯，不太习惯把配置相关的放到C盘，所以本次特地记录一下IDEA的配置和插件目录的自定义</p>\n</blockquote>\n<ul>\n<li>下载安装IDEA</li>\n<li>关闭IDEA</li>\n<li>进入IDEA的安装目录</li>\n</ul>\n<blockquote>\n<p>举个栗子：</p>\n<p>本人安装目录：<code>D:\\Program Files\\IntelliJ IDEA 2021.2.1\\bin\\</code></p>\n</blockquote>\n<ul>\n<li>打开<code>idea.properties</code>文件</li>\n<li>修改配置存储路径</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">#---------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># Uncomment this option if you want to customize a path to the settings directory.</span><br><span class=\"hljs-comment\">#---------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>把上方注释的<code># idea.config.path=$&#123;user.home&#125;/.IntelliJIdea/config</code>复制一行</li>\n<li>放开注释</li>\n<li>更改成你自己配置的文件路径就行</li>\n</ul>\n<p>&#x3D;&#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&#x3D;&#x3D;</p>\n</blockquote>\n<ul>\n<li>修改插件配置路径</li>\n</ul>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs properties\"><span class=\"hljs-comment\">#---------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># Uncomment this option if you want to customize a path to the caches directory.</span><br><span class=\"hljs-comment\">#---------------------------------------------------------------------</span><br><span class=\"hljs-comment\"># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</span><br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<ul>\n<li>把上方注释的<code># idea.system.path=$&#123;user.home&#125;/.IntelliJIdea/system</code>复制一行</li>\n<li>放开注释</li>\n<li>更改成你自己配置的文件路径就行</li>\n</ul>\n<p>&#x3D;&#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&#x3D;&#x3D;</p>\n</blockquote>\n<ul>\n<li>保存后，再次运行idea，所有配置和插件都将保存在指定的目录；</li>\n<li>后续再次重装系统或者重装idea只需要更改这个配置就行，相关配置还在，岂不美滋滋。</li>\n</ul>\n",
            "tags": [
                "IDEA",
                "工具"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/",
            "title": "IDEA常用功能",
            "date_published": "2024-01-03T13:13:21.664Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>记录一下我IDEA常用配置，便于安装配置。</p>\n<p>快捷键摘自：<a href=\"https://blog.csdn.net/qq_38963960\">D离歌</a></p>\n</blockquote>\n<h1 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h1><h2 id=\"设置字体样式及大小\"><a href=\"#设置字体样式及大小\" class=\"headerlink\" title=\"设置字体样式及大小\"></a>设置字体样式及大小</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li>Font</li>\n</ul>\n<blockquote>\n<p>个人常用字体：Font:<code>Courier New</code>,Size”:<code>15</code>,Line spacing:<code>1.2</code>,Fallback Font:<code>Consolas</code></p>\n</blockquote>\n<h2 id=\"取消打开项目默认配置\"><a href=\"#取消打开项目默认配置\" class=\"headerlink\" title=\"取消打开项目默认配置\"></a>取消打开项目默认配置</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li>System Settings</li>\n<li>取消<code>Reopen last project on startup</code></li>\n</ul>\n<h2 id=\"鼠标更改窗口字体大小\"><a href=\"#鼠标更改窗口字体大小\" class=\"headerlink\" title=\"鼠标更改窗口字体大小\"></a>鼠标更改窗口字体大小</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li><code>Editor</code></li>\n<li><code>General</code></li>\n<li>取消<code>Reopen last project on startup</code></li>\n</ul>\n<h2 id=\"方法线\"><a href=\"#方法线\" class=\"headerlink\" title=\"方法线\"></a>方法线</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li><code>Editor</code></li>\n<li><code>Apperance</code></li>\n<li>勾选<code>Show method separators</code></li>\n</ul>\n<h2 id=\"提示不区分大小写\"><a href=\"#提示不区分大小写\" class=\"headerlink\" title=\"提示不区分大小写\"></a>提示不区分大小写</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li><code>Editor</code></li>\n<li><code>Code Completion</code></li>\n<li>取消勾选<code>Match case</code></li>\n</ul>\n<h2 id=\"自动导入\"><a href=\"#自动导入\" class=\"headerlink\" title=\"自动导入\"></a>自动导入</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li><code>Editor</code></li>\n<li><code>General</code></li>\n<li><code>Auto Import</code></li>\n<li>勾选<code>Add unambiguous imports on the fly</code></li>\n<li>勾选<code>Optimize imports on the fly (for current project)</code></li>\n</ul>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><ul>\n<li><code>CTRL+ALT+S</code>进入设置</li>\n<li><code>Editor</code></li>\n<li><code>File Encodings</code></li>\n<li>相关编码设置成<code>UTF-8</code></li>\n<li><code>BOM for new UTF-8 files</code>选择<code>Create UTF-8 files:</code>中的<code>with NO BOM</code></li>\n</ul>\n<h1 id=\"常用插件\"><a href=\"#常用插件\" class=\"headerlink\" title=\"常用插件\"></a>常用插件</h1><ul>\n<li>.ignore\t\t\t\t\t\t\t\t\t\t\t\t<code>（Git 忽略文件)</code></li>\n<li>Alibaba Java Coding Guidelines     <code>（阿里编码规范代码检查）</code></li>\n<li>Free MyBatis plugin                         <code>（Mybatis/Mybatis Plus 快速dao到xml工具）</code></li>\n<li>GitToolBox                                         <code>Git工具箱</code></li>\n<li>Lombok                                              <code>小辣椒工具</code></li>\n<li>Protocol Buffer Editor                     <code>Protocol Buffer 工具</code></li>\n<li>sequenceDiagram                           <code>Java方法调用时序图</code></li>\n<li>Translation                                        <code>谷歌翻译工具</code></li>\n</ul>\n<h1 id=\"常用快捷键\"><a href=\"#常用快捷键\" class=\"headerlink\" title=\"常用快捷键\"></a>常用快捷键</h1><blockquote>\n<p>对于快捷键我推荐使用默认用IDEA默认的快捷键</p>\n</blockquote>\n<h2 id=\"Ctrl\"><a href=\"#Ctrl\" class=\"headerlink\" title=\"Ctrl\"></a>Ctrl</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ctrl + F</td>\n<td align=\"left\">在当前文件进行文本查找 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + R</td>\n<td align=\"left\">在当前文件进行文本替换 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Z</td>\n<td align=\"left\">撤销 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Y</td>\n<td align=\"left\">删除光标所在行 或 删除选中的行 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + X</td>\n<td align=\"left\">剪切光标所在行 或 剪切选择内容<code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + C</td>\n<td align=\"left\">复制光标所在行 或 复制选择内容</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + D</td>\n<td align=\"left\">复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + W</td>\n<td align=\"left\">递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + E</td>\n<td align=\"left\">显示最近打开的文件记录列表</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + N</td>\n<td align=\"left\">根据输入的 <strong>类名</strong> 查找类文件</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + G</td>\n<td align=\"left\">在当前文件跳转到指定行处</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + J</td>\n<td align=\"left\">插入自定义动态代码模板</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + P</td>\n<td align=\"left\">方法参数提示显示</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Q</td>\n<td align=\"left\">光标所在的变量 &#x2F; 类名 &#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + U</td>\n<td align=\"left\">前往当前光标所在的方法的父类的方法 &#x2F; 接口定义</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + B</td>\n<td align=\"left\">进入光标所在的方法&#x2F;变量的接口或是定义出，等效于 <code>Ctrl + 左键单击</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + K</td>\n<td align=\"left\">版本控制提交项目，需要此项目有加入到版本控制才可用</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + T</td>\n<td align=\"left\">版本控制更新项目，需要此项目有加入到版本控制才可用</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + H</td>\n<td align=\"left\">显示当前类的层次结构</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + O</td>\n<td align=\"left\">选择可重写的方法</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + I</td>\n<td align=\"left\">选择可继承的方法</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + +</td>\n<td align=\"left\">展开代码</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + -</td>\n<td align=\"left\">折叠代码</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + &#x2F;</td>\n<td align=\"left\">注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + [</td>\n<td align=\"left\">移动光标到当前所在代码的花括号开始位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + ]</td>\n<td align=\"left\">移动光标到当前所在代码的花括号结束位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F1</td>\n<td align=\"left\">在光标所在的错误代码出显示错误信息</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F3</td>\n<td align=\"left\">调转到所选中的词的下一个引用位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F4</td>\n<td align=\"left\">关闭当前编辑文件</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F8</td>\n<td align=\"left\">在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F9</td>\n<td align=\"left\">执行 Make Project 操作</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F11</td>\n<td align=\"left\">选中文件 &#x2F; 文件夹，使用助记符设定 &#x2F; 取消书签</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + F12</td>\n<td align=\"left\">弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Tab</td>\n<td align=\"left\">编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Enter</td>\n<td align=\"left\">智能分隔行</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + End</td>\n<td align=\"left\">跳到文件尾</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Home</td>\n<td align=\"left\">跳到文件头</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Space</td>\n<td align=\"left\">基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 <code>Ctrl + 逗号</code> <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Delete</td>\n<td align=\"left\">删除光标后面的单词或是中文句</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + BackSpace</td>\n<td align=\"left\">删除光标前面的单词或是中文句</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 1,2,3…9</td>\n<td align=\"left\">定位到对应数值的书签位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 左键单击</td>\n<td align=\"left\">在打开的文件标题上，弹出该文件路径</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 光标定位</td>\n<td align=\"left\">按 Ctrl 不要松开，会显示光标所在的类信息摘要</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 左方向键</td>\n<td align=\"left\">光标跳转到当前单词 &#x2F; 中文句的左侧开头位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 右方向键</td>\n<td align=\"left\">光标跳转到当前单词 &#x2F; 中文句的右侧开头位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 前方向键</td>\n<td align=\"left\">等效于鼠标滚轮向前效果</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + 后方向键</td>\n<td align=\"left\">等效于鼠标滚轮向后效果</td>\n</tr>\n</tbody></table>\n<h2 id=\"Alt\"><a href=\"#Alt\" class=\"headerlink\" title=\"Alt\"></a>Alt</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Alt + &#96;</td>\n<td align=\"left\">显示版本控制常用操作菜单弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Q</td>\n<td align=\"left\">弹出一个提示，显示当前类的声明 &#x2F; 上下文信息</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + F1</td>\n<td align=\"left\">显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + F2</td>\n<td align=\"left\">对于前面页面，显示各类浏览器打开目标选择弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + F3</td>\n<td align=\"left\">选中文本，逐个往下查找相同文本，并高亮显示</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + F7</td>\n<td align=\"left\">查找光标所在的方法 &#x2F; 变量 &#x2F; 类被调用的地方</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + F8</td>\n<td align=\"left\">在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Home</td>\n<td align=\"left\">定位 &#x2F; 显示到当前文件的 <code>Navigation Bar</code></td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Enter</td>\n<td align=\"left\">IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Insert</td>\n<td align=\"left\">代码自动生成，如生成对象的 set &#x2F; get 方法，构造函数，toString() 等</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + 左方向键</td>\n<td align=\"left\">按左方向切换当前已打开的文件视图</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + 右方向键</td>\n<td align=\"left\">按右方向切换当前已打开的文件视图</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + 前方向键</td>\n<td align=\"left\">当前光标跳转到当前文件的前一个方法名位置</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + 后方向键</td>\n<td align=\"left\">当前光标跳转到当前文件的后一个方法名位置</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + 1,2,3…9</td>\n<td align=\"left\">显示对应数值的选项卡，其中 1 是 Project 用得最多</td>\n</tr>\n</tbody></table>\n<h2 id=\"Shift\"><a href=\"#Shift\" class=\"headerlink\" title=\"Shift\"></a>Shift</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Shift + F1</td>\n<td align=\"left\">如果有外部文档可以连接外部文档</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F2</td>\n<td align=\"left\">跳转到上一个高亮错误 或 警告位置</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F3</td>\n<td align=\"left\">在查找模式下，查找匹配上一个</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F4</td>\n<td align=\"left\">对当前打开的文件，使用新Windows窗口打开，旧窗口保留</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F6</td>\n<td align=\"left\">对文件 &#x2F; 文件夹 重命名</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F7</td>\n<td align=\"left\">在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F8</td>\n<td align=\"left\">在 Debug 模式下，跳出，表现出来的效果跟 <code>F9</code> 一样</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F9</td>\n<td align=\"left\">等效于点击工具栏的 <code>Debug</code> 按钮</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F10</td>\n<td align=\"left\">等效于点击工具栏的 <code>Run</code> 按钮</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + F11</td>\n<td align=\"left\">弹出书签显示层</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + Tab</td>\n<td align=\"left\">取消缩进</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + ESC</td>\n<td align=\"left\">隐藏当前 或 最后一个激活的工具窗口</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + End</td>\n<td align=\"left\">选中光标到当前行尾位置</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + Home</td>\n<td align=\"left\">选中光标到当前行头位置</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + Enter</td>\n<td align=\"left\">开始新一行。光标所在行下空出一行，光标定位到新行位置</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + 左键单击</td>\n<td align=\"left\">在打开的文件名上按此快捷键，可以关闭当前打开文件</td>\n</tr>\n<tr>\n<td align=\"left\">Shift + 滚轮前后滚动</td>\n<td align=\"left\">当前文件的横向滚动轴滚动</td>\n</tr>\n</tbody></table>\n<h2 id=\"Ctrl-Alt\"><a href=\"#Ctrl-Alt\" class=\"headerlink\" title=\"Ctrl + Alt\"></a>Ctrl + Alt</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ctrl + Alt + L</td>\n<td align=\"left\">格式化代码，可以对当前文件和整个包目录使用 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + O</td>\n<td align=\"left\">优化导入的类，可以对当前文件和整个包目录使用 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + I</td>\n<td align=\"left\">光标所在行 或 选中部分进行自动代码缩进，有点类似格式化</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + T</td>\n<td align=\"left\">对选中的代码弹出环绕选项弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + J</td>\n<td align=\"left\">弹出模板选择窗口，讲选定的代码加入动态模板中</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + H</td>\n<td align=\"left\">调用层次</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + B</td>\n<td align=\"left\">在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + V</td>\n<td align=\"left\">快速引进变量</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + Y</td>\n<td align=\"left\">同步、刷新</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + S</td>\n<td align=\"left\">打开 IntelliJ IDEA 系统设置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + F7</td>\n<td align=\"left\">显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + F11</td>\n<td align=\"left\">切换全屏模式</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + Enter</td>\n<td align=\"left\">光标所在行上空出一行，光标定位到新行</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + Home</td>\n<td align=\"left\">弹出跟当前文件有关联的文件弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + Space</td>\n<td align=\"left\">类名自动完成</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + 左方向键</td>\n<td align=\"left\">退回到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + 右方向键</td>\n<td align=\"left\">前进到上一个操作的地方 <code>（必备）**（注意与其他软件快捷键冲突）**</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + 前方向键</td>\n<td align=\"left\">在查找模式下，跳到上个查找的文件</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Alt + 后方向键</td>\n<td align=\"left\">在查找模式下，跳到下个查找的文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"Ctrl-Shift\"><a href=\"#Ctrl-Shift\" class=\"headerlink\" title=\"Ctrl + Shift\"></a>Ctrl + Shift</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ctrl + Shift + F</td>\n<td align=\"left\">根据输入内容查找整个项目 或 指定目录内文件 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + R</td>\n<td align=\"left\">根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + J</td>\n<td align=\"left\">自动将下一行合并到当前行末尾 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Z</td>\n<td align=\"left\">取消撤销 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + W</td>\n<td align=\"left\">递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + N</td>\n<td align=\"left\">通过文件名定位 &#x2F; 打开文件 &#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + U</td>\n<td align=\"left\">对选中的代码进行大 &#x2F; 小写轮流转换 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + T</td>\n<td align=\"left\">对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + C</td>\n<td align=\"left\">复制当前文件磁盘路径到剪贴板</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + V</td>\n<td align=\"left\">弹出缓存的最近拷贝的内容管理器弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + E</td>\n<td align=\"left\">显示最近修改的文件列表的弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + H</td>\n<td align=\"left\">显示方法层次结构</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + B</td>\n<td align=\"left\">跳转到类型声明处</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + I</td>\n<td align=\"left\">快速查看光标所在的方法 或 类的定义</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + A</td>\n<td align=\"left\">查找动作 &#x2F; 设置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + &#x2F;</td>\n<td align=\"left\">代码块注释 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + [</td>\n<td align=\"left\">选中从光标所在位置到它的顶部中括号位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + ]</td>\n<td align=\"left\">选中从光标所在位置到它的底部中括号位置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + +</td>\n<td align=\"left\">展开所有代码</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + -</td>\n<td align=\"left\">折叠所有代码</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + F7</td>\n<td align=\"left\">高亮显示所有该选中文本，按Esc高亮消失</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + F8</td>\n<td align=\"left\">在 Debug 模式下，指定断点进入条件</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + F9</td>\n<td align=\"left\">编译选中的文件 &#x2F; 包 &#x2F; Module</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + F12</td>\n<td align=\"left\">编辑器最大化</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Space</td>\n<td align=\"left\">智能代码提示</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Enter</td>\n<td align=\"left\">自动结束代码，行末自动添加分号 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Backspace</td>\n<td align=\"left\">退回到上次修改的地方</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 1,2,3…9</td>\n<td align=\"left\">快速添加指定数值的书签</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 左方向键</td>\n<td align=\"left\">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的左侧开头位置，同时选中该单词 &#x2F; 中文句</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 右方向键</td>\n<td align=\"left\">在代码文件上，光标跳转到当前单词 &#x2F; 中文句的右侧开头位置，同时选中该单词 &#x2F; 中文句</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 左方向键</td>\n<td align=\"left\">在光标焦点是在工具选项卡上，缩小选项卡区域</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 右方向键</td>\n<td align=\"left\">在光标焦点是在工具选项卡上，扩大选项卡区域</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 前方向键</td>\n<td align=\"left\">光标放在方法名上，将方法移动到上一个方法前面，调整方法排序</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + 后方向键</td>\n<td align=\"left\">光标放在方法名上，将方法移动到下一个方法前面，调整方法排序</td>\n</tr>\n</tbody></table>\n<h2 id=\"Alt-Shift\"><a href=\"#Alt-Shift\" class=\"headerlink\" title=\"Alt + Shift\"></a>Alt + Shift</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Alt + Shift + N</td>\n<td align=\"left\">选择 &#x2F; 添加 task</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + F</td>\n<td align=\"left\">显示添加到收藏夹弹出层</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + C</td>\n<td align=\"left\">查看最近操作项目的变化情况列表</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + F</td>\n<td align=\"left\">添加到收藏夹</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + I</td>\n<td align=\"left\">查看项目当前文件</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + F7</td>\n<td align=\"left\">在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + F9</td>\n<td align=\"left\">弹出 <code>Debug</code> 的可选择菜单</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + F10</td>\n<td align=\"left\">弹出 <code>Run</code> 的可选择菜单</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + 左键双击</td>\n<td align=\"left\">选择被双击的单词 &#x2F; 中文句，按住不放，可以同时选择其他单词 &#x2F; 中文句</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + 前方向键</td>\n<td align=\"left\">移动光标所在行向上移动</td>\n</tr>\n<tr>\n<td align=\"left\">Alt + Shift + 后方向键</td>\n<td align=\"left\">移动光标所在行向下移动</td>\n</tr>\n</tbody></table>\n<h2 id=\"Ctrl-Shift-Alt\"><a href=\"#Ctrl-Shift-Alt\" class=\"headerlink\" title=\"Ctrl + Shift + Alt\"></a>Ctrl + Shift + Alt</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Ctrl + Shift + Alt + V</td>\n<td align=\"left\">无格式黏贴</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Alt + N</td>\n<td align=\"left\">前往指定的变量 &#x2F; 方法</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Alt + S</td>\n<td align=\"left\">打开当前项目设置</td>\n</tr>\n<tr>\n<td align=\"left\">Ctrl + Shift + Alt + C</td>\n<td align=\"left\">复制参考信息</td>\n</tr>\n</tbody></table>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">F2</td>\n<td align=\"left\">跳转到下一个高亮错误 或 警告位置 <code>（必备）</code></td>\n</tr>\n<tr>\n<td align=\"left\">F3</td>\n<td align=\"left\">在查找模式下，定位到下一个匹配处</td>\n</tr>\n<tr>\n<td align=\"left\">F4</td>\n<td align=\"left\">编辑源</td>\n</tr>\n<tr>\n<td align=\"left\">F7</td>\n<td align=\"left\">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中</td>\n</tr>\n<tr>\n<td align=\"left\">F8</td>\n<td align=\"left\">在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内</td>\n</tr>\n<tr>\n<td align=\"left\">F9</td>\n<td align=\"left\">在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上</td>\n</tr>\n<tr>\n<td align=\"left\">F11</td>\n<td align=\"left\">添加书签</td>\n</tr>\n<tr>\n<td align=\"left\">F12</td>\n<td align=\"left\">回到前一个工具窗口</td>\n</tr>\n<tr>\n<td align=\"left\">Tab</td>\n<td align=\"left\">缩进</td>\n</tr>\n<tr>\n<td align=\"left\">ESC</td>\n<td align=\"left\">从工具窗口进入代码文件窗口</td>\n</tr>\n<tr>\n<td align=\"left\">连按两次Shift</td>\n<td align=\"left\">弹出 <code>Search Everywhere</code> 弹出层</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "IDEA",
                "工具"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/",
            "title": "Archery教程",
            "date_published": "2024-01-03T13:13:21.663Z",
            "content_html": "<blockquote>\n<blockquote>\n<p>本文基于官方文档安装，有不太详细的地方请多多包涵，下方为官方文档连接：</p>\n</blockquote>\n<p><a href=\"https://archerydms.com/\">Archery中文官方文档</a></p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><blockquote>\n<p>Archery是<a href=\"https://github.com/jly8866/archer\">archer</a>的分支项目，定位于SQL审核查询平台，旨在提升DBA的工作效率，支持多数据库的SQL上线和查询，同时支持丰富的MySQL运维功能，所有功能都兼容手机端操作</p>\n</blockquote>\n<h1 id=\"功能清单\"><a href=\"#功能清单\" class=\"headerlink\" title=\"功能清单\"></a>功能清单</h1><table>\n<thead>\n<tr>\n<th align=\"left\">查询</th>\n<th align=\"left\">审核</th>\n<th align=\"left\">执行</th>\n<th align=\"left\">备份</th>\n<th align=\"left\">数据字典</th>\n<th align=\"left\">慢日志</th>\n<th align=\"left\">会话管理</th>\n<th align=\"left\">账号管理</th>\n<th align=\"left\">参数管理</th>\n<th align=\"left\">数据归档</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"left\">MsSQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">Redis</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">PgSQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">Oracle</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">MongoDB</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<h1 id=\"部署升级\"><a href=\"#部署升级\" class=\"headerlink\" title=\"部署升级\"></a>部署升级</h1><blockquote>\n<p>支持docker部署、手动部署，支持升级。</p>\n<p>由于安装包部署略微繁琐，本文不提供介绍，详细请看上方文档地址，自行搭建，本次只是提供基于docker的部署教程。</p>\n</blockquote>\n<ul>\n<li>docker部署</li>\n<li>安装包部署</li>\n</ul>\n<h1 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h1><h2 id=\"安装Docker-compose\"><a href=\"#安装Docker-compose\" class=\"headerlink\" title=\"安装Docker-compose\"></a>安装Docker-compose</h2><blockquote>\n<p>安装Docker-compose有两种方法：一个通过Python的pip安装；另外一个是通过连接。</p>\n<p>本文会详细介绍两种方法。</p>\n</blockquote>\n<h3 id=\"通过pip安装\"><a href=\"#通过pip安装\" class=\"headerlink\" title=\"通过pip安装\"></a>通过pip安装</h3><h4 id=\"更新Python3-X版本\"><a href=\"#更新Python3-X版本\" class=\"headerlink\" title=\"更新Python3.X版本\"></a>更新Python3.X版本</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 进入安装包目录</span><br><span class=\"hljs-built_in\">cd</span> /source<br><span class=\"hljs-comment\"># 下载Python3安装包</span><br>wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz<br><span class=\"hljs-comment\"># 解压</span><br>tar xzvf Python-3.7.0.tgz<br><span class=\"hljs-built_in\">cd</span> Python-3.7.0<br><span class=\"hljs-built_in\">mkdir</span> /usr/local/src/python3   <span class=\"hljs-comment\">#这个是个人喜好放在这个目录</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装GC编译器\"><a href=\"#安装GC编译器\" class=\"headerlink\" title=\"安装GC编译器\"></a>安装GC编译器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum -y install gcc<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>先安装一下GC编译器，要不然编译失败，没办法安装。</p>\n<p><strong>检查一下：</strong>要注意的是产生了：python3和pip3.7</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">ls <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/src/</span>python3/bin<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装依赖</span><br>yum install -y epel-release<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装pip</span><br>yum install -y python-pip<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看pip版本</span><br>pip --version<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">升级pip版本</span><br>pip install -U pip<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br>pip install docker-compose<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过docker安装\"><a href=\"#通过docker安装\" class=\"headerlink\" title=\"通过docker安装\"></a>通过docker安装</h3><h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><blockquote>\n<p>已安装docker该步骤略过。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com -o get-docker.sh | sudo sh<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-Compos\"><a href=\"#安装-Docker-Compos\" class=\"headerlink\" title=\"安装 Docker Compos\"></a>安装 Docker Compos</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"下载REALEASE文件\"><a href=\"#下载REALEASE文件\" class=\"headerlink\" title=\"下载REALEASE文件\"></a>下载REALEASE文件</h2><blockquote>\n<p>下载下图路径下的文件，里面包含项目执行的所需要的SQL以及依赖。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316105046.png\" alt=\"image-20210316105036672\"></p>\n<h2 id=\"准备运行配置\"><a href=\"#准备运行配置\" class=\"headerlink\" title=\"准备运行配置\"></a>准备运行配置</h2><p>具体可参考：<a href=\"https://github.com/hhyo/Archery/tree/master/src/docker-compose\">文档地址</a></p>\n<blockquote>\n<p>docker-compose.yml文件内的services可按照本身的运行环境来调整，同时注意检查版本号是否正确，比如说外部已经装好了mysql、redis、inception，就可以将对应的services删除，但是需要注意修改settings.py文件的相关配置，具体可以参考<a href=\"https://archerydms.com/installation/manual/#_5\">修改配置</a></p>\n</blockquote>\n<h2 id=\"启动部署\"><a href=\"#启动部署\" class=\"headerlink\" title=\"启动部署\"></a>启动部署</h2><blockquote>\n<p>下载 <a href=\"https://github.com/hhyo/archery/releases/\">Releases</a>文件，解压后进入docker-compose文件夹,按照本文4.3步骤进行本地配置。</p>\n<p>因本人使用的是新建的虚拟机，所以就按照默认配置进行执行了。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动</span><br>docker-compose -f docker-compose.yml up -d<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">表结构初始化</span><br>docker exec -ti archery /bin/bash<br>cd /opt/archery<br>source /opt/venv4archery/bin/activate<br>python3 manage.py makemigrations sql  <br>python3 manage.py migrate <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">数据初始化</span><br>python3 manage.py dbshell&lt;sql/fixtures/auth_group.sql<br>python3 manage.py dbshell&lt;src/init_sql/mysql_slow_query_review.sql<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建管理用户</span><br>python3 manage.py createsuperuser<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启</span><br>docker restart archery<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">日志查看和问题排查</span><br>docker logs archery -f --tail=50<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><a href=\"http://127.0.0.1:9123/\">http://127.0.0.1:9123</a></p>\n<h2 id=\"启动后配置\"><a href=\"#启动后配置\" class=\"headerlink\" title=\"启动后配置\"></a>启动后配置</h2><p>在启动后 Archery 有一些配置(如Inception , 资源组, 权限组等)需要按需配置, 请详细阅读 <a href=\"https://archerydms.com/configuration/\">配置项说明</a> , 按照自己的需要进行配置</p>\n<h2 id=\"运行界面\"><a href=\"#运行界面\" class=\"headerlink\" title=\"运行界面\"></a>运行界面</h2><p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316113345.png\" alt=\"image-20210316113342723\"></p>\n",
            "tags": [
                "Archery",
                "MySql",
                "工具"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/",
            "title": "Git分支管理流程",
            "date_published": "2024-01-03T13:13:21.663Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>有幸参与一次大型项目，人员较多，需求较多，代码管理方面值得学习，记录总结一下分支管理。</p>\n<p>本文参考：</p>\n<p><a href=\"https://blog.csdn.net/ligang2585116/category_2869531.html?spm=1001.2014.3001.5482\">李刚的学习专栏</a></p>\n<p><a href=\"https://www.pianshen.com/article/1702340951/\">程序员大本营</a></p>\n</blockquote>\n<h1 id=\"管理流程简介\"><a href=\"#管理流程简介\" class=\"headerlink\" title=\"管理流程简介\"></a>管理流程简介</h1><h2 id=\"流程图例\"><a href=\"#流程图例\" class=\"headerlink\" title=\"流程图例\"></a>流程图例</h2><p>大体管理流程如下：</p>\n<p><img src=\"https://z3.ax1x.com/2021/03/22/6ok62V.png\"></p>\n<p><img src=\"https://www.pianshen.com/images/752/5e42a4fa2ddcfadf8c02c39a9da9cc40.png\"></p>\n<h2 id=\"案例解析\"><a href=\"#案例解析\" class=\"headerlink\" title=\"案例解析\"></a>案例解析</h2><p>如上图所示：</p>\n<blockquote>\n<p>生产初始版本为v0.5,项目初始develop与master是保持一致的</p>\n<p>现有新需求:</p>\n<ul>\n<li>平台注册功能</li>\n<li>平台登录功能</li>\n</ul>\n<p>版本规划：</p>\n<ul>\n<li>平台注册功能v1.0版本上线</li>\n<li>平台登录功能v1.1版本上线</li>\n</ul>\n<p>开发任务：</p>\n<ul>\n<li>注册功能由张三负责</li>\n<li>登录功能由李四负责</li>\n</ul>\n</blockquote>\n<h3 id=\"张三同学：v1-0版本开发到上线\"><a href=\"#张三同学：v1-0版本开发到上线\" class=\"headerlink\" title=\"张三同学：v1.0版本开发到上线\"></a>张三同学：v1.0版本开发到上线</h3><ul>\n<li>从develop新建一个用于开发注册功能的分支</li>\n<li>命名为feature_register</li>\n<li>本地拉取分支代码，开发注册功能，测试，修改再测试等流程</li>\n<li>开发完成，提交到develop，此时feature_register可以删除</li>\n<li>从develop新建一个预发布分支release-v1.0</li>\n<li>从release-v1.0打包发布到测试环境</li>\n<li>测试修复bug，测试通过更新到master以及develop</li>\n<li>master打包，打tag，tag信息为v1.0相关信息</li>\n</ul>\n<h3 id=\"李四同学：v1-1版本开发到上线\"><a href=\"#李四同学：v1-1版本开发到上线\" class=\"headerlink\" title=\"李四同学：v1.1版本开发到上线\"></a>李四同学：v1.1版本开发到上线</h3><ul>\n<li>从develop新建一个用于开发登录功能的分支</li>\n<li>命名为feature_login</li>\n<li>本地拉取分支代码，开发登录功能，测试，修改再测试等流程</li>\n<li>开发完成，提交到develop，此时feature_login可以删除</li>\n<li>从develop新建一个预发布分支release-v1.0</li>\n<li>从release-v1.0打包发布到测试环境</li>\n<li>测试修复bug，测试通过更新到master以及develop</li>\n<li>master打包，打tag，tag信息为v1.0相关信息</li>\n</ul>\n<blockquote>\n<p>注：hotfix-xxx分支主要是针对master上bug的修复，修复完成之后需要把hotfix合并到maser，master打包，打tag，tag信息为hotfix相关信息，并发布生产，同时合并到develop分支，使develop和master一致，此时hotfix可删除。</p>\n</blockquote>\n",
            "tags": [
                "工具",
                "Git"
            ]
        }
    ]
}