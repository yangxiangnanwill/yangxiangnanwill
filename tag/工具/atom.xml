<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</id>
    <title>Will • Posts by &#34;工具&#34; tag</title>
    <link href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io" />
    <updated>2024-01-03T13:13:21.665Z</updated>
    <category term="开发习惯" />
    <category term="思考" />
    <category term="思维习惯" />
    <category term="感言" />
    <category term="Docker" />
    <category term="LINUX" />
    <category term="Node" />
    <category term="前端" />
    <category term="Nvm" />
    <category term="CentOS" />
    <category term="Linux" />
    <category term="Crontab" />
    <category term="Jenkins" />
    <category term="IDEA" />
    <category term="Alibaba Cloud Toolkit" />
    <category term="Archery" />
    <category term="MySql" />
    <category term="工具" />
    <category term="Maven" />
    <category term="Git" />
    <category term="JAVA" />
    <category term="shell" />
    <category term="信息安全等级保护认证" />
    <category term="系统认证" />
    <category term="读书笔记" />
    <category term="BeetlSql" />
    <category term="Beetl" />
    <category term="异常" />
    <category term="Java IO-初识IO" />
    <category term="Spring" />
    <category term="SpringCloud" />
    <category term="SpringCloud Alibaba" />
    <category term="枚举" />
    <category term="POI" />
    <category term="Spring Boot" />
    <category term="VinUtil" />
    <category term="VerificationCode" />
    <category term="SOAR" />
    <category term="其他" />
    <category term="ProtoBuffer" />
    <category term="博客园" />
    <category term="博客" />
    <category term="MongoDb" />
    <category term="Lombok工具库详解" />
    <category term="常用开发库" />
    <category term="JSON类库详解" />
    <category term="Hutool" />
    <category term="工具类" />
    <category term="Spring常用工具类" />
    <category term="异步编程" />
    <category term="线程" />
    <category term="方法论" />
    <category term="开源协议" />
    <category term="CentOS7" />
    <category term="MongoDB" />
    <category term="Redis" />
    <category term="VMware" />
    <category term="Typora" />
    <category term="PostMan" />
    <category term="Java8" />
    <category term="特性" />
    <category term="JDBC" />
    <category term="Mysql" />
    <category term="EasyExcel" />
    <category term="日志类库详解" />
    <category term="Script" />
    <category term="设计模式" />
    <category term="MyBatis" />
    <category term="Apache Common" />
    <category term="Google Guava" />
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Typora%E6%95%99%E7%A8%8B/</id>
        <title>Typora教程</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Typora%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本篇介绍一下博猪经常使用的一个工具的教程，也是博猪用于总结开发和记录学习笔记的一个神器，说先说明一点，博猪纯纯的处女座，所以对于某些东西还是有较高的要求的，但是这款工具都满足了博猪的要求，最主要的事情就是开源（免费）和用着爽。废话不多说，下面博猪带给你史上Typora保姆级教程。&lt;/p&gt;
&lt;p&gt;Typora 一直是我认为桌面端笔记应用应有的终极形态。用一句话概况话来说就是，「它的&lt;strong&gt;功能之强大、设计之冷静、体验之美妙、理念之先进&lt;/strong&gt;，我认为值得所有笔记应用厂商学习。」&lt;/p&gt;
&lt;p&gt;参考文章：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://sspai.com/post/54912/&#34;&gt;少数派&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33159059/article/details/87910522&#34;&gt;CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/tian_ci/article/details/85257667&#34;&gt;CSDN博客&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;Typora简介&#34;&gt;&lt;a href=&#34;#Typora简介&#34; class=&#34;headerlink&#34; title=&#34;Typora简介&#34;&gt;&lt;/a&gt;Typora简介&lt;/h1&gt;&lt;h2 id=&#34;Typora-是什么？&#34;&gt;&lt;a href=&#34;#Typora-是什么？&#34; class=&#34;headerlink&#34; title=&#34;Typora 是什么？&#34;&gt;&lt;/a&gt;Typora 是什么？&lt;/h2&gt;&lt;p&gt;Typora 是一款&lt;strong&gt;支持实时预览的 Markdown 文本编辑器&lt;/strong&gt;。它有 OS X、Windows、Linux 三个平台的版本，并且由于仍在测试中，是&lt;strong&gt;完全免费&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;在这篇文章中，我希望以「Typora 是什么」这个问题为线索，向大家全面介绍这款令人爱不释手的笔记应用。&lt;/p&gt;
&lt;h2 id=&#34;一个-Markdown-文本编辑器&#34;&gt;&lt;a href=&#34;#一个-Markdown-文本编辑器&#34; class=&#34;headerlink&#34; title=&#34;一个 Markdown 文本编辑器&#34;&gt;&lt;/a&gt;一个 Markdown 文本编辑器&lt;/h2&gt;&lt;p&gt;Typora 首先是一个 Markdown 文本编辑器，它支持且仅支持 Markdown 语法的文本编辑。在 &lt;a href=&#34;https://typora.io/&#34;&gt;Typora 官网&lt;/a&gt; 上他们将 Typora 描述为 「A truly &lt;strong&gt;minimal&lt;/strong&gt; markdown editor. 」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/49c4cdef47bf81018b9871a628523064.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;关于-Markdown&#34;&gt;&lt;a href=&#34;#关于-Markdown&#34; class=&#34;headerlink&#34; title=&#34;关于 Markdown&#34;&gt;&lt;/a&gt;关于 Markdown&lt;/h3&gt;&lt;p&gt;Markdown 是用来编写结构化文档的一种纯文本格式，它使我们在双手不离开键盘的情况下，可以对文本进行一定程度的格式排版。&lt;/p&gt;
&lt;p&gt;由于目前还没有一个权威机构对 Markdown 的语法进行规范，各应用厂商制作时遵循的 Markdown 语法也是不尽相同的。其中比较受到认可的是 &lt;a href=&#34;https://github.github.com/gfm/&#34;&gt;GFM 标准&lt;/a&gt;，它是由著名代码托管网站 &lt;a href=&#34;https://github.com/&#34;&gt;GitHub&lt;/a&gt; 所制定的。Typora 主要使用的也是 GFM 标准。同时，你还可以在 &lt;code&gt;文件 - 偏好设置 - Markdown 语法偏好 - 严格模式&lt;/code&gt; 中将标准设置为「更严格地遵循 GFM 标准」。具体内容你可以在官方的 &lt;a href=&#34;http://support.typora.io/Strict-Mode/&#34;&gt;这篇文档&lt;/a&gt; 中查看。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/a35f8fd5e9d968edfe5a0b02b54d0881.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;严格模式&lt;/p&gt;
&lt;h3 id=&#34;写得舒服&#34;&gt;&lt;a href=&#34;#写得舒服&#34; class=&#34;headerlink&#34; title=&#34;写得舒服&#34;&gt;&lt;/a&gt;写得舒服&lt;/h3&gt;&lt;p&gt;一个文本编辑器，&lt;strong&gt;写得舒服&lt;/strong&gt;是关键。我曾说过，「更有趣的是，一个笔记应用不会因为它支持 Markdown 语法而高级或易用很多。」，细枝末节处的人性化考虑才是最重要的。而 Typora 的编辑体验显然是经过深思熟虑设计的产物。&lt;/p&gt;
&lt;p&gt;我认为：一个优秀的笔记应用应该给用户&lt;strong&gt;选择 Markdown 语法风格的权利&lt;/strong&gt;。而 Typora 在这一点上是我目前见过所有 Markdown 笔记应用中做得最好的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/ea30087c6f93d0fa3c5a313c8cdce357.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;文本编辑设置&lt;/p&gt;
&lt;p&gt;通过打开 &lt;code&gt;文件 - 偏好设置&lt;/code&gt; 你会发现 Typora 为编辑体验的考虑细致到了令人叹为观止的程度。Typora 中提供了大量有关 Markdown 偏好的设置，据此，你可以构建一个几乎完全适合自己的 Markdown 编辑器。下面我将依次介绍一些与文本编辑体验有关的功能亮点。&lt;/p&gt;
&lt;h4 id=&#34;智能标点&#34;&gt;&lt;a href=&#34;#智能标点&#34; class=&#34;headerlink&#34; title=&#34;智能标点&#34;&gt;&lt;/a&gt;智能标点&lt;/h4&gt;&lt;p&gt;我认为「智能标点」是比较有趣的一点。它可以自动帮你将不是很美观的直引号 &lt;code&gt;&amp;quot;&lt;/code&gt; &lt;code&gt;&amp;#39;&lt;/code&gt; 转化为更美观的弯引号 &lt;code&gt;“&lt;/code&gt; &lt;code&gt;‘&lt;/code&gt; &lt;code&gt;’&lt;/code&gt; &lt;code&gt;”&lt;/code&gt;。具体内容你可以在官方的 &lt;a href=&#34;http://support.typora.io/SmartyPants/&#34;&gt;这篇文档&lt;/a&gt; 中查看。关于直弯引号在 macOS 上如何输入你也可以看 &lt;a href=&#34;https://sspai.com/post/38342&#34;&gt;这篇文章&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id=&#34;图片插入&#34;&gt;&lt;a href=&#34;#图片插入&#34; class=&#34;headerlink&#34; title=&#34;图片插入&#34;&gt;&lt;/a&gt;图片插入&lt;/h4&gt;&lt;p&gt;Typora 的图片插入功能是广受好评的。要知道，Markdown 原生不太注重图片插入的功能，但你可以在 Typora 中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;直接使用 &lt;code&gt;右键 - 复制 Ctrl + V&lt;/code&gt; 将网络图片、剪贴板图片复制到文档中&lt;/li&gt;
&lt;li&gt;拖动本地图片到文档中&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Typora 会自动帮你插入符合 Markdown 语法的图片语句，并给它加上标题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/1de13eae43785e27bbbcd631931fd161.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;复制图片&lt;/p&gt;
&lt;p&gt;你也完全可以使用图床来保证文档在分享后图片仍能正常显示。&lt;/p&gt;
&lt;p&gt;更强大的是，Typora 支持在拖动或 &lt;code&gt;Ctrl + V&lt;/code&gt; 网络图片后自动将其保存到本地。你可以在 &lt;code&gt;文件 - 偏好设置 - 编辑器 - 图片插入&lt;/code&gt; 中选择复制到哪个路径，什么情况下需要复制。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/717da653ad91e938c5f1f40555b9c057.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;图片插入&lt;/p&gt;
&lt;p&gt;这一功能保证了即使网络图片源失效了，你还有本地的备份可用。同时也能使你的文档文件夹更合理、完整。&lt;/p&gt;
&lt;h4 id=&#34;打字机模式和专注模式&#34;&gt;&lt;a href=&#34;#打字机模式和专注模式&#34; class=&#34;headerlink&#34; title=&#34;打字机模式和专注模式&#34;&gt;&lt;/a&gt;打字机模式和专注模式&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;「打字机模式」&lt;/strong&gt;使得你所编辑的那一行永远处于屏幕正中。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;「专注模式」&lt;/strong&gt;使你正在编辑的那一行保留颜色，而其他行的字体呈灰色。&lt;/p&gt;
&lt;p&gt;你可以在 &lt;code&gt;视图 - 专注模式 / 打字机模式&lt;/code&gt; 中勾选使用这两个模式。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/8b4e14ef732a23d4cc2a8fb1f8ec016c.gif&#34; alt=&#34;img&#34;&gt;两种模式&lt;/p&gt;
&lt;h4 id=&#34;实时预览&#34;&gt;&lt;a href=&#34;#实时预览&#34; class=&#34;headerlink&#34; title=&#34;实时预览&#34;&gt;&lt;/a&gt;实时预览&lt;/h4&gt;&lt;p&gt;我想很果断地下这个结论：到现在还不支持编辑界面实时预览的 Markdown 编辑器基本可以退出市场了。Typora 在这一方面显然已经领先了一大步——他们连 Markdown 语法的标记都在实时预览中消去了。当你离开正在编辑的有格式的文本段后，Typora 会自动隐藏 Markdown 标记，只留下&lt;strong&gt;「所见即所得」&lt;/strong&gt;的美妙。&lt;em&gt;他们把这称为 Hybrid View。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/f99c9ce02e2728ec6c64b443947fc67e.gif&#34; alt=&#34;img&#34;&gt;所见即所得&lt;/p&gt;
&lt;p&gt;为了防止一些程序 bug 的发生（虽然在我使用下来感到是很少的）导致格式问题无法修改，Typora 保留了一个&lt;strong&gt;「源代码模式」&lt;/strong&gt;。你可以通过 &lt;code&gt;视图 - 源代码模式&lt;/code&gt; 或左下角的 &lt;code&gt;&amp;lt;/&amp;gt;&lt;/code&gt; 按钮进入。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/bcda9c4e35725b7297a6b90d8745564e.gif&#34; alt=&#34;img&#34;&gt;源代码模式&lt;/p&gt;
&lt;h4 id=&#34;大纲-x2F-文件侧边栏&#34;&gt;&lt;a href=&#34;#大纲-x2F-文件侧边栏&#34; class=&#34;headerlink&#34; title=&#34;大纲 &amp;#x2F; 文件侧边栏&#34;&gt;&lt;/a&gt;大纲 &amp;#x2F; 文件侧边栏&lt;/h4&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/f2461efb5ac297facfcd9f72cc5da6be.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;侧边栏&lt;/p&gt;
&lt;p&gt;Typora 会根据你 Markdown 标记的 H1、H2、H3…… 各级标题为你呈现一个大纲。&lt;/p&gt;
&lt;p&gt;你也可以选择查看文件夹中的文件，但由于目前 Typora 只支持查看 md 文件，因此我认为文件侧边栏这个功能还是很鸡肋的。&lt;/p&gt;
&lt;h4 id=&#34;空格与换行&#34;&gt;&lt;a href=&#34;#空格与换行&#34; class=&#34;headerlink&#34; title=&#34;空格与换行&#34;&gt;&lt;/a&gt;空格与换行&lt;/h4&gt;&lt;p&gt;Typora 在空格与换行部分主要是使用 &lt;a href=&#34;http://www.commonmark.cn/w/&#34;&gt;CommonMark&lt;/a&gt; 作为标注规范。与前文提到的 GFM 一样，CommonMark 也是比较流行的 Markdown 语言规范（解析器）之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;空格：&lt;/strong&gt;在输入连续的空格后，Typora 会在编辑器视图里为你保留这些空格，但当你打印或导出时，这些空格会被省略成一个。&lt;br&gt;你可以在源代码模式下，为每个空格前加一个 &lt;code&gt;\&lt;/code&gt; 转义符，或者直接使用 HTML 风格的 &lt;code&gt;&amp;amp;nbps;&lt;/code&gt; 来保持连续的空格。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;软换行：&lt;/strong&gt;需要说明的是，在 Markdown 语法中，换行（line break）与换段是不同的。且换行分为软换行和硬换行。在 Typora 中，你可以通过 &lt;code&gt;Shift + Enter&lt;/code&gt; 完成一次软换行。软换行只在编辑界面可见，当文档被导出时换行会被省略。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;硬换行：&lt;/strong&gt;你可以通过 &lt;code&gt;空格 + 空格 + Shift + Enter&lt;/code&gt; 完成一次硬换行，而这也是许多 Markdown 编辑器所原生支持的。硬换行在文档被导出时将被保留，且没有换段的段后距。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;换段：&lt;/strong&gt;你可以通过 &lt;code&gt;Enter&lt;/code&gt; 完成一次换段。Typora 会自动帮你完成两次 &lt;code&gt;Shift + Enter&lt;/code&gt; 的软换行，从而完成一次换段。这也意味着在 Markdown 语法下，换段是通过在段与段之间加入空行来实现的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Windows 风格（CR+LF）与 Unix 风格（CR）的换行符：&lt;/strong&gt;CR 表示回车 &lt;code&gt;\r&lt;/code&gt; ，即回到一行的开头，而 LF 表示换行 &lt;code&gt;\n&lt;/code&gt; ，即另起一行。&lt;br&gt;所以 Windows 风格的换行符本质是「回车 + 换行」，而 Unix 风格的换行符是「换行」。这也是为什么 Unix &amp;#x2F; Mac 系统下的文件，如果在 Windows 系统直接打开会全部在同一行内。 你可以在 &lt;code&gt;文件 - 偏好设置 - 编辑器 - 默认换行符&lt;/code&gt; 中对此进行切换。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下附以上各空格、换行、换段的测试结果图。具体内容你可以在官网的 &lt;a href=&#34;http://support.typora.io/Line-Break/&#34;&gt;这篇文档&lt;/a&gt; 中查阅。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/5c2fbaa53b27666a7fd0b07ac3e100bf.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;空格、换行、换段&lt;/p&gt;
&lt;h4 id=&#34;emoji-表情&#34;&gt;&lt;a href=&#34;#emoji-表情&#34; class=&#34;headerlink&#34; title=&#34;emoji 表情&#34;&gt;&lt;/a&gt;emoji 表情&lt;/h4&gt;&lt;p&gt;如今 emoji 表情越来越多地出现在一些网站文章中，但在桌面端（特别是 Windows 系统）文本编辑器上插入 emoji 是一件十分麻烦的事情。在使用 Typora 之前，我打出 emoji 表情的办法基本有两个：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;输入法联想：&lt;/strong&gt;优点是比较方便，但会插入一张图片而不是一个字符，在许多情景下都不是很合适。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;复制 emoji 符号：&lt;/strong&gt;优点是能保证符号的形式，但显然每次用都需要去复制，比较麻烦。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/b2601a694aba07b8a68615ca59bcc495.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;输入法联想&lt;/p&gt;
&lt;p&gt;在 Typora 中，你可以用 &lt;code&gt;:emoji:&lt;/code&gt; 的形式来打出 emoji，软件会自动给出图形的提示，还是比较好用的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/ff26eeb5ff2d6fae16cab163ebfcd096.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;Typora 中输入 emoji&lt;/p&gt;
&lt;h2 id=&#34;一个学术文档编辑器&#34;&gt;&lt;a href=&#34;#一个学术文档编辑器&#34; class=&#34;headerlink&#34; title=&#34;一个学术文档编辑器&#34;&gt;&lt;/a&gt;一个学术文档编辑器&lt;/h2&gt;&lt;p&gt;除了基本的文本编辑体验极佳之外，Typora 还是一个非常优秀的学术文档编辑器。当然作为一个轻量级的、基于 Markdown 的编辑器，它不能与那些 LaTeX 编辑器相提并论，但它仍支持了许多可用于学术写作的功能。&lt;/p&gt;
&lt;h3 id=&#34;LaTeX&#34;&gt;&lt;a href=&#34;#LaTeX&#34; class=&#34;headerlink&#34; title=&#34;LaTeX&#34;&gt;&lt;/a&gt;LaTeX&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;LaTeX 是一种基于 TeX 的排版系统，由于它易于快速生成复杂表格和数学公式，非常适用于生成高印刷质量的科技和数学类文档。如果你常阅读数学、计算机等领域的学术论文，你一定对 LaTeX 不陌生。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typora 原生支持 LaTeX 语法，你有两种方式输入 LaTeX 风格的数学公式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;行内公式（inline）：&lt;/strong&gt;用 &lt;code&gt;$...$&lt;/code&gt; 括起公式，公式会出现在行内。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;块间公式（display）：&lt;/strong&gt;用 &lt;code&gt;$$...$$&lt;/code&gt; 括起公式（注意 &lt;code&gt;$$&lt;/code&gt; 后需要换行），公式会默认显示在行中间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;具体的 LaTeX 语法在此不赘述了，你可以在 &lt;a href=&#34;https://blog.csdn.net/happyday_d/article/details/83715440&#34;&gt;这篇文章&lt;/a&gt; 中查看。&lt;/p&gt;
&lt;h3 id=&#34;代码高亮&#34;&gt;&lt;a href=&#34;#代码高亮&#34; class=&#34;headerlink&#34; title=&#34;代码高亮&#34;&gt;&lt;/a&gt;代码高亮&lt;/h3&gt;&lt;p&gt;Typora 中代码的插入也可以分为行内和块间两种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;行内代码：用 &lt;code&gt;...&lt;/code&gt; 或 &lt;code&gt;...&lt;/code&gt; 括起代码，代码会以主题中设置的样式出现在行内，但不会实现代码高亮。&lt;/li&gt;
&lt;li&gt;代码块：输入 &amp;#96;&amp;#96;&amp;#96;&amp;#96;&amp;#96; 后并输入语言名，换行，开始写代码，Typora 就会自动帮你实现代码高亮。Typora 原生支持许多编程语言代码块的语法高亮，基本日常常用的编程语言它都能很好地支持。&lt;br&gt;除此以外，你也可以直接换行开始写，而后再选择语言。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/a8c283ba4f1ba09d41331b87e2eef3b9.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;代码块&lt;/p&gt;
&lt;h3 id=&#34;表格&#34;&gt;&lt;a href=&#34;#表格&#34; class=&#34;headerlink&#34; title=&#34;表格&#34;&gt;&lt;/a&gt;表格&lt;/h3&gt;&lt;p&gt;在 Markdown 中插入表格一直是一件比较头疼的事情。在一般的 Markdown 编辑器中，你可以通过以下的格式插入表格：&lt;/p&gt;
&lt;figure class=&#34;highlight markdown&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs markdown&#34;&gt;| 左对齐 | 右对齐 | 居中对齐 |&lt;br&gt;| :-----| ----: | :----: |&lt;br&gt;| 单元格 | 单元格 | 单元格 |&lt;br&gt;| 单元格 | 单元格 | 单元格 |&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;乍一看还挺直观好用的是吧？但想想，一旦表格内容层次不齐，又或是表格长得难以下手，直接用键盘输入表格就显得十分麻烦和痛苦了。&lt;/p&gt;
&lt;p&gt;好在 Typora 为我们提供了图形界面的插入表格的功能，你只需要在行内 &lt;code&gt;鼠标右键 - 插入 - 表格&lt;/code&gt; ，并输入行数和列数，Typora 就会自动生成一张样式不错的空表格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/51bf2f290592e1ddbadb95765c04f297.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;Typora 表格&lt;/p&gt;
&lt;h3 id=&#34;链接引用与脚注&#34;&gt;&lt;a href=&#34;#链接引用与脚注&#34; class=&#34;headerlink&#34; title=&#34;链接引用与脚注&#34;&gt;&lt;/a&gt;链接引用与脚注&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;链接引用&lt;/strong&gt;类似于我们常在论文末尾看到的「参考文献」的写法，你可以通过 &lt;code&gt;[]:&lt;/code&gt; 的语法来为你的文档加上链接引用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;脚注&lt;/strong&gt;在少数派的文章中也很常见，即某段话结尾右上角标有数字标记，页面底部进行注释的写法。你可以在需要插入脚注标号的位置写 &lt;code&gt;[^ number ]&lt;/code&gt; ，再在下方通过 &lt;code&gt;[^ number ]:&lt;/code&gt; 在文档中插入脚注。注意不要遗漏了脚注编号 &lt;code&gt;number&lt;/code&gt; 前后的空格。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/5f82606e6d89fe1eb24705c4ca6b895d.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;链接引用和脚注&lt;/p&gt;
&lt;h3 id=&#34;文件系统&#34;&gt;&lt;a href=&#34;#文件系统&#34; class=&#34;headerlink&#34; title=&#34;文件系统&#34;&gt;&lt;/a&gt;文件系统&lt;/h3&gt;&lt;p&gt;除了前文提到的文件侧边栏，Typora 还提供了一些耦合度不高的文件系统。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;快速打开：&lt;/strong&gt;你可以通过 &lt;code&gt;文件 - 快速打开...&lt;/code&gt; 或 &lt;code&gt;Ctrl + P&lt;/code&gt; 快捷键快速打开最近的文档。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;保存：&lt;/strong&gt;Typora 支持自动保存，一般很少有写好的文档丢失的情况。同时它也提供了诸如「保存」、「另存为」、「保存全部打开的文件…」之类的功能。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导入：&lt;/strong&gt;Typora 支持非常多的文件格式：.docx, .latex, .tex, .ltx, .rst, .rest, .org, .wiki, .dokuwiki, .textile, .opml, .epub。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导出：&lt;/strong&gt;Typora 原生支持导出 PDF，HTML等格式。你可以根据软件内提示安装 &lt;strong&gt;Pandoc 插件&lt;/strong&gt;来导出更多例如 docx，LaTeX 等格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/ba295f21f0b71646bb36a0517e868ced.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;导出&lt;/p&gt;
&lt;h2 id=&#34;一个伪装成文本编辑器的浏览器&#34;&gt;&lt;a href=&#34;#一个伪装成文本编辑器的浏览器&#34; class=&#34;headerlink&#34; title=&#34;一个伪装成文本编辑器的浏览器&#34;&gt;&lt;/a&gt;一个伪装成文本编辑器的浏览器&lt;/h2&gt;&lt;p&gt;当我的一个朋友问我「Typora 有什么好写的？」时，我回答「Typora 是一个伪装成文本编辑器的浏览器」。是的，事实上如果你有一定的计算机基础，你可以找到许多有关于「Typora 其实是一个浏览器」的蛛丝马迹。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/13837bcdcded9ae406e8c4aac5f2d752.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;图片插入&lt;/p&gt;
&lt;p&gt;在图片插入的选项中，Typora 用了「复制图片到 .&amp;#x2F;${filename}.assets 文件夹」的说法，而这其实是网页前端常用的 Javascript 字符串模板语法的风格。&lt;/p&gt;
&lt;p&gt;再比如，Typora 将更遵循 GFM 标准的 Markdown 语法模式称为「严格模式 Strict Mode」，这一说法常见于 HTML 和 JavaScript 编程中。类似「源代码模式」的说法也是同理。&lt;/p&gt;
&lt;p&gt;当然，最明显的一点是当你按下 &lt;code&gt;Shift + F12&lt;/code&gt; 快捷键时，页面会弹出一个基于 Chrome 的开发者工具栏，也就是我们在浏览器中常说的「审查元素」。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/da8c9b305a222cb5fadb41c12da81a12.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;审查元素&lt;/p&gt;
&lt;h3 id=&#34;伪装从何而来？&#34;&gt;&lt;a href=&#34;#伪装从何而来？&#34; class=&#34;headerlink&#34; title=&#34;伪装从何而来？&#34;&gt;&lt;/a&gt;伪装从何而来？&lt;/h3&gt;&lt;p&gt;当我们把视角放在「Typora 是一个支持 Markdown 语言的文本编辑器」的出发点来考虑这个问题，一切就都显得很明白了。&lt;/p&gt;
&lt;p&gt;John Gruber 在 2004 年用 Perl 创造了 Markdown 语言，这个语言的目的是希望大家使用「易于阅读、易于撰写的纯文字格式，并选择性的转换成有效的 XHTML（或是 HTML）」。也就是说，&lt;strong&gt;在 Markdown 诞生之初，它就是为了被浏览器阅读而设计的。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们在用 Markdown 语言撰写文稿的时候，其实本质上是在借助某种编程语言的转化（解析器）来编写一个 HTML 网页。Markdown 从它诞生之初就与 Web 技术有着及其紧密的联系。&lt;/p&gt;
&lt;p&gt;如果我说，我们每一篇文稿都是一个网页，那就很好理解了。Typora 利用解析器先将我们写的 Markdown 文档解析成为 HTML 文档，再为它嵌入一个 CSS 样式，最后再加上可能需要的脚本等。&lt;/p&gt;
&lt;h3 id=&#34;HTML&#34;&gt;&lt;a href=&#34;#HTML&#34; class=&#34;headerlink&#34; title=&#34;HTML&#34;&gt;&lt;/a&gt;HTML&lt;/h3&gt;&lt;p&gt;HTML 是一种标记语言，主要负责构成网页的骨架，它包含所有不加装饰的网页元素。在 Typora 的使用场景下则是所有的&lt;strong&gt;文本、段落、标题等&lt;/strong&gt;的记号。&lt;/p&gt;
&lt;p&gt;你可以把一张网页想象成一幅数字油画，HTML 就是那个黑白线条的底，上面写满了数字标记，示意你哪一块区域要涂什么颜色。而 CSS 则负责在对应的区域涂上颜色，甚至加上一些装饰等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/7ce3d9ed245eed902e833405b9464103.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;数字油画&lt;/p&gt;
&lt;h4 id=&#34;HTML-标签&#34;&gt;&lt;a href=&#34;#HTML-标签&#34; class=&#34;headerlink&#34; title=&#34;HTML 标签&#34;&gt;&lt;/a&gt;HTML 标签&lt;/h4&gt;&lt;p&gt;Typora 支持许多常用的 HTML 标签，如果你了解 HTML 语法的话，你可以写出十分美观丰富的文档页面。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/89bba4dfdfb49b8d3c129ce1157a54b1.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;HTML 标签&lt;/p&gt;
&lt;p&gt;事实上你可以在 Typora 中完成许多基本的 HTML 风格的文本输入，例如 HTML 字符、HTML 块、HTML 风格的注释，甚至是视频和音频。具体支持的功能和限制请在 &lt;a href=&#34;http://support.typora.io/HTML/&#34;&gt;官方文档&lt;/a&gt; 中查阅。&lt;/p&gt;
&lt;p&gt;有了这一功能，我们就可以在 Typora 中创造出远超普通 Markdown 文档的页面效果。&lt;/p&gt;
&lt;h4 id=&#34;导出为-HTML&#34;&gt;&lt;a href=&#34;#导出为-HTML&#34; class=&#34;headerlink&#34; title=&#34;导出为 HTML&#34;&gt;&lt;/a&gt;导出为 HTML&lt;/h4&gt;&lt;p&gt;Typora 原生支持将文档导出为 HTML 格式的文件，并选择是否要嵌入 style（也就是后文我将提到的 CSS 的部分）。&lt;/p&gt;
&lt;p&gt;除此之外，由于其本身「浏览器」的属性，你可以直接在实时预览界面用 &lt;code&gt;Ctrl +C&lt;/code&gt; 复制到 HTML 代码。一个实用的用处是将这些 HTML 代码直接 &lt;code&gt;Ctrl + V&lt;/code&gt; 黏贴到微信公众号后台，基本可以保证两边显示效果相同。这一点不仅使公众号推送可以有更自由、美观的样式，也让编辑、排版更轻松了。（由于微信自带浏览器的一些特性，可能有少部分 CSS style 不能生效，建议多多校对。）&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/3d818c18934632b043fcf4ad9be1d046.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;公众号&lt;/p&gt;
&lt;p&gt;具体如何用 Typora 完成公众号写作，你可以在 &lt;a href=&#34;https://sspai.com/post/40524&#34;&gt;这篇文章&lt;/a&gt; 中进一步了解。&lt;/p&gt;
&lt;h3 id=&#34;CSS&#34;&gt;&lt;a href=&#34;#CSS&#34; class=&#34;headerlink&#34; title=&#34;CSS&#34;&gt;&lt;/a&gt;CSS&lt;/h3&gt;&lt;p&gt;为了让文档更美观，我们可以为其加上 CSS style。我认为 Typora 对 CSS 的支持让它成为一众桌面笔记应用中最与众不同的一个。在 Typora 中 CSS 被称为「主题」，但其本质仍是 CSS 文件。你可以在 &lt;code&gt;文件 - 偏好设置 - 主题 - 打开主题文件夹&lt;/code&gt; 看到这些 CSS 文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/7d3cfbc92721733e16ed63d72a48a572.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/98a04c4f9129e0f018d15bc790b376c2.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;主题文件夹&lt;/p&gt;
&lt;p&gt;选择不同的主题可以使文档拥有不同的外观，但不会影响内容。Typora 自带了若干主题，你也可以在 &lt;a href=&#34;http://theme.typora.io/&#34;&gt;官网&lt;/a&gt; 下载更多的主题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/efcf65ba993c4bb0b058d6eb8258df6f.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;主题商店&lt;/p&gt;
&lt;p&gt;除此以外，如果你有一定的 Web 编程基础，你当然也可以自己修改、新建适合你使用需求的 CSS 文件。我自己就写了一份名为 WeChat 的 CSS 文件，来符合我公众号特定的排版需求，例如正文是 15px，页边距是 8，小标题是 18px 等等。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://cdn.sspai.com/2019/05/24/317ac1df25fcfc817c03f92d6086764e.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1&#34; alt=&#34;img&#34;&gt;CSS 文件&lt;/p&gt;
&lt;p&gt;使用 Typora 的「主题」功能写公众号的一个好处是，只需要每次都套用同样的主题，我们就可以在保证每次排版规范都相同的同时，节省许多重复的工作。&lt;/p&gt;
&lt;h3 id=&#34;YAML-front-matter&#34;&gt;&lt;a href=&#34;#YAML-front-matter&#34; class=&#34;headerlink&#34; title=&#34;YAML front-matter&#34;&gt;&lt;/a&gt;YAML front-matter&lt;/h3&gt;&lt;p&gt;Typora 支持在文档头部加上基于 YAML 的 front-matter 信息，这一特性适用于把 Markdown 文档分类归档上传到用 Hexo 框架搭建的博客中。&lt;/p&gt;
&lt;h2 id=&#34;写在最后&#34;&gt;&lt;a href=&#34;#写在最后&#34; class=&#34;headerlink&#34; title=&#34;写在最后&#34;&gt;&lt;/a&gt;写在最后&lt;/h2&gt;&lt;p&gt;如果你看过 Typora 的 &lt;a href=&#34;https://typora.io/dev_release.html&#34;&gt;更新日志&lt;/a&gt; 你会发现它早在 2015 年 12 月 19 日就发布了 0.7.0 (alpha) 版本，但到目前为止它仍处于 beta 阶段。&lt;em&gt;截止到笔者写作这篇文章的初稿时，Typora 的版本号为 0.9.9.24.6 (beta)。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我想，能够潜心三年多打磨、测试一个产品，开发者们一定是倾注了极大的心血到这款笔记应用中。而在使用中，我也能体会到开发者的良苦用心。他们不想做知识的储备中心，不想做快速的草稿、笔记应用，也不想做任何和生产力无关的功能和特性。对于 Typora 的设计和构想，只有唯一的宗旨——&lt;strong&gt;「生产效率」&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为移动端生产效率低，所以只有桌面端应用。因为左顾右盼的两栏式预览影响思路，所以他们甚至去掉了 Markdown 语法标记，只留下最终呈现的样式。因为 Markdown 是为了 HTML 呈现而设计的，所以他们提供了从入门到高级的一系列 Web 辅助功能…… 这一切都只是为了纯粹的&lt;strong&gt;生产效率&lt;/strong&gt;。如果我们回头想想，Markdown 语言本身，当初不也是为了高效地生成简单网页而诞生的吗？&lt;/p&gt;
&lt;p&gt;最后，让我们一起期待这款&lt;strong&gt;顶级桌面文本生产力工具&lt;/strong&gt;的正式版的到来吧！😆&lt;/p&gt;
&lt;h1 id=&#34;快捷键操作&#34;&gt;&lt;a href=&#34;#快捷键操作&#34; class=&#34;headerlink&#34; title=&#34;快捷键操作&#34;&gt;&lt;/a&gt;快捷键操作&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;快捷键&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Ctrl + 1&lt;/td&gt;
&lt;td&gt;一级 标题&lt;/td&gt;
&lt;td&gt;Ctrl + B&lt;/td&gt;
&lt;td&gt;字体加粗&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + 2&lt;/td&gt;
&lt;td&gt;二级标题&lt;/td&gt;
&lt;td&gt;Ctrl + I&lt;/td&gt;
&lt;td&gt;字体倾斜&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + 3&lt;/td&gt;
&lt;td&gt;三级标题&lt;/td&gt;
&lt;td&gt;Ctrl + U&lt;/td&gt;
&lt;td&gt;下划线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + 4&lt;/td&gt;
&lt;td&gt;四级标题&lt;/td&gt;
&lt;td&gt;Ctrl + Home&lt;/td&gt;
&lt;td&gt;返回顶部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + 5&lt;/td&gt;
&lt;td&gt;五级标题&lt;/td&gt;
&lt;td&gt;Ctrl + End&lt;/td&gt;
&lt;td&gt;返回底部&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + 6&lt;/td&gt;
&lt;td&gt;六级标题&lt;/td&gt;
&lt;td&gt;Ctrl + T&lt;/td&gt;
&lt;td&gt;创建表格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + L&lt;/td&gt;
&lt;td&gt;选中一行&lt;/td&gt;
&lt;td&gt;Ctrl + K&lt;/td&gt;
&lt;td&gt;创造超链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + D&lt;/td&gt;
&lt;td&gt;选择一个单词&lt;/td&gt;
&lt;td&gt;Ctrl + F&lt;/td&gt;
&lt;td&gt;搜索&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ctrl + E&lt;/td&gt;
&lt;td&gt;选中相同格式的文字&lt;/td&gt;
&lt;td&gt;Ctrl + H&lt;/td&gt;
&lt;td&gt;搜索并替换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alt + Shift + 5&lt;/td&gt;
&lt;td&gt;删除线&lt;/td&gt;
&lt;td&gt;Ctrl + Shift + I&lt;/td&gt;
&lt;td&gt;插入图片&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;高级进阶&#34;&gt;&lt;a href=&#34;#高级进阶&#34; class=&#34;headerlink&#34; title=&#34;高级进阶&#34;&gt;&lt;/a&gt;高级进阶&lt;/h1&gt;&lt;h2 id=&#34;优化标题排版（带序号）&#34;&gt;&lt;a href=&#34;#优化标题排版（带序号）&#34; class=&#34;headerlink&#34; title=&#34;优化标题排版（带序号）&#34;&gt;&lt;/a&gt;优化标题排版（带序号）&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;俗话说：“授之以鱼，不如授之以渔”。&lt;/code&gt;在讲如何添加自动编号功能之前，我要先讲一下如何修改的，不能不明所以。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Typora的底层是一个浏览器，或者说是一个Electron应用。不信，你可以按下快捷键&lt;code&gt;Shift + F12&lt;/code&gt;，或者点击&lt;code&gt;视图&lt;/code&gt;中的&lt;code&gt;打开开发者工具&lt;/code&gt;按钮：&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190225023640443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;就可以看到熟悉的浏览器控制台调试界面了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20190225023703930.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMzMTU5MDU5,size_16,color_FFFFFF,t_70&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;既然知道Typora的实现基于浏览器，那么就好办了。各个界面肯定都是HTML语言渲染出来的，那么，我们就可以通过添加CSS样式表，来添加自动编号的功能。好在Typora官方提前想到了这个事，专门出了篇官方文章来告诉我们怎么去添加自定义的样式文件。&lt;/p&gt;
&lt;p&gt;知道了怎么添加自定义样式文件，还得知道怎么去定制样式表。语言吗，肯定是CSS。剩下的就差定位编辑区、导航窗格区和目录树区对应的元素了。最简洁的方法，就是使用元素选择键去定位，下图中的红色按钮就是：&lt;/p&gt;
&lt;p&gt;三个区域的元素定位如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;正文标题： #write&lt;/li&gt;
&lt;li&gt;[TOC]目录树区: .md-toc-content&lt;/li&gt;
&lt;li&gt;侧边栏的目录大纲区: .sidebar-content&lt;br&gt;到此，前菜都已准备好。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;自动编号功能&lt;br&gt;&lt;strong&gt;那么，开始准备主菜。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;编写css样式文件，命名为：&lt;code&gt;base.user.css&lt;/code&gt;。要完成自动编号功能，必须借助CSS3中的如下特性：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;计数器：counter(基准计数器)，用于计算基准计数器的值&lt;br&gt;计数器增量：counter-increment，设置每次增长的量&lt;br&gt;重置计数器：counter-reset，用于将当前标题的计数器重置到指定的基准计数器&lt;br&gt;子代类型选择器：nth-of-type，可以从子代中选择出同一类型元素中的指定元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.sidebar-content&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h1&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h1&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h2&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h2&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h3&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h3&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h4&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h4&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h5&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h5&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h6&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h1&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h1;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h2&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h2;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h3&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h3;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h4&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h4;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h5&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h5;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h5) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-h6&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-item&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.outline-label&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h6;&lt;br&gt;    &lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h5) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h6) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** initialize css counter */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h1&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h1&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h2&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h2&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h3&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h3&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h4&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h4&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h5&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h5&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-reset&lt;/span&gt;: h6&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** put counter result into headings */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h1&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h1;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h2&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h2;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-heading&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &lt;span class=&#34;hljs-comment&#34;&gt;/** override the default style for focused headings */&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h3;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-heading&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h4;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-heading&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h5;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h5) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt; &lt;span class=&#34;hljs-selector-tag&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-heading&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;counter-increment&lt;/span&gt;: h6;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;content&lt;/span&gt;: &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h1) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h2) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h3) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h4) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h5) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;counter&lt;/span&gt;(h6) &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/** override the default style for focused headings */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-id&#34;&gt;#write&lt;/span&gt;&amp;gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h3&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h4&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h5&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt;,&lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;h6&lt;/span&gt;&lt;span class=&#34;hljs-selector-class&#34;&gt;.md-focus&lt;/span&gt;&lt;span class=&#34;hljs-selector-pseudo&#34;&gt;:before&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;color&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;border-radius&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;position&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;left&lt;/span&gt;:initial;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;float&lt;/span&gt;: none;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;top&lt;/span&gt;:initial;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;font-size&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;padding-left&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;padding-right&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;vertical-align&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;font-weight&lt;/span&gt;: inherit;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;line-height&lt;/span&gt;: inherit;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Typora侧边栏的大纲视图折叠-win系统&#34;&gt;&lt;a href=&#34;#Typora侧边栏的大纲视图折叠-win系统&#34; class=&#34;headerlink&#34; title=&#34;Typora侧边栏的大纲视图折叠( win系统 )&#34;&gt;&lt;/a&gt;Typora侧边栏的大纲视图折叠( win系统 )&lt;/h2&gt;&lt;h3 id=&#34;效果&#34;&gt;&lt;a href=&#34;#效果&#34; class=&#34;headerlink&#34; title=&#34;效果&#34;&gt;&lt;/a&gt;效果&lt;/h3&gt;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181226094905721.gif&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;解决方案&#34;&gt;&lt;a href=&#34;#解决方案&#34; class=&#34;headerlink&#34; title=&#34;解决方案&#34;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;&lt;code&gt;文件 ⇒ 偏好设置 ⇒ 勾选&amp;quot;侧边栏&amp;quot;&lt;/code&gt;&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181226093929134.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181226093934973.png&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;br&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20181226101055865.gif&#34; alt=&#34;在这里插入图片描述&#34;&gt;&lt;/p&gt;
</content>
        <category term="工具" />
        <category term="Typora" />
        <updated>2024-01-03T13:13:21.665Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/</id>
        <title>PostMan教程</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;推荐一款接口测试工具！POSTMAN！ 简单来说，四个词，简单实用大方美观！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;用户在开发或者调试网络程序或者是网页B&amp;#x2F;S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！&lt;strong&gt;Postman&lt;/strong&gt;在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。&lt;/p&gt;
&lt;h1 id=&#34;操作环境&#34;&gt;&lt;a href=&#34;#操作环境&#34; class=&#34;headerlink&#34; title=&#34;操作环境&#34;&gt;&lt;/a&gt;操作环境&lt;/h1&gt;&lt;p&gt;postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;postman在2018年之后就不再支持浏览器版本，所以，想要使用它就必须先下载客户端再安装使用，下面就以Windows系统为例进行安装 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载与安装&#34;&gt;&lt;a href=&#34;#下载与安装&#34; class=&#34;headerlink&#34; title=&#34;下载与安装&#34;&gt;&lt;/a&gt;下载与安装&lt;/h2&gt;&lt;p&gt;postman安装步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问postman官方网站，下载最新版本，访问地址：&lt;a href=&#34;https://links.jianshu.com/go?to=https://www.getpostman.com/downloads/&#34;&gt;Postman | Download Postman App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;postman分两个版本：稳定版和尝鲜版（Postman Canary）&lt;/li&gt;
&lt;li&gt;进入到下载页面，根据自己电脑下载对应的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180614.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双击下载的安装包，进入到安装界面，直到用户登录和注册界面。&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;若个人使用，选择跳过即可，这时会进入到postman主界面，至此postman安装成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;若团队使用，可以进行注册，注册后使用账号可以加入团队工作区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;成功进入postman页面后，接下来我们正式进行postman的系统教程吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;设置postman主题&#34;&gt;&lt;a href=&#34;#设置postman主题&#34; class=&#34;headerlink&#34; title=&#34;设置postman主题&#34;&gt;&lt;/a&gt;设置postman主题&lt;/h2&gt;&lt;p&gt;右上角的设置里可以设置postman的主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180553.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里，出于个人习惯，我把它设置成了黑色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180542.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postman基础功能介绍&#34;&gt;&lt;a href=&#34;#postman基础功能介绍&#34; class=&#34;headerlink&#34; title=&#34;postman基础功能介绍&#34;&gt;&lt;/a&gt;postman基础功能介绍&lt;/h2&gt;&lt;p&gt;首先，看一下它的基础功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180528.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;collection在postman里面相当于一个文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。&lt;/p&gt;
&lt;h2 id=&#34;发送第一个请求&#34;&gt;&lt;a href=&#34;#发送第一个请求&#34; class=&#34;headerlink&#34; title=&#34;发送第一个请求&#34;&gt;&lt;/a&gt;发送第一个请求&lt;/h2&gt;&lt;p&gt;这里我们做一个普通接口的简单的示例：&lt;/p&gt;
&lt;p&gt;如果你是第一次使用postman发送请求，下面这个例子可以作为一个最基本的入门，可以帮我们建立一个初始印象 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，点击+加号打开一个新的请求页。&lt;/li&gt;
&lt;li&gt;在请求的URL中输入请求地址：&lt;a href=&#34;http://www.weather.com.cn/data/sk/101010100.html&#34;&gt;http://www.weather.com.cn/data/sk/101010100.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104113814.png&#34; alt=&#34;image-20210104113810137&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样就完成了一次简单的天气查询接口的请求&lt;/p&gt;
&lt;h1 id=&#34;postman基础功能&#34;&gt;&lt;a href=&#34;#postman基础功能&#34; class=&#34;headerlink&#34; title=&#34;postman基础功能&#34;&gt;&lt;/a&gt;postman基础功能&lt;/h1&gt;&lt;h2 id=&#34;常见类型的接口请求&#34;&gt;&lt;a href=&#34;#常见类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;常见类型的接口请求&#34;&gt;&lt;/a&gt;常见类型的接口请求&lt;/h2&gt;&lt;p&gt;常见的接口有如下四种类型，分别是含有查询参数的接口，表单类型的接口，json类型的接口以及含有上传文件的接口，以下就对这四种类型接口及如何在postman中请求进行说明 。&lt;/p&gt;
&lt;h3 id=&#34;查询参数的接口请求&#34;&gt;&lt;a href=&#34;#查询参数的接口请求&#34; class=&#34;headerlink&#34; title=&#34;查询参数的接口请求&#34;&gt;&lt;/a&gt;查询参数的接口请求&lt;/h3&gt;&lt;h4 id=&#34;什么是查询参数&#34;&gt;&lt;a href=&#34;#什么是查询参数&#34; class=&#34;headerlink&#34; title=&#34;什么是查询参数?&#34;&gt;&lt;/a&gt;什么是查询参数?&lt;/h4&gt;&lt;p&gt;所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数，比如：&lt;a href=&#34;http://cx.shouji.360.cn/phonearea.php?number=13012345678&#34;&gt;http://cx.shouji.360.cn/phonearea.php?number=13012345678&lt;/a&gt; 。在这个接口中，查询参数就是:&lt;strong&gt;number&amp;#x3D;13012345678&lt;/strong&gt; 。而这一部分是由有键值对组成，格式为：key1&amp;#x3D;value1&amp;amp;key2&amp;#x3D;value2, 如果有多组键值对，要用&amp;amp;隔开 。&lt;/p&gt;
&lt;h4 id=&#34;postman如何请求&#34;&gt;&lt;a href=&#34;#postman如何请求&#34; class=&#34;headerlink&#34; title=&#34;postman如何请求&#34;&gt;&lt;/a&gt;postman如何请求&lt;/h4&gt;&lt;p&gt;在postman中实现对这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。&lt;/p&gt;
&lt;p&gt;针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。&lt;/p&gt;
&lt;p&gt;具体实现步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开postman，新建一个请求。&lt;/li&gt;
&lt;li&gt;在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略&lt;/li&gt;
&lt;li&gt;接口URL中输入地址，点击Send按钮就可以发送请求了 。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;表单类型的接口请求&#34;&gt;&lt;a href=&#34;#表单类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;表单类型的接口请求&#34;&gt;&lt;/a&gt;表单类型的接口请求&lt;/h3&gt;&lt;h4 id=&#34;什么是表单-？&#34;&gt;&lt;a href=&#34;#什么是表单-？&#34; class=&#34;headerlink&#34; title=&#34;什么是表单 ？&#34;&gt;&lt;/a&gt;什么是表单 ？&lt;/h4&gt;&lt;p&gt;我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。&lt;/p&gt;
&lt;p&gt;不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，那么什么是表单类型呢 ？ 简单理解就是在请求头中查看&lt;strong&gt;Content-Type，它的值如果是:application&amp;#x2F;x-www-form-urlencoded&lt;/strong&gt; .那么就说明客户端提交的数据是以表单形式提交的 。&lt;/p&gt;
&lt;h4 id=&#34;postman中如何请求？&#34;&gt;&lt;a href=&#34;#postman中如何请求？&#34; class=&#34;headerlink&#34; title=&#34;postman中如何请求？&#34;&gt;&lt;/a&gt;postman中如何请求？&lt;/h4&gt;&lt;p&gt;如果在postman请求上图的接口，我们只需要填写四个参数，分别是(可以参考上图)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求URL：&lt;a href=&#34;http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432&#34;&gt;http://localhost/index.php?m=Home&amp;amp;c=User&amp;amp;a=do_login&amp;amp;t=0.21942974229794432&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求头：Content-Type：application&amp;#x2F;x-www-form-urlencode&lt;/li&gt;
&lt;li&gt;请求体： username&amp;#x3D;13088888888&amp;amp;password&amp;#x3D;123456&amp;amp;verify_code&amp;#x3D;8888&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。在postman中设置请求体类型为，需要&lt;strong&gt;选择body-&amp;gt; x-www-form-urlencoded&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;上传文件的表单请求&#34;&gt;&lt;a href=&#34;#上传文件的表单请求&#34; class=&#34;headerlink&#34; title=&#34;上传文件的表单请求&#34;&gt;&lt;/a&gt;上传文件的表单请求&lt;/h3&gt;&lt;p&gt;在做接口测试时，我们经常会遇到需要上传文件的接口，比如微信的更新头像。这就需要用到：multipart&amp;#x2F;form-data。它也属于一种表单，但它既支持表单请求，也支持文件上传。 它的请求报文中数据往往是下面这样的。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs http&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;: &lt;/span&gt;multipart/form-data&lt;br&gt;&lt;br&gt;&lt;span class=&#34;language-abnf&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt;a1.jpg&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求URL：&lt;a href=&#34;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&#34;&gt;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求类型：multipart&amp;#x2F;form-data&lt;/li&gt;
&lt;li&gt;请求体：file&amp;#x3D;a1.jpg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要&lt;strong&gt;选择body-&amp;gt; form-data&lt;/strong&gt; 。file中要选择File类型，然后上传本地的文件 。&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;json类型的接口请求&#34;&gt;&lt;a href=&#34;#json类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;json类型的接口请求&#34;&gt;&lt;/a&gt;json类型的接口请求&lt;/h3&gt;&lt;p&gt;这应该是接口测试中最常见的一种情况了 ， 也就是请求体类型为json,我们来看下这个请求报文 。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs http&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;http://xxx/api/sys/login&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;: &lt;/span&gt;application/json;charset=UTF-8&lt;br&gt;&lt;br&gt;&lt;span class=&#34;language-json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求地址：&lt;a href=&#34;http://xxx/api/sys/login&#34;&gt;http://xxx/api/sys/login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求体类型：json&lt;/li&gt;
&lt;li&gt;请求体数据：{“account”:”root”,”password”:”123456”}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要&lt;strong&gt;选择body-&amp;gt; raw -JSON&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;接口响应数据解析&#34;&gt;&lt;a href=&#34;#接口响应数据解析&#34; class=&#34;headerlink&#34; title=&#34;接口响应数据解析&#34;&gt;&lt;/a&gt;接口响应数据解析&lt;/h2&gt;&lt;p&gt;响应数据是发送请求后经过服务器处理后返回的结果，响应由三部分组成，分别是状态行、响应头、响应体。我们来看下postman的响应数据展示。&lt;/p&gt;
&lt;p&gt;在postman中的响应数据展示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态行：Status：200 OK&lt;/li&gt;
&lt;li&gt;响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示&lt;/li&gt;
&lt;li&gt;响应体：Body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么这些数据对我们做接口测试有什么作用呢 ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码&lt;/li&gt;
&lt;li&gt;Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。&lt;/li&gt;
&lt;li&gt;Time 和Size 是我们做性能测试时，可以根据这两个参数来对所测接口的性能做一个简单的判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。&lt;/li&gt;
&lt;li&gt;Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。&lt;/li&gt;
&lt;li&gt;Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;接口管理（Collection）&#34;&gt;&lt;a href=&#34;#接口管理（Collection）&#34; class=&#34;headerlink&#34; title=&#34;接口管理（Collection）&#34;&gt;&lt;/a&gt;接口管理（Collection）&lt;/h2&gt;&lt;p&gt;当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时还希望对这批用例做回归测试 。在postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。&lt;/p&gt;
&lt;p&gt;先对Collection功能的使用场景做个简单总结 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用例分类管理，方便后期维护&lt;/li&gt;
&lt;li&gt;可以进行批量用例回归测试 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么Collection是如何去管理用例的呢 ？ 先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）&lt;/li&gt;
&lt;li&gt;选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）&lt;/li&gt;
&lt;li&gt;选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过上面的操作，我们实现了一个最简单的demo模型。但实际上，有了这个功能才是postman学习的开始，因为很多功能都是基础这个功能的基础上进行的，比如用例的批量执行，Mock ，接口文档等功能 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;postman高级功能&#34;&gt;&lt;a href=&#34;#postman高级功能&#34; class=&#34;headerlink&#34; title=&#34;postman高级功能&#34;&gt;&lt;/a&gt;postman高级功能&lt;/h1&gt;&lt;h2 id=&#34;批量执行接口请求&#34;&gt;&lt;a href=&#34;#批量执行接口请求&#34; class=&#34;headerlink&#34; title=&#34;批量执行接口请求&#34;&gt;&lt;/a&gt;批量执行接口请求&lt;/h2&gt;&lt;p&gt;当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？&lt;/p&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选中一个Collection，点击右三角，在弹出的界面点击RUN&lt;/li&gt;
&lt;li&gt;这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选中 。&lt;/li&gt;
&lt;li&gt;点击界面下方的RUN Collection，就会对Collection中选中的所有测试用例运行 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对上面的几个红框内的功能进行简单说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;断言统计&lt;/strong&gt;：左上角的两个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。&lt;/li&gt;
&lt;li&gt;Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。Export Result：导出运行结果，默认导出的结果json文件 。&lt;/li&gt;
&lt;li&gt;Retry: 重新运行，点击它会把该Collection重新运行一遍&lt;/li&gt;
&lt;li&gt;New：返回到Runner，可以重新选择用例的组合 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。&lt;/p&gt;
&lt;h2 id=&#34;日志调试&#34;&gt;&lt;a href=&#34;#日志调试&#34; class=&#34;headerlink&#34; title=&#34;日志调试&#34;&gt;&lt;/a&gt;日志调试&lt;/h2&gt;&lt;p&gt;在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。&lt;/p&gt;
&lt;p&gt;在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“我是一条日志”)&lt;/p&gt;
&lt;p&gt;那么打印的日如何看呢 ？ 在postman中有俩个入口，第一个入口就是：view-show postman console 。第二个入口就是左下角Console 。&lt;/p&gt;
&lt;p&gt;这里面有几个比较实用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。&lt;/li&gt;
&lt;li&gt;按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。&lt;/li&gt;
&lt;li&gt;查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。&lt;/li&gt;
&lt;li&gt;隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。&lt;/p&gt;
&lt;h2 id=&#34;断言&#34;&gt;&lt;a href=&#34;#断言&#34; class=&#34;headerlink&#34; title=&#34;断言&#34;&gt;&lt;/a&gt;断言&lt;/h2&gt;&lt;h3 id=&#34;断言介绍&#34;&gt;&lt;a href=&#34;#断言介绍&#34; class=&#34;headerlink&#34; title=&#34;断言介绍&#34;&gt;&lt;/a&gt;断言介绍&lt;/h3&gt;&lt;p&gt;如果没有断言，我们只能做接口的功能测试，但有了断言后，就为我们做自动化提供了条件，并且在postman中的断言是非常方便和强大的 。&lt;/p&gt;
&lt;p&gt;我们先来了解下postman断言的一些特点 ，具体如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断言编写位置：Tests标签&lt;/li&gt;
&lt;li&gt;断言所用语言：JavaScript&lt;/li&gt;
&lt;li&gt;断言执行顺序：在响应体数据返回后执行 。&lt;/li&gt;
&lt;li&gt;断言执行结果查看：Test Results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104120057.png&#34; alt=&#34;image-20210104120050195&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内置的断言功能，使用时点击对应的断言就可以自动生成到Tests文本框里面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。&lt;/p&gt;
&lt;p&gt;状态行中又包括状态码，状态消息 。在postman也可以对这两个进行断言&lt;/p&gt;
&lt;h3 id=&#34;状态行中的断言&#34;&gt;&lt;a href=&#34;#状态行中的断言&#34; class=&#34;headerlink&#34; title=&#34;状态行中的断言&#34;&gt;&lt;/a&gt;状态行中的断言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言状态码：&lt;strong&gt;Status code: code is 200&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code is 200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);        &lt;span class=&#34;hljs-comment&#34;&gt;//这里填写的200是预期结果，实际结果是请求返回结果&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言状态消息：&lt;strong&gt;Status code：code name has string&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code name has string&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应状态消息包含OK&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;响应头中的断言&#34;&gt;&lt;a href=&#34;#响应头中的断言&#34; class=&#34;headerlink&#34; title=&#34;响应头中的断言&#34;&gt;&lt;/a&gt;响应头中的断言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应头中包含：Response headers:Content-Type header check&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Content-Type is present&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应头存在&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;断言响应体-重点&#34;&gt;&lt;a href=&#34;#断言响应体-重点&#34; class=&#34;headerlink&#34; title=&#34;断言响应体(重点)&#34;&gt;&lt;/a&gt;断言响应体(重点)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应体中包含XXX字符串：Response body:Contains string&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Body matches string&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;()).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;include&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string_you_want_to_search&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;);     &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;()).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;include&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;)      &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应文本中包含string&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言响应体等于XXX字符串：Response body : is equal to a string&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Body is correct&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;body&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;response_body_string&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;body&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;response_body_string&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应体等于response_body_string&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言响应体(json)中某个键名对应的值：Response body : JSON value check&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Your test name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;();&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(jsonData.&lt;span class=&#34;hljs-property&#34;&gt;value&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;eql&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()   &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(jsonData.&lt;span class=&#34;hljs-property&#34;&gt;value&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;eql&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)  &lt;span class=&#34;hljs-comment&#34;&gt;//获取jsonData中键名为value的值，然后和100进行比较&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;响应时间-一般用于性能测试&#34;&gt;&lt;a href=&#34;#响应时间-一般用于性能测试&#34; class=&#34;headerlink&#34; title=&#34;响应时间(一般用于性能测试)&#34;&gt;&lt;/a&gt;响应时间(一般用于性能测试)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应时间：Response time is less than 200ms&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Response time is less than 200ms&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;responseTime&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;be&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;below&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应时间&amp;lt;200ms&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;案例说明&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;针对以下接口返回的数据进行断言：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;weatherinfo&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;北京&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;cityid&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;101010100&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;temp&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;27.9&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WD&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;南风&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WS&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;小于3级&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;SD&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;28%&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;AP&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1002hPa&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;njd&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;暂无实况&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WSE&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;3&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;17:55&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;isRadar&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;Radar&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;JC_RADAR_AZ9010_JB&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;断言响应状态码是否为200&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;断言响应状态码为200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;断言city是否等于北京&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;pm.test(&amp;quot;断言city等于北京&amp;quot;, function () &amp;#123;
    var jsonData = pm.response.json();
    pm.expect(jsonData.weatherinfo.city).to.eql(&amp;#39;北京&amp;#39;);
&amp;#125;);
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;- 断言返回字符串中是否包含南风&lt;br&gt;&lt;br&gt;  ```javascript&lt;br&gt;  pm.test(&amp;quot;断言返回字符串中是否包含南风&amp;quot;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; () &amp;#123;&lt;br&gt;      pm.expect(pm.response.text()).&lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt;(&amp;quot;南风&amp;quot;);&lt;br&gt;  &amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104172943.png&#34; alt=&#34;image-20210104172941982&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;&lt;a href=&#34;#总结-1&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。&lt;/p&gt;
&lt;h1 id=&#34;变量（全局-x2F-集合-x2F-环境）&#34;&gt;&lt;a href=&#34;#变量（全局-x2F-集合-x2F-环境）&#34; class=&#34;headerlink&#34; title=&#34;变量（全局&amp;#x2F;集合&amp;#x2F;环境）&#34;&gt;&lt;/a&gt;变量（全局&amp;#x2F;集合&amp;#x2F;环境）&lt;/h1&gt;&lt;p&gt;变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。&lt;/p&gt;
&lt;p&gt;对我们做接口测试来说，又是一个非常重要的功能 。&lt;/p&gt;
&lt;p&gt;在postman常用的三种变量分别是全局变量，环境变量，集合变量 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局变量&lt;/strong&gt;：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境变量&lt;/strong&gt;：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合变量&lt;/strong&gt;：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，他们的作用域范围依次从大到小：全局变量&amp;gt;集合变量&amp;gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。&lt;/p&gt;
&lt;p&gt;想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义变量（设置变量）&lt;/li&gt;
&lt;li&gt;获取变量（访问变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定义变量&#34;&gt;&lt;a href=&#34;#定义变量&#34; class=&#34;headerlink&#34; title=&#34;定义变量&#34;&gt;&lt;/a&gt;定义变量&lt;/h2&gt;&lt;p&gt;定义全局变量和环境变量，点击右上角的小齿轮，就可以根据需求定义全局变量或者环境变量了。&lt;/p&gt;
&lt;h2 id=&#34;查看变量&#34;&gt;&lt;a href=&#34;#查看变量&#34; class=&#34;headerlink&#34; title=&#34;查看变量&#34;&gt;&lt;/a&gt;查看变量&lt;/h2&gt;&lt;p&gt;定义全局变量和环境变量，点击右上角的眼睛，已经定义的全局变量和环境变量，可以进行快速查看。&lt;/p&gt;
&lt;h2 id=&#34;定义集合变量&#34;&gt;&lt;a href=&#34;#定义集合变量&#34; class=&#34;headerlink&#34; title=&#34;定义集合变量&#34;&gt;&lt;/a&gt;定义集合变量&lt;/h2&gt;&lt;p&gt;选择一个集合，打开查看更多动作(&lt;code&gt;...&lt;/code&gt;)菜单，然后点击&lt;code&gt;Edit&lt;/code&gt; 。选择“变量”选项卡以编辑或添加到集合变量。&lt;/p&gt;
&lt;p&gt;定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。&lt;/p&gt;
&lt;h3 id=&#34;在URL，Params-Authorization-Headers-Body中定义&#34;&gt;&lt;a href=&#34;#在URL，Params-Authorization-Headers-Body中定义&#34; class=&#34;headerlink&#34; title=&#34;在URL，Params , Authorization , Headers , Body中定义&#34;&gt;&lt;/a&gt;在URL，Params , Authorization , Headers , Body中定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;手工方式创建一个空的变量名&lt;/li&gt;
&lt;li&gt;在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在Tests，Pre-requests-Script&#34;&gt;&lt;a href=&#34;#在Tests，Pre-requests-Script&#34; class=&#34;headerlink&#34; title=&#34;在Tests，Pre-requests Script&#34;&gt;&lt;/a&gt;在Tests，Pre-requests Script&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义全局变量：pm.collectionVariables.set(“变量名”,变量值)&lt;/li&gt;
&lt;li&gt;定义环境变量：pm.environment.set(“变量名”，变量值)&lt;/li&gt;
&lt;li&gt;定义集合变量：pm.variables.set(“变量名”,变量值)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取变量&#34;&gt;&lt;a href=&#34;#获取变量&#34; class=&#34;headerlink&#34; title=&#34;获取变量&#34;&gt;&lt;/a&gt;获取变量&lt;/h2&gt;&lt;p&gt;定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。&lt;/p&gt;
&lt;p&gt;如果在&lt;strong&gt;请求参数中&lt;/strong&gt;获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则： 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求参数指的是：URL，Params , Authorization , Headers , Body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取环境变量：pm.environment.get(‘变量名’)&lt;/li&gt;
&lt;li&gt;获取全局变量：pm.globals.get(‘变量名’)&lt;/li&gt;
&lt;li&gt;获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;请求前置脚本&#34;&gt;&lt;a href=&#34;#请求前置脚本&#34; class=&#34;headerlink&#34; title=&#34;请求前置脚本&#34;&gt;&lt;/a&gt;请求前置脚本&lt;/h2&gt;&lt;p&gt;前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。&lt;/p&gt;
&lt;p&gt;可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？&lt;/p&gt;
&lt;p&gt;主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。总体来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。&lt;/p&gt;
&lt;h2 id=&#34;接口关联&#34;&gt;&lt;a href=&#34;#接口关联&#34; class=&#34;headerlink&#34; title=&#34;接口关联&#34;&gt;&lt;/a&gt;接口关联&lt;/h2&gt;&lt;p&gt;在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？&lt;/p&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提取上一个接口的返回数据值，&lt;/li&gt;
&lt;li&gt;将这个数据值保存到环境变量或全局变量中&lt;/li&gt;
&lt;li&gt;在下一个接口获取环境变量或全局变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;登录获取Token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求接口&lt;/li&gt;
&lt;li&gt;解析返回值需要的字段&lt;/li&gt;
&lt;li&gt;将需要的字段赋值保存到全局变量里面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104175249.png&#34; alt=&#34;image-20210104175246872&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code is 200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 把responseBody转为json字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; data = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(responseBody);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 设置环境变量token，供后面的接口引用&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-property&#34;&gt;environment&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;AfisAuth &amp;#x27;&lt;/span&gt;+data.&lt;span class=&#34;hljs-property&#34;&gt;token&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;常见返回值获取&#34;&gt;&lt;a href=&#34;#常见返回值获取&#34; class=&#34;headerlink&#34; title=&#34;常见返回值获取&#34;&gt;&lt;/a&gt;常见返回值获取&lt;/h1&gt;&lt;p&gt;在做接口测试时，请求接口返回的数据都是很复杂的json数据，有着多层嵌套，这样的数据层级在postman怎么获取呢 ？&lt;/p&gt;
&lt;h2 id=&#34;多层json嵌套-获取user-id的值&#34;&gt;&lt;a href=&#34;#多层json嵌套-获取user-id的值&#34; class=&#34;headerlink&#34; title=&#34;多层json嵌套, 获取user_id的值&#34;&gt;&lt;/a&gt;多层json嵌套, 获取user_id的值&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1252163151781167104&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取user_id的值,通过.获取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; user_id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;user_id&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;json中存在列表，获取points中的第二个元素&#34;&gt;&lt;a href=&#34;#json中存在列表，获取points中的第二个元素&#34; class=&#34;headerlink&#34; title=&#34;json中存在列表，获取points中的第二个元素&#34;&gt;&lt;/a&gt;json中存在列表，获取points中的第二个元素&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;roles&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;: [&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;API-USER-DELETE&amp;quot;&lt;/span&gt;&lt;br&gt;            ],&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;points&amp;quot;&lt;/span&gt;: [&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;point-user-delete&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POINT-USER-UPDATE&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POINT-USER-ADD&amp;quot;&lt;/span&gt;&lt;br&gt;            ]&lt;br&gt;        &amp;#125;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;authCache&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取user_id的值,通过下标获取列表中某个元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; user_id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;roles&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;points&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;列表中取最后一个元素&#34;&gt;&lt;a href=&#34;#列表中取最后一个元素&#34; class=&#34;headerlink&#34; title=&#34;列表中取最后一个元素&#34;&gt;&lt;/a&gt;列表中取最后一个元素&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;: [&lt;br&gt;           &lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1066370498633486336&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;15812340003&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zbz&amp;quot;&lt;/span&gt;&lt;br&gt;            &amp;#125;,&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1071632760222810112&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;16612094236&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;llx&amp;quot;&lt;/span&gt;&lt;br&gt;            &amp;#125;,&lt;br&gt;            ...&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1075383133106425856&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;13523679872&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test001&amp;quot;&lt;/span&gt;,&lt;br&gt;       &lt;br&gt;            &amp;#125;,&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取id的值,通过slice(-1)获取列表中最后一个元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;rows&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;slice&lt;/span&gt;(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
        <category term="工具" />
        <category term="PostMan" />
        <updated>2024-01-03T13:13:21.665Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA-Stram%E8%B0%83%E8%AF%95/</id>
        <title>IDEA-Stram调试</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA-Stram%E8%B0%83%E8%AF%95/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;JAVA8的lambda的stream编程，给我们带来了很流畅(牛逼)的编程体验，但带来的问题也很明显：&lt;/p&gt;
&lt;p&gt;下面粘贴一张博猪一个日常的代码片段：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/GMO19Rr65Uykbad.png&#34; alt=&#34;image-20210516222157802.png&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面代码看着很简洁(zhaungbi)，但是带来的问题也很直接：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;方法可读性不好&lt;/li&gt;
&lt;li&gt;调试困难，无法知道流程周转&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面博猪给大家介绍一个博猪日常写stream时常用的一个神器：&amp;#x3D;&amp;#x3D;Stream-Trance&amp;#x3D;&amp;#x3D;,一个IDEA自带的调试神器，这个工具可以详细看到每一步操作的关系、结果，非常方便进行调试。&lt;/p&gt;
&lt;h1 id=&#34;Stream调试&#34;&gt;&lt;a href=&#34;#Stream调试&#34; class=&#34;headerlink&#34; title=&#34;Stream调试&#34;&gt;&lt;/a&gt;Stream调试&lt;/h1&gt;&lt;p&gt;下面通过一个Demo，让博猪给你演示一下神器是如何使用的。首先给大家贴一下没有注释的代码（很装逼的代码）。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;45&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;23&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;89&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;78&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;);&lt;br&gt;Map&amp;lt;Boolean, List&amp;lt;Integer&amp;gt;&amp;gt; collect = list.stream()&lt;br&gt;        .filter(i -&amp;gt; i * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt;)&lt;br&gt;        .sorted()&lt;br&gt;        .map(i -&amp;gt; i - &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;        .distinct()&lt;br&gt;        .collect(Collectors.groupingBy(i -&amp;gt; i &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;, Collectors.toList()));&lt;br&gt;System.out.println(collect);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;下面博猪贴一下有注释的代码，顺便理一下这一块的代码的流程：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//初始化数组&lt;/span&gt;&lt;br&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;45&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;23&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;89&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;78&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;);&lt;br&gt;Map&amp;lt;Boolean, List&amp;lt;Integer&amp;gt;&amp;gt; collect = list.stream()&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//过滤 当前数字*2后大于60的,结果：[45,56,89,34,78,56]&lt;/span&gt;&lt;br&gt;        .filter(i -&amp;gt; i * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;60&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//默认排序,结果:[34,45,56,56,78,89]&lt;/span&gt;&lt;br&gt;        .sorted()&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//每个值-10，成一个map：结果：&amp;#123;24,35,46,46,68,79&amp;#125;&lt;/span&gt;&lt;br&gt;        .map(i -&amp;gt; i - &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;)&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//去重,结果：&amp;#123;24,35,46,68,79&amp;#125;&lt;/span&gt;&lt;br&gt;        .distinct()&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//大于五十的分组，输出一个Map&amp;lt;Boolean,Collection&amp;gt;,结果：&amp;#123;false=[24, 35, 46], true=[68, 79]&amp;#125;&lt;/span&gt;&lt;br&gt;        .collect(Collectors.groupingBy(i -&amp;gt; i &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;, Collectors.toList()));&lt;br&gt;System.out.println(collect);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上面这段代码算是流程比较长的了，当然实际工作中可能遇到比这个还要复杂的，那博猪演示一下日常是怎么调试Stream流程的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在Stream那行打上断点。点击debug运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/H9D6AIBzpVuUO1J.png&#34; alt=&#34;image-20210516224707120.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击下方按钮&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/kCfM9RescBSY56T.png&#34; alt=&#34;image-20210516224817756.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;然后自动进入当前 &lt;code&gt;Stream ​&lt;/code&gt;跟踪调试窗口，默认Split 模式显示，上面会展示每个链式调用的选项卡，点击各个选项卡可以看对应每步的跟踪结果。如下面所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;初始流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/irG98MsoLcwWK7j.png&#34; alt=&#34;image-20210516224947403.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;过滤&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/pdXOtZ1eg3fEmCA.png&#34; alt=&#34;image-20210516225139631.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;排序&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/KTpAJVIzayqiM7h.png&#34; alt=&#34;image-20210516225158100.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;转map&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/uSknG6vzfbgQyEl.png&#34; alt=&#34;image-20210516225215527.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;去重&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/sBdW1lf2NxVLUmg.png&#34; alt=&#34;image-20210516225230717.png&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;结果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/y6EzCFpfOjNmwo5.png&#34; alt=&#34;image-20210516225249902.png&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还可以点击&lt;code&gt;Flat Mode&lt;/code&gt;，查看完整的流程的运转&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/dNqs9ZXwrbgi4De.png&#34; alt=&#34;image-20210516225407829.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;链式调试&#34;&gt;&lt;a href=&#34;#链式调试&#34; class=&#34;headerlink&#34; title=&#34;链式调试&#34;&gt;&lt;/a&gt;链式调试&lt;/h1&gt;&lt;p&gt;上方详细介绍了一下Stream的调试，但是平时也是使用一些Lambda的链式编程，那上述方法是否支持呢？&lt;/p&gt;
&lt;p&gt;比如下方代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Optional.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;)&lt;br&gt;        .map(s -&amp;gt; s + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; hello&amp;quot;&lt;/span&gt;)&lt;br&gt;        .map(s -&amp;gt; s + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; world!&amp;quot;&lt;/span&gt;).get();&lt;br&gt;System.out.println(str);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;OK，我们按照上方进行调试，调试图如下方所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/VKAsE5YGah8SIT2.png&#34; alt=&#34;image-20210516230237419.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;可惜， &lt;code&gt;Trace Current Stream Chain ​&lt;/code&gt;按钮是灰色状态，不能进入，因为那个按钮只能被 &lt;code&gt;Stream ​&lt;/code&gt;调试所用。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;那像这种非 Stream 链式调用怎么调试呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;断点进入后，可以选中需要调试的部分链式代码片断，然后右键选中 &lt;code&gt;Evaluate Expression ​&lt;/code&gt;菜单（ALT + F8）进入表达式计算窗口，点击 &lt;code&gt;Evaluate ​&lt;/code&gt;按钮开始计算：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/vNV6iIde2qsDzlC.png&#34; alt=&#34;image-20210516230402779.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/05/16/lqGKfRJrHC7XojM.png&#34; alt=&#34;image-20210516230429818.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;计算无误，该表达式还可以自由编辑，非常强大。虽然没有像 &lt;code&gt;Stream ​&lt;/code&gt;这样专属的调试面板，使用 &lt;code&gt;Evaluate Expression ​&lt;/code&gt;也能达到调试链式调用的目的&lt;/p&gt;
</content>
        <category term="IDEA" />
        <category term="工具" />
        <updated>2024-01-03T13:13:21.664Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/</id>
        <title>IDEA自定义目录</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9B%AE%E5%BD%95/"/>
        <content type="html">&lt;h1 id=&#34;自定义IntelliJ-IDEA配置和插件的存放目录&#34;&gt;&lt;a href=&#34;#自定义IntelliJ-IDEA配置和插件的存放目录&#34; class=&#34;headerlink&#34; title=&#34;自定义IntelliJ IDEA配置和插件的存放目录&#34;&gt;&lt;/a&gt;自定义IntelliJ IDEA配置和插件的存放目录&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;因为个人电脑配置和个人习惯，不太习惯把配置相关的放到C盘，所以本次特地记录一下IDEA的配置和插件目录的自定义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;下载安装IDEA&lt;/li&gt;
&lt;li&gt;关闭IDEA&lt;/li&gt;
&lt;li&gt;进入IDEA的安装目录&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;举个栗子：&lt;/p&gt;
&lt;p&gt;本人安装目录：&lt;code&gt;D:\Program Files\IntelliJ IDEA 2021.2.1\bin\&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;idea.properties&lt;/code&gt;文件&lt;/li&gt;
&lt;li&gt;修改配置存储路径&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs properties&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Uncomment this option if you want to customize a path to the settings directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# idea.config.path=$&amp;#123;user.home&amp;#125;/.IntelliJIdea/config&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;把上方注释的&lt;code&gt;# idea.config.path=$&amp;#123;user.home&amp;#125;/.IntelliJIdea/config&lt;/code&gt;复制一行&lt;/li&gt;
&lt;li&gt;放开注释&lt;/li&gt;
&lt;li&gt;更改成你自己配置的文件路径就行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;修改插件配置路径&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight properties&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs properties&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# Uncomment this option if you want to customize a path to the caches directory.&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;#---------------------------------------------------------------------&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# idea.system.path=$&amp;#123;user.home&amp;#125;/.IntelliJIdea/system&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;把上方注释的&lt;code&gt;# idea.system.path=$&amp;#123;user.home&amp;#125;/.IntelliJIdea/system&lt;/code&gt;复制一行&lt;/li&gt;
&lt;li&gt;放开注释&lt;/li&gt;
&lt;li&gt;更改成你自己配置的文件路径就行&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;个人建议就是：按照原有配置方式，定义个全局的环境变量，后续只需配置环境变量即可&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;保存后，再次运行idea，所有配置和插件都将保存在指定的目录；&lt;/li&gt;
&lt;li&gt;后续再次重装系统或者重装idea只需要更改这个配置就行，相关配置还在，岂不美滋滋。&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="IDEA" />
        <category term="工具" />
        <updated>2024-01-03T13:13:21.664Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/</id>
        <title>IDEA常用功能</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/IDEA%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;记录一下我IDEA常用配置，便于安装配置。&lt;/p&gt;
&lt;p&gt;快捷键摘自：&lt;a href=&#34;https://blog.csdn.net/qq_38963960&#34;&gt;D离歌&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;常用配置&#34;&gt;&lt;a href=&#34;#常用配置&#34; class=&#34;headerlink&#34; title=&#34;常用配置&#34;&gt;&lt;/a&gt;常用配置&lt;/h1&gt;&lt;h2 id=&#34;设置字体样式及大小&#34;&gt;&lt;a href=&#34;#设置字体样式及大小&#34; class=&#34;headerlink&#34; title=&#34;设置字体样式及大小&#34;&gt;&lt;/a&gt;设置字体样式及大小&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;Font&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;个人常用字体：Font:&lt;code&gt;Courier New&lt;/code&gt;,Size”:&lt;code&gt;15&lt;/code&gt;,Line spacing:&lt;code&gt;1.2&lt;/code&gt;,Fallback Font:&lt;code&gt;Consolas&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;取消打开项目默认配置&#34;&gt;&lt;a href=&#34;#取消打开项目默认配置&#34; class=&#34;headerlink&#34; title=&#34;取消打开项目默认配置&#34;&gt;&lt;/a&gt;取消打开项目默认配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;System Settings&lt;/li&gt;
&lt;li&gt;取消&lt;code&gt;Reopen last project on startup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;鼠标更改窗口字体大小&#34;&gt;&lt;a href=&#34;#鼠标更改窗口字体大小&#34; class=&#34;headerlink&#34; title=&#34;鼠标更改窗口字体大小&#34;&gt;&lt;/a&gt;鼠标更改窗口字体大小&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;General&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;取消&lt;code&gt;Reopen last project on startup&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;方法线&#34;&gt;&lt;a href=&#34;#方法线&#34; class=&#34;headerlink&#34; title=&#34;方法线&#34;&gt;&lt;/a&gt;方法线&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Apperance&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;勾选&lt;code&gt;Show method separators&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;提示不区分大小写&#34;&gt;&lt;a href=&#34;#提示不区分大小写&#34; class=&#34;headerlink&#34; title=&#34;提示不区分大小写&#34;&gt;&lt;/a&gt;提示不区分大小写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Code Completion&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;取消勾选&lt;code&gt;Match case&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自动导入&#34;&gt;&lt;a href=&#34;#自动导入&#34; class=&#34;headerlink&#34; title=&#34;自动导入&#34;&gt;&lt;/a&gt;自动导入&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;General&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Auto Import&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;勾选&lt;code&gt;Add unambiguous imports on the fly&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;勾选&lt;code&gt;Optimize imports on the fly (for current project)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;编码&#34;&gt;&lt;a href=&#34;#编码&#34; class=&#34;headerlink&#34; title=&#34;编码&#34;&gt;&lt;/a&gt;编码&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CTRL+ALT+S&lt;/code&gt;进入设置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Editor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;File Encodings&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;相关编码设置成&lt;code&gt;UTF-8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOM for new UTF-8 files&lt;/code&gt;选择&lt;code&gt;Create UTF-8 files:&lt;/code&gt;中的&lt;code&gt;with NO BOM&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常用插件&#34;&gt;&lt;a href=&#34;#常用插件&#34; class=&#34;headerlink&#34; title=&#34;常用插件&#34;&gt;&lt;/a&gt;常用插件&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;.ignore												&lt;code&gt;（Git 忽略文件)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Alibaba Java Coding Guidelines     &lt;code&gt;（阿里编码规范代码检查）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Free MyBatis plugin                         &lt;code&gt;（Mybatis/Mybatis Plus 快速dao到xml工具）&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;GitToolBox                                         &lt;code&gt;Git工具箱&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Lombok                                              &lt;code&gt;小辣椒工具&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Protocol Buffer Editor                     &lt;code&gt;Protocol Buffer 工具&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;sequenceDiagram                           &lt;code&gt;Java方法调用时序图&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Translation                                        &lt;code&gt;谷歌翻译工具&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;常用快捷键&#34;&gt;&lt;a href=&#34;#常用快捷键&#34; class=&#34;headerlink&#34; title=&#34;常用快捷键&#34;&gt;&lt;/a&gt;常用快捷键&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于快捷键我推荐使用默认用IDEA默认的快捷键&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;Ctrl&#34;&gt;&lt;a href=&#34;#Ctrl&#34; class=&#34;headerlink&#34; title=&#34;Ctrl&#34;&gt;&lt;/a&gt;Ctrl&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在当前文件进行文本查找 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + R&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在当前文件进行文本替换 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Z&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;撤销 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除光标所在行 或 删除选中的行 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + X&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;剪切光标所在行 或 剪切选择内容&lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;复制光标所在行 或 复制选择内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + D&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;复制光标所在行 或 复制选择内容，并把复制内容插入光标位置下面 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + W&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;递进式选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展选中范围 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示最近打开的文件记录列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + N&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据输入的 &lt;strong&gt;类名&lt;/strong&gt; 查找类文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + G&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在当前文件跳转到指定行处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + J&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;插入自定义动态代码模板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + P&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;方法参数提示显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Q&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标所在的变量 &amp;#x2F; 类名 &amp;#x2F; 方法名等上面（也可以在提示补充的时候按），显示文档内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + U&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前往当前光标所在的方法的父类的方法 &amp;#x2F; 接口定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;进入光标所在的方法&amp;#x2F;变量的接口或是定义出，等效于 &lt;code&gt;Ctrl + 左键单击&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + K&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;版本控制提交项目，需要此项目有加入到版本控制才可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;版本控制更新项目，需要此项目有加入到版本控制才可用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + H&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示当前类的层次结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + O&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选择可重写的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + I&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选择可继承的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + +&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;展开代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + -&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;折叠代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + &amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;注释光标所在行代码，会根据当前不同文件类型使用不同的注释符号 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + [&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移动光标到当前所在代码的花括号开始位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + ]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移动光标到当前所在代码的花括号结束位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在光标所在的错误代码出显示错误信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;调转到所选中的词的下一个引用位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;关闭当前编辑文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，设置光标当前行为断点，如果当前已经是断点则去掉断点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行 Make Project 操作&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中文件 &amp;#x2F; 文件夹，使用助记符设定 &amp;#x2F; 取消书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + F12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出当前文件结构层，可以在弹出的层上直接输入，进行筛选&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Tab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编辑窗口切换，如果在切换的过程又加按上delete，则是关闭对应选中的窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Enter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;智能分隔行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + End&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;跳到文件尾&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Home&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;跳到文件头&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Space&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;基础代码补全，默认在 Windows 系统上被输入法占用，需要进行修改，建议修改为 &lt;code&gt;Ctrl + 逗号&lt;/code&gt; &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Delete&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除光标后面的单词或是中文句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + BackSpace&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除光标前面的单词或是中文句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 1,2,3…9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定位到对应数值的书签位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 左键单击&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在打开的文件标题上，弹出该文件路径&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 光标定位&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;按 Ctrl 不要松开，会显示光标所在的类信息摘要&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 左方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标跳转到当前单词 &amp;#x2F; 中文句的左侧开头位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 右方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标跳转到当前单词 &amp;#x2F; 中文句的右侧开头位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 前方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等效于鼠标滚轮向前效果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + 后方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等效于鼠标滚轮向后效果&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Alt&#34;&gt;&lt;a href=&#34;#Alt&#34; class=&#34;headerlink&#34; title=&#34;Alt&#34;&gt;&lt;/a&gt;Alt&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + &amp;#96;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示版本控制常用操作菜单弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Q&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出一个提示，显示当前类的声明 &amp;#x2F; 上下文信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + F1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示当前文件选择目标弹出层，弹出层中有很多目标可以进行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + F2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对于前面页面，显示各类浏览器打开目标选择弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + F3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中文本，逐个往下查找相同文本，并高亮显示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查找光标所在的方法 &amp;#x2F; 变量 &amp;#x2F; 类被调用的地方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + F8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 的状态下，选中对象，弹出可输入计算表达式调试框，查看该输入内容的调试结果&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Home&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定位 &amp;#x2F; 显示到当前文件的 &lt;code&gt;Navigation Bar&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Enter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;IntelliJ IDEA 根据光标所在问题，提供快速修复选择，光标放在的位置不同提示的结果也不同 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Insert&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;代码自动生成，如生成对象的 set &amp;#x2F; get 方法，构造函数，toString() 等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + 左方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;按左方向切换当前已打开的文件视图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + 右方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;按右方向切换当前已打开的文件视图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + 前方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当前光标跳转到当前文件的前一个方法名位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + 后方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当前光标跳转到当前文件的后一个方法名位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + 1,2,3…9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示对应数值的选项卡，其中 1 是 Project 用得最多&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Shift&#34;&gt;&lt;a href=&#34;#Shift&#34; class=&#34;headerlink&#34; title=&#34;Shift&#34;&gt;&lt;/a&gt;Shift&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F1&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果有外部文档可以连接外部文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;跳转到上一个高亮错误 或 警告位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在查找模式下，查找匹配上一个&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对当前打开的文件，使用新Windows窗口打开，旧窗口保留&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F6&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对文件 &amp;#x2F; 文件夹 重命名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，智能步入。断点所在行上有多个方法调用，会弹出进入哪个方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，跳出，表现出来的效果跟 &lt;code&gt;F9&lt;/code&gt; 一样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等效于点击工具栏的 &lt;code&gt;Debug&lt;/code&gt; 按钮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;等效于点击工具栏的 &lt;code&gt;Run&lt;/code&gt; 按钮&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + F11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出书签显示层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + Tab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;取消缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + ESC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隐藏当前 或 最后一个激活的工具窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + End&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中光标到当前行尾位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + Home&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中光标到当前行头位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + Enter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;开始新一行。光标所在行下空出一行，光标定位到新行位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + 左键单击&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在打开的文件名上按此快捷键，可以关闭当前打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Shift + 滚轮前后滚动&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当前文件的横向滚动轴滚动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Ctrl-Alt&#34;&gt;&lt;a href=&#34;#Ctrl-Alt&#34; class=&#34;headerlink&#34; title=&#34;Ctrl + Alt&#34;&gt;&lt;/a&gt;Ctrl + Alt&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + L&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;格式化代码，可以对当前文件和整个包目录使用 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + O&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;优化导入的类，可以对当前文件和整个包目录使用 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + I&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标所在行 或 选中部分进行自动代码缩进，有点类似格式化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对选中的代码弹出环绕选项弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + J&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出模板选择窗口，讲选定的代码加入动态模板中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + H&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;调用层次&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在某个调用的方法名上使用会跳到具体的实现处，可以跳过接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + V&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;快速引进变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + Y&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;同步、刷新&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开 IntelliJ IDEA 系统设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示使用的地方。寻找被该类或是变量被调用的地方，用弹出框的方式找出来&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + F11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;切换全屏模式&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + Enter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标所在行上空出一行，光标定位到新行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + Home&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出跟当前文件有关联的文件弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + Space&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类名自动完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + 左方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;退回到上一个操作的地方 &lt;code&gt;（必备）**（注意与其他软件快捷键冲突）**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + 右方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前进到上一个操作的地方 &lt;code&gt;（必备）**（注意与其他软件快捷键冲突）**&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + 前方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在查找模式下，跳到上个查找的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Alt + 后方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在查找模式下，跳到下个查找的文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Ctrl-Shift&#34;&gt;&lt;a href=&#34;#Ctrl-Shift&#34; class=&#34;headerlink&#34; title=&#34;Ctrl + Shift&#34;&gt;&lt;/a&gt;Ctrl + Shift&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据输入内容查找整个项目 或 指定目录内文件 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + R&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据输入内容替换对应内容，范围为整个项目 或 指定目录内文件 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + J&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自动将下一行合并到当前行末尾 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Z&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;取消撤销 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + W&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;递进式取消选择代码块。可选中光标所在的单词或段落，连续按会在原有选中的基础上再扩展取消选中范围 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + N&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过文件名定位 &amp;#x2F; 打开文件 &amp;#x2F; 目录，打开目录需要在输入的内容后面多加一个正斜杠 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + U&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对选中的代码进行大 &amp;#x2F; 小写轮流转换 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + T&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对当前类生成单元测试类，如果已经存在的单元测试类则可以进行选择&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;复制当前文件磁盘路径到剪贴板&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + V&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出缓存的最近拷贝的内容管理器弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + E&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示最近修改的文件列表的弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + H&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示方法层次结构&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + B&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;跳转到类型声明处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + I&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;快速查看光标所在的方法 或 类的定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + A&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查找动作 &amp;#x2F; 设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + &amp;#x2F;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;代码块注释 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + [&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中从光标所在位置到它的顶部中括号位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + ]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选中从光标所在位置到它的底部中括号位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + +&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;展开所有代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + -&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;折叠所有代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;高亮显示所有该选中文本，按Esc高亮消失&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + F8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，指定断点进入条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + F9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编译选中的文件 &amp;#x2F; 包 &amp;#x2F; Module&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + F12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编辑器最大化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Space&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;智能代码提示&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Enter&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;自动结束代码，行末自动添加分号 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Backspace&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;退回到上次修改的地方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 1,2,3…9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;快速添加指定数值的书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 左方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在代码文件上，光标跳转到当前单词 &amp;#x2F; 中文句的左侧开头位置，同时选中该单词 &amp;#x2F; 中文句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 右方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在代码文件上，光标跳转到当前单词 &amp;#x2F; 中文句的右侧开头位置，同时选中该单词 &amp;#x2F; 中文句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 左方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在光标焦点是在工具选项卡上，缩小选项卡区域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 右方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在光标焦点是在工具选项卡上，扩大选项卡区域&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 前方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标放在方法名上，将方法移动到上一个方法前面，调整方法排序&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + 后方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;光标放在方法名上，将方法移动到下一个方法前面，调整方法排序&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Alt-Shift&#34;&gt;&lt;a href=&#34;#Alt-Shift&#34; class=&#34;headerlink&#34; title=&#34;Alt + Shift&#34;&gt;&lt;/a&gt;Alt + Shift&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + N&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选择 &amp;#x2F; 添加 task&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示添加到收藏夹弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查看最近操作项目的变化情况列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + F&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;添加到收藏夹&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + I&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;查看项目当前文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，下一步，进入当前方法体内，如果方法体还有方法，则会进入该内嵌的方法中，依此循环进入&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + F9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出 &lt;code&gt;Debug&lt;/code&gt; 的可选择菜单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + F10&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出 &lt;code&gt;Run&lt;/code&gt; 的可选择菜单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + 左键双击&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选择被双击的单词 &amp;#x2F; 中文句，按住不放，可以同时选择其他单词 &amp;#x2F; 中文句&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + 前方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移动光标所在行向上移动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Alt + Shift + 后方向键&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移动光标所在行向下移动&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Ctrl-Shift-Alt&#34;&gt;&lt;a href=&#34;#Ctrl-Shift-Alt&#34; class=&#34;headerlink&#34; title=&#34;Ctrl + Shift + Alt&#34;&gt;&lt;/a&gt;Ctrl + Shift + Alt&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Alt + V&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;无格式黏贴&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Alt + N&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;前往指定的变量 &amp;#x2F; 方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Alt + S&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;打开当前项目设置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Ctrl + Shift + Alt + C&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;复制参考信息&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;快捷键&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F2&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;跳转到下一个高亮错误 或 警告位置 &lt;code&gt;（必备）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F3&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在查找模式下，定位到下一个匹配处&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;编辑源&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F7&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则进入当前方法体内，如果该方法体还有方法，则不会进入该内嵌的方法中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F8&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，进入下一步，如果当前行断点是一个方法，则不进入当前方法体内&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F9&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 Debug 模式下，恢复程序运行，但是如果该断点下面代码还有断点则停在下一个断点上&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F11&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;添加书签&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;F12&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;回到前一个工具窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Tab&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;缩进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;ESC&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从工具窗口进入代码文件窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;连按两次Shift&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;弹出 &lt;code&gt;Search Everywhere&lt;/code&gt; 弹出层&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
</content>
        <category term="IDEA" />
        <category term="工具" />
        <updated>2024-01-03T13:13:21.664Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/</id>
        <title>Archery教程</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/"/>
        <content type="html">&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;本文基于官方文档安装，有不太详细的地方请多多包涵，下方为官方文档连接：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&#34;https://archerydms.com/&#34;&gt;Archery中文官方文档&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Archery是&lt;a href=&#34;https://github.com/jly8866/archer&#34;&gt;archer&lt;/a&gt;的分支项目，定位于SQL审核查询平台，旨在提升DBA的工作效率，支持多数据库的SQL上线和查询，同时支持丰富的MySQL运维功能，所有功能都兼容手机端操作&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;功能清单&#34;&gt;&lt;a href=&#34;#功能清单&#34; class=&#34;headerlink&#34; title=&#34;功能清单&#34;&gt;&lt;/a&gt;功能清单&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;查询&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;审核&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;执行&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;备份&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;数据字典&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;慢日志&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;会话管理&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;账号管理&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;参数管理&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;数据归档&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MySQL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MsSQL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Redis&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;PgSQL&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Oracle&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;MongoDB&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;√&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;×&lt;/td&gt;
&lt;td&gt;×&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;部署升级&#34;&gt;&lt;a href=&#34;#部署升级&#34; class=&#34;headerlink&#34; title=&#34;部署升级&#34;&gt;&lt;/a&gt;部署升级&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;支持docker部署、手动部署，支持升级。&lt;/p&gt;
&lt;p&gt;由于安装包部署略微繁琐，本文不提供介绍，详细请看上方文档地址，自行搭建，本次只是提供基于docker的部署教程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;docker部署&lt;/li&gt;
&lt;li&gt;安装包部署&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;Docker部署&#34;&gt;&lt;a href=&#34;#Docker部署&#34; class=&#34;headerlink&#34; title=&#34;Docker部署&#34;&gt;&lt;/a&gt;Docker部署&lt;/h1&gt;&lt;h2 id=&#34;安装Docker-compose&#34;&gt;&lt;a href=&#34;#安装Docker-compose&#34; class=&#34;headerlink&#34; title=&#34;安装Docker-compose&#34;&gt;&lt;/a&gt;安装Docker-compose&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;安装Docker-compose有两种方法：一个通过Python的pip安装；另外一个是通过连接。&lt;/p&gt;
&lt;p&gt;本文会详细介绍两种方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;通过pip安装&#34;&gt;&lt;a href=&#34;#通过pip安装&#34; class=&#34;headerlink&#34; title=&#34;通过pip安装&#34;&gt;&lt;/a&gt;通过pip安装&lt;/h3&gt;&lt;h4 id=&#34;更新Python3-X版本&#34;&gt;&lt;a href=&#34;#更新Python3-X版本&#34; class=&#34;headerlink&#34; title=&#34;更新Python3.X版本&#34;&gt;&lt;/a&gt;更新Python3.X版本&lt;/h4&gt;&lt;figure class=&#34;highlight sh&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs sh&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 进入安装包目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;cd&lt;/span&gt; /source&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 下载Python3安装包&lt;/span&gt;&lt;br&gt;wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;# 解压&lt;/span&gt;&lt;br&gt;tar xzvf Python-3.7.0.tgz&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;cd&lt;/span&gt; Python-3.7.0&lt;br&gt;&lt;span class=&#34;hljs-built_in&#34;&gt;mkdir&lt;/span&gt; /usr/local/src/python3   &lt;span class=&#34;hljs-comment&#34;&gt;#这个是个人喜好放在这个目录&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装GC编译器&#34;&gt;&lt;a href=&#34;#安装GC编译器&#34; class=&#34;headerlink&#34; title=&#34;安装GC编译器&#34;&gt;&lt;/a&gt;安装GC编译器&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;yum -y install gcc&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;先安装一下GC编译器，要不然编译失败，没办法安装。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检查一下：&lt;/strong&gt;要注意的是产生了：python3和pip3.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight awk&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs awk&#34;&gt;ls &lt;span class=&#34;hljs-regexp&#34;&gt;/usr/&lt;/span&gt;local&lt;span class=&#34;hljs-regexp&#34;&gt;/src/&lt;/span&gt;python3/bin&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装pip&#34;&gt;&lt;a href=&#34;#安装pip&#34; class=&#34;headerlink&#34; title=&#34;安装pip&#34;&gt;&lt;/a&gt;安装pip&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装依赖&lt;/span&gt;&lt;br&gt;yum install -y epel-release&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装pip&lt;/span&gt;&lt;br&gt;yum install -y python-pip&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;查看pip版本&lt;/span&gt;&lt;br&gt;pip --version&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;升级pip版本&lt;/span&gt;&lt;br&gt;pip install -U pip&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装docker-compose&#34;&gt;&lt;a href=&#34;#安装docker-compose&#34; class=&#34;headerlink&#34; title=&#34;安装docker-compose&#34;&gt;&lt;/a&gt;安装docker-compose&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;安装&lt;/span&gt;&lt;br&gt;pip install docker-compose&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;通过docker安装&#34;&gt;&lt;a href=&#34;#通过docker安装&#34; class=&#34;headerlink&#34; title=&#34;通过docker安装&#34;&gt;&lt;/a&gt;通过docker安装&lt;/h3&gt;&lt;h4 id=&#34;安装docker&#34;&gt;&lt;a href=&#34;#安装docker&#34; class=&#34;headerlink&#34; title=&#34;安装docker&#34;&gt;&lt;/a&gt;安装docker&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;已安装docker该步骤略过。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;curl -fsSL https://get.docker.com -o get-docker.sh | sudo sh&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;安装-Docker-Compos&#34;&gt;&lt;a href=&#34;#安装-Docker-Compos&#34; class=&#34;headerlink&#34; title=&#34;安装 Docker Compos&#34;&gt;&lt;/a&gt;安装 Docker Compos&lt;/h4&gt;&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;sudo curl -L &amp;quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&amp;quot; -o /usr/local/bin/docker-compose&lt;br&gt;sudo chmod +x /usr/local/bin/docker-compose&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;下载REALEASE文件&#34;&gt;&lt;a href=&#34;#下载REALEASE文件&#34; class=&#34;headerlink&#34; title=&#34;下载REALEASE文件&#34;&gt;&lt;/a&gt;下载REALEASE文件&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;下载下图路径下的文件，里面包含项目执行的所需要的SQL以及依赖。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316105046.png&#34; alt=&#34;image-20210316105036672&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;准备运行配置&#34;&gt;&lt;a href=&#34;#准备运行配置&#34; class=&#34;headerlink&#34; title=&#34;准备运行配置&#34;&gt;&lt;/a&gt;准备运行配置&lt;/h2&gt;&lt;p&gt;具体可参考：&lt;a href=&#34;https://github.com/hhyo/Archery/tree/master/src/docker-compose&#34;&gt;文档地址&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;docker-compose.yml文件内的services可按照本身的运行环境来调整，同时注意检查版本号是否正确，比如说外部已经装好了mysql、redis、inception，就可以将对应的services删除，但是需要注意修改settings.py文件的相关配置，具体可以参考&lt;a href=&#34;https://archerydms.com/installation/manual/#_5&#34;&gt;修改配置&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;启动部署&#34;&gt;&lt;a href=&#34;#启动部署&#34; class=&#34;headerlink&#34; title=&#34;启动部署&#34;&gt;&lt;/a&gt;启动部署&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;下载 &lt;a href=&#34;https://github.com/hhyo/archery/releases/&#34;&gt;Releases&lt;/a&gt;文件，解压后进入docker-compose文件夹,按照本文4.3步骤进行本地配置。&lt;/p&gt;
&lt;p&gt;因本人使用的是新建的虚拟机，所以就按照默认配置进行执行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs shell&#34;&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;启动&lt;/span&gt;&lt;br&gt;docker-compose -f docker-compose.yml up -d&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;表结构初始化&lt;/span&gt;&lt;br&gt;docker exec -ti archery /bin/bash&lt;br&gt;cd /opt/archery&lt;br&gt;source /opt/venv4archery/bin/activate&lt;br&gt;python3 manage.py makemigrations sql  &lt;br&gt;python3 manage.py migrate &lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;数据初始化&lt;/span&gt;&lt;br&gt;python3 manage.py dbshell&amp;lt;sql/fixtures/auth_group.sql&lt;br&gt;python3 manage.py dbshell&amp;lt;src/init_sql/mysql_slow_query_review.sql&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;创建管理用户&lt;/span&gt;&lt;br&gt;python3 manage.py createsuperuser&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;重启&lt;/span&gt;&lt;br&gt;docker restart archery&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta prompt_&#34;&gt;# &lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;日志查看和问题排查&lt;/span&gt;&lt;br&gt;docker logs archery -f --tail=50&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;访问&#34;&gt;&lt;a href=&#34;#访问&#34; class=&#34;headerlink&#34; title=&#34;访问&#34;&gt;&lt;/a&gt;访问&lt;/h2&gt;&lt;p&gt;&lt;a href=&#34;http://127.0.0.1:9123/&#34;&gt;http://127.0.0.1:9123&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;启动后配置&#34;&gt;&lt;a href=&#34;#启动后配置&#34; class=&#34;headerlink&#34; title=&#34;启动后配置&#34;&gt;&lt;/a&gt;启动后配置&lt;/h2&gt;&lt;p&gt;在启动后 Archery 有一些配置(如Inception , 资源组, 权限组等)需要按需配置, 请详细阅读 &lt;a href=&#34;https://archerydms.com/configuration/&#34;&gt;配置项说明&lt;/a&gt; , 按照自己的需要进行配置&lt;/p&gt;
&lt;h2 id=&#34;运行界面&#34;&gt;&lt;a href=&#34;#运行界面&#34; class=&#34;headerlink&#34; title=&#34;运行界面&#34;&gt;&lt;/a&gt;运行界面&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316113345.png&#34; alt=&#34;image-20210316113342723&#34;&gt;&lt;/p&gt;
</content>
        <category term="Archery" />
        <category term="MySql" />
        <category term="工具" />
        <updated>2024-01-03T13:13:21.663Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/</id>
        <title>Git分支管理流程</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E6%B5%81%E7%A8%8B/"/>
        <content type="html">&lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;有幸参与一次大型项目，人员较多，需求较多，代码管理方面值得学习，记录总结一下分支管理。&lt;/p&gt;
&lt;p&gt;本文参考：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/ligang2585116/category_2869531.html?spm=1001.2014.3001.5482&#34;&gt;李刚的学习专栏&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.pianshen.com/article/1702340951/&#34;&gt;程序员大本营&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;管理流程简介&#34;&gt;&lt;a href=&#34;#管理流程简介&#34; class=&#34;headerlink&#34; title=&#34;管理流程简介&#34;&gt;&lt;/a&gt;管理流程简介&lt;/h1&gt;&lt;h2 id=&#34;流程图例&#34;&gt;&lt;a href=&#34;#流程图例&#34; class=&#34;headerlink&#34; title=&#34;流程图例&#34;&gt;&lt;/a&gt;流程图例&lt;/h2&gt;&lt;p&gt;大体管理流程如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://z3.ax1x.com/2021/03/22/6ok62V.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://www.pianshen.com/images/752/5e42a4fa2ddcfadf8c02c39a9da9cc40.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;案例解析&#34;&gt;&lt;a href=&#34;#案例解析&#34; class=&#34;headerlink&#34; title=&#34;案例解析&#34;&gt;&lt;/a&gt;案例解析&lt;/h2&gt;&lt;p&gt;如上图所示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;生产初始版本为v0.5,项目初始develop与master是保持一致的&lt;/p&gt;
&lt;p&gt;现有新需求:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台注册功能&lt;/li&gt;
&lt;li&gt;平台登录功能&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;版本规划：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平台注册功能v1.0版本上线&lt;/li&gt;
&lt;li&gt;平台登录功能v1.1版本上线&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;开发任务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册功能由张三负责&lt;/li&gt;
&lt;li&gt;登录功能由李四负责&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;张三同学：v1-0版本开发到上线&#34;&gt;&lt;a href=&#34;#张三同学：v1-0版本开发到上线&#34; class=&#34;headerlink&#34; title=&#34;张三同学：v1.0版本开发到上线&#34;&gt;&lt;/a&gt;张三同学：v1.0版本开发到上线&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从develop新建一个用于开发注册功能的分支&lt;/li&gt;
&lt;li&gt;命名为feature_register&lt;/li&gt;
&lt;li&gt;本地拉取分支代码，开发注册功能，测试，修改再测试等流程&lt;/li&gt;
&lt;li&gt;开发完成，提交到develop，此时feature_register可以删除&lt;/li&gt;
&lt;li&gt;从develop新建一个预发布分支release-v1.0&lt;/li&gt;
&lt;li&gt;从release-v1.0打包发布到测试环境&lt;/li&gt;
&lt;li&gt;测试修复bug，测试通过更新到master以及develop&lt;/li&gt;
&lt;li&gt;master打包，打tag，tag信息为v1.0相关信息&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;李四同学：v1-1版本开发到上线&#34;&gt;&lt;a href=&#34;#李四同学：v1-1版本开发到上线&#34; class=&#34;headerlink&#34; title=&#34;李四同学：v1.1版本开发到上线&#34;&gt;&lt;/a&gt;李四同学：v1.1版本开发到上线&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;从develop新建一个用于开发登录功能的分支&lt;/li&gt;
&lt;li&gt;命名为feature_login&lt;/li&gt;
&lt;li&gt;本地拉取分支代码，开发登录功能，测试，修改再测试等流程&lt;/li&gt;
&lt;li&gt;开发完成，提交到develop，此时feature_login可以删除&lt;/li&gt;
&lt;li&gt;从develop新建一个预发布分支release-v1.0&lt;/li&gt;
&lt;li&gt;从release-v1.0打包发布到测试环境&lt;/li&gt;
&lt;li&gt;测试修复bug，测试通过更新到master以及develop&lt;/li&gt;
&lt;li&gt;master打包，打tag，tag信息为v1.0相关信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注：hotfix-xxx分支主要是针对master上bug的修复，修复完成之后需要把hotfix合并到maser，master打包，打tag，tag信息为hotfix相关信息，并发布生产，同时合并到develop分支，使develop和master一致，此时hotfix可删除。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="工具" />
        <category term="Git" />
        <updated>2024-01-03T13:13:21.663Z</updated>
    </entry>
</feed>
