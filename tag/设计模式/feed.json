{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"设计模式\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "设计模式",
            "date_published": "2024-01-03T13:13:21.657Z",
            "content_html": "<h1 id=\"设计模式\"><a href=\"#设计模式\" class=\"headerlink\" title=\"设计模式\"></a>设计模式</h1><p>设计模式是众多软件开发人员经过长时间的试错和应用总结出来的，解决特定问题的一系列方案。现行的部分教材在介绍设计模式时，有些会因为案例脱离实际应用场景而令人费解，有些又会因为场景简单而显得有些小题大做。本文会结合在美团金融服务平台设计开发时的经验，结合实际的案例，并采用“师生对话”这种相对诙谐的形式去讲解三类常用设计模式的应用。希望能对想提升系统设计能力的同学有所帮助或启发。</p>\n<h1 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h1><p>话说这是在程序员世界里一对师徒的对话：</p>\n<p>“老师，我最近在写代码时总感觉自己的代码很不优雅，有什么办法能优化吗？”</p>\n<p>“嗯，可以考虑通过教材系统学习，从注释、命名、方法和异常等多方面实现整洁代码。”</p>\n<p>“然而，我想说的是，我的代码是符合各种编码规范的，但是从实现上却总是感觉不够简洁，而且总是需要反复修改！”学生小明叹气道。</p>\n<p>老师看了看小明的代码说：“我明白了，这是系统设计上的缺陷。总结就是抽象不够、可读性低、不够健壮。”</p>\n<p>“对对对，那怎么能迅速提高代码的可读性、健壮性、扩展性呢？”小明急不可耐地问道。</p>\n<p>老师敲了敲小明的头：“不要太浮躁，没有什么方法能让你立刻成为系统设计专家。但是对于你的问题，我想<strong>设计模式</strong>可以帮到你。”</p>\n<p>“设计模式？”小明不解。</p>\n<p>“是的。”老师点了点头，“世上本没有路，走的人多了，便变成了路。在程序员的世界中，本没有设计模式，写代码是人多了，他们便总结出了一套能提高开发和维护效率的套路，这就是设计模式。设计模式不是什么教条或者范式，它可以说是一种在特定场景下普适且可复用的解决方案，是一种可以用于提高代码可读性、可扩展性、可维护性和可测性的最佳实践。”</p>\n<p>“哦哦，我懂了，那我应该如何去学习呢？”</p>\n<p>“不急，接下来我来带你慢慢了解设计模式。”</p>\n<h2 id=\"奖励的发放策略\"><a href=\"#奖励的发放策略\" class=\"headerlink\" title=\"奖励的发放策略\"></a>奖励的发放策略</h2><p>第一天，老师问小明：“你知道活动营销吗？”</p>\n<p>“这我知道，活动营销是指企业通过参与社会关注度高的已有活动，或整合有效的资源自主策划大型活动，从而迅速提高企业及其品牌的知名度、美誉度和影响力，常见的比如有抽奖、红包等。”</p>\n<p>老师点点头：“是的。我们假设现在就要做一个营销，需要用户参与一个活动，然后完成一系列的任务，最后可以得到一些奖励作为回报。活动的奖励包含美团外卖、酒旅和美食等多种品类券，现在需要你帮忙设计一套奖励发放方案。”</p>\n<p>因为之前有过类似的开发经验，拿到需求的小明二话不说开始了编写起了代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 奖励服务</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RewordApiService</span>&#123;<br>    <span class=\"hljs-comment\">//各种奖励实现</span><br>    <span class=\"hljs-keyword\">private</span> Reword1Service reword1Service;<br>    <span class=\"hljs-keyword\">private</span> Reword2Service reword2Service;<br>    <span class=\"hljs-keyword\">private</span> Reword3Service reword3Service;<br><br>    <span class=\"hljs-comment\">// 使用对入参的条件判断进行发奖</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">issueReward</span><span class=\"hljs-params\">(String rewardType, Object ... params)</span> &#123;<br>        <span class=\"hljs-keyword\">switch</span> (rewardType) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword1&quot;</span>:<br>                <span class=\"hljs-type\">Reword1Reqeust</span> <span class=\"hljs-variable\">reword1Reqeust</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword1Reqeust</span>();<br>                reword1Reqeust.setReq(params);<br>                reword1Service.rewordService(reword1Reqeust);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword2&quot;</span>:<br>                <span class=\"hljs-type\">Reword2Reqeust</span> <span class=\"hljs-variable\">reword2Reqeust</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2Reqeust</span>();<br>                reword2Reqeust.setReq(params);<br>                reword2Service.rewordService(reword2Reqeust);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword3&quot;</span>:<br>                <span class=\"hljs-type\">Reword3Reqeust</span> <span class=\"hljs-variable\">reword3Reqeust</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword3Reqeust</span>();<br>                reword3Reqeust.setReq(params);<br>                reword3Service.rewordService(reword3Reqeust);<br>                <span class=\"hljs-keyword\">break</span>;<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;rewardType error!&quot;</span>);<br>                <span class=\"hljs-keyword\">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>小明很快写好了Demo，然后发给老师看。</p>\n<p>“假如我们即将接入新的打车券，这是否意味着你必须要修改这部分代码？”老师问道。</p>\n<p>小明愣了一愣，没等反应过来老师又问：”假如后面美团外卖的发券接口发生了改变或者替换，这段逻辑是否必须要同步进行修改？”</p>\n<p>小明陷入了思考之中，一时间没法回答。</p>\n<p>经验丰富的老师一针见血地指出了这段设计的问题：“你这段代码有两个主要问题，一是不符合<strong>开闭原则</strong>，可以预见，如果后续新增品类券的话，需要直接修改主干代码，而我们提倡代码应该是对修改封闭的；二是不符合<strong>迪米特法则</strong>，发奖逻辑和各个下游接口高度耦合，这导致接口的改变将直接影响到代码的组织，使得代码的可维护性降低。”</p>\n<p>小明恍然大悟：“那我将各个同下游接口交互的功能抽象成单独的服务，封装其参数组装及异常处理，使得发奖主逻辑与其解耦，是否就能更具备扩展性和可维护性？”</p>\n<p>“这是个不错的思路。之前跟你介绍过设计模式，这个案例就可以使用<strong>策略模式</strong>和<strong>适配器模式</strong>来优化。”</p>\n<p>小明借此机会学习了这两个设计模式。首先是策略模式：</p>\n<blockquote>\n<p>策略模式定义了一系列的算法，并将每一个算法封装起来，使它们可以相互替换。策略模式通常包含以下角色：</p>\n<ul>\n<li>抽象策略（Strategy）类：定义了一个公共接口，各种不同的算法以不同的方式实现这个接口，环境角色使用这个接口调用不同的算法，一般使用接口或抽象类实现。</li>\n<li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现。</li>\n<li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li>\n</ul>\n</blockquote>\n<p>然后是适配器模式：</p>\n<blockquote>\n<p>适配器模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式包含以下主要角色：</p>\n<ul>\n<li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li>\n<li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li>\n<li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li>\n</ul>\n</blockquote>\n<p>结合优化思路，小明首先设计出了策略接口，并通过适配器的思想将各个下游接口类适配成策略类,一下是小明修改后的代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 奖励策略接口</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span>;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励1</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword1</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Reword1Service reword1Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword1Request</span> <span class=\"hljs-variable\">reword1Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword1Request</span>();<br>        reword1Request.setParam(params);<br>        reword1Service.reword(reword1Request);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励2</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword2</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Reword2Service reword2Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword2Request</span> <span class=\"hljs-variable\">reword12Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2Request</span>();<br>        reword12Request.setParam(params);<br>        reword2Service.reword(reword12Request);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励3</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword3</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> Reword3Service reword3Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword3Request</span> <span class=\"hljs-variable\">reword13Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword3Request</span>();<br>        reword13Request.setParam(params);<br>        reword3Service.reword(reword13Request);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后，小明创建策略模式的环境类，并供奖励服务调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//奖励策略上下文</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RewordStrategyContext</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> RewordStrategy <span class=\"hljs-title function_\">getRewordStrategy</span><span class=\"hljs-params\">(String rewordType)</span> &#123;<br>        <span class=\"hljs-keyword\">switch</span> (rewordType) &#123;<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword1&quot;</span>:<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword1</span>();<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword2&quot;</span>:<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2</span>();<br>            <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">&quot;reword3&quot;</span>:<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword3</span>();<br>            <span class=\"hljs-keyword\">default</span>:<br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">IllegalArgumentException</span>(<span class=\"hljs-string\">&quot;rewardType error!&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 奖励服务</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RewordApiService</span>&#123;<br>    <span class=\"hljs-comment\">// 使用对入参的条件判断进行发奖</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">issueReward</span><span class=\"hljs-params\">(String rewardType, Object ... params)</span> &#123;<br>        <span class=\"hljs-type\">RewordStrategy</span> <span class=\"hljs-variable\">rewordStrategy</span> <span class=\"hljs-operator\">=</span> RewordStrategyContext.getRewordStrategy(rewardType);<br>        rewordStrategy.reword(params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>小明的代码经过优化后，虽然结构和设计上比之前要复杂不少，但考虑到健壮性和拓展性，还是非常值得的。</p>\n<p>“看，我这次优化后的版本是不是很完美？”小明洋洋得意地说。</p>\n<p>“耦合度确实降低了，但还能做的更好。”</p>\n<p>“怎么做？”小明有点疑惑。</p>\n<p>“我问你，策略类是有状态的模型吗？如果不是是否可以考虑做成单例的？”</p>\n<p>“的确如此。”小明似乎明白了。</p>\n<p>“还有一点，环境类的获取策略方法职责很明确，但是你依然没有做到完全对修改封闭。”</p>\n<p>经过老师的点拨，小明很快也领悟到了要点：“那我可以将策略类单例化以减少开销，并实现自注册的功能彻底解决分支判断。”</p>\n<p>小明列出单例模式的要点：</p>\n<blockquote>\n<p>单例模式设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p>\n<p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p>\n</blockquote>\n<p>最终，小明在策略环境类中使用一个注册表来记录各个策略类的注册信息，并提供接口供策略类调用进行注册。同时使用<strong>饿汉式单例模式</strong>去优化策略类的设计：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 奖励策略接口</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span>;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励1</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword1</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRewordStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Reword2</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2</span>();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Reword2</span><span class=\"hljs-params\">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Reword2 <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> instance;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Reword1Service reword1Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword1Request</span> <span class=\"hljs-variable\">reword1Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword1Request</span>();<br>        reword1Request.setParam(params);<br>        reword1Service.reword(reword1Request);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励2</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword2</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRewordStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Reword2</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2</span>();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Reword2</span><span class=\"hljs-params\">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Reword2 <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> instance;<br>    &#125;<br>    <br>    <span class=\"hljs-keyword\">private</span> Reword2Service reword2Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword2Request</span> <span class=\"hljs-variable\">reword12Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword2Request</span>();<br>        reword12Request.setParam(params);<br>        reword2Service.reword(reword12Request);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//实现奖励3</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reword3</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractRewordStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">Reword3</span> <span class=\"hljs-variable\">instance</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword3</span>();<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Reword3</span><span class=\"hljs-params\">()</span>&#123;<br>        register();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Reword3 <span class=\"hljs-title function_\">getInstance</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> instance;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">private</span> Reword3Service reword3Service;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">reword</span><span class=\"hljs-params\">(Object... params)</span> &#123;<br>        <span class=\"hljs-type\">Reword3Request</span> <span class=\"hljs-variable\">reword13Request</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Reword3Request</span>();<br>        reword13Request.setParam(params);<br>        reword3Service.reword(reword13Request);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//奖励策略上下文</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RewordStrategyContext</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Map&lt;String, RewordStrategy&gt; REWORD_STRATEGY_MAP = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;&gt;();<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">registerStrategy</span><span class=\"hljs-params\">(String rewordType, RewordStrategy rewordStrategy)</span> &#123;<br>        REWORD_STRATEGY_MAP.putIfAbsent(rewordType, rewordStrategy);<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> RewordStrategy <span class=\"hljs-title function_\">getStrategy</span><span class=\"hljs-params\">(String rewordType)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> REWORD_STRATEGY_MAP.get(rewordType);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 抽象类，抽象注册方法</span><br><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AbstractRewordStrategy</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">RewordStrategy</span>&#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">register</span><span class=\"hljs-params\">()</span> &#123;<br>        RewordStrategyContext.registerStrategy(getClass().getSimpleName(),<span class=\"hljs-built_in\">this</span>);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">// 奖励服务</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">RewordApiService</span>&#123;<br>    <span class=\"hljs-comment\">// 使用对入参的条件判断进行发奖</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">issueReward</span><span class=\"hljs-params\">(String rewardType, Object ... params)</span> &#123;<br>        <span class=\"hljs-type\">RewordStrategy</span> <span class=\"hljs-variable\">rewordStrategy</span> <span class=\"hljs-operator\">=</span> RewordStrategyContext.getStrategy(rewardType);<br>        rewordStrategy.reword(params);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>如果使用了Spring框架，还可以利用Spring的Bean机制来代替上述的部分设计，直接使用<code>@Component</code>和<code>@PostConstruct</code>注解即可完成单例的创建和注册，代码会更加简洁。</p>\n<p>至此，经过了多次讨论、反思和优化，小明终于得到了一套低耦合高内聚，同时符合开闭原则的设计。</p>\n<p>“老师，我开始学会利用设计模式去解决已发现的问题。这次我做得怎么样？”</p>\n<p>“合格。但是，依然要戒骄戒躁。”</p>\n<h2 id=\"任务模型的设计\"><a href=\"#任务模型的设计\" class=\"headerlink\" title=\"任务模型的设计\"></a>任务模型的设计</h2><p>“之前让你设计奖励发放策略你还记得吗？”老师忽然问道。</p>\n<p>“当然记得。一个好的设计模式，能让工作事半功倍。”小明答道。</p>\n<p>“嗯，那会提到了活动营销的组成部分，除了奖励之外，貌似还有任务吧。”</p>\n<p>小明点了点头，老师接着说：“现在，我想让你去完成任务模型的设计。你需要重点关注状态的流转变更，以及状态变更后的消息通知。”</p>\n<p>小明欣然接下了老师给的难题。他首先定义了一套任务状态的枚举和行为的枚举：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 任务状态枚举</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">TaskState</span> &#123;<br>    INIT(<span class=\"hljs-string\">&quot;初始化&quot;</span>),<br>    ONGOING( <span class=\"hljs-string\">&quot;进行中&quot;</span>),<br>    PAUSED(<span class=\"hljs-string\">&quot;暂停中&quot;</span>),<br>    FINISHED(<span class=\"hljs-string\">&quot;已完成&quot;</span>),<br>    EXPIRED(<span class=\"hljs-string\">&quot;已过期&quot;</span>)<br>    ;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String message;<br>&#125;<br><span class=\"hljs-comment\">// 行为枚举</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ActionType</span> &#123;<br>    START(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;开始&quot;</span>),<br>    STOP(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;暂停&quot;</span>),<br>    ACHIEVE(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;完成&quot;</span>),<br>    EXPIRE(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;过期&quot;</span>)<br>    ;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> code;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String message;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后，小明对开始编写状态变更功能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 更新状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Long taskId;<br>    <span class=\"hljs-comment\">// 任务的默认状态为初始化</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">TaskState</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> TaskState.INIT;<br>    <span class=\"hljs-comment\">// 活动服务</span><br>    <span class=\"hljs-keyword\">private</span> ActivityService activityService;<br>    <span class=\"hljs-comment\">// 任务管理器</span><br>    <span class=\"hljs-keyword\">private</span> TaskManager taskManager;<br>    <span class=\"hljs-comment\">// 使用条件分支进行任务更新</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (state == TaskState.INIT) &#123;<br>            <span class=\"hljs-keyword\">if</span> (actionType == ActionType.START) &#123;<br>                state = TaskState.ONGOING;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state == TaskState.ONGOING) &#123;<br>            <span class=\"hljs-keyword\">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>                state = TaskState.FINISHED;<br>                <span class=\"hljs-comment\">// 任务完成后进对外部服务进行通知</span><br>                activityService.notifyFinished(taskId);<br>                taskManager.release(taskId);<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.STOP) &#123;<br>                state = TaskState.PAUSED;<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.EXPIRE) &#123;<br>                state = TaskState.EXPIRED;<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (state == TaskState.PAUSED) &#123;<br>            <span class=\"hljs-keyword\">if</span> (actionType == ActionType.START) &#123;<br>                state = TaskState.ONGOING;<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.EXPIRE) &#123;<br>                state = TaskState.EXPIRED;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在上述的实现中，小明在<code>updateState</code>方法中完成了2个重要的功能：</p>\n<ol>\n<li>接收不同的行为，然后更新当前任务的状态；</li>\n<li>当任务过期时，通知任务所属的活动和任务管理器。</li>\n</ol>\n<p>诚然，随着小明的系统开发能力和代码质量意识的提升，他能够认识到这种功能设计存在缺陷。</p>\n<p>“老师，我的代码还是和之前说的那样，不够优雅。”</p>\n<p>“哦，你自己说说看有什么问题？”</p>\n<p>“第一，方法中使用条件判断来控制语句，但是当条件复杂或者状态太多时，条件判断语句会过于臃肿，可读性差，且不具备扩展性，维护难度也大。且增加新的状态时要添加新的if-else语句，这违背了开闭原则，不利于程序的扩展。”</p>\n<p>老师表示同意，小明接着说：“第二，任务类不够高内聚，它在通知实现中感知了其他领域或模块的模型，如活动和任务管理器，这样代码的耦合度太高，不利于扩展。”</p>\n<p>老师赞赏地说道：“很好，你有意识能够自主发现代码问题所在，已经是很大的进步了。”</p>\n<p>“那这个问题应该怎么去解决呢？”小明继续发问。</p>\n<p>“这个同样可以通过设计模式去优化。首先是状态流转的控制可以使用<strong>状态模式</strong>，其次，任务完成时的通知可以用到<strong>观察者模式</strong>。”</p>\n<p>收到指示后，小明马上去学习了状态模式的结构：</p>\n<blockquote>\n<p>状态模式：对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。状态模式包含以下主要角色：</p>\n<ul>\n<li>环境类（Context）角色：也称为上下文，它定义了客户端需要的接口，内部维护一个当前状态，并负责具体状态的切换。</li>\n<li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为，可以有一个或多个行为。</li>\n<li>具体状态（Concrete State）角色：实现抽象状态所对应的行为，并且在需要的情况下进行状态切换。</li>\n</ul>\n</blockquote>\n<p>根据状态模式的定义，小明将TaskState枚举类扩展成多个状态类，并具备完成状态的流转的能力；然后优化了任务类的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 任务状态枚举</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">TaskState</span> &#123;<br>    INIT(<span class=\"hljs-string\">&quot;初始化&quot;</span>),<br>    ONGOING( <span class=\"hljs-string\">&quot;进行中&quot;</span>),<br>    PAUSED(<span class=\"hljs-string\">&quot;暂停中&quot;</span>),<br>    FINISHED(<span class=\"hljs-string\">&quot;已完成&quot;</span>),<br>    EXPIRED(<span class=\"hljs-string\">&quot;已过期&quot;</span>)<br>    ;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String message;<br>&#125;<br><span class=\"hljs-comment\">// 行为枚举</span><br><span class=\"hljs-meta\">@AllArgsConstructor</span><br><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">ActionType</span> &#123;<br>    START(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;开始&quot;</span>),<br>    STOP(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&quot;暂停&quot;</span>),<br>    ACHIEVE(<span class=\"hljs-number\">3</span>, <span class=\"hljs-string\">&quot;完成&quot;</span>),<br>    EXPIRE(<span class=\"hljs-number\">4</span>, <span class=\"hljs-string\">&quot;过期&quot;</span>)<br>    ;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> code;<br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> String message;<br>&#125;<br><span class=\"hljs-comment\">//状态接口</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">State</span>&#123;<br>    <span class=\"hljs-comment\">// 默认实现，不做任何处理</span><br>    <span class=\"hljs-keyword\">default</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-comment\">// do nothing</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 任务开始</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskInit</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span>&#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (actionType == ActionType.START) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskOnGoing</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//任务进行</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskOnGoing</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span>&#123;<br>    <span class=\"hljs-keyword\">private</span> ActivityService activityService;<br>    <span class=\"hljs-keyword\">private</span> TaskManager taskManager;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskFinished</span>());<br>            <span class=\"hljs-comment\">// 通知</span><br>            activityService.notifyFinished(taskId);<br>            taskManager.release(taskId);<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.STOP) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskPaused</span>());<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 任务暂停状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskPaused</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (actionType == ActionType.START) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskOnGoing</span>());<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 任务完成状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskFinished</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span> &#123;<br>    <span class=\"hljs-comment\">// do something</span><br>&#125;<br><span class=\"hljs-comment\">// 任务过期状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskExpired</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span> &#123;<br>    <span class=\"hljs-comment\">// do something</span><br>&#125;<br><span class=\"hljs-comment\">// 任务类</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Task</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> Long taskId;<br>    <span class=\"hljs-comment\">// 初始化为初始态</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">State</span> <span class=\"hljs-variable\">state</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskInit</span>();<br>    <span class=\"hljs-comment\">// 更新状态</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">updateState</span><span class=\"hljs-params\">(ActionType actionType)</span> &#123;<br>        state.updateState(<span class=\"hljs-built_in\">this</span>, actionType);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>小明欣喜地看到，经过状态模式处理后的任务类的耦合度得到降低，符合开闭原则。状态模式的优点在于符合单一职责原则，状态类职责明确，有利于程序的扩展。但是这样设计的代价是状态类的数目增加了，因此状态流转逻辑越复杂、需要处理的动作越多，越有利于状态模式的应用。除此之外，状态类的自身对于开闭原则的支持并没有足够好，如果状态流转逻辑变化频繁，那么可能要慎重使用。</p>\n<p>处理完状态后，小明又根据老师的指导使用<strong>观察者模式</strong>去优化任务完成时的通知：</p>\n<blockquote>\n<p>观察者模式：指多个对象间存在一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。这种模式有时又称作发布-订阅模式、模型-视图模式，它是对象行为型模式。观察者模式的主要角色如下。</p>\n<ul>\n<li>抽象主题（Subject）角色：也叫抽象目标类，它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li>\n<li>具体主题（Concrete Subject）角色：也叫具体目标类，它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li>\n<li>抽象观察者（Observer）角色：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li>\n<li>具体观察者（Concrete Observer）角色：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li>\n</ul>\n</blockquote>\n<p>小明首先设计好抽象目标和抽象观察者，然后将活动和任务管理器的接收通知功能定制成具体观察者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 抽象观察者</span><br><span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">TaskObserver</span>&#123;<br>    <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">response</span><span class=\"hljs-params\">(Long logId)</span>; <span class=\"hljs-comment\">// 反应</span><br>&#125;<br><span class=\"hljs-comment\">// 抽象目标</span><br><span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskSubject</span> &#123;<br>    <span class=\"hljs-keyword\">protected</span> List&lt;TaskObserver&gt; observers = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;TaskObserver&gt;();<br>    <span class=\"hljs-comment\">// 增加观察者方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">add</span><span class=\"hljs-params\">(TaskObserver observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br>    <span class=\"hljs-comment\">// 删除观察者方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">remove</span><span class=\"hljs-params\">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br>    <span class=\"hljs-comment\">// 通知观察者方法</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">notifyObserver</span><span class=\"hljs-params\">(Long taskId)</span> &#123;<br>        <span class=\"hljs-keyword\">for</span> (TaskObserver observer : observers) &#123;<br>            observer.response(taskId);<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 活动观察者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ActivityObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">TaskObserver</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> ActivityService activityService;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">response</span><span class=\"hljs-params\">(Long taskId)</span> &#123;<br>        activityService.notifyFinished(taskId);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 任务管理观察者</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskManageObserver</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">TaskObserver</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> TaskManager taskManager;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">response</span><span class=\"hljs-params\">(Long taskId)</span> &#123;<br>        taskManager.release(taskId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>最后，小明将任务进行状态类优化成使用通用的通知方法，并在任务初始态执行状态流转时定义任务进行态所需的观察者：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 任务进行状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskOngoing</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Subject</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span> &#123;  <br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (actionType == ActionType.ACHIEVE) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskFinished</span>());<br>            <span class=\"hljs-comment\">// 通知</span><br>            notifyObserver(task.getTaskId());<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.STOP) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskPaused</span>());<br>        &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (actionType == ActionType.EXPIRE) &#123;<br>            task.setState(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskExpired</span>());<br>        &#125;<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 任务初始状态</span><br><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TaskInit</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">State</span> &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">update</span><span class=\"hljs-params\">(Task task, ActionType actionType)</span> &#123;<br>        <span class=\"hljs-keyword\">if</span>  (actionType == ActionType.START) &#123;<br>            <span class=\"hljs-type\">TaskOngoing</span> <span class=\"hljs-variable\">taskOngoing</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskOngoing</span>();<br>            taskOngoing.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ActivityObserver</span>());<br>            taskOngoing.add(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TaskManageObserver</span>());<br>            task.setState(taskOngoing);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过观察者模式，小明让任务状态和通知方实现松耦合（实际上观察者模式还没能做到完全的解耦，如果要做进一步的解耦可以考虑学习并使用<strong>发布-订阅模式</strong>，这里也不再赘述）。</p>\n<p>至此，小明成功使用状态模式设计出了高内聚、高扩展性、单一职责的任务的整个状态机实现，以及做到松耦合的、符合依赖倒置原则的任务状态变更通知方式。</p>\n<p>“老师，我逐渐能意识到代码的设计缺陷，并学会利用较为复杂的设计模式做优化。”</p>\n<p>“不错，再接再厉！”</p>\n",
            "tags": [
                "设计模式"
            ]
        }
    ]
}