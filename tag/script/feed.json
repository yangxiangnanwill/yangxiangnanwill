{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"script\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/Aviator/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80/Aviator/",
            "title": "Aviator",
            "date_published": "2024-01-03T13:13:21.656Z",
            "content_html": "<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>最近项目业务中有关于价格计算的模块，项目用到这个东西，感觉很方便和灵活，特地看了一下官方文档。</p>\n<p>官方文档地址如下：</p>\n<p><a href=\"https://www.yuque.com/boyan-avfmj/aviatorscript\">点击跳转官方最新文档地址</a></p>\n<p>参照博客地址：</p>\n<p><a href=\"https://www.cnblogs.com/csguo/p/7614893.html\">博客地址</a></p>\n</blockquote>\n<h2 id=\"软件简介\"><a href=\"#软件简介\" class=\"headerlink\" title=\"软件简介\"></a>软件简介</h2><p><code>AviatorScript</code> 是一门高性能、轻量级寄宿于 JVM 之上的脚本语言。</p>\n<blockquote>\n<p>备注：版本5之前都叫<code>Aviator</code>, 5版本重大升级改名<code>​ AviatorScript</code>,详情请看官方文档介绍。</p>\n</blockquote>\n<p>Aviator是一个高性能、轻量级的java语言实现的表达式求值引擎，主要用于各种表达式的动态求值。现在已经有很多开源可用的java表达式求值引擎，为什么还需要Avaitor呢？</p>\n<p>Aviator的设计目标是<strong>轻量级</strong>和<strong>高性能</strong> ，相比于Groovy、JRuby的笨重，Aviator非常小，加上依赖包也才450K,不算依赖包的话只有70K；当然，Aviator的语法是受限的，它不是一门完整的语言，而只是语言的一小部分集合。</p>\n<p>其次，Aviator的实现思路与其他轻量级的求值器很不相同，其他求值器一般都是通过解释的方式运行，而Aviator则是直接将表达式<strong>编译成Java字节码</strong>，交给JVM去执行。简单来说，Aviator的定位是介于Groovy这样的重量级脚本语言和IKExpression这样的轻量级表达式引擎之间。</p>\n<h2 id=\"特性介绍\"><a href=\"#特性介绍\" class=\"headerlink\" title=\"特性介绍\"></a>特性介绍</h2><p>Aviator的特性</p>\n<ul>\n<li>支持大部分运算操作符，包括算术操作符、关系运算符、逻辑操作符、正则匹配操作符(&#x3D;~)、三元表达式?: ，并且支持操作符的优先级和括号强制优先级，具体请看后面的操作符列表。</li>\n<li>支持函数调用和自定义函数</li>\n<li>支持正则表达式匹配，类似Ruby、Perl的匹配语法，并且支持类Ruby的$digit指向匹配分组。</li>\n<li>自动类型转换，当执行操作的时候，会自动判断操作数类型并做相应转换，无法转换即抛异常。</li>\n<li>支持传入变量，支持类似a.b.c的嵌套变量访问。</li>\n<li>性能优秀</li>\n</ul>\n<p>Aviator的限制：</p>\n<ul>\n<li>没有if else、do while等语句，没有赋值语句，仅支持逻辑表达式、算术表达式、三元表达式和正则匹配。</li>\n<li>没有位运算符</li>\n</ul>\n<blockquote>\n<p>使用场景包括：</p>\n</blockquote>\n<ol>\n<li>规则判断及规则引擎</li>\n<li>公式计算</li>\n<li>动态脚本控制</li>\n<li>集合数据 ELT 等 ……</li>\n</ol>\n<h3 id=\"整体结构\"><a href=\"#整体结构\" class=\"headerlink\" title=\"整体结构\"></a>整体结构</h3><p>Aviator的结构非常简单，一个典型的求值器的结构</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201101215837.jpg\" alt=\"img\"></p>\n<h1 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h1><h2 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h2><ul>\n<li>创建一个空的Maven项目</li>\n<li>导入以下依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!--表达式求值引擎--&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.googlecode.aviator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>aviator<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>5.1.4<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>compile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"执行表达式\"><a href=\"#执行表达式\" class=\"headerlink\" title=\"执行表达式\"></a>执行表达式</h2><p>Aviator的使用都是集中通过com.googlecode.aviator.AviatorEvaluator这个入口类来处理，最简单的例子，执行一个计算1+2+3的表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 计算1+2+3</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (Long) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;1+2+3&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;result = &quot;</span> + result);<span class=\"hljs-comment\">//6</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>细心的朋友肯定注意到结果是Long，而不是Integer。这是因为Aviator的数值类型仅支持Long和Double，任何整数都将转换成Long，任何浮点数都将转换为Double，包括用户传入的变量数值。这个例子的打印结果将是正确答案6。</p>\n</blockquote>\n<h2 id=\"使用变量\"><a href=\"#使用变量\" class=\"headerlink\" title=\"使用变量\"></a>使用变量</h2><p>想让Aviator对你say hello吗？很简单，传入你的名字，让Aviator负责字符串的相加：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 测试使用变量</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test02</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">yourName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;will&quot;</span>;<br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;yourName&quot;</span>, yourName);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (String) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; &#x27;hello &#x27; + yourName &quot;</span>, env);<br>    System.out.println(result);<span class=\"hljs-comment\">//hello will</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>上面的例子演示了怎么向表达式传入变量值，表达式中的yourname是一个变量，默认为null，通过传入Map&lt;String,Object&gt;的变量绑定环境，将yourname设置为你输入的名称。env的key是变量名，value是变量的值。</p>\n<p>上面例子中的’hello ‘是一个Aviator的String，Aviator的String是任何用单引号或者双引号括起来的字符序列，String可以比较大小（基于unicode顺序），可以参与正则匹配，可以与任何对象相加，任何对象与String相加结果为String。String中也可以有转义字符，如&#x2F;n、&#x2F;&#x2F;、&#x2F;‘等。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; &#x27;a\\\\&quot;</span>b<span class=\"hljs-string\">&#x27; &quot;);   //字符串 a&#x27;</span>b <br>AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; \\\\&quot;</span>a\\\\<span class=\"hljs-string\">&quot;b &quot;</span>);  <span class=\"hljs-comment\">//字符串 a&quot;b </span><br>AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; &#x27;hello&#x27; + 3 &quot;</span>);  <span class=\"hljs-comment\">//字符串 hello 3 </span><br>AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; &#x27;hello &#x27;+ unknow &quot;</span>);  <span class=\"hljs-comment\">//字符串 hello null</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><p>Aviator支持函数调用，函数调用的风格类似lua，下面的例子获取字符串的长度：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;string.length(&#x27;hello&#x27;)&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>string.length(‘hello’)是一个函数调用，string.length是一个函数,’hello’是调用的参数。</p>\n<p>再用string.substring来截取字符串：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;string.contains(/&quot;</span>test/<span class=\"hljs-string\">&quot;,string.substring(&#x27;hello&#x27;,1,2))&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p>通过string.substring(‘hello’,1,2)获取字符串’e’，然后通过函数string.contains判断e是否在’test’中。可以看到，函数可以嵌套调用。</p>\n<p>完整代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 调用函数</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test03</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">strLen</span> <span class=\"hljs-operator\">=</span> (Long) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;string.length(&#x27;hello will&#x27;)&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;strLen = &quot;</span> + strLen); <span class=\"hljs-comment\">// 10</span><br>    <span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">strContainsFlag</span> <span class=\"hljs-operator\">=</span> (Boolean) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;string.contains(&#x27;test&#x27;,string.substring(&#x27;hello&#x27;,1,2))&quot;</span>);<br>    System.out.println(<span class=\"hljs-string\">&quot;strContainsFlag = &quot;</span> + strContainsFlag);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>Aviator的内置函数列表请看后面。</p>\n<h2 id=\"自定义函数\"><a href=\"#自定义函数\" class=\"headerlink\" title=\"自定义函数\"></a>自定义函数</h2><p>Aviator除了内置的函数之外，还允许用户自定义函数，只要实现com.googlecode.aviator.runtime.type.AviatorFunction接口，并注册到AviatorEvaluator即可使用。</p>\n<p>接口信息如下：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201101213259.png\"></p>\n<p>可以看一个例子，我们实现一个add函数来做数值的相加：</p>\n<ul>\n<li>先创建一个类实现<code>AbstractFunction</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bossyang.demo.aviator;<br><br><span class=\"hljs-keyword\">import</span> com.googlecode.aviator.runtime.function.AbstractFunction;<br><span class=\"hljs-keyword\">import</span> com.googlecode.aviator.runtime.function.FunctionUtils;<br><span class=\"hljs-keyword\">import</span> com.googlecode.aviator.runtime.type.AviatorDouble;<br><span class=\"hljs-keyword\">import</span> com.googlecode.aviator.runtime.type.AviatorObject;<br><br><span class=\"hljs-keyword\">import</span> java.util.Map;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> MyAddFunction</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 自定义实现增加方法</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2020/11/1 8:05 PM</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyAddFunction</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AbstractFunction</span> &#123;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> AviatorObject <span class=\"hljs-title function_\">call</span><span class=\"hljs-params\">(Map&lt;String, Object&gt; env,</span><br><span class=\"hljs-params\">                              AviatorObject arg1, AviatorObject arg2)</span> &#123;<br>        <span class=\"hljs-type\">Number</span> <span class=\"hljs-variable\">left</span> <span class=\"hljs-operator\">=</span> FunctionUtils.getNumberValue(arg1, env);<br>        <span class=\"hljs-type\">Number</span> <span class=\"hljs-variable\">right</span> <span class=\"hljs-operator\">=</span> FunctionUtils.getNumberValue(arg2, env);<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AviatorDouble</span>(left.doubleValue() + right.doubleValue());<br>    &#125;<br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;add&quot;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>注册到AviatorEvaluator并调用如下：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 使用自定义函数</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test04</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">//注册函数</span><br>    AviatorEvaluator.addFunction(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyAddFunction</span>());<br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;add(1,2)&quot;</span>)); <span class=\"hljs-comment\">//3.0</span><br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;add(add(1,2),100)&quot;</span>)); <span class=\"hljs-comment\">//103.0</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>注册函数通过AviatorEvaluator.addFunction方法，移除可以通过removeFunction。</p>\n<h2 id=\"编译表达式\"><a href=\"#编译表达式\" class=\"headerlink\" title=\"编译表达式\"></a>编译表达式</h2><p>上面提到的例子都是直接执行表达式，事实上Aviator背后都帮你做了编译并执行的工作。你可以自己先编译表达式，返回一个编译的结果，然后传入不同的env来复用编译结果，提高性能，这是更推荐的使用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//使用编译表达式</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test05</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">expression</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;a-(b-c)&gt;100&quot;</span>;<br>    <span class=\"hljs-comment\">// 编译表达式</span><br>    <span class=\"hljs-type\">Expression</span> <span class=\"hljs-variable\">compiledExp</span> <span class=\"hljs-operator\">=</span> AviatorEvaluator.compile(expression);<br><br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-number\">100.3</span>);<br>    env.put(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-number\">45</span>);<br>    env.put(<span class=\"hljs-string\">&quot;c&quot;</span>, -<span class=\"hljs-number\">199.100</span>);<br><br>    <span class=\"hljs-comment\">// 执行表达式</span><br>    <span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (Boolean) compiledExp.execute(env);<br>    System.out.println(result);<span class=\"hljs-comment\">//false</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过compile方法可以将表达式编译成Expression的中间对象，当要执行表达式的时候传入env并调用Expression的execute方法即可。表达式中使用了括号来强制优先级，这个例子还使用了&gt;用于比较数值大小，比较运算符!&#x3D;、&#x3D;&#x3D;、&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;不仅可以用于数值，也可以用于String、Pattern、Boolean等等，甚至是任何用户传入的两个都实现了java.lang。Comparable接口的对象之间。</p>\n<p>编译后的结果你可以自己缓存，也可以交给Aviator帮你缓存，AviatorEvaluator内部有一个全局的缓存池，如果你决定缓存编译结果，可以通过：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">static</span> Expression <span class=\"hljs-title\">compile</span><span class=\"hljs-params\">(<span class=\"hljs-type\">String</span> expression, <span class=\"hljs-type\">boolean</span> cached)</span></span><br></code></pre></td></tr></table></figure>\n\n<p>将cached设置为true即可，那么下次编译同一个表达式的时候将直接返回上一次编译的结果。使缓存失效通过：</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs arduino\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">static</span> <span class=\"hljs-type\">void</span> <span class=\"hljs-title\">invalidateCache</span><span class=\"hljs-params\">(<span class=\"hljs-type\">String</span> expression)</span></span><br></code></pre></td></tr></table></figure>\n\n<p>这个方法。</p>\n<h2 id=\"访问数组和集合\"><a href=\"#访问数组和集合\" class=\"headerlink\" title=\"访问数组和集合\"></a>访问数组和集合</h2><p>可以通过中括号去访问数组和java.util.List对象，可以通过map.key访问java.util.Map中key对应的value，一个例子：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//操作数组</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test06</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">final</span> List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>    list.add(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>    list.add(<span class=\"hljs-string\">&quot; world&quot;</span>);<br><br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span>[] array = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[<span class=\"hljs-number\">3</span>];<br>    array[<span class=\"hljs-number\">0</span>] = <span class=\"hljs-number\">0</span>;<br>    array[<span class=\"hljs-number\">1</span>] = <span class=\"hljs-number\">1</span>;<br>    array[<span class=\"hljs-number\">2</span>] = <span class=\"hljs-number\">3</span>;<br><br>    <span class=\"hljs-keyword\">final</span> Map&lt;String, Date&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Date&gt;();<br>    map.put(<span class=\"hljs-string\">&quot;date&quot;</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br><br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;list&quot;</span>, list);<br>    env.put(<span class=\"hljs-string\">&quot;array&quot;</span>, array);<br>    env.put(<span class=\"hljs-string\">&quot;map&quot;</span>, map);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * hello world/array[0]+array[1]+array[2]=4</span><br><span class=\"hljs-comment\">     *  today is Sun Nov 01 20:31:32 CST 2020</span><br><span class=\"hljs-comment\">     */</span><br>    System.out.println(AviatorEvaluator.execute(<br>            <span class=\"hljs-string\">&quot;list[0]+list[1]+&#x27;/array[0]+array[1]+array[2]=&#x27;+(array[0]+array[1]+array[2]) +&#x27; \\n today is &#x27;+map.date &quot;</span>, env));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"三元操作符\"><a href=\"#三元操作符\" class=\"headerlink\" title=\"三元操作符\"></a>三元操作符</h2><p>Aviator不提供if else语句，但是提供了三元操作符?:用于条件判断，使用上与java没有什么不同：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//三元运算符</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test07</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">num</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">6</span>;<br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;a&quot;</span>, num);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (String) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;a &gt; 0? &#x27;yes&#x27;:&#x27;no&#x27;&quot;</span>, env);<br>    System.out.println(result);<span class=\"hljs-comment\">//yes</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>这个例子用来判断用户传入的数字是否是正整数，是的话打印yes。</p>\n<p>Aviator的三元表达式对于两个分支的结果类型并不要求一致，可以是任何类型，这一点与java不同。</p>\n<h2 id=\"正则表达式匹配\"><a href=\"#正则表达式匹配\" class=\"headerlink\" title=\"正则表达式匹配\"></a>正则表达式匹配</h2><p>Aviator支持类Ruby和Perl风格的表达式匹配运算，通过&#x3D;~操作符，如下面这个例子匹配email并提取用户名返回：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//正则表达式</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test08</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">email</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;will2020@qq.com&quot;</span>;<br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;email&quot;</span>, email);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">username</span> <span class=\"hljs-operator\">=</span> (String) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;email=~/([\\\\w0-8]+@\\\\w+[\\\\.\\\\w+]+)/ ? $1:&#x27;unknow&#x27;&quot;</span>, env);<br>    System.out.println(username);<span class=\"hljs-comment\">//will2020@qq.com</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>email与正则表达式&#x2F;&#x2F;(&#x2F;&#x2F;w0-8+@&#x2F;&#x2F;w+&#x2F;&#x2F;.&#x2F;&#x2F;w++)&#x2F;通过&#x3D;~操作符来匹配，结果为一个Boolean类型，因此可以用于三元表达式判断，匹配成功的时候返回$1，指代正则表达式的分组1，也就是用户名，否则返回unknown。这个例子将打印killme2008这个用户名。</p>\n<p>Aviator在表达式级别支持正则表达式，通过&#x2F;&#x2F;括起来的字符序列构成一个正则表达式，正则表达式可以用于匹配（作为&#x3D;~的右操作数)、比较大小，匹配仅能与字符串进行匹配。匹配成功后，Aviator会自动将匹配成功的分组放入$num的变量中，其中$0指代整个匹配的字符串，而$1表示第一个分组，以此类推。</p>\n<p>Aviator的正则表达式规则跟Java完全一样，因为内部其实就是使用java.util.regex.Pattern做编译的。</p>\n<h2 id=\"变量的语法糖衣\"><a href=\"#变量的语法糖衣\" class=\"headerlink\" title=\"变量的语法糖衣\"></a>变量的语法糖衣</h2><p>Aviator有个方便用户使用变量的语法糖衣，当你要访问变量a中的某个属性b，那么你可以通过a.b访问到，更进一步，a.b.c将访问变量a的b属性中的c属性值，推广开来也就是说Aviator可以将变量声明为嵌套访问的形式，一个例子，Foo类有属性i、f、date：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bossyang.demo.aviator;<br><br><span class=\"hljs-keyword\">import</span> java.util.Date;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Foo</span> &#123;<br>        <span class=\"hljs-type\">int</span> i; <br>        <span class=\"hljs-type\">float</span> f; <br>        <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();<br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Foo</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i, <span class=\"hljs-type\">float</span> f, Date date)</span> &#123; <br>            <span class=\"hljs-built_in\">super</span>(); <br>            <span class=\"hljs-built_in\">this</span>.i = i; <br>            <span class=\"hljs-built_in\">this</span>.f = f; <br>            <span class=\"hljs-built_in\">this</span>.date = date; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getI</span><span class=\"hljs-params\">()</span> &#123; <br>            <span class=\"hljs-keyword\">return</span> i; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setI</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> i)</span> &#123; <br>            <span class=\"hljs-built_in\">this</span>.i = i; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">float</span> <span class=\"hljs-title function_\">getF</span><span class=\"hljs-params\">()</span> &#123; <br>            <span class=\"hljs-keyword\">return</span> f; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setF</span><span class=\"hljs-params\">(<span class=\"hljs-type\">float</span> f)</span> &#123; <br>            <span class=\"hljs-built_in\">this</span>.f = f; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> Date <span class=\"hljs-title function_\">getDate</span><span class=\"hljs-params\">()</span> &#123; <br>            <span class=\"hljs-keyword\">return</span> date; <br>        &#125; <br> <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDate</span><span class=\"hljs-params\">(Date date)</span> &#123; <br>            <span class=\"hljs-built_in\">this</span>.date = date; <br>        &#125; <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>Foo类符合JavaBean规范，并且是public的，我们执行一个表达式来描述Foo:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//变量的语法糖</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test09</span><span class=\"hljs-params\">()</span>&#123;<br>    <span class=\"hljs-type\">Foo</span> <span class=\"hljs-variable\">foo</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Foo</span>(<span class=\"hljs-number\">100</span>, <span class=\"hljs-number\">3.14f</span>, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    env.put(<span class=\"hljs-string\">&quot;foo&quot;</span>, foo);<br><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span><br>            (String) AviatorEvaluator.execute(<br>                    <span class=\"hljs-string\">&quot; &#x27;[foo i=&#x27;+ foo.i + &#x27; f=&#x27;+foo.f+&#x27; year=&#x27;+(foo.date.year+1900)+ &#x27; month=&#x27;+foo.date.month +&#x27;]&#x27;  &quot;</span>,<br>                    env);<br>    <span class=\"hljs-comment\">//因为获取的是year调用的是Date对象的getYear方法，而getYear方法默认获取的是公元元年</span><br>    System.out.println(result);<span class=\"hljs-comment\">//[foo i=100 f=3.14 year=2020 month=10]</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>细看下表达式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-string\">&#x27;[foo i=&#x27;</span>+ foo.i + <span class=\"hljs-string\">&#x27; f=&#x27;</span>+foo.f+<span class=\"hljs-string\">&#x27; year=&#x27;</span>+(foo.date.year+<span class=\"hljs-number\">1900</span>)+ <span class=\"hljs-string\">&#x27; month=&#x27;</span>+foo.date.month +<span class=\"hljs-string\">&#x27;]&#x27;</span><br></code></pre></td></tr></table></figure>\n\n<p>可以看到我们通过foo.i和foo.f的方式来访问foo变量中的i和f属性，并且通过foo.date.year的方式来访问foo中date对象的year属性（其实是getYear方法）。</p>\n<h2 id=\"nil对象\"><a href=\"#nil对象\" class=\"headerlink\" title=\"nil对象\"></a>nil对象</h2><p>nil是Aviator内置的常量，类似java中的null，表示空的值。nil跟null不同的在于，在java中null只能使用在&#x3D;&#x3D;、!&#x3D;的比较运算符，而nil还可以使用&gt;、&gt;&#x3D;、&lt;、&lt;&#x3D;等比较运算符。Aviator规定，任何对象都比nil大除了nil本身。用户传入的变量如果为null，将自动以nil替代。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//nil对象</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test10</span><span class=\"hljs-params\">()</span>&#123;<br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;nil == nil&quot;</span>)); <span class=\"hljs-comment\">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;3 &gt; nil&quot;</span>)); <span class=\"hljs-comment\">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; true!= nil&quot;</span>)); <span class=\"hljs-comment\">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; &#x27;&#x27; &gt;nil &quot;</span>)); <span class=\"hljs-comment\">// true</span><br>    System.out.println(AviatorEvaluator.execute(<span class=\"hljs-string\">&quot; a == nil &quot;</span>)); <span class=\"hljs-comment\">// true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>nil与String相加的时候，跟java一样显示为null</p>\n<h2 id=\"日期比较\"><a href=\"#日期比较\" class=\"headerlink\" title=\"日期比较\"></a>日期比较</h2><p>Aviator并不支持日期类型，如果要比较日期，你需要将日期写字符串的形式，并且要求是形如”yyyy-MM-dd HH:mm:ss:SS”的字符串，否则都将报错。 字符串跟java.util.Date比较的时候将自动转换为Date对象进行比较：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//日期格式比较</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test11</span><span class=\"hljs-params\">()</span>&#123;<br>    Map&lt;String, Object&gt; env = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();<br>    <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">date</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dateStr</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleDateFormat</span>(<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss:SS&quot;</span>).format(date);<br>    env.put(<span class=\"hljs-string\">&quot;date&quot;</span>, date);<br>    env.put(<span class=\"hljs-string\">&quot;dateStr&quot;</span>, dateStr);<br><br>    <span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> (Boolean) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;date == dateStr&quot;</span>, env);<br>    System.out.println(result); <span class=\"hljs-comment\">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;date &gt; &#x27;2009-12-20 00:00:00:00&#x27; &quot;</span>, env);<br>    System.out.println(result);<span class=\"hljs-comment\">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;date &lt; &#x27;2200-12-20 00:00:00:00&#x27; &quot;</span>, env);<br>    System.out.println(result);<span class=\"hljs-comment\">//true</span><br><br>    result = (Boolean) AviatorEvaluator.execute(<span class=\"hljs-string\">&quot;date == date &quot;</span>, env);<br>    System.out.println(result);<span class=\"hljs-comment\">//true</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>也就是说String除了能跟String比较之外，还能跟nil和date字符串比较。</p>\n<h2 id=\"两种模式\"><a href=\"#两种模式\" class=\"headerlink\" title=\"两种模式\"></a>两种模式</h2><p>默认AviatorEvaluator以编译速度优先：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">AviatorEvaluator</span>.</span></span>set<span class=\"hljs-constructor\">Optimize(AviatorEvaluator.COMPILE)</span>;<br></code></pre></td></tr></table></figure>\n\n<p>你可以修改为运行速度优先，这会做更多的编译优化：</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">AviatorEvaluator</span>.</span></span>set<span class=\"hljs-constructor\">Optimize(AviatorEvaluator.EVAL)</span>;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"语法手册\"><a href=\"#语法手册\" class=\"headerlink\" title=\"语法手册\"></a>语法手册</h1><p>下面是Aviator详细的语法规则定义。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><ul>\n<li>Number类型：数字类型，支持两种类型，分别对应Java的Long和Double，也就是说任何整数都将被转换为Long，而任何浮点数都将被转换为Double，包括用户传入的数值也是如此转换。不支持科学计数法，仅支持十进制。如-1、100、2.3等。</li>\n<li>String类型： 字符串类型，单引号或者双引号括起来的文本串，如’hello world’，变量如果传入的是String或者Character也将转为String类型。</li>\n<li>Bool类型： 常量true和false，表示真值和假值，与java的Boolean.TRUE和Boolean.False对应。</li>\n<li>Pattern类型： 类似Ruby、perl的正则表达式，以&#x2F;&#x2F;括起来的字符串，如&#x2F;&#x2F;d+&#x2F;，内部实现为java.util.Pattern。</li>\n<li>变量类型： 与Java的变量命名规则相同，变量的值由用户传入，如”a”、”<em>b&quot;等</em></li>\n<li>nil类型: 常量nil,类似java中的null，但是nil比较特殊，nil不仅可以参与<code>==</code>、<code>!=</code>的比较，也可以参与<code>&gt;</code>、<code>&gt;=</code>、<code>&lt;</code>、<code>&lt;=</code>的比较，Aviator规定任何类型都n大于nil除了nil本身，nil<code>==</code>nil返回true。用户传入的变量值如果为null，那么也将作为nil处理，nil打印为null。</li>\n</ul>\n<h2 id=\"操作符\"><a href=\"#操作符\" class=\"headerlink\" title=\"操作符\"></a>操作符</h2><h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><p>Aviator支持常见的算术运算符，包括+ - <code>*</code> &#x2F; % 五个二元运算符，和一元运算符”-“。其中 - <code>*</code> &#x2F; %和一元的”-“仅能作用于Number类型。</p>\n<p>“+”不仅能用于Number类型，还可以用于String的相加，或者字符串与其他对象的相加。Aviator规定，任何类型与String相加，结果为String。</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><p>Avaitor的支持的逻辑运算符包括，一元否定运算符”!”，以及逻辑与的”&amp;&amp;”，逻辑或的”||”。逻辑运算符的操作数只能为Boolean。</p>\n<h3 id=\"关系运算符\"><a href=\"#关系运算符\" class=\"headerlink\" title=\"关系运算符\"></a>关系运算符</h3><p>Aviator支持的关系运算符包括”&lt;” “&lt;&#x3D;” “&gt;” “&gt;&#x3D;” 以及”&#x3D;&#x3D;”和”!&#x3D;” 。</p>\n<p>&amp;&amp;和||都执行短路规则。</p>\n<p>关系运算符可以作用于Number之间、String之间、Pattern之间、Boolean之间、变量之间以及其他类型与nil之间的关系比较，不同类型除了nil之外不能相互比较。</p>\n<p>Aviator规定任何对象都比nil大除了nil之外。</p>\n<h3 id=\"匹配运算符\"><a href=\"#匹配运算符\" class=\"headerlink\" title=\"匹配运算符\"></a>匹配运算符</h3><p>匹配运算符”&#x3D;~”用于String和Pattern的匹配，它的左操作数必须为String，右操作数必须为Pattern。匹配成功后，Pattern的分组将存于变量$num，num为分组索引。</p>\n<h3 id=\"三元运算符\"><a href=\"#三元运算符\" class=\"headerlink\" title=\"三元运算符\"></a>三元运算符</h3><p>Aviator没有提供if else语句，但是提供了三元运算符 “?:”，形式为 bool ? exp1: exp2。 其中bool必须为结果为Boolean类型的表达式，而exp1和exp2可以为任何合法的Aviator表达式，并且不要求exp1和exp2返回的结果类型一致。</p>\n<h3 id=\"操作符列表\"><a href=\"#操作符列表\" class=\"headerlink\" title=\"操作符列表\"></a>操作符列表</h3><h3 id=\"Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：\"><a href=\"#Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：\" class=\"headerlink\" title=\"Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：\"></a>Aviator支持操作符的优先级，并且允许通过括号来强制优先级，下面是完整的操作符列表，按照优先级从高到低的顺序排列：</h3><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>操作符</th>\n<th>结合性</th>\n<th>操作数限制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>() <code>[</code> <code>]</code></td>\n<td>从左到右</td>\n<td>()用于函数调用，<code>[</code> <code>]</code>用于数组和java.util.List的元素访问，要求<code>[</code>indx<code>]</code>中的index必须为整型</td>\n</tr>\n<tr>\n<td>1</td>\n<td>! -</td>\n<td>从右到左</td>\n<td>! 能用于Boolean,- 仅能用于Number</td>\n</tr>\n<tr>\n<td>2</td>\n<td><code>*</code> &#x2F; %</td>\n<td>从左到右</td>\n<td>Number之间</td>\n</tr>\n<tr>\n<td>3</td>\n<td>+ -</td>\n<td>从左到右</td>\n<td>+ - 都能用于Number之间, + 还能用于String之间，或者String和其他对象</td>\n</tr>\n<tr>\n<td>4</td>\n<td>&lt; &lt;&#x3D; &gt; &gt;&#x3D;</td>\n<td>从左到右</td>\n<td>Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间</td>\n</tr>\n<tr>\n<td>5</td>\n<td>&#x3D;&#x3D; !&#x3D; &#x3D;~</td>\n<td>从左到右</td>\n<td>&#x3D;&#x3D;和!&#x3D;作用于Number之间、String之间、Pattern之间、变量之间、其他类型与nil之间以及String和java.util.Date之间，&#x3D;~仅能作用于String和Pattern之间</td>\n</tr>\n<tr>\n<td>6</td>\n<td>&amp;&amp;</td>\n<td>从左到右</td>\n<td>Boolean之间，短路</td>\n</tr>\n<tr>\n<td>7</td>\n<td>&#96;</td>\n<td>&#96;&#96;|&#96;</td>\n<td>从左到右</td>\n</tr>\n<tr>\n<td>8</td>\n<td>? :</td>\n<td>从右到左</td>\n<td>第一个操作数的结果必须为Boolean，第二和第三操作数结果无限制</td>\n</tr>\n</tbody></table>\n<h2 id=\"类型转换规则\"><a href=\"#类型转换规则\" class=\"headerlink\" title=\"类型转换规则\"></a>类型转换规则</h2><ul>\n<li>Java的byte short int long都转化为Long类型，Java的float,double都将转化为Double类型。Java的char String都将转化为String。Java的null都将转为nil。</li>\n<li>当两个操作符都是Double或者都是Long的时候，各自按照Double或者Long的类型执行</li>\n<li>当两个操作符中某一个是Double的时候，另一个操作数也将转换成Double，按照Double类型执行。</li>\n<li>任何类型与String相加，结果为String</li>\n<li>任何类型都比nil大，除了nil本身。</li>\n<li>nil在打印或者与字符串相加的时候，显示为null</li>\n<li>形如”yyyy-MM-dd HH:mm:ss:SS”的字符串，在与java.util.Date做比较的时候将尝试转换成java.util.Date对象比较。</li>\n<li>没有规定的类型转换操作，除了未知的变量类型之间，都将抛出异常。</li>\n</ul>\n<h2 id=\"常量和变量\"><a href=\"#常量和变量\" class=\"headerlink\" title=\"常量和变量\"></a>常量和变量</h2><table>\n<thead>\n<tr>\n<th>true</th>\n<th>真值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>false</td>\n<td>假值</td>\n</tr>\n<tr>\n<td>nil</td>\n<td>空值</td>\n</tr>\n<tr>\n<td>$digit</td>\n<td>正则表达式匹配成功后的分组，$0表示匹配的字符串，$1表示第一个分组 etc.</td>\n</tr>\n</tbody></table>\n<h2 id=\"内置函数\"><a href=\"#内置函数\" class=\"headerlink\" title=\"内置函数\"></a>内置函数</h2><table>\n<thead>\n<tr>\n<th>函数名称</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>sysdate()</td>\n<td>返回当前日期对象java.util.Date</td>\n</tr>\n<tr>\n<td>rand()</td>\n<td>返回一个介于0-1的随机数，double类型</td>\n</tr>\n<tr>\n<td>print(<code>[</code>out<code>]</code>,obj)</td>\n<td>打印对象，如果指定out，向out打印，否则输出到控制台</td>\n</tr>\n<tr>\n<td>println(<code>[</code>out<code>]</code>,obj)</td>\n<td>与print类似，但是在输出后换行</td>\n</tr>\n<tr>\n<td>now()</td>\n<td>返回System.currentTimeMillis</td>\n</tr>\n<tr>\n<td>string.contains(s1,s2)</td>\n<td>判断s1是否包含s2，返回Boolean</td>\n</tr>\n<tr>\n<td>string.length(s)</td>\n<td>求字符串长度,返回Long</td>\n</tr>\n<tr>\n<td>string.startsWith(s1,s2)</td>\n<td>s1是否以s2开始，返回Boolean</td>\n</tr>\n<tr>\n<td>string.endsWith(s1,s2)</td>\n<td>s1是否以s2结尾,返回Boolean</td>\n</tr>\n<tr>\n<td>string.substring(s,begin<code>[</code>,end<code>]</code>)</td>\n<td>截取字符串s，从begin到end，end如果忽略的话，将从begin到结尾，与java.util.String.substring一样。</td>\n</tr>\n<tr>\n<td>math.abs(d)</td>\n<td>求d的绝对值</td>\n</tr>\n<tr>\n<td>math.sqrt(d)</td>\n<td>求d的平方根</td>\n</tr>\n<tr>\n<td>math.pow(d1,d2)</td>\n<td>求d1的d2次方</td>\n</tr>\n<tr>\n<td>math.log(d)</td>\n<td>求d的自然对数</td>\n</tr>\n<tr>\n<td>math.log10(d)</td>\n<td>求d以10为底的对数</td>\n</tr>\n<tr>\n<td>math.sin(d)</td>\n<td>正弦函数</td>\n</tr>\n<tr>\n<td>math.cos(d)</td>\n<td>余弦函数</td>\n</tr>\n<tr>\n<td>math.tan(d)</td>\n<td>正切函数</td>\n</tr>\n<tr>\n<td>map(seq,fun)</td>\n<td>将函数fun作用到集合seq每个元素上，返回新元素组成的集合</td>\n</tr>\n<tr>\n<td>filter(seq,predicate)</td>\n<td>将谓词predicate作用在集合的每个元素上，返回谓词为true的元素组成的集合</td>\n</tr>\n<tr>\n<td>count(seq)</td>\n<td>返回集合大小</td>\n</tr>\n<tr>\n<td>include(seq,element)</td>\n<td>判断element是否在集合seq中，返回boolean值</td>\n</tr>\n<tr>\n<td>sort(seq)</td>\n<td>排序集合，仅对数组和List有效，返回排序后的新集合</td>\n</tr>\n<tr>\n<td>reduce(seq,fun,init)</td>\n<td>fun接收两个参数，第一个是集合元素，第二个是累积的init，本函数用于将fun作用在集合每个元素和初始值上面，返回最终的init值</td>\n</tr>\n<tr>\n<td>seq.eq(value)</td>\n<td>返回一个谓词，用来判断传入的参数是否跟value相等,用于filter函数，如filter(seq,seq.eq(3)) 过滤返回等于3的元素组成的集合</td>\n</tr>\n<tr>\n<td>seq.neq(value)</td>\n<td>与seq.eq类似，返回判断不等于的谓词</td>\n</tr>\n<tr>\n<td>seq.gt(value)</td>\n<td>返回判断大于value的谓词</td>\n</tr>\n<tr>\n<td>seq.ge(value)</td>\n<td>返回判断大于等于value的谓词</td>\n</tr>\n<tr>\n<td>seq.lt(value)</td>\n<td>返回判断小于value的谓词</td>\n</tr>\n<tr>\n<td>seq.le(value)</td>\n<td>返回判断小于等于value的谓词</td>\n</tr>\n<tr>\n<td>seq.nil()</td>\n<td>返回判断是否为nil的谓词</td>\n</tr>\n<tr>\n<td>seq.exists()</td>\n<td>返回判断不为nil的谓词</td>\n</tr>\n</tbody></table>\n",
            "tags": [
                "JAVA",
                "Script"
            ]
        }
    ]
}