{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"json类库详解\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/JSON%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/JSON%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/",
            "title": "JSON类库详解",
            "date_published": "2024-01-03T13:13:21.653Z",
            "content_html": "<blockquote>\n<p>JSON应用非常广泛，对于Java常用的JSON库要完全掌握; 其中考虑到FastJson代码质量，漏洞，坑等等，应该尽量避免使用。</p>\n</blockquote>\n<h1 id=\"JSON简介\"><a href=\"#JSON简介\" class=\"headerlink\" title=\"JSON简介\"></a>JSON简介</h1><h2 id=\"JSON是什么\"><a href=\"#JSON是什么\" class=\"headerlink\" title=\"JSON是什么\"></a>JSON是什么</h2><ul>\n<li>JSON 指的是 JavaScript 对象表示法（JavaScript Object Notation）</li>\n<li>JSON 是轻量级的文本数据交换格式</li>\n<li>JSON 独立于语言：JSON 使用 Javascript语法来描述数据对象，但是 JSON 仍然独立于语言和平台。JSON 解析器和 JSON 库支持许多不同的编程语言。 目前非常多的动态（PHP，JSP，.NET）编程语言都支持JSON。</li>\n<li>JSON 具有自我描述性，更易理解</li>\n</ul>\n<h2 id=\"结构与类型\"><a href=\"#结构与类型\" class=\"headerlink\" title=\"结构与类型\"></a>结构与类型</h2><ul>\n<li>只有两种结构：对象内的键值对集合结构和数组，对象用<code>&#123;&#125;</code>表示、内部是<code>”key”:”value”</code>，数组用<code>[]</code>表示，不同值用逗号分开</li>\n<li>基本数值有7个： <ul>\n<li>false </li>\n<li>null </li>\n<li>true </li>\n<li>object </li>\n<li>array </li>\n<li>number </li>\n<li>string</li>\n</ul>\n</li>\n<li>再加上结构可以嵌套，进而可以用来表达复杂的数据</li>\n</ul>\n<p>结构实例：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>   <span class=\"hljs-attr\">&quot;Image&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>       <span class=\"hljs-attr\">&quot;Width&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-number\">800</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">600</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Title&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">&quot;View from 15th Floor&quot;</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;Thumbnail&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>           <span class=\"hljs-attr\">&quot;Url&quot;</span><span class=\"hljs-punctuation\">:</span>    <span class=\"hljs-string\">&quot;http://www.example.com/image/481989943&quot;</span><span class=\"hljs-punctuation\">,</span><br>           <span class=\"hljs-attr\">&quot;Height&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-number\">125</span><span class=\"hljs-punctuation\">,</span><br>           <span class=\"hljs-attr\">&quot;Width&quot;</span><span class=\"hljs-punctuation\">:</span>  <span class=\"hljs-string\">&quot;100&quot;</span><br>       <span class=\"hljs-punctuation\">&#125;</span><span class=\"hljs-punctuation\">,</span><br>       <span class=\"hljs-attr\">&quot;IDs&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span><span class=\"hljs-number\">116</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">943</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">234</span><span class=\"hljs-punctuation\">,</span> <span class=\"hljs-number\">38793</span><span class=\"hljs-punctuation\">]</span><br>     <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"JSON在线解析工具\"><a href=\"#JSON在线解析工具\" class=\"headerlink\" title=\"JSON在线解析工具\"></a>JSON在线解析工具</h2><p><a href=\"https://www.bejson.com/\">BeJson</a></p>\n<h1 id=\"JSON类库\"><a href=\"#JSON类库\" class=\"headerlink\" title=\"JSON类库\"></a>JSON类库</h1><p>Java中并没有内置JSON的解析，因此使用JSON需要借助第三方类库。</p>\n<p>下面是几个常用的 JSON 解析类库：</p>\n<ul>\n<li>FastJson: 阿里巴巴开发的 JSON 库，性能优秀。</li>\n<li>Jackson: 社区十分活跃且更新速度很快。</li>\n<li>Gson: 谷歌开发的 JSON 库，功能十分全面。</li>\n</ul>\n<h2 id=\"性能测试对比\"><a href=\"#性能测试对比\" class=\"headerlink\" title=\"性能测试对比\"></a>性能测试对比</h2><p><a href=\"https://www.xncoding.com/java/basic/jsons.html\">参考文章</a></p>\n<p>根据序列化次数比较小的时候，Gson性能最好，当不断增加的时候到了100000，Gson明细弱于Jackson和FastJson， 这时候FastJson性能是真的牛，另外还可以看到不管数量少还是多，Jackson一直表现优异。而那个Json-lib可以直接忽略。</p>\n<h1 id=\"FastJSON\"><a href=\"#FastJSON\" class=\"headerlink\" title=\"FastJSON\"></a>FastJSON</h1><p>先泼一盆冷水，个人非常不推荐使用FastJson, 为什么？</p>\n<ul>\n<li>FastJson 源码质量较低</li>\n<li>FastJson Bug、漏洞较多</li>\n<li>FastJson 牺牲多数场景下的稳定性而提高的效率</li>\n</ul>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Fastjson 是一个 Java 库，可以将 Java 对象转换为 JSON 格式，当然它也可以将 JSON 字符串转换为 Java 对象。</p>\n<p>Fastjson 可以操作任何 Java 对象，即使是一些预先存在的没有源码的对象。</p>\n<ul>\n<li><a href=\"https://github.com/alibaba/fastjson\">Fastjson Github</a> </li>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/Quick-Start-CN\">Fastjson 中文 Wiki</a></li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>提供服务器端、安卓客户端两种解析工具，性能表现较好。</li>\n<li>提供了 toJSONString() 和 parseObject() 方法来将 Java 对象与 JSON 相互转换。调用toJSONString方 法即可将对象转换成 JSON 字符串，parseObject 方法则反过来将 JSON 字符串转换成对象。</li>\n<li>允许转换预先存在的无法修改的对象（只有class、无源代码）。</li>\n<li>Java泛型的广泛支持。</li>\n<li>允许对象的自定义表示、允许自定义序列化类。</li>\n<li>支持任意复杂对象（具有深厚的继承层次和广泛使用的泛型类型）。</li>\n</ul>\n<h2 id=\"下载-amp-amp-使用\"><a href=\"#下载-amp-amp-使用\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>你可以在 maven 中央仓库中直接下载：<a href=\"http://repo1.maven.org/maven2/com/alibaba/fastjson/\">http://repo1.maven.org/maven2/com/alibaba/fastjson</a></p>\n<p>配置 maven 依赖:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>x.x.x<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>其中 x.x.x 是版本号，根据需要使用特定版本，建议使用最新版本。</p>\n<h2 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>();<br>user.setName(<span class=\"hljs-string\">&quot;校长&quot;</span>);<br>user.setAge(<span class=\"hljs-number\">3</span>);<br>user.setSalary(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BigDecimal</span>(<span class=\"hljs-string\">&quot;123456789.0123&quot;</span>));<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonString</span> <span class=\"hljs-operator\">=</span> JSON.toJSONString(user);<br>System.out.println(jsonString);<br><span class=\"hljs-comment\">// 输出 &#123;&quot;age&quot;:3,&quot;name&quot;:&quot;校长&quot;,&quot;old&quot;:false,&quot;salary&quot;:123456789.0123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化\"><a href=\"#反序列化\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonString</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123&#125;&quot;</span>;<br> <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">u</span> <span class=\"hljs-operator\">=</span> JSON.parseObject(jsonString ,User.class);<br> System.out.println(u.getName());<br> <span class=\"hljs-comment\">// 输出 校长</span><br><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStringArray</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;[&#123;\\&quot;age\\&quot;:3,\\&quot;birthdate\\&quot;:1496738822842,\\&quot;name\\&quot;:\\&quot;校长\\&quot;,\\&quot;old\\&quot;:true,\\&quot;salary\\&quot;:123456789.0123&#125;]&quot;</span>;<br>List&lt;User&gt; userList = JSON.parseArray(jsonStringArray, User.class);<br>System.out.println(userList.size());<br><span class=\"hljs-comment\">// 输出 1</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"日期\"><a href=\"#日期\" class=\"headerlink\" title=\"日期\"></a>日期</h3><p>默认序列化Date输出使用”yyyy-MM-dd HH:mm:ss”格式，可以用UseISO8601DateFormat特性换成”yyyy-MM-dd’T’HH:mm:ss”格式。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">JSON.defaultTimeZone = TimeZone.getTimeZone(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>);<br>JSON.defaultLocale = Locale.US;<br>        <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Model</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(format = &quot;MMM dd, yyyy h:mm:ss aa&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> java.util.Date date;<br><br>    <span class=\"hljs-keyword\">public</span> java.util.Date <span class=\"hljs-title function_\">getDate</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> date;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setDate</span><span class=\"hljs-params\">(java.util.Date date)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.date = date;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@JSONField(format = &quot;MMM-dd-yyyy h:mm:ss aa&quot;)</span><br>    <span class=\"hljs-keyword\">public</span> java.sql.Date date2;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Bean和数组转换\"><a href=\"#Bean和数组转换\" class=\"headerlink\" title=\"Bean和数组转换\"></a>Bean和数组转换</h3><ul>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/BeanToArray_cn\">官方例子 - BeanToArray_cn</a></li>\n</ul>\n<h3 id=\"设置指定字段为特定字段名\"><a href=\"#设置指定字段为特定字段名\" class=\"headerlink\" title=\"设置指定字段为特定字段名\"></a>设置指定字段为特定字段名</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(name=&quot;ID&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> id;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">getId</span><span class=\"hljs-params\">()</span> &#123;<span class=\"hljs-keyword\">return</span> id;&#125;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setId</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> value)</span> &#123;<span class=\"hljs-built_in\">this</span>.id = id;&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置是否不序列化某字段\"><a href=\"#设置是否不序列化某字段\" class=\"headerlink\" title=\"设置是否不序列化某字段\"></a>设置是否不序列化某字段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(serialize=false)</span><br>    <span class=\"hljs-keyword\">public</span> Date date;<br>&#125;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(deserialize=false)</span><br>    <span class=\"hljs-keyword\">public</span> Date date;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"设置字段顺序\"><a href=\"#设置字段顺序\" class=\"headerlink\" title=\"设置字段顺序\"></a>设置字段顺序</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">VO</span> &#123;<br>    <span class=\"hljs-meta\">@JSONField(ordinal = 3)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f0;<br><br>    <span class=\"hljs-meta\">@JSONField(ordinal = 2)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f1;<br><br>    <span class=\"hljs-meta\">@JSONField(ordinal = 1)</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> f2;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义序列化和反序列化\"><a href=\"#自定义序列化和反序列化\" class=\"headerlink\" title=\"自定义序列化和反序列化\"></a>自定义序列化和反序列化</h3><ul>\n<li><a href=\"https://blog.csdn.net/u010246789/article/details/52539576\">fastjson SerializerFeature详解</a></li>\n<li><a href=\"https://github.com/alibaba/fastjson/wiki/ObjectDeserializer_cn\">ObjectDeserializer_cn</a></li>\n</ul>\n<h3 id=\"FastJson漏洞问题\"><a href=\"#FastJson漏洞问题\" class=\"headerlink\" title=\"FastJson漏洞问题\"></a>FastJson漏洞问题</h3><ul>\n<li><a href=\"http://blog.nsfocus.net/analysis-protection-fastjson-remote-code-execution-vulnerability/\">fastjson远程代码执行漏洞技术分析与防护方案</a></li>\n<li><a href=\"https://github.com/alibaba/fastjson/issues\">alibaba&#x2F;fastjson</a></li>\n<li><a href=\"https://www.zhihu.com/question/44199956/answer/112224034\">fastjson这么快老外为啥还是热衷 jackson?</a></li>\n</ul>\n<p class=\"note note-warning\">\n<span class=\"label label-primary\">警告</span>\n尽量使用最新版本。\n</p>\n\n<h1 id=\"JackSon\"><a href=\"#JackSon\" class=\"headerlink\" title=\"JackSon\"></a>JackSon</h1><h2 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li><a href=\"https://github.com/FasterXML/jackson\">Jackson Github</a> </li>\n<li><a href=\"http://wiki.fasterxml.com/JacksonHome\">Jackson Wiki</a></li>\n<li><a href=\"https://github.com/FasterXML/jackson-docs\">Jackson 文档</a></li>\n</ul>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><h3 id=\"3个核心模块：\"><a href=\"#3个核心模块：\" class=\"headerlink\" title=\"3个核心模块：\"></a>3个核心模块：</h3><ul>\n<li><strong>Streaming</strong>: jackson-core jar，定义了底层的streaming API和实现了Json特性。</li>\n<li><strong>Annotations</strong>: jackson-annotations jar，包含了标准的Jackson注解。本文暂不介绍。</li>\n<li><strong>Databind</strong>: jackson-databind jar，实现了数据绑定和对象序列化，它依赖于streaming和annotations的包。</li>\n</ul>\n<h3 id=\"第三方数据类型模块\"><a href=\"#第三方数据类型模块\" class=\"headerlink\" title=\"第三方数据类型模块\"></a>第三方数据类型模块</h3><p>这些扩展是插件式的Jackson模块，用<code>ObjectMapper.registerModule()</code>注册，并且通过添加<code>serializers</code>和<code>deserializers</code>以便Databind包（ObjectMapper &#x2F; ObjectReader &#x2F; ObjectWriter）可以读写这些类型，来增加对各种常用的Java库的数据类型的支持。</p>\n<h3 id=\"数据格式模块\"><a href=\"#数据格式模块\" class=\"headerlink\" title=\"数据格式模块\"></a>数据格式模块</h3><p>Jackson也有处理程序对JAX-RS标准实现者例如Jersey, RESTeasy, CXF等提供了数据格式支持。处理程序实现了MessageBodyReader和MessageBodyWriter，目前支持的数据格式包括JSON, Smile, XML, YAML和CBOR。</p>\n<p>数据格式提供了除了Json之外的数据格式支持，它们绝大部分仅仅实现了streaming API abstractions，以便数据绑定组件可以按照原来的方式使用。另一些（几乎不需要）提供了databind标准功能来处理例如schemas。</p>\n<h2 id=\"下载-amp-amp-使用-1\"><a href=\"#下载-amp-amp-使用-1\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>引用maven jar包：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-databind<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>jackson-annotations<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.10.1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"操作-1\"><a href=\"#操作-1\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化-1\"><a href=\"#序列化-1\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toJson</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> JsonProcessingException &#123;<br><br>    <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br><br>    <span class=\"hljs-type\">City</span> <span class=\"hljs-variable\">case1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">City</span>();<br>    case1.setCity(<span class=\"hljs-string\">&quot;SD&quot;</span>);<br>    case1.setAge(<span class=\"hljs-number\">123</span>);<br><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">jsonStr</span> <span class=\"hljs-operator\">=</span> mapper.writeValueAsString(case1);<br>    System.out.println(<span class=\"hljs-string\">&quot;JSON:&quot;</span> + jsonStr);<br>&#125;<br><span class=\"hljs-comment\">// 输出：JSON:&#123;&quot;city&quot;:&quot;SD&quot;,&quot;age&quot;:123&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化-1\"><a href=\"#反序列化-1\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">toObj</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> JsonParseException, JsonMappingException, IOException &#123;<br>    <span class=\"hljs-type\">ObjectMapper</span> <span class=\"hljs-variable\">mapper</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ObjectMapper</span>();<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">inputjsonstr</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;&#123;\\&quot;city\\&quot;:\\&quot;SZ\\&quot;,\\&quot;age\\&quot;:123&#125;&quot;</span>;<br>    <br>    <span class=\"hljs-type\">City</span> <span class=\"hljs-variable\">readcase</span> <span class=\"hljs-operator\">=</span> mapper.readValue(inputjsonstr, City.class);<br><br>    System.out.println(<span class=\"hljs-string\">&quot;city info:&quot;</span> + readcase);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>如果里面有未知属性，比如json中有<code>desc</code>字段，但是City中没有相应字段，会报错, 需要设置如下：</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs JAVA\">mapper.disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h3><table>\n<thead>\n<tr>\n<th>注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>@JsonProperty(&quot;xxx&quot;)</code></td>\n<td>将当前的属性名在<code>json</code>字符串中重新命名为当前设置的这个值，比如在示例中，将<code>age</code>–&gt;<code>mAge</code></td>\n</tr>\n<tr>\n<td><code>@JsonIgnore</code></td>\n<td>将被标注的属性在生成<code>json</code>字符串的时候，直接忽略</td>\n</tr>\n<tr>\n<td><code>@JsonInclude</code></td>\n<td>是一个类级别的设置，<code>sonInclude.Include.NON_EMPTY</code>标识只有非NULL的值才会被纳入<code>json string</code>之中，其余的都被忽略，比如这里的<code>location</code>属性，并没有出现在最终的结果字符串中。</td>\n</tr>\n<tr>\n<td><code>@JsonSerialize</code></td>\n<td>使用自定义的类来实现自定义的字段转换。写入操作。</td>\n</tr>\n<tr>\n<td><code>@JsonDeserialize</code></td>\n<td>解析的时候，自定义的转换器；读取操作。</td>\n</tr>\n<tr>\n<td><code>@JsonAutoDetect</code></td>\n<td>设置类的访问策略，是否所有的属性都可以，还是按照一定的方式来提取。</td>\n</tr>\n<tr>\n<td><code>@JsonRawValue</code></td>\n<td>无转换的将属性值写入到<code>json</code> 字符串中。 写入操作</td>\n</tr>\n<tr>\n<td><code>@JsonValue</code></td>\n<td>标注方法，用以替代缺省的方法，由该方法来完成<code>json</code>的字符输出。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Gson\"><a href=\"#Gson\" class=\"headerlink\" title=\"Gson\"></a>Gson</h1><h2 id=\"简介-2\"><a href=\"#简介-2\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Gson是这样一个Java类库，它可以将Java对象转换为相应的JSON形式，也可以将JSON字符串转换为对应的Java对象。 Gson可以使用任意Java对象，包括哪些预先存在的、不在你的源代码中的对象（因此，你并不知道对象的属性）。</p>\n<ul>\n<li><a href=\"https://www.jianshu.com/p/1e20b28c39d1\">Gson用户指南（中文翻译）</a></li>\n</ul>\n<h2 id=\"Gson的目标\"><a href=\"#Gson的目标\" class=\"headerlink\" title=\"Gson的目标\"></a>Gson的目标</h2><ul>\n<li>提供一种机制，使得将Java对象转换为JSON或相反如使用toString()以及构造器（工厂方法）一样简单。</li>\n<li>允许预先存在的不可变的对象转换为JSON或与之相反。</li>\n<li>允许自定义对象的表现形式</li>\n<li>支持任意复杂的对象</li>\n<li>输出轻量易读的JSON</li>\n</ul>\n<h2 id=\"下载-amp-amp-使用-2\"><a href=\"#下载-amp-amp-使用-2\" class=\"headerlink\" title=\"下载&amp;&amp;使用\"></a>下载&amp;&amp;使用</h2><p>使用Gson的首要类是Gson类，你可以仅仅通过new Gson()的方式创建它。你也可以通过GsonBuilder类去创建Gson实例，这个类允许你进行一系列配置，例如版本控制等等。</p>\n<p>Gson实例不会保存任何进行Json操作时的状态。因此，你可以自由的服用相同的Gson对象进行诸多的Json序列化和反序列化操作。</p>\n<p>引用maven jar包：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.google.guava/guava --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.google.guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>guava<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>28.2-jre<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"操作-2\"><a href=\"#操作-2\" class=\"headerlink\" title=\"操作\"></a>操作</h2><h3 id=\"序列化-2\"><a href=\"#序列化-2\" class=\"headerlink\" title=\"序列化\"></a>序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基础类型</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br>gson.toJson(<span class=\"hljs-number\">1</span>);            ==&gt; prints <span class=\"hljs-number\">1</span><br>gson.toJson(<span class=\"hljs-string\">&quot;abcd&quot;</span>);       ==&gt; prints <span class=\"hljs-string\">&quot;abcd&quot;</span><br>gson.toJson(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Long</span>(<span class=\"hljs-number\">10</span>)); ==&gt; prints <span class=\"hljs-number\">10</span><br><span class=\"hljs-type\">int</span>[] values = &#123; <span class=\"hljs-number\">1</span> &#125;;<br>gson.toJson(values);       ==&gt; prints [<span class=\"hljs-number\">1</span>]<br><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-type\">BagOfPrimitives</span> <span class=\"hljs-variable\">obj</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BagOfPrimitives</span>();<br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> gson.toJson(obj);  <br>==&gt; json is &#123;<span class=\"hljs-string\">&quot;value1&quot;</span>:<span class=\"hljs-number\">1</span>,<span class=\"hljs-string\">&quot;value2&quot;</span>:<span class=\"hljs-string\">&quot;abc&quot;</span>&#125;<br><br><span class=\"hljs-comment\">// 数组</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span>[] ints = &#123;<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>&#125;;<br>String[] strings = &#123;<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;def&quot;</span>, <span class=\"hljs-string\">&quot;ghi&quot;</span>&#125;;<br>gson.toJson(ints);     ==&gt; prints [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]<br>gson.toJson(strings);  ==&gt; prints [<span class=\"hljs-string\">&quot;abc&quot;</span>, <span class=\"hljs-string\">&quot;def&quot;</span>, <span class=\"hljs-string\">&quot;ghi&quot;</span>]<br><br><span class=\"hljs-comment\">// 集合</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br>Collection&lt;Integer&gt; ints = Lists.immutableList(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">json</span> <span class=\"hljs-operator\">=</span> gson.toJson(ints); ==&gt; json is [<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">4</span>,<span class=\"hljs-number\">5</span>]<br></code></pre></td></tr></table></figure>\n\n<p>其中的对象代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BagOfPrimitives</span> &#123;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">value1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">value2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;abc&quot;</span>;<br>  <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">transient</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">value3</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">3</span>;<br>  BagOfPrimitives() &#123;<br>    <span class=\"hljs-comment\">// no-args constructor</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"反序列化-2\"><a href=\"#反序列化-2\" class=\"headerlink\" title=\"反序列化\"></a>反序列化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基础类型</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-type\">int</span>.class);<br><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, Integer.class);<br><span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">one</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;1&quot;</span>, Long.class);<br><span class=\"hljs-type\">Boolean</span> <span class=\"hljs-variable\">false</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;false&quot;</span>, Boolean.class);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;\\&quot;abc\\&quot;&quot;</span>, String.class);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">anotherStr</span> <span class=\"hljs-operator\">=</span> gson.fromJson(<span class=\"hljs-string\">&quot;[\\&quot;abc\\&quot;]&quot;</span>, String.class);<br><br><span class=\"hljs-comment\">// 对象</span><br><span class=\"hljs-type\">BagOfPrimitives</span> <span class=\"hljs-variable\">obj2</span> <span class=\"hljs-operator\">=</span> gson.fromJson(json, BagOfPrimitives.class);   <br>==&gt; obj2 is just like obj<br><br><span class=\"hljs-comment\">// 数组</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">int</span>[] ints2 = gson.fromJson(<span class=\"hljs-string\">&quot;[1,2,3,4,5]&quot;</span>, <span class=\"hljs-type\">int</span>[].class); <br>==&gt; ints2 will be same as ints<br><br><span class=\"hljs-comment\">// 集合</span><br><span class=\"hljs-type\">Gson</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Gson</span>();<br><span class=\"hljs-type\">Type</span> <span class=\"hljs-variable\">collectionType</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeToken</span>&lt;Collection&lt;Integer&gt;&gt;()&#123;&#125;.getType();<br>Collection&lt;Integer&gt; ints2 = gson.fromJson(json, collectionType);<br>ints2 is same as ints<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"自定义序列化和反序列化机制\"><a href=\"#自定义序列化和反序列化机制\" class=\"headerlink\" title=\"自定义序列化和反序列化机制\"></a>自定义序列化和反序列化机制</h3><p>有时候，默认的实现并不是你想要的。这在处理类库时常常发生（例如DateTime）。Gson允许你注册自己自定义的序列化器和反序列化器。该过程分为两部分：</p>\n<ul>\n<li>Json序列化器：需要为一个对象自定义序列化机制。</li>\n<li>Json反序列化器：需要为一个类型自定义反序列化机制。</li>\n</ul>\n<p>实例构造者：并不需要，如果无参构造器是可用的或者注册了一个反序列化器。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">GsonBuilder</span> <span class=\"hljs-variable\">gson</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GsonBuilder</span>();<br>gson.registerTypeAdapter(MyType2.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyTypeAdapter</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MySerializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyDeserializer</span>());<br>gson.registerTypeAdapter(MyType.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MyInstanceCreator</span>());<br></code></pre></td></tr></table></figure>\n\n<p>registerTypeAdapter会检查类型适配器是否实现了上面三个接口中的一个以上并且它们都注册了类型适配器。</p>\n<h3 id=\"中文文档\"><a href=\"#中文文档\" class=\"headerlink\" title=\"中文文档\"></a>中文文档</h3><p>更多请参考：<a href=\"https://www.jianshu.com/p/1e20b28c39d1\">Gson用户指南（中文翻译）</a></p>\n",
            "tags": [
                "常用开发库",
                "JSON类库详解"
            ]
        }
    ]
}