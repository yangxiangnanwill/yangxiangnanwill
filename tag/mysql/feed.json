{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"mysql\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/Archery%E6%95%99%E7%A8%8B/",
            "title": "Archery教程",
            "date_published": "2024-01-03T13:13:21.663Z",
            "content_html": "<blockquote>\n<blockquote>\n<p>本文基于官方文档安装，有不太详细的地方请多多包涵，下方为官方文档连接：</p>\n</blockquote>\n<p><a href=\"https://archerydms.com/\">Archery中文官方文档</a></p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><blockquote>\n<p>Archery是<a href=\"https://github.com/jly8866/archer\">archer</a>的分支项目，定位于SQL审核查询平台，旨在提升DBA的工作效率，支持多数据库的SQL上线和查询，同时支持丰富的MySQL运维功能，所有功能都兼容手机端操作</p>\n</blockquote>\n<h1 id=\"功能清单\"><a href=\"#功能清单\" class=\"headerlink\" title=\"功能清单\"></a>功能清单</h1><table>\n<thead>\n<tr>\n<th align=\"left\">查询</th>\n<th align=\"left\">审核</th>\n<th align=\"left\">执行</th>\n<th align=\"left\">备份</th>\n<th align=\"left\">数据字典</th>\n<th align=\"left\">慢日志</th>\n<th align=\"left\">会话管理</th>\n<th align=\"left\">账号管理</th>\n<th align=\"left\">参数管理</th>\n<th align=\"left\">数据归档</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">MySQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td>√</td>\n</tr>\n<tr>\n<td align=\"left\">MsSQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">Redis</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">PgSQL</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">Oracle</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n<tr>\n<td align=\"left\">MongoDB</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">√</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td align=\"left\">×</td>\n<td>×</td>\n</tr>\n</tbody></table>\n<h1 id=\"部署升级\"><a href=\"#部署升级\" class=\"headerlink\" title=\"部署升级\"></a>部署升级</h1><blockquote>\n<p>支持docker部署、手动部署，支持升级。</p>\n<p>由于安装包部署略微繁琐，本文不提供介绍，详细请看上方文档地址，自行搭建，本次只是提供基于docker的部署教程。</p>\n</blockquote>\n<ul>\n<li>docker部署</li>\n<li>安装包部署</li>\n</ul>\n<h1 id=\"Docker部署\"><a href=\"#Docker部署\" class=\"headerlink\" title=\"Docker部署\"></a>Docker部署</h1><h2 id=\"安装Docker-compose\"><a href=\"#安装Docker-compose\" class=\"headerlink\" title=\"安装Docker-compose\"></a>安装Docker-compose</h2><blockquote>\n<p>安装Docker-compose有两种方法：一个通过Python的pip安装；另外一个是通过连接。</p>\n<p>本文会详细介绍两种方法。</p>\n</blockquote>\n<h3 id=\"通过pip安装\"><a href=\"#通过pip安装\" class=\"headerlink\" title=\"通过pip安装\"></a>通过pip安装</h3><h4 id=\"更新Python3-X版本\"><a href=\"#更新Python3-X版本\" class=\"headerlink\" title=\"更新Python3.X版本\"></a>更新Python3.X版本</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sh\"><span class=\"hljs-comment\"># 进入安装包目录</span><br><span class=\"hljs-built_in\">cd</span> /source<br><span class=\"hljs-comment\"># 下载Python3安装包</span><br>wget https://www.python.org/ftp/python/3.7.10/Python-3.7.10.tgz<br><span class=\"hljs-comment\"># 解压</span><br>tar xzvf Python-3.7.0.tgz<br><span class=\"hljs-built_in\">cd</span> Python-3.7.0<br><span class=\"hljs-built_in\">mkdir</span> /usr/local/src/python3   <span class=\"hljs-comment\">#这个是个人喜好放在这个目录</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装GC编译器\"><a href=\"#安装GC编译器\" class=\"headerlink\" title=\"安装GC编译器\"></a>安装GC编译器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">yum -y install gcc<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>先安装一下GC编译器，要不然编译失败，没办法安装。</p>\n<p><strong>检查一下：</strong>要注意的是产生了：python3和pip3.7</p>\n</blockquote>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">ls <span class=\"hljs-regexp\">/usr/</span>local<span class=\"hljs-regexp\">/src/</span>python3/bin<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装pip\"><a href=\"#安装pip\" class=\"headerlink\" title=\"安装pip\"></a>安装pip</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装依赖</span><br>yum install -y epel-release<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">安装pip</span><br>yum install -y python-pip<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">查看pip版本</span><br>pip --version<br><span class=\"hljs-meta prompt_\">#</span><span class=\"language-bash\">升级pip版本</span><br>pip install -U pip<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装docker-compose\"><a href=\"#安装docker-compose\" class=\"headerlink\" title=\"安装docker-compose\"></a>安装docker-compose</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">安装</span><br>pip install docker-compose<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"通过docker安装\"><a href=\"#通过docker安装\" class=\"headerlink\" title=\"通过docker安装\"></a>通过docker安装</h3><h4 id=\"安装docker\"><a href=\"#安装docker\" class=\"headerlink\" title=\"安装docker\"></a>安装docker</h4><blockquote>\n<p>已安装docker该步骤略过。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">curl -fsSL https://get.docker.com -o get-docker.sh | sudo sh<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"安装-Docker-Compos\"><a href=\"#安装-Docker-Compos\" class=\"headerlink\" title=\"安装 Docker Compos\"></a>安装 Docker Compos</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.1/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose<br>sudo chmod +x /usr/local/bin/docker-compose<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"下载REALEASE文件\"><a href=\"#下载REALEASE文件\" class=\"headerlink\" title=\"下载REALEASE文件\"></a>下载REALEASE文件</h2><blockquote>\n<p>下载下图路径下的文件，里面包含项目执行的所需要的SQL以及依赖。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316105046.png\" alt=\"image-20210316105036672\"></p>\n<h2 id=\"准备运行配置\"><a href=\"#准备运行配置\" class=\"headerlink\" title=\"准备运行配置\"></a>准备运行配置</h2><p>具体可参考：<a href=\"https://github.com/hhyo/Archery/tree/master/src/docker-compose\">文档地址</a></p>\n<blockquote>\n<p>docker-compose.yml文件内的services可按照本身的运行环境来调整，同时注意检查版本号是否正确，比如说外部已经装好了mysql、redis、inception，就可以将对应的services删除，但是需要注意修改settings.py文件的相关配置，具体可以参考<a href=\"https://archerydms.com/installation/manual/#_5\">修改配置</a></p>\n</blockquote>\n<h2 id=\"启动部署\"><a href=\"#启动部署\" class=\"headerlink\" title=\"启动部署\"></a>启动部署</h2><blockquote>\n<p>下载 <a href=\"https://github.com/hhyo/archery/releases/\">Releases</a>文件，解压后进入docker-compose文件夹,按照本文4.3步骤进行本地配置。</p>\n<p>因本人使用的是新建的虚拟机，所以就按照默认配置进行执行了。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">启动</span><br>docker-compose -f docker-compose.yml up -d<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">表结构初始化</span><br>docker exec -ti archery /bin/bash<br>cd /opt/archery<br>source /opt/venv4archery/bin/activate<br>python3 manage.py makemigrations sql  <br>python3 manage.py migrate <br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">数据初始化</span><br>python3 manage.py dbshell&lt;sql/fixtures/auth_group.sql<br>python3 manage.py dbshell&lt;src/init_sql/mysql_slow_query_review.sql<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">创建管理用户</span><br>python3 manage.py createsuperuser<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">重启</span><br>docker restart archery<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">日志查看和问题排查</span><br>docker logs archery -f --tail=50<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><a href=\"http://127.0.0.1:9123/\">http://127.0.0.1:9123</a></p>\n<h2 id=\"启动后配置\"><a href=\"#启动后配置\" class=\"headerlink\" title=\"启动后配置\"></a>启动后配置</h2><p>在启动后 Archery 有一些配置(如Inception , 资源组, 权限组等)需要按需配置, 请详细阅读 <a href=\"https://archerydms.com/configuration/\">配置项说明</a> , 按照自己的需要进行配置</p>\n<h2 id=\"运行界面\"><a href=\"#运行界面\" class=\"headerlink\" title=\"运行界面\"></a>运行界面</h2><p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210316113345.png\" alt=\"image-20210316113342723\"></p>\n",
            "tags": [
                "Archery",
                "MySql",
                "工具"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/JDBC%E8%BF%9E%E6%8E%A5%E5%8F%82%E6%95%B0%E3%80%90rewriteBatchedStatements%E3%80%91%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/JDBC%E8%BF%9E%E6%8E%A5%E5%8F%82%E6%95%B0%E3%80%90rewriteBatchedStatements%E3%80%91%E8%AF%A6%E8%A7%A3/",
            "title": "JDBC连接参数【rewriteBatchedStatements】详解",
            "date_published": "2024-01-03T13:13:21.643Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>最近博猪在做一些风险测算相关的工作，大体业务流程就是业务人员通过Excel录入数据后，后台通过默认的风险因子计算后，批量入库，同时会把业务人员导入的测算数据的Excel上传,由于这块操作比较多，但是因为后台使用的ORM框架是MybatisPlus，里面提供的一些API还是挺便捷的，但是同步通过输入测验发现一个问题，下面就以一个案例进入一下今天的主题，细扒一下MyBatisPlus的批量插入操作。</p>\n</blockquote>\n<h1 id=\"rewriteBatchedStatements参数\"><a href=\"#rewriteBatchedStatements参数\" class=\"headerlink\" title=\"rewriteBatchedStatements参数\"></a>rewriteBatchedStatements参数</h1><p>MySQL的JDBC连接的url中要加rewriteBatchedStatements参数，并保证5.1.13以上版本的驱动，才能实现高性能的批量插入。MySQL JDBC驱动在默认情况下会无视executeBatch()语句，把我们期望批量执行的一组sql语句拆散，一条一条地发给MySQL数据库，批量插入实际上是单条插入，直接造成较低的性能。只有把rewriteBatchedStatements参数置为true, 驱动才会帮你批量执行SQL，另外这个选项对INSERT&#x2F;UPDATE&#x2F;DELETE都有效</p>\n<p>添加<code>rewriteBatchedStatements=true</code>这个参数后的执行速度比较：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">jdbc:mysql://数据库地址/数据库名?useUnicode=true&amp;characterEncoding=UTF8&amp;allowMultiQueries=true&amp;rewriteBatchedStatements=true<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"测试环境介绍\"><a href=\"#测试环境介绍\" class=\"headerlink\" title=\"测试环境介绍\"></a>测试环境介绍</h1><blockquote>\n<p>测试代码在本地执行，数据库使用本地虚拟机。</p>\n</blockquote>\n<h2 id=\"宿主环境\"><a href=\"#宿主环境\" class=\"headerlink\" title=\"宿主环境\"></a>宿主环境</h2><ul>\n<li>物理机处理为AMD Ryzen 9 5900HX with Radeon Graphics           3.30 GHz   48G运行内存  WIN11(OS)</li>\n<li>MySQL为8.0.30，虚拟机（4G运存,20G内存)</li>\n<li>jdk版本为1.8</li>\n<li>日志级别调整到info或者warn级别，减少日志打印性能的消耗</li>\n</ul>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><h3 id=\"表结构\"><a href=\"#表结构\" class=\"headerlink\" title=\"表结构\"></a>表结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `user` (<br>  `id` bigint NOT NULL COMMENT &#x27;主键ID&#x27;,<br>  `name` varchar(30) DEFAULT NULL COMMENT &#x27;姓名&#x27;,<br>  `age` int DEFAULT NULL COMMENT &#x27;年龄&#x27;,<br>  `email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * BatchDemo</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> will</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@RunWith(SpringJUnit4ClassRunner.class)</span><br><span class=\"hljs-meta\">@SpringBootTest(classes = App.class)</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BatchDemo</span> &#123;<br><br>    <span class=\"hljs-meta\">@Autowired</span><br>    <span class=\"hljs-keyword\">private</span> UserService userService;<br><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">StopWatch</span> <span class=\"hljs-variable\">stopWatch</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StopWatch</span>(<span class=\"hljs-string\">&quot;测试批量保存&quot;</span>);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">loopNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10</span>;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">batchNum</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">10_000</span>;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; i &lt;= loopNum; i++) &#123;<br>            stopWatch.start(<span class=\"hljs-string\">&quot;用户保存&quot;</span> + i);<br>            ArrayList&lt;User&gt; users = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>            <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">j</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>; j &lt;= batchNum; j++) &#123;<br>                <span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span> User.builder()<br>                        .id(IdWorker.getId())<br>                        .name(<span class=\"hljs-string\">&quot;test-&quot;</span>)<br>                        .age(<span class=\"hljs-number\">16</span>)<br>                        .email(<span class=\"hljs-string\">&quot;@qq.com&quot;</span>)<br>                        .build();<br>                users.add(user);<br>            &#125;<br>            userService.saveBatch(users, users.size());<br>            stopWatch.stop();<br>            System.out.println(stopWatch.prettyPrint(TimeUnit.MILLISECONDS));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><h2 id=\"普通saveBatch批量插入\"><a href=\"#普通saveBatch批量插入\" class=\"headerlink\" title=\"普通saveBatch批量插入\"></a>普通saveBatch批量插入</h2><p>我们循环1万次，把每个实例对象装到集合（List）中,然后调用Mybatis-Plus的saveBatch方法，传入List集合，实现批量对象的插入，然后我们在方法开始结束的地方，计算当前函数执行时长。为了测试严谨性，我们重复执行十次，下面是执行的时长：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">StopWatch &#x27;测试批量保存&#x27;: running time = 88867 ms</span><br><span class=\"hljs-section\">---------------------------------------------</span><br><span class=\"hljs-section\">ms         %     Task name</span><br><span class=\"hljs-section\">---------------------------------------------</span><br>000011977  13%   用户保存1<br>000008739  10%   用户保存2<br>000008547  10%   用户保存3<br>000008636  10%   用户保存4<br>000008610  10%   用户保存5<br>000008490  10%   用户保存6<br>000008382  09%   用户保存7<br>000008287  09%   用户保存8<br>000008624  10%   用户保存9<br>000008570  10%   用户保存10<br></code></pre></td></tr></table></figure>\n\n<p>OK，我们清空表结构，把数据量调整到10万次，，同时调整一下保存操作为<code>userService.saveBatch(users);</code>执行结果如下：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">StopWatch &#x27;测试批量保存&#x27;: running time = 888607 ms</span><br><span class=\"hljs-section\">---------------------------------------------</span><br><span class=\"hljs-section\">ms         %     Task name</span><br><span class=\"hljs-section\">---------------------------------------------</span><br>000093144  10%   用户保存1<br>000087531  10%   用户保存2<br>000085724  10%   用户保存3<br>000092762  10%   用户保存4<br>000085413  10%   用户保存5<br>000090576  10%   用户保存6<br>000087468  10%   用户保存7<br>000086718  10%   用户保存8<br>000089837  10%   用户保存9<br>000089432  10%   用户保存10<br></code></pre></td></tr></table></figure>\n\n<p>这性能差异立马上来了，然后我技术经理说让我在数据库连接上加上<code>rewriteBatchedStatements=true</code>属性，批量新增方法变更为<code>userService.saveBatch(users, users.size());</code>试一下。我们再次清空表试一下两个情况：</p>\n<h2 id=\"增加rewriteBatchedStatements-x3D-true\"><a href=\"#增加rewriteBatchedStatements-x3D-true\" class=\"headerlink\" title=\"增加rewriteBatchedStatements&#x3D;true\"></a>增加rewriteBatchedStatements&#x3D;true</h2><p>一万次：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">StopWatch &#x27;测试批量保存&#x27;: running time = 6351 ms</span><br><span class=\"hljs-section\">---------------------------------------------</span><br><span class=\"hljs-section\">ms         %     Task name</span><br><span class=\"hljs-section\">---------------------------------------------</span><br>000003298  52%   用户保存1<br>000000503  08%   用户保存2<br>000000338  05%   用户保存3<br>000000304  05%   用户保存4<br>000000402  06%   用户保存5<br>000000310  05%   用户保存6<br>000000312  05%   用户保存7<br>000000299  05%   用户保存8<br>000000273  04%   用户保存9<br>000000308  05%   用户保存10<br></code></pre></td></tr></table></figure>\n\n<p>10万次：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs asciidoc\"><span class=\"hljs-section\">StopWatch &#x27;测试批量保存&#x27;: running time = 40913 ms</span><br><span class=\"hljs-section\">---------------------------------------------</span><br><span class=\"hljs-section\">ms         %     Task name</span><br><span class=\"hljs-section\">---------------------------------------------</span><br>000009092  22%   用户保存1<br>000003494  09%   用户保存2<br>000003580  09%   用户保存3<br>000003645  09%   用户保存4<br>000002939  07%   用户保存5<br>000002871  07%   用户保存6<br>000004359  11%   用户保存7<br>000003043  07%   用户保存8<br>000002978  07%   用户保存9<br>000004907  12%   用户保存10<br></code></pre></td></tr></table></figure>\n\n<p><strong>效果惊呆了吧！！！！芜湖，起飞。</strong></p>\n<h1 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h1><p>那么问题来了，是什么原因导致的性能差异这么大的呢？</p>\n<p>我们去掉<code>rewriteBatchedStatements=true</code>参数， 把日志级别调整到<code>debug</code>级别来看看日志输出情况，当然我们也要把我们数量调小些，一方面是为了我们更好的查看运行情况，另一方面也是为了我们能方便进行断点调试我们的代码。</p>\n<p>首先我们在我们保存的方法上打个断点，然后运行，先放行，我们查看日志输出情况，我们发现SQL是按照单个的SQL的形式进行批量执行的。</p>\n<ul>\n<li>调用MyBatisPlus提供的ServiceImpl的批量保存方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 执行批量操作</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> list      数据集合</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> batchSize 批量大小</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> consumer  执行方法</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;E&gt;       泛型</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 操作结果</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 3.3.1</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">protected</span> &lt;E&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">executeBatch</span><span class=\"hljs-params\">(Collection&lt;E&gt; list, <span class=\"hljs-type\">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;<br>    <span class=\"hljs-keyword\">return</span> SqlHelper.executeBatch(<span class=\"hljs-built_in\">this</span>.entityClass, <span class=\"hljs-built_in\">this</span>.log, list, batchSize, consumer);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>调用SqlHelper的批量执行方法</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 执行批量操作</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> entityClass 实体类</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> log         日志对象</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> list        数据集合</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> batchSize   批次大小</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> consumer    consumer</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> &lt;E&gt;         T</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span> 操作结果</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 3.4.0</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> &lt;E&gt; <span class=\"hljs-type\">boolean</span> <span class=\"hljs-title function_\">executeBatch</span><span class=\"hljs-params\">(Class&lt;?&gt; entityClass, Log log, Collection&lt;E&gt; list, <span class=\"hljs-type\">int</span> batchSize, BiConsumer&lt;SqlSession, E&gt; consumer)</span> &#123;<br>    Assert.isFalse(batchSize &lt; <span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;batchSize must not be less than one&quot;</span>);<br>    <span class=\"hljs-keyword\">return</span> !CollectionUtils.isEmpty(list) &amp;&amp; executeBatch(entityClass, log, sqlSession -&gt; &#123;<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> list.size();<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">idxLimit</span> <span class=\"hljs-operator\">=</span> Math.min(batchSize, size);<br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>;<br>        <span class=\"hljs-keyword\">for</span> (E element : list) &#123;<br>            consumer.accept(sqlSession, element);<br>            <span class=\"hljs-keyword\">if</span> (i == idxLimit) &#123;<br>                sqlSession.flushStatements();<br>                idxLimit = Math.min(idxLimit + batchSize, size);<br>            &#125;<br>            i++;<br>        &#125;<br>    &#125;);<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>从这里我们可以看到，批量保存的方法变成了单个插入的方式，我想这里大概是为了方便兼容各种数据库差异化的插入的处理吧，把批量保存的数据组装成单个的插入语句，到达指定批次数量之后session清空重新组装，而后事务统一提交。</p>\n</blockquote>\n<p>到这里用的基本上都是代理对象了，不太直观的看出调用逻辑了，我们debug到方法里面查看具体调用逻辑。然后直到执行刷新语句(<code>flushStatements</code>)这里,发现使用的是<code>BatchExecutor</code>,具体下执行方法如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">@Override<br>public List&lt;BatchResult&gt; doFlushStatements(boolean isRollback) throws SQLException &#123;<br>  try &#123;<br>    List&lt;BatchResult&gt; results = new ArrayList&lt;&gt;();<br>    if (isRollback) &#123;<br>      return Collections.emptyList();<br>    &#125;<br>    for (int i = 0, n = statementList.size(); i &lt; n; i++) &#123;<br>      Statement stmt = statementList.get(i);<br>      applyTransactionTimeout(stmt);<br>      BatchResult batchResult = batchResultList.get(i);<br>      try &#123;<br>        batchResult.setUpdateCounts(stmt.executeBatch());<br>        MappedStatement ms = batchResult.getMappedStatement();<br>        List&lt;Object&gt; parameterObjects = batchResult.getParameterObjects();<br>        KeyGenerator keyGenerator = ms.getKeyGenerator();<br>        if (Jdbc3KeyGenerator.class.equals(keyGenerator.getClass())) &#123;<br>          Jdbc3KeyGenerator jdbc3KeyGenerator = (Jdbc3KeyGenerator) keyGenerator;<br>          jdbc3KeyGenerator.processBatch(ms, stmt, parameterObjects);<br>        &#125; else if (!NoKeyGenerator.class.equals(keyGenerator.getClass())) &#123; //issue #141<br>          for (Object parameter : parameterObjects) &#123;<br>            keyGenerator.processAfter(this, ms, stmt, parameter);<br>          &#125;<br>        &#125;<br>        // Close statement to close cursor #1109<br>        closeStatement(stmt);<br>      &#125; catch (BatchUpdateException e) &#123;<br>        StringBuilder message = new StringBuilder();<br>        message.append(batchResult.getMappedStatement().getId())<br>            .append(&quot; (batch index #&quot;)<br>            .append(i + 1)<br>            .append(&quot;)&quot;)<br>            .append(&quot; failed.&quot;);<br>        if (i &gt; 0) &#123;<br>          message.append(&quot; &quot;)<br>              .append(i)<br>              .append(&quot; prior sub executor(s) completed successfully, but will be rolled back.&quot;);<br>        &#125;<br>        throw new BatchExecutorException(message.toString(), e, results, batchResult);<br>      &#125;<br>      results.add(batchResult);<br>    &#125;<br>    return results;<br>  &#125; finally &#123;<br>    for (Statement stmt : statementList) &#123;<br>      closeStatement(stmt);<br>    &#125;<br>    currentSql = null;<br>    statementList.clear();<br>    batchResultList.clear();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p><code>batchResult.setUpdateCounts(stmt.executeBatch());</code>断点到这里后我们进入方法内部，到<code>com.mysql.cj.jdbc.StatementImpl</code>里面执行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span>[] executeBatch() <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>    <span class=\"hljs-keyword\">return</span> Util.truncateAndConvertToInt(executeBatchInternal());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>然后再到<code>com.mysql.cj.jdbc.ClientPreparedStatement</code>里面执行一下逻辑：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">protected</span> <span class=\"hljs-type\">long</span>[] executeBatchInternal() <span class=\"hljs-keyword\">throws</span> SQLException &#123;<br>    <span class=\"hljs-keyword\">synchronized</span> (checkClosed().getConnectionMutex()) &#123;<br><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.connection.isReadOnly()) &#123;<br>            <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SQLException</span>(Messages.getString(<span class=\"hljs-string\">&quot;PreparedStatement.25&quot;</span>) + Messages.getString(<span class=\"hljs-string\">&quot;PreparedStatement.26&quot;</span>),<br>                    MysqlErrorNumbers.SQL_STATE_ILLEGAL_ARGUMENT);<br>        &#125;<br><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.query.getBatchedArgs() == <span class=\"hljs-literal\">null</span> || <span class=\"hljs-built_in\">this</span>.query.getBatchedArgs().size() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">long</span>[<span class=\"hljs-number\">0</span>];<br>        &#125;<br><br>        <span class=\"hljs-comment\">// we timeout the entire batch, not individual statements</span><br>        <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">batchTimeout</span> <span class=\"hljs-operator\">=</span> getTimeoutInMillis();<br>        setTimeoutInMillis(<span class=\"hljs-number\">0</span>);<br><br>        resetCancelledState();<br><br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            statementBegins();<br><br>            clearWarnings();<br><br>            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.batchHasPlainStatements &amp;&amp; <span class=\"hljs-built_in\">this</span>.rewriteBatchedStatements.getValue()) &#123;<br><br>                <span class=\"hljs-keyword\">if</span> (getQueryInfo().isRewritableWithMultiValuesClause()) &#123;<br>                    <span class=\"hljs-keyword\">return</span> executeBatchWithMultiValuesClause(batchTimeout);<br>                &#125;<br><br>                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.batchHasPlainStatements &amp;&amp; <span class=\"hljs-built_in\">this</span>.query.getBatchedArgs() != <span class=\"hljs-literal\">null</span><br>                        &amp;&amp; <span class=\"hljs-built_in\">this</span>.query.getBatchedArgs().size() &gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* cost of option setting rt-wise */</span>) &#123;<br>                    <span class=\"hljs-keyword\">return</span> executePreparedBatchAsMultiStatement(batchTimeout);<br>                &#125;<br>            &#125;<br><br>            <span class=\"hljs-keyword\">return</span> executeBatchSerially(batchTimeout);<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            <span class=\"hljs-built_in\">this</span>.query.getStatementExecuting().set(<span class=\"hljs-literal\">false</span>);<br><br>            clearBatch();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>发现最终执行方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>\n\n<p>首先查看方法文档,文档说明如下：</p>\n<blockquote>\n<p>Executes the current batch of statements by executing them one-by-one.</p>\n</blockquote>\n<p>executeBatchSerially核心源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">for</span> (batchCommandIndex = <span class=\"hljs-number\">0</span>; batchCommandIndex &lt; nbrCommands; batchCommandIndex++) &#123;<br><br>    ((PreparedQuery&lt;?&gt;) <span class=\"hljs-built_in\">this</span>.query).setBatchCommandIndex(batchCommandIndex);<br><br>    <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">arg</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">this</span>.query.getBatchedArgs().get(batchCommandIndex);<br><br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (arg <span class=\"hljs-keyword\">instanceof</span> String) &#123;<br>            updateCounts[batchCommandIndex] = executeUpdateInternal((String) arg, <span class=\"hljs-literal\">true</span>, <span class=\"hljs-built_in\">this</span>.retrieveGeneratedKeys);<br><br>            <span class=\"hljs-comment\">// limit one generated key per OnDuplicateKey statement</span><br>            getBatchedGeneratedKeys(<span class=\"hljs-built_in\">this</span>.results.getFirstCharOfQuery() == <span class=\"hljs-string\">&#x27;I&#x27;</span> &amp;&amp; containsOnDuplicateKeyInString((String) arg) ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>);<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            QueryBindings&lt;?&gt; queryBindings = (QueryBindings&lt;?&gt;) arg;<br>            updateCounts[batchCommandIndex] = executeUpdateInternal(queryBindings, <span class=\"hljs-literal\">true</span>);<br><br>            <span class=\"hljs-comment\">// limit one generated key per OnDuplicateKey statement</span><br>            getBatchedGeneratedKeys(containsOnDuplicateKeyUpdateInSQL() ? <span class=\"hljs-number\">1</span> : <span class=\"hljs-number\">0</span>);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">catch</span> (SQLException ex) &#123;<br>        updateCounts[batchCommandIndex] = EXECUTE_FAILED;<br><br>        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.continueBatchOnError &amp;&amp; !(ex <span class=\"hljs-keyword\">instanceof</span> MySQLTimeoutException) &amp;&amp; !(ex <span class=\"hljs-keyword\">instanceof</span> MySQLStatementCancelledException)<br>                &amp;&amp; !hasDeadlockOrTimeoutRolledBackTx(ex)) &#123;<br>            sqlEx = ex;<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-type\">long</span>[] newUpdateCounts = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">long</span>[batchCommandIndex];<br>            System.arraycopy(updateCounts, <span class=\"hljs-number\">0</span>, newUpdateCounts, <span class=\"hljs-number\">0</span>, batchCommandIndex);<br><br>            <span class=\"hljs-keyword\">throw</span> SQLError.createBatchUpdateException(ex, newUpdateCounts, <span class=\"hljs-built_in\">this</span>.exceptionInterceptor);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>通过代码分析，也确实是一条一条SQL执行，而不是把batch的SQL发送到服务器</p>\n<p><strong>但是</strong></p>\n<p>重点来了，执行executeBatchSerially是有条件的，再次贴一下源码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.batchHasPlainStatements &amp;&amp; <span class=\"hljs-built_in\">this</span>.connection.getRewriteBatchedStatements()) &#123;<br>    ...<br>&#125;<br><span class=\"hljs-keyword\">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>\n\n<p>也就是说，如果没做任何配置，默认情况下if条件是进不去的，会直接执行if块后边的语句的，那么if判断了什么，判断如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">!``<span class=\"hljs-built_in\">this</span>``.batchHasPlainStatements &amp;&amp; ``<span class=\"hljs-built_in\">this</span>``.connection.getRewriteBatchedStatements()<br></code></pre></td></tr></table></figure>\n\n<p><code>batchHasPlainStatements</code>默认初始化就是<strong>false</strong>，可以不用管，重点是<code>connection.getRewriteBatchedStatements()</code>。这个是Connection的一个参数<code>rewriteBatchedStatements</code>，会在读取<code>jdbcUrl</code>的时候读取进来：<code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true</code></p>\n<p>我们将jdbcUrl添加一个**<code>rewriteBatchedStatements</code>**试试，即变成：<code>jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=UTF-8&amp;autoReconnect=true&amp;***rewriteBatchedStatements=true</code></p>\n<p>这时候就会进if块了。进入if块之后，再根据执行的是insert 还是update、 delete，会走不同方法</p>\n<ul>\n<li>如果是insert语句，满成条件情况下，会整合成形如：”<strong>insert into xxx_table values (xx),(yy),(zz)…</strong>“这样的语句</li>\n<li>如果是update\\delete语句，满成条件情况下，会整合成形如：”<strong>update t set … where id &#x3D; 1; update t set … where id &#x3D; 2; update t set … where id &#x3D; 3 …</strong>“这样的语句</li>\n</ul>\n<p>然后分批次发送给MySQL(会有一次发送的package大小限制，所以需要拆分批次),拆分如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">int</span>` `maxAllowedPacket = ``<span class=\"hljs-built_in\">this</span>``.connection.getMaxAllowedPacket();<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-built_in\">this</span>.batchHasPlainStatements &amp;&amp; <span class=\"hljs-built_in\">this</span>.connection.getRewriteBatchedStatements()) &#123;<br>    <span class=\"hljs-comment\">//insert会在这里进行再次判断</span><br>    <span class=\"hljs-keyword\">if</span> (canRewriteAsMultiValueInsertAtSqlLevel()) &#123;<br>        <span class=\"hljs-keyword\">return</span> executeBatchedInserts(batchTimeout);<br>    &#125;<br>    <span class=\"hljs-comment\">//update、delete会在这里进行再次判断</span><br>    <span class=\"hljs-comment\">//1. mysql版本&gt;=4.1.0</span><br>    <span class=\"hljs-comment\">//2. batchHasPlainStatements为false</span><br>    <span class=\"hljs-comment\">//3. batch的数量&gt;3</span><br>    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.connection.versionMeetsMinimum(<span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">0</span>) &amp;&amp; !<span class=\"hljs-built_in\">this</span>.batchHasPlainStatements &amp;&amp; <span class=\"hljs-built_in\">this</span>.batchedArgs != <span class=\"hljs-literal\">null</span><br>            &amp;&amp; <span class=\"hljs-built_in\">this</span>.batchedArgs.size() &gt; <span class=\"hljs-number\">3</span> <span class=\"hljs-comment\">/* cost of option setting rt-wise */</span>) &#123;<br>        <span class=\"hljs-keyword\">return</span> executePreparedBatchAsMultiStatement(batchTimeout);<br>    &#125;<br>&#125;<br> <br><span class=\"hljs-keyword\">return</span> executeBatchSerially(batchTimeout);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>OK，知其然，知其所以然，我们大概知晓了参数的功能及意义，那么我们总结一下。</p>\n<p>如果想要达到MySQL真正batchUpdate效果，需要有以下几个条件：</p>\n<ul>\n<li>需要在jdbcUrl后添加参数rewriteBatchedStatements&#x3D;true</li>\n<li>this.batchHasPlainStatements 为false</li>\n<li>如果是update \\ delete 语句，还需要mysql版本&gt;&#x3D;4.1.0，并且batch的数量&gt;3</li>\n</ul>\n<p>因此，如果可能的情况下，请在jdbcUrl后添加参数rewriteBatchedStatements&#x3D;true，尽可能利用上MySQL给我们提供的便利，提高性能。</p>\n<blockquote>\n<p>结尾ENDING:还是着重强调一下SQL方言为MySQL，这里只是针对MySQL的性能细究，请注意一下数据库！！！</p>\n</blockquote>\n",
            "tags": [
                "JAVA",
                "JDBC",
                "Mysql"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/MyBatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/MyBatis/MyBatis%E6%8A%80%E6%9C%AF%E5%86%85%E5%B9%95/",
            "title": "MyBatis技术内幕",
            "date_published": "2024-01-03T13:13:21.643Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>博主mybatis源码学习相关资料：</p>\n<blockquote>\n<p>MyBatis技术内幕</p>\n</blockquote>\n<p>myBatis网站：</p>\n<blockquote>\n<p><a href=\"https://mybatis.org/mybatis-3/zh/getting-started.html\">mybatis3官网文档地址</a></p>\n</blockquote>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"ORM-简介\"><a href=\"#ORM-简介\" class=\"headerlink\" title=\"ORM 简介\"></a>ORM 简介</h2><h3 id=\"ORM概念\"><a href=\"#ORM概念\" class=\"headerlink\" title=\"ORM概念\"></a>ORM概念</h3><p>对象关系映射（Object Relational Mapping，简称ORM）模式是一种为了解决面向对象与关系数据库存在的互不匹配的现象的技术。</p>\n<p>简单的说，ORM是通过使用描述对象和数据库之间映射的元数据，将程序中的对象自动持久化到关系数据库中。</p>\n<p>ORM在业务逻辑层和数据库层之间充当了桥梁的作用。</p>\n<h3 id=\"ORM由来\"><a href=\"#ORM由来\" class=\"headerlink\" title=\"ORM由来\"></a>ORM由来</h3><p>让我们从O&#x2F;R开始。字母O起源于”对象”(Object),而R则来自于”关系”(Relational)。</p>\n<p>几乎所有的软件开发过程中都会涉及到对象和关系数据库。在用户层面和业务逻辑层面，我们是面向对象的。当对象的信息发生变化的时候，我们就需要把对象的信息保存在关系数据库中。</p>\n<p>按照之前的方式来进行开发就会出现程序员会在自己的业务逻辑代码中夹杂很多SQL语句用来增加、读取、修改、删除相关数据，而这些代码通常都是重复的。</p>\n<h3 id=\"ORM优势\"><a href=\"#ORM优势\" class=\"headerlink\" title=\"ORM优势\"></a>ORM优势</h3><p>ORM解决的主要问题是对象和关系的映射。它通常把一个类和一个表一一对应，类的每个实例对应表中的一条记录，类的每个属性对应表中的每个字段。</p>\n<p>ORM提供了对数据库的映射，不用直接编写SQL代码，只需像操作对象一样从数据库操作数据。</p>\n<p>让软件开发人员专注于业务逻辑的处理，提高了开发效率。</p>\n<h3 id=\"ORM的劣势\"><a href=\"#ORM的劣势\" class=\"headerlink\" title=\"ORM的劣势\"></a>ORM的劣势</h3><p>ORM的缺点是会在一定程度上牺牲程序的执行效率。</p>\n<p>ORM用多了SQL语句就不会写了，关系数据库相关技能退化…</p>\n<h3 id=\"ORM总结\"><a href=\"#ORM总结\" class=\"headerlink\" title=\"ORM总结\"></a>ORM总结</h3><p>ORM只是一种工具，工具确实能解决一些重复，简单的劳动。这是不可否认的。</p>\n<p>但我们不能指望某个工具能一劳永逸地解决所有问题，一些特殊问题还是需要特殊处理的。</p>\n<p>但是在整个软件开发过程中需要特殊处理的情况应该都是很少的，否则所谓的工具也就失去了它存在的意义。</p>\n<h2 id=\"常见的持久化框架\"><a href=\"#常见的持久化框架\" class=\"headerlink\" title=\"常见的持久化框架\"></a>常见的持久化框架</h2><p>当前 Java ORM 框架产品有很多，常见的框架有 Hibernate 和 MyBatis，其主要区别如下。</p>\n<h3 id=\"Hibernate\"><a href=\"#Hibernate\" class=\"headerlink\" title=\"Hibernate\"></a>Hibernate</h3><p>Hibernate 框架是一个全表映射的框架。通常开发者只要定义好持久化对象到数据库表的映射关系，就可以通过 Hibernate 框架提供的方法完成持久层操作。</p>\n<p>开发者并不需要熟练地掌握 SQL 语句的编写，Hibernate 框架会根据编制的存储逻辑，自动生成对应的 SQL，并调用 JDBC 接口来执行，所以其开发效率会高于 MyBatis 框架。</p>\n<p>然而 Hibernate 框架自身也存在一些缺点，例如：</p>\n<ul>\n<li>多表关联时，对 SQL 查询的支持较差；</li>\n<li>更新数据时，需要发送所有字段；</li>\n<li>不支持存储过程；</li>\n<li>不能通过优化 SQL 来优化性能。</li>\n</ul>\n<p>这些问题导致其只适合在场景不太复杂且对性能要求不高的项目中使用。</p>\n<p>Hibernate 官网：<a href=\"http://hibernate.org/\">http://hibernate.org/</a></p>\n<h3 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h3><p>MyBatis 框架是一个半自动映射的框架。这里所谓的 “半自动” 是相对于 Hibernate 框架全表映射而言的，MyBatis 框架需要手动匹配提供 POJO、SQL 和映射关系，而 Hibernate 框架只需提供 POJO 和映射关系即可。</p>\n<p>与 Hibernate 框架相比，虽然使用 MyBatis 框架手动编写 SQL 要比使用 Hibernate 框架的工作量大，但 MyBatis 框架可以配置动态 SQL 并优化 SQL、通过配置决定 SQL 的映射规则，以及支持存储过程等。对于一些复杂的和需要优化性能的项目来说，显然使用 MyBatis 框架更加合适。</p>\n<p>MyBatis 框架可应用于需求多变的互联网项目，如电商项目；Hibernate 框架可应用于需求明确、业务固定的项目，如 OA 项目、ERP 项目等。</p>\n<p>学习地址：<a href=\"https://mybatis.org/mybatis-3/zh/getting-started.html\">https://mybatis.org/mybatis-3/zh/getting-started.html</a></p>\n<h2 id=\"MyBatis示例\"><a href=\"#MyBatis示例\" class=\"headerlink\" title=\"MyBatis示例\"></a>MyBatis示例</h2><blockquote>\n<p>项目案例为一个普通的Maven的Java项目</p>\n</blockquote>\n<h3 id=\"相关依赖\"><a href=\"#相关依赖\" class=\"headerlink\" title=\"相关依赖\"></a>相关依赖</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependencies</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mybatis<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.4.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>mysql<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>8.0.16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建SQL\"><a href=\"#创建SQL\" class=\"headerlink\" title=\"创建SQL\"></a>创建SQL</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs mysql\">CREATE TABLE `inter_employee` (<br>  `id` varchar(32) NOT NULL COMMENT &#x27;id&#x27;,<br>  `name` varchar(32) NOT NULL COMMENT &#x27;姓名&#x27;,<br>  `email` varchar(128) NOT NULL COMMENT &#x27;邮箱&#x27;,<br>  `sex` char(1) NOT NULL COMMENT &#x27;性别 0-男；1-女；2-未知&#x27;,<br>  `dept_id` bigint NOT NULL COMMENT &#x27;所属部门id&#x27;,<br>  `org_id` varchar(32) NOT NULL COMMENT &#x27;所属机构id&#x27;,<br>  `status` char(1) NOT NULL COMMENT &#x27;状态 0-无效；1-有效&#x27;,<br>  `created_by` varchar(32) DEFAULT NULL COMMENT &#x27;创建人&#x27;,<br>  `created_time` datetime DEFAULT NULL COMMENT &#x27;创建时间&#x27;,<br>  `updated_by` varchar(32) DEFAULT NULL COMMENT &#x27;更新人&#x27;,<br>  `updated_time` datetime DEFAULT NULL COMMENT &#x27;更新时间&#x27;,<br>  PRIMARY KEY (`id`)<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci COMMENT=&#x27;机构员工信息&#x27;;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"注入数据\"><a href=\"#注入数据\" class=\"headerlink\" title=\"注入数据\"></a>注入数据</h3><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\"><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;a999b75045ac4c51a537b4a2f3631da8&#x27;</span>, <span class=\"hljs-string\">&#x27;will——5&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;a007fd3f3d4242b880d9eae31514ba1f&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:11:26&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:11:26&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;08b8755629e8482da80e329e6b8b7221&#x27;</span>, <span class=\"hljs-string\">&#x27;will——3&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;fa67adfd262a4c4b9c763031fbe5e11c&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:17&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:17&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;4da05f39ba5b4b5e8a9aa583e649165f&#x27;</span>, <span class=\"hljs-string\">&#x27;will——2&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;253daef00ca54b1ea7064bdc491006d7&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:10&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:10&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;5ad23b1c5a9545298d99455b7fc9c12c&#x27;</span>, <span class=\"hljs-string\">&#x27;will——1&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;e39ef78e0a834846b103492a887aa95e&#x27;</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 21:49:30&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:11:01&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;7c6ee3c522b34d48bdaaa467eb97265b&#x27;</span>, <span class=\"hljs-string\">&#x27;will——4&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;2f8a94f7433a45a6bf5c0b5d29d0bd39&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:21&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:09:21&#x27;</span>);<br><span class=\"hljs-keyword\">INSERT</span> <span class=\"hljs-keyword\">INTO</span> `inter_employee`(`id`, `name`, `email`, `sex`, `dept_id`, `org_id`, `status`, `created_by`, `created_time`, `updated_by`, `updated_time`) <span class=\"hljs-keyword\">VALUES</span> (<span class=\"hljs-string\">&#x27;a7da1e401baa48a5af095e4169c6ddbb&#x27;</span>, <span class=\"hljs-string\">&#x27;will——6&#x27;</span>, <span class=\"hljs-string\">&#x27;1@qqc.om&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-number\">1001</span>, <span class=\"hljs-string\">&#x27;20b14675a4e54345aa042baed441b3e4&#x27;</span>, <span class=\"hljs-string\">&#x27;1&#x27;</span>, <span class=\"hljs-string\">&#x27;admin&#x27;</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:11:30&#x27;</span>, <span class=\"hljs-keyword\">NULL</span>, <span class=\"hljs-string\">&#x27;2020-06-03 22:11:30&#x27;</span>);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建MODEL对象\"><a href=\"#创建MODEL对象\" class=\"headerlink\" title=\"创建MODEL对象\"></a>创建MODEL对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bossYang.myBatisTest.bean;<br><br><span class=\"hljs-keyword\">import</span> lombok.Data;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> InterEmployee</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> TODO</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2020/11/8 9:55 PM</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">InterEmployee</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String id;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String email;<br>    <span class=\"hljs-keyword\">private</span> String sex;<br>    <span class=\"hljs-keyword\">private</span> String deptId;<br>    <span class=\"hljs-keyword\">private</span> String orgId;<br>    <span class=\"hljs-keyword\">private</span> String status;<br>    <span class=\"hljs-keyword\">private</span> String createdBy;<br>    <span class=\"hljs-keyword\">private</span> String createdTime;<br>    <span class=\"hljs-keyword\">private</span> String updatedBy;<br>    <span class=\"hljs-keyword\">private</span> String updatedTime;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建mybatis-config-xml\"><a href=\"#创建mybatis-config-xml\" class=\"headerlink\" title=\"创建mybatis-config.xml\"></a>创建<code>mybatis-config.xml</code></h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">configuration</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">configuration</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">environments</span> <span class=\"hljs-attr\">default</span>=<span class=\"hljs-string\">&quot;development&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">environment</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;development&quot;</span>&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">transactionManager</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dataSource</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;POOLED&quot;</span>&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;driver&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;url&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;jdbc:mysql://localhost:3306/beetsql_demo&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;username&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;root&quot;</span>/&gt;</span><br>                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">property</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;password&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;12345678&quot;</span>/&gt;</span><br>            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dataSource</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">environment</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">environments</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mappers</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">resource</span>=<span class=\"hljs-string\">&quot;mapper/interEmployee.xml&quot;</span>/&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mappers</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建interEmployee-xml-实现查询功能\"><a href=\"#创建interEmployee-xml-实现查询功能\" class=\"headerlink\" title=\"创建interEmployee.xml,实现查询功能\"></a>创建<code>interEmployee.xml</code>,实现查询功能</h3><ul>\n<li>在<code>resources</code>目录下面创建<code>mapper</code>文件夹</li>\n<li>创建表对应的xml【<code>interEmployee.xml</code>】文件，实现最基本的一个查询SQL</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">mapper</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-keyword\">PUBLIC</span> <span class=\"hljs-string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class=\"hljs-meta\">        <span class=\"hljs-string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">mapper</span> <span class=\"hljs-attr\">namespace</span>=<span class=\"hljs-string\">&quot;com.bossYang.myBatisTest.dao.InterEmployeeDao&quot;</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">select</span> <span class=\"hljs-attr\">id</span> = <span class=\"hljs-string\">&quot;queryInterEmployeeById&quot;</span> <span class=\"hljs-attr\">resultType</span>=<span class=\"hljs-string\">&quot;com.bossYang.myBatisTest.bean.InterEmployee&quot;</span> <span class=\"hljs-attr\">parameterType</span>=<span class=\"hljs-string\">&quot;com.bossYang.myBatisTest.bean.InterEmployee&quot;</span>&gt;</span><br>        SELECT<br>            t.id id,<br>            t.`name` `name`,<br>            t.email email,<br>            t.dept_id deptId,<br>            t.org_id orgId,<br>            t.sex sex,<br>            t.`status` `status`,<br>            t.created_by createdBy,<br>            t.created_time createdTime,<br>            t.updated_by updatedBy,<br>            t.updated_time updatedTime<br>        FROM inter_employee t<br>        WHERE t.id = #&#123;id&#125;<br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">select</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"实现查询\"><a href=\"#实现查询\" class=\"headerlink\" title=\"实现查询\"></a>实现查询</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bossYang.myBatisTest;<br><br><span class=\"hljs-keyword\">import</span> com.bossYang.myBatisTest.bean.InterEmployee;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.io.Resources;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSession;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><br><span class=\"hljs-keyword\">import</span> java.io.IOException;<br><span class=\"hljs-keyword\">import</span> java.io.InputStream;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> MyBatisInitDemo</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> TODO</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2020/11/8 10:03 PM</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyBatisInitDemo</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">myBatisCfgResource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;config/mybatis-config.xml&quot;</span>;<br>        <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br>        <span class=\"hljs-type\">SqlSessionFactory</span> <span class=\"hljs-variable\">sqlSessionFactory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SqlSessionFactoryBuilder</span>().build(resource);<br>        <span class=\"hljs-type\">SqlSession</span> <span class=\"hljs-variable\">sqlSession</span> <span class=\"hljs-operator\">=</span> sqlSessionFactory.openSession();<br>        <span class=\"hljs-keyword\">try</span> &#123;<br>            <span class=\"hljs-type\">InterEmployee</span> <span class=\"hljs-variable\">param</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">InterEmployee</span>();<br>            param.setId(<span class=\"hljs-string\">&quot;08b8755629e8482da80e329e6b8b7221&quot;</span>);<br><br>            <span class=\"hljs-type\">InterEmployee</span> <span class=\"hljs-variable\">interEmployee</span> <span class=\"hljs-operator\">=</span> sqlSession.selectOne(<span class=\"hljs-string\">&quot;com.bossYang.myBatisTest.dao.InterEmployeeDao.queryInterEmployeeById&quot;</span>, param);<br>            <span class=\"hljs-keyword\">if</span> (interEmployee != <span class=\"hljs-literal\">null</span>) &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;interEmployee = &quot;</span> + interEmployee);<br>            &#125;<br>        &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>            e.printStackTrace();<br>        &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>            sqlSession.close();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"MyBatis整体架构\"><a href=\"#MyBatis整体架构\" class=\"headerlink\" title=\"MyBatis整体架构\"></a>MyBatis整体架构</h2><p>MyBatis 整体架构分为三层：基础支持层、核心处理层和接口层。</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201114212618.png\" alt=\"image-20201114212618759\"></p>\n<h3 id=\"基础支持层\"><a href=\"#基础支持层\" class=\"headerlink\" title=\"基础支持层\"></a>基础支持层</h3><ul>\n<li><p>反射模块</p>\n<blockquote>\n<p>Java 中的反射虽然功能强大，但对大多数开发人员来说，写出高质量的反射代码还是有一定难度的。M y Ba tis 中专门提供了反射模块，该模块对Java 原生的反射进行了良好的封装，提供了更加简洁易用的API ，方便上层使调用，并且对反射操作进行了一系列优化，例如缓存了类的元数据，提高了反射操作的性能。</p>\n</blockquote>\n</li>\n<li><p>类型转换模块</p>\n<blockquote>\n<p>正如前面示例所示 ，MyBatis 为简化配置文件提供了别名机制 ，该机制是类型转换模 块的主要功能之一 。类型转换模块的另一个功能是实现 JDBC 类型与 Java 类型之间的 转换，该功能在为 SQL 语句绑定实参以及 映射查询结果集 时都会涉及 。在为 SQL 语 句绑定实参时，会将数据由 Java 类型转换成 JDBC 类型 ；而在映射结果集时 ，会将数 据由 JDBC 类型转换成 Java 类型 。</p>\n</blockquote>\n</li>\n<li><p>日志模块</p>\n<blockquote>\n<p>无论在开发测试环境中 ，还是在线上生产环境中 ，日志在整个系统中的地位都是非常 重要的 。良好的日志功能可以帮助开发 人员和测试人员快速定位 Bug 代码 ，也可以帮 助运维人员快速定位性能瓶颈、等问题 。目前的 Java 世界中存在很多优秀的日志框架 ，例如 Log4j 、Log4j2, slf4j 等 。MyBatis 作为一个设计优良的框架 ，除了提供详细的日 志输出信息 ，还要能够集成多种日志框架 ，其日志模块的 一个主要功能就是集成第 三 方日志框架</p>\n</blockquote>\n</li>\n<li><p>资源加载模块</p>\n<blockquote>\n<p>资源加载模块主要是对类加载器进行封装 ，确定类加载器的使用顺序 ，并提供了加载 类文件以及其他资源文件的功能 。</p>\n</blockquote>\n</li>\n<li><p>解析器模块</p>\n<blockquote>\n<p>解析器模块的主要提供了两个功能 ：一个功能是对 XPath 进行封装 ，为 MyBatis 初始 化时解析 mybatis-config.xml 配置文件以及映射配 置文件提供支持 ；另一个功能是为处 理动态 SQL 语句中的占位符提供支持 。</p>\n</blockquote>\n</li>\n<li><p>数据源模块</p>\n<blockquote>\n<p>数据源是实际开发中常用的组件之 一。现在开源的数据源都提供了比较丰富的功能 ， 例如 ，连接池功能 、检测连接状态等 ，选择性能优秀的数据源组件对于提升 ORM 框 架乃至整个应用的性能都是非常重要的 。MyBatis 自身提供了相应的数据源实现 ，当 然 MyBatis 也提供了与第三方数据源集成的接口 ，这些功能都位于数据源模块之中 。</p>\n</blockquote>\n</li>\n<li><p>事务管理</p>\n<blockquote>\n<p>MyBatis  对数据库中的事务进行了抽象 ，其自身提供了相 应的事务接口和简单实现 。 在很多场景中 ，MyBatis 会与 Spring 框架集成 ，并由 Spring 框架管理事务 。</p>\n</blockquote>\n</li>\n<li><p>缓存模块</p>\n<blockquote>\n<p>My Batis 中提供了一级缓存和二级缓存，而这两级缓存都是依赖于基础支持层中的缓存模块实现的。这里需要读者注意的是， MyBatis 中自带的这两级缓存与MyBatis 以及整个应用是运行在同一个JVM中的，共享同一块堆内存。如果这两级缓存中的数据量较大， 则可能影响系统中其他功能的运行，所以当需要缓存大量数据时，优先考虑使用Redis 、Memcache 等缓存产品。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20201012134820519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIzNzM4MTU=,size_16,color_FFFFFF,t_70\" alt=\"img\"></p>\n</blockquote>\n</li>\n<li><p>Binding 模块</p>\n<blockquote>\n<p>通过前面的示例我们知道 ，在调用 SqISession 相应方法执行数据库操作时 ，需要指定映射文件中定义的 SQL 节点，如果出现拼写错误，我们只能在运行时才能发现相应的 异常 。为了尽早发现这种错误 ，MyBatis 通过 Binding 模块将用户自定义的 Mapper 接 口与映射配置文件关联起来 ，系统可以通过调用自定义 Mapper 接口中的方法执行相应 的 SQL 语句完成数据库操作 ，从而避免上述问题 。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"核心处理层\"><a href=\"#核心处理层\" class=\"headerlink\" title=\"核心处理层\"></a>核心处理层</h3><ul>\n<li><p>配置解析</p>\n<blockquote>\n<p>在MyBatis 初始化过程中，会加载mybatis-config.xml 配置文件、映射配置文件以及Mapper 接口中的注解信息，解析后的配置信息会形成相应的对象并保存到Configuration 对象中.</p>\n</blockquote>\n</li>\n<li><p>SOL 解析与scripting 模块</p>\n<blockquote>\n<p>拼凑 SQL  语句是一件烦琐且易出错的过程 ，为了将开发人员从这项枯燥无趣的工作中 解脱出来 ，MyBatis 实现动态 SQL 语句的功能 ，提供了多种动态 SQL 语句对应的节点 ， 例如 ，＜where＞节点、＜if&gt;节点、＜foreach＞节点等。通过这些节点的组合使用，开发人 员可以写出几乎满足所有需求的动态  SQL  语句。</p>\n<p>MyBatis 中的 scripting 模块会根据用户传入的实参 ，解析映射文件中定义的 动态 SQL 节点，并形成数据库可执行的 SQL 语句。之后会处理 SQL 语句中的占位符 ，绑定用 户传入的实参 。</p>\n</blockquote>\n</li>\n<li><p>SOL 执行</p>\n<blockquote>\n<p>SQL 语句 的执行涉及多个组件 ，其中比较重要的是 Executor 、StatementHandler 、 ParameterHandler 和 R巳sultSetHandler 。Executor 主要负责维护一级缓存和二级缓存， 并提供事务管理 的相关操作，它会将数据库相关操作委托给 StatementHandler 完成。</p>\n<p>StatementHandler 首先通过 ParameterHandler 完成 SQL 语句的实参绑定 ，然后通过 java.sql.Statement 对象执行 SQL 语句并得到结果集，最后通过ResultSetHandler 完成结 果集的映射，得到结果对象并返回 。</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201130182026.png\" alt=\"image-20201130182017018\"></p>\n<ul>\n<li><p>插件</p>\n<blockquote>\n<p>Mybatis  自身的功能虽然强大 ，但是并不能完美切 合所有的应用场景 ，因此 MyBatis 提供了插件接口 ，我们可以通过添加用户自定义插件的方式对 MyBatis 进行扩展 。用 户自定义插件也可以改变 Mybatis 的默认行为 ，例如 ，我们可以拦截 SQL 语句并对其 进行重写 。由于用户自定义插件会影响 MyBatis 的核心行为 ，在使用自定义插件之前， 开发人员需要了解 MyBatis 内部的原理，这样才能编写出安全 、高效的插件 。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"接口层\"><a href=\"#接口层\" class=\"headerlink\" title=\"接口层\"></a>接口层</h3><p>接口层相对简单 ，其核心是 SqlSession 接口 ，该接口中定义了 MyBatis 暴露给应用程序调 用的 API ，也就是上层应用与 MyBatis 交互的桥梁 。接口层在接收到调用请求时 ，会调用核心 处理层的相应模块来完成具体的数据库操作。</p>\n<h1 id=\"基础支持层-1\"><a href=\"#基础支持层-1\" class=\"headerlink\" title=\"基础支持层\"></a>基础支持层</h1><p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201114212618.png\" alt=\"image-20201114212618759\"></p>\n<p>基础支持层位于 MyBatis 整体架构的最底层，支撑着 MyBatis 的核心处理层 ，是整个框架的基石 。基础支持层 中封装了多个较为通用的 、独立的模块 ，不仅仅为 MyBatis 提供基础支撑 ，也可以在合适的场 景中直接复用。</p>\n<h2 id=\"解析器模块\"><a href=\"#解析器模块\" class=\"headerlink\" title=\"解析器模块\"></a>解析器模块</h2><blockquote>\n<p>在 MyBatis  中涉及多个 XML  配置文件 ，因此我们首先介绍 XML  解析的相关内容。XML解析常见的方式有三种 ，分别是：DOM ( Document Object Model ） 解析方式和 SAX ( Simple API for XML ）解析方式 ，以及从 JDK 6.0 版本开始，JDK 开始支持的 StAX ( Streaming API for XML ) 解析方式 。在开始介绍 MyBatis 的 XML  解析功能之前 ，先介绍这几种常见的 XML  处理方式。</p>\n</blockquote>\n<h3 id=\"DOM\"><a href=\"#DOM\" class=\"headerlink\" title=\"DOM\"></a>DOM</h3><p>DOM 是基于树形结构的 XML 解析方式 ，它会将整个 XML 文档读入内存并构建 一个 DOM 树，基于这棵树形结构对各个节点（Node ） 进行操作。XML  文档中的每个成分都是 一个节点： 整个文档是一个文档节点 ，每个 X扣E标签对应一个元素节点 ，包含在 X岛1L 标签中的文本是文 本节点，每一个 XML  属性是一个属性节点 ，注释属于注释节点 。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">inventory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;2000&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Snow Crash<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Neal Stephenson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Spectra<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0553380958<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>14.95<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;2005&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Burning Tower<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Larry Niven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Jerry Pournelle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Pocket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0743416910<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>5.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;1995&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Zodiac<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Neal Stephenson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Spectra<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0553573862<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>7.50<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- more books --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">inventory</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>dom解析后树状结构示例：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201221170229.png\" alt=\"image-20201221170217672\"></p>\n<p>DOM 解析方式最主要的好处是易于编程 ，可以根据需求在树形结构的各节点之间导航。例 如导航到当前节点的父节点 、兄弟节点、子节点等都是比较方便的 ，这样就可以轻易地获取到 自己需要的数据，也可以很容易地添加和修改树中的元素 。因为要将整个 XML 文档加载到内 存中井构造树形结构 ，当 XML 文档的数据量较大时 ，会造成较大的资源消耗 。</p>\n<h3 id=\"SAX\"><a href=\"#SAX\" class=\"headerlink\" title=\"SAX\"></a>SAX</h3><p>SAX 是基于事件模型的XML 解析方式 ，它并不需要将整个 XML文档加载到内存中 ，而只需将 XML文档的一部分加载到内存中 ，即可开始解析，在处理过程中井不会在内存中记录XML中的数据，所以占用的资源比较小。当程序处理过程中满足条件时，也可以立即停止解析 过程，这样就不必解析剩余的 XML 内容。</p>\n<p>当 SAX 解析器解析到某类型节点时 ，会触发注册在该类型节点上的回调函数，开发人员可以根据自己感兴趣的事件注册相应的回调函数 。一般情况下 ，开发人员只需继承 SAX 提供的 DefaultHandler 基类，重写相应事件的处理方法并进行注册即可</p>\n<p>SAX 的缺点也非常明显，因为不存储XML文挡的结构 ，所以需要开发人员自己负 责维护 业务逻辑涉及的多层节点之间的关系 ，例如，某节点与其父节点之间的父子关系 、与其子节点 之间的父子关系 。当 XML 文档非常复杂时 ，维护节点间关系的复杂度较高 ，工作量也就会 比 较大 。另一方面 ，因为是流式处理 ，所以处理过程只能从 XML 文档开始向后单向进行 ，无法 像 DOM 方式那样 ，自由导航到之前处理过的节点上重新处理 ，也无法支持 XPath 。SAX 没有 提供写 XML 文档的功能 。</p>\n<p>SAX解析后树状结构示例：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201221173158.png\" alt=\"image-20201221173148569\"></p>\n<h3 id=\"StAX\"><a href=\"#StAX\" class=\"headerlink\" title=\"StAX\"></a>StAX</h3><p>JAXP 是JDK 提供的一套用于解析XML的API ， 它很好地支持DOM和SAX 解析方式，JAXP 是JavaSE 的一部分，它由javax.xml 、org.w3c . dom 、orgnl.sax 包及其子包组成。从JDK6 . 0 开始， JAXP 开始支持另一种XML 解析方式，也就是下面要介绍的StAX解析方式。</p>\n<blockquote>\n<p>StAX是一个基于JAVA API用于解析XML文档，类似SAX解析器的方式。但两种API之间有两个区别</p>\n<ul>\n<li>StAX是PULL API，其中作为SAX是PUSH API。这意味着如果StAX解析器，客户端应用程序需要询问StAX解析器从XML获取信息它所需要的，但如果是SAX解析器，客户端应用程序需要获取信息时，SAX解析器会通知客户端应用程序的信息是可用的。</li>\n<li>StAX的API可以读取和写入XML文档。使用SAX API，XML可以是只读的。</li>\n</ul>\n</blockquote>\n<p>SAX的缺点:</p>\n<ul>\n<li>因为它是在一个处理的方式，而不是随机访问XML文档。</li>\n<li>如果需要跟踪的数据分析器已经看到或更改项目的顺序，必须编写代码和数据存储以自己方式处理。</li>\n</ul>\n<p>StAX解析后树状结构示例：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210114105737.png\"></p>\n<h3 id=\"XPath\"><a href=\"#XPath\" class=\"headerlink\" title=\"XPath\"></a>XPath</h3><h4 id=\"简介-1\"><a href=\"#简介-1\" class=\"headerlink\" title=\"简介\"></a>简介</h4><blockquote>\n<p>XPath是一门在 XML 文档中查找信息的语言。XPath 用于在 XML 文档中通过元素和属性进行导航。</p>\n</blockquote>\n<p>XPath 是一门在 XML 文档中查找信息的语言， 可用来在 XML 文档中对元素和属性进行遍历。XPath 是 W3C XSLT 标准的主要元素，并且 XQuery 和 XPointer 同时被构建于 XPath 表达之上。因此，对 XPath 的理解是很多高级 XML 应用的基础。<br>XPath非常类似对数据库操作的SQL语言，或者说JQuery，它可以方便开发者抓起文档中需要的东西。</p>\n<h4 id=\"XPath常用表达式\"><a href=\"#XPath常用表达式\" class=\"headerlink\" title=\"XPath常用表达式\"></a>XPath常用表达式</h4><table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>nodename</td>\n<td>选取指定节点的所有子节点</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>从根节点选取指定节点</td>\n</tr>\n<tr>\n<td>&#x2F;&#x2F;</td>\n<td>根据指定的表达式，在整个文档中选取匹配的节点，这里并不会考虑匹配节点在文档中的位置</td>\n</tr>\n<tr>\n<td>.</td>\n<td>选取当前节点</td>\n</tr>\n<tr>\n<td>..</td>\n<td>选取当前节点的父节点</td>\n</tr>\n<tr>\n<td>@</td>\n<td>选取属性</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配任何元素节点</td>\n</tr>\n<tr>\n<td>@*</td>\n<td>匹配任何属性节点</td>\n</tr>\n<tr>\n<td>node()</td>\n<td>匹配任何类型的节点</td>\n</tr>\n<tr>\n<td>text()</td>\n<td>匹配文本节点</td>\n</tr>\n<tr>\n<td>|</td>\n<td>选取若干个路径</td>\n</tr>\n<tr>\n<td>[]</td>\n<td>指定某个条件，用于查找某个特定节点或包含某个指定值的节点</td>\n</tr>\n</tbody></table>\n<p>在JDK 5.0 版本中推出了javax且nl 叩ath 包， 它是一个引擎和对象模型独立的XPath 库。Java 中使用XPath 编程的代码模式比较固定，下面先通过一个示例简单介绍DOM 解析方式和XPath 库的使用方式。</p>\n<h4 id=\"Xpath步骤Demo\"><a href=\"#Xpath步骤Demo\" class=\"headerlink\" title=\"Xpath步骤Demo\"></a>Xpath步骤Demo</h4><h5 id=\"创建inventory-xml\"><a href=\"#创建inventory-xml\" class=\"headerlink\" title=\"创建inventory.xml\"></a>创建<code>inventory.xml</code></h5><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-meta\">&lt;?xml version=<span class=\"hljs-string\">&quot;1.0&quot;</span> encoding=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">inventory</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;2000&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Snow Crash<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Neal Stephenson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Spectra<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0553380958<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>14.95<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;2005&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Burning Tower<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Larry Niven<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Jerry Pournelle<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Pocket<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0743416910<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>5.99<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">book</span> <span class=\"hljs-attr\">year</span>=<span class=\"hljs-string\">&quot;1995&quot;</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Zodiac<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">author</span>&gt;</span>Neal Stephenson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">author</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">publisher</span>&gt;</span>Spectra<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">publisher</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">isbn</span>&gt;</span>0553573862<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">isbn</span>&gt;</span><br>        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">price</span>&gt;</span>7.50<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">price</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">book</span>&gt;</span><br>    <span class=\"hljs-comment\">&lt;!-- more books --&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">inventory</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"CodeDemo\"><a href=\"#CodeDemo\" class=\"headerlink\" title=\"CodeDemo\"></a>CodeDemo</h5><h6 id=\"创建工厂对象\"><a href=\"#创建工厂对象\" class=\"headerlink\" title=\"创建工厂对象\"></a>创建工厂对象</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">DocumentBuilderFactory</span> <span class=\"hljs-variable\">documentBuilderFactory</span> <span class=\"hljs-operator\">=</span> DocumentBuilderFactory.newInstance();<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"开启验证\"><a href=\"#开启验证\" class=\"headerlink\" title=\"开启验证\"></a>开启验证</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//开启验证</span><br>documentBuilderFactory.setValidating(<span class=\"hljs-literal\">true</span>);<br>documentBuilderFactory.setNamespaceAware(<span class=\"hljs-literal\">false</span>);<br>documentBuilderFactory.setIgnoringComments(<span class=\"hljs-literal\">true</span>);<br>documentBuilderFactory.setCoalescing(<span class=\"hljs-literal\">false</span>);<br>documentBuilderFactory.setExpandEntityReferences(<span class=\"hljs-literal\">true</span>);<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"使用工厂创建文档实例对象\"><a href=\"#使用工厂创建文档实例对象\" class=\"headerlink\" title=\"使用工厂创建文档实例对象\"></a>使用工厂创建文档实例对象</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//创建DocumentBuilder</span><br><span class=\"hljs-type\">DocumentBuilder</span> <span class=\"hljs-variable\">documentBuilder</span> <span class=\"hljs-operator\">=</span> documentBuilderFactory.newDocumentBuilder();<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"创建并赋值异常机制\"><a href=\"#创建并赋值异常机制\" class=\"headerlink\" title=\"创建并赋值异常机制\"></a>创建并赋值异常机制</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">ErrorHandler</span> <span class=\"hljs-variable\">errorHandler</span> <span class=\"hljs-operator\">=</span>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ErrorHandler</span>()&#123;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">warning</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;warning:&quot;</span> + exception.getMessage());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;error:&quot;</span> + exception.getMessage());<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fatalError</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;fatalError:&quot;</span> + exception.getMessage());<br>    &#125;<br>&#125;;<br><span class=\"hljs-comment\">//设置异常处理对象</span><br>documentBuilder.setErrorHandler(errorHandler);<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"创建XPath工厂对象\"><a href=\"#创建XPath工厂对象\" class=\"headerlink\" title=\"创建XPath工厂对象\"></a>创建XPath工厂对象</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//加载对象</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">myBatisCfgResource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;test/inventory.xml&quot;</span>;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br><span class=\"hljs-type\">Document</span> <span class=\"hljs-variable\">document</span> <span class=\"hljs-operator\">=</span> documentBuilder.parse(resource)<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"创建XPath对象\"><a href=\"#创建XPath对象\" class=\"headerlink\" title=\"创建XPath对象\"></a>创建XPath对象</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//创建XpathFactory</span><br><span class=\"hljs-type\">XPathFactory</span> <span class=\"hljs-variable\">xPathFactory</span> <span class=\"hljs-operator\">=</span> XPathFactory.newInstance();<br><span class=\"hljs-comment\">//创建XPath对象</span><br><span class=\"hljs-type\">XPath</span> <span class=\"hljs-variable\">xPath</span> <span class=\"hljs-operator\">=</span> xPathFactory.newXPath();<br></code></pre></td></tr></table></figure>\n\n<h6 id=\"编译表达式\"><a href=\"#编译表达式\" class=\"headerlink\" title=\"编译表达式\"></a>编译表达式</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 通过XPath表达式得到结果 ，第一个参数指定了XPath表达式进行查询的上下文节点 ，也就是在指定</span><br><span class=\"hljs-comment\"> * 节点下查找符合XPath的节点。 本例中的上下文节点是整个文档；第二个参数 指定了XPath表达式</span><br><span class=\"hljs-comment\"> * 的返回类型。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-type\">XPathExpression</span> <span class=\"hljs-variable\">expression</span> <span class=\"hljs-operator\">=</span> xPath.compile(<span class=\"hljs-string\">&quot;//book[author=&#x27;Neal Stephenson&#x27;]/title/text()&quot;</span>);<br><span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> expression.evaluate(document, XPathConstants.NODESET);<br>System.out.println(<span class=\"hljs-string\">&quot;查询作者为Neal Stephenson的图书的标题：&quot;</span>);<br><span class=\"hljs-type\">NodeList</span> <span class=\"hljs-variable\">nodeList</span> <span class=\"hljs-operator\">=</span>  (NodeList)result;<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br>System.out.println(<span class=\"hljs-string\">&quot;查询1997年之后的图书的标题：&quot;</span>);<br>nodeList = (NodeList) xPath.evaluate(<span class=\"hljs-string\">&quot;//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br>System.out.println(<span class=\"hljs-string\">&quot;查询1997年之后的图书的属性和标题：&quot;</span>);<br>nodeList = (NodeList) xPath.evaluate(<span class=\"hljs-string\">&quot;//book[@year&gt;1997]/@*|//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>    System.out.println(nodeList.item(i).getNodeValue());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h5 id=\"整体案例\"><a href=\"#整体案例\" class=\"headerlink\" title=\"整体案例\"></a>整体案例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com.bossYang.myBatisTest;<br><br><span class=\"hljs-keyword\">import</span> org.apache.ibatis.io.Resources;<br><span class=\"hljs-keyword\">import</span> org.w3c.dom.Document;<br><span class=\"hljs-keyword\">import</span> org.w3c.dom.NodeList;<br><span class=\"hljs-keyword\">import</span> org.xml.sax.ErrorHandler;<br><span class=\"hljs-keyword\">import</span> org.xml.sax.SAXException;<br><span class=\"hljs-keyword\">import</span> org.xml.sax.SAXParseException;<br><br><span class=\"hljs-keyword\">import</span> javax.xml.parsers.DocumentBuilder;<br><span class=\"hljs-keyword\">import</span> javax.xml.parsers.DocumentBuilderFactory;<br><span class=\"hljs-keyword\">import</span> javax.xml.parsers.ParserConfigurationException;<br><span class=\"hljs-keyword\">import</span> javax.xml.xpath.XPath;<br><span class=\"hljs-keyword\">import</span> javax.xml.xpath.XPathConstants;<br><span class=\"hljs-keyword\">import</span> javax.xml.xpath.XPathExpression;<br><span class=\"hljs-keyword\">import</span> javax.xml.xpath.XPathFactory;<br><span class=\"hljs-keyword\">import</span> java.io.InputStream;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> XpathTest</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> TODO</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2020/11/28 6:08 PM</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">XpathTest</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>        <span class=\"hljs-type\">DocumentBuilderFactory</span> <span class=\"hljs-variable\">documentBuilderFactory</span> <span class=\"hljs-operator\">=</span> DocumentBuilderFactory.newInstance();<br><br>        <span class=\"hljs-comment\">//开启验证</span><br>        documentBuilderFactory.setValidating(<span class=\"hljs-literal\">true</span>);<br>        documentBuilderFactory.setNamespaceAware(<span class=\"hljs-literal\">false</span>);<br>        documentBuilderFactory.setIgnoringComments(<span class=\"hljs-literal\">true</span>);<br>        documentBuilderFactory.setCoalescing(<span class=\"hljs-literal\">false</span>);<br>        documentBuilderFactory.setExpandEntityReferences(<span class=\"hljs-literal\">true</span>);<br><br>        <span class=\"hljs-comment\">//创建DocumentBuilder</span><br>        <span class=\"hljs-type\">DocumentBuilder</span> <span class=\"hljs-variable\">documentBuilder</span> <span class=\"hljs-operator\">=</span> documentBuilderFactory.newDocumentBuilder();<br><br>        <span class=\"hljs-type\">ErrorHandler</span> <span class=\"hljs-variable\">errorHandler</span> <span class=\"hljs-operator\">=</span>  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ErrorHandler</span>()&#123;<br><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">warning</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;warning:&quot;</span> + exception.getMessage());<br>            &#125;<br><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">error</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;error:&quot;</span> + exception.getMessage());<br>            &#125;<br><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">fatalError</span><span class=\"hljs-params\">(SAXParseException exception)</span> <span class=\"hljs-keyword\">throws</span> SAXException &#123;<br>                System.out.println(<span class=\"hljs-string\">&quot;fatalError:&quot;</span> + exception.getMessage());<br>            &#125;<br>        &#125;;<br><br><br>        <span class=\"hljs-comment\">//设置异常处理对象</span><br>        documentBuilder.setErrorHandler(errorHandler);<br>        <span class=\"hljs-comment\">//加载对象</span><br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">myBatisCfgResource</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;test/inventory.xml&quot;</span>;<br>        <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">resource</span> <span class=\"hljs-operator\">=</span> Resources.getResourceAsStream(myBatisCfgResource);<br>        <span class=\"hljs-type\">Document</span> <span class=\"hljs-variable\">document</span> <span class=\"hljs-operator\">=</span> documentBuilder.parse(resource);<br><br>        <span class=\"hljs-comment\">//创建XpathFactory</span><br>        <span class=\"hljs-type\">XPathFactory</span> <span class=\"hljs-variable\">xPathFactory</span> <span class=\"hljs-operator\">=</span> XPathFactory.newInstance();<br>        <span class=\"hljs-comment\">//创建XPath对象</span><br>        <span class=\"hljs-type\">XPath</span> <span class=\"hljs-variable\">xPath</span> <span class=\"hljs-operator\">=</span> xPathFactory.newXPath();<br>        <span class=\"hljs-comment\">//编译XPath表达式</span><br>        <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">         * 通过XPath表达式得到结果 ，第一个参数指定了XPath表达式进行查询的上下文节点 ，也就是在指定</span><br><span class=\"hljs-comment\">         * 节点下查找符合XPath的节点。 本例中的上下文节点是整个文档；第二个参数 指定了XPath表达式</span><br><span class=\"hljs-comment\">         * 的返回类型。</span><br><span class=\"hljs-comment\">         */</span><br>        <span class=\"hljs-type\">XPathExpression</span> <span class=\"hljs-variable\">expression</span> <span class=\"hljs-operator\">=</span> xPath.compile(<span class=\"hljs-string\">&quot;//book[author=&#x27;Neal Stephenson&#x27;]/title/text()&quot;</span>);<br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> expression.evaluate(document, XPathConstants.NODESET);<br>        System.out.println(<span class=\"hljs-string\">&quot;查询作者为Neal Stephenson的图书的标题：&quot;</span>);<br>        <span class=\"hljs-type\">NodeList</span> <span class=\"hljs-variable\">nodeList</span> <span class=\"hljs-operator\">=</span>  (NodeList)result;<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;查询1997年之后的图书的标题：&quot;</span>);<br>        nodeList = (NodeList) xPath.evaluate(<span class=\"hljs-string\">&quot;//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>        System.out.println(<span class=\"hljs-string\">&quot;查询1997年之后的图书的属性和标题：&quot;</span>);<br>        nodeList = (NodeList) xPath.evaluate(<span class=\"hljs-string\">&quot;//book[@year&gt;1997]/@*|//book[@year&gt;1997]/title/text()&quot;</span>, document, XPathConstants.NODESET);<br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; nodeList.getLength(); i++) &#123;<br>            System.out.println(nodeList.item(i).getNodeValue());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意:</p>\n<p>XPathExpression. evaluate()方法的第二参数，它指定了XP础表达式查找的结果类型，在XPathConstants 类中提供了nodeset、boolean 、number、string 和Node 五种类型。<br>另外，如果XPath表达式只使用一次， 可以跳过编译步骤直接调用XPath 对象的evaluate()方法进行查询。但是如果同一个XPath 表达式要重复执行多次，则建议先进行编译，然后进行查询，这样性能会好一点。</p>\n</blockquote>\n",
            "tags": [
                "JAVA",
                "JDBC",
                "Mysql",
                "MyBatis"
            ]
        }
    ]
}