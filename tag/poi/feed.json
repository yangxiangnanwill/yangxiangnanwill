{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"poi\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/Excel%E7%94%9F%E6%88%90%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/Excel%E7%94%9F%E6%88%90%E5%BB%BA%E8%A1%A8%E8%AF%AD%E5%8F%A5/",
            "title": "Excel生成建表语句",
            "date_published": "2024-01-03T13:13:21.645Z",
            "content_html": "<h1 id=\"Excel生成建表语句\"><a href=\"#Excel生成建表语句\" class=\"headerlink\" title=\"Excel生成建表语句\"></a>Excel生成建表语句</h1><h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>最近公司开展新项目，由于项目进度紧急，部分项目负责人不在现在，建表相关的使用的是Excel，由于Excel拼接过于麻烦，博猪COPY了一下大神的代码，修改了部分代码，以便适用于我们项目。</p>\n<p>参照博客地址：<a href=\"https://blog.csdn.net/u014624447/article/details/111690418\">博客地址</a></p>\n</blockquote>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><h2 id=\"Excel模板\"><a href=\"#Excel模板\" class=\"headerlink\" title=\"Excel模板\"></a>Excel模板</h2><blockquote>\n<p>模板可以根据自己的习惯来创建，需要注意的是建表时我们需要的参数有：数据库名，表名，表注释，列名，列注释，列类型，列长度，列精度，是否主键，是否非空。</p>\n</blockquote>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210224163817.png\" alt=\"image-20210224163802424\"></p>\n<table>\n<thead>\n<tr>\n<th>Database Name</th>\n<th>your database name</th>\n<th>Table Name (physical name)</th>\n<th>your table name</th>\n<th>Table Name (logical name)</th>\n<th>你的表名</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Column Name (physical name)</td>\n<td>Column Name (logical name)</td>\n<td>Type</td>\n<td>Length</td>\n<td>Decimal</td>\n<td>PK</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>column 1</td>\n<td>列 1</td>\n<td>VARCHAR</td>\n<td>255</td>\n<td></td>\n<td>*</td>\n<td>*</td>\n</tr>\n</tbody></table>\n<h1 id=\"撸代码\"><a href=\"#撸代码\" class=\"headerlink\" title=\"撸代码\"></a>撸代码</h1><h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>首先新建maven项目，并导入poi（用于操作excel）、lombok（简化实体类代码）依赖：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.poi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>poi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.15<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.apache.poi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>poi-ooxml<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>3.15<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.16<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>\t<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>provided<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<p>因为我们只需要控制台输入，并且输出sql语句，所以只需要这3个依赖即可。</p>\n<h2 id=\"相关实体类\"><a href=\"#相关实体类\" class=\"headerlink\" title=\"相关实体类\"></a>相关实体类</h2><h3 id=\"数据类型常量类TableTypeConstant-java\"><a href=\"#数据类型常量类TableTypeConstant-java\" class=\"headerlink\" title=\"数据类型常量类TableTypeConstant.java\"></a>数据类型常量类TableTypeConstant.java</h3><p>定义MySQL的数据类型</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TableTypeConstant</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">INT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;int&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">VARCHAR</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;varchar&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">DATE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;date&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DATE_TIME=<span class=\"hljs-string\">&quot;datetime&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TEXT</span> <span class=\"hljs-operator\">=</span><span class=\"hljs-string\">&quot;text&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">LONG_TEXT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;longtext&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">CHAR</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;char&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">LONG</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;long&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">TIME_STAMP</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;timestamp&quot;</span>;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> String DECIMAL=<span class=\"hljs-string\">&quot;decimal&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"字段信息ColumnEntity-java\"><a href=\"#字段信息ColumnEntity-java\" class=\"headerlink\" title=\"字段信息ColumnEntity.java\"></a>字段信息ColumnEntity.java</h3><p>定义我们关注的字段的关键信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ColumnEntity</span> &#123;<br>\t<span class=\"hljs-comment\">/*物理列名*/</span><br>\t<span class=\"hljs-keyword\">private</span> String physicalColumnName;<br>\t<span class=\"hljs-comment\">/*逻辑列名*/</span><br>\t<span class=\"hljs-keyword\">private</span> String logicalColumnName;<br>\t<span class=\"hljs-comment\">/*类型*/</span><br>\t<span class=\"hljs-keyword\">private</span> String type;<br>\t<span class=\"hljs-comment\">/*长度*/</span><br>\t<span class=\"hljs-keyword\">private</span> String length;<br>\t<span class=\"hljs-comment\">/*精度*/</span><br>\t<span class=\"hljs-keyword\">private</span> String decimal;<br>\t<span class=\"hljs-comment\">/*是否主键*/</span><br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> isPrimaryKey;<br>\t<span class=\"hljs-comment\">/*是否非空*/</span><br>\t<span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">boolean</span> isNotNull;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"表信息TableEntity-java\"><a href=\"#表信息TableEntity-java\" class=\"headerlink\" title=\"表信息TableEntity.java\"></a>表信息TableEntity.java</h3><p>定义建表语句需要的信息</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">TableEntity</span> &#123;<br>\t<span class=\"hljs-comment\">/*列信息*/</span><br>\t<span class=\"hljs-keyword\">private</span> List&lt;ColumnEntity&gt; entities;<br>\t<span class=\"hljs-comment\">/*表物理名*/</span><br>\t<span class=\"hljs-keyword\">private</span> String physicalTableName;<br>\t<span class=\"hljs-comment\">/*表逻辑名*/</span><br>\t<span class=\"hljs-keyword\">private</span> String logicalTableName;<br>\t<span class=\"hljs-comment\">/*数据库名*/</span><br>\t<span class=\"hljs-keyword\">private</span> String databaseName;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"业务类\"><a href=\"#业务类\" class=\"headerlink\" title=\"业务类\"></a>业务类</h2><h3 id=\"生成SQL语句Excel-java\"><a href=\"#生成SQL语句Excel-java\" class=\"headerlink\" title=\"生成SQL语句Excel.java\"></a>生成SQL语句Excel.java</h3><p>包含3个方法</p>\n<ul>\n<li><code>TableEntity readExcel(String excelPath)</code> 解析Excel并返回TableEntity</li>\n<li><code>void convertSQL(TableEntity tableEntity)</code> 根据TableEntity生成SQL语句并写入txt</li>\n<li><code>void writeTXT(String path, String value, String fileName)</code> 将字符串写入txt文件</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> com.bossYang.myBatisTest.bean.ColumnEntity;<br><span class=\"hljs-keyword\">import</span> com.bossYang.myBatisTest.bean.TableEntity;<br><span class=\"hljs-keyword\">import</span> com.bossYang.myBatisTest.bean.TableTypeConstant;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.hssf.usermodel.HSSFWorkbook;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.ss.usermodel.Row;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.ss.usermodel.Row.MissingCellPolicy;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.ss.usermodel.Sheet;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.ss.usermodel.Workbook;<br><span class=\"hljs-keyword\">import</span> org.apache.poi.xssf.usermodel.XSSFWorkbook;<br><br><span class=\"hljs-keyword\">import</span> java.io.File;<br><span class=\"hljs-keyword\">import</span> java.io.FileInputStream;<br><span class=\"hljs-keyword\">import</span> java.io.FileOutputStream;<br><span class=\"hljs-keyword\">import</span> java.io.OutputStreamWriter;<br><span class=\"hljs-keyword\">import</span> java.util.ArrayList;<br><span class=\"hljs-keyword\">import</span> java.util.List;<br><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Excel</span> &#123;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 读取excel并转换为表实体</span><br><span class=\"hljs-comment\">\t * </span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> excelPath</span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-keyword\">public</span> TableEntity <span class=\"hljs-title function_\">readExcel</span><span class=\"hljs-params\">(String excelPath)</span> &#123;<br>\t\t<span class=\"hljs-comment\">// 解析模板对象List</span><br>\t\tList&lt;ColumnEntity&gt; entities = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;ColumnEntity&gt;();<br>\t\t<span class=\"hljs-comment\">// 表物理名</span><br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">physicalTableName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-comment\">// 表逻辑名</span><br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">logicalTableName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-comment\">// 数据库名</span><br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">databaseName</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-keyword\">try</span> &#123;<br>\t\t\t<span class=\"hljs-comment\">// String encoding = &quot;GBK&quot;;</span><br>\t\t\t<span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">excel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(excelPath);<br>\t\t\t<span class=\"hljs-keyword\">if</span> (excel.isFile() &amp;&amp; excel.exists()) &#123; <span class=\"hljs-comment\">// 判断文件是否存在</span><br><br>\t\t\t\tString[] split = excel.getName().split(<span class=\"hljs-string\">&quot;\\\\.&quot;</span>); <span class=\"hljs-comment\">// .是特殊字符，需要转义！！！！！</span><br>\t\t\t\tWorkbook wb;<br>\t\t\t\t<span class=\"hljs-comment\">// 根据文件后缀（xls/xlsx）进行判断</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;xls&quot;</span>.equals(split[<span class=\"hljs-number\">1</span>])) &#123;<br>\t\t\t\t\t<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">fis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(excel); <span class=\"hljs-comment\">// 文件流对象</span><br>\t\t\t\t\twb = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HSSFWorkbook</span>(fis);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;xlsx&quot;</span>.equals(split[<span class=\"hljs-number\">1</span>])) &#123;<br>\t\t\t\t\twb = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XSSFWorkbook</span>(excel);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;文件类型错误!&quot;</span>);<br>\t\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>\t\t\t\t&#125;<br><br>\t\t\t\t<span class=\"hljs-comment\">// 开始解析</span><br>\t\t\t\t<span class=\"hljs-type\">Sheet</span> <span class=\"hljs-variable\">sheet</span> <span class=\"hljs-operator\">=</span> wb.getSheetAt(<span class=\"hljs-number\">0</span>); <span class=\"hljs-comment\">// 读取sheet 0</span><br><br>\t\t\t\t<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">firstRowIndex</span> <span class=\"hljs-operator\">=</span> sheet.getFirstRowNum() + <span class=\"hljs-number\">2</span>; <span class=\"hljs-comment\">// 第一、二行是列名，所以不读，从第三行开始读</span><br>\t\t\t\t<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">lastRowIndex</span> <span class=\"hljs-operator\">=</span> sheet.getLastRowNum();<br>\t\t\t\t<span class=\"hljs-comment\">// System.out.println(&quot;firstRowIndex: &quot;+firstRowIndex);</span><br>\t\t\t\t<span class=\"hljs-comment\">// System.out.println(&quot;lastRowIndex: &quot;+lastRowIndex);</span><br><br>\t\t\t\t<span class=\"hljs-comment\">// 解析模板对象List</span><br>\t\t\t\tentities = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;ColumnEntity&gt;();<br>\t\t\t\t<span class=\"hljs-comment\">// 数据库名</span><br>\t\t\t\tdatabaseName = sheet.getRow(<span class=\"hljs-number\">0</span>).getCell(<span class=\"hljs-number\">1</span>).getStringCellValue();<br>\t\t\t\t<span class=\"hljs-comment\">// 表物理名</span><br>\t\t\t\tphysicalTableName = sheet.getRow(<span class=\"hljs-number\">0</span>).getCell(<span class=\"hljs-number\">3</span>).getStringCellValue();<br>\t\t\t\t<span class=\"hljs-comment\">// 表逻辑名</span><br>\t\t\t\tlogicalTableName = sheet.getRow(<span class=\"hljs-number\">0</span>).getCell(<span class=\"hljs-number\">5</span>).getStringCellValue();<br><br>\t\t\t\t<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">rIndex</span> <span class=\"hljs-operator\">=</span> firstRowIndex; rIndex &lt;= lastRowIndex; rIndex++) &#123; <span class=\"hljs-comment\">// 遍历行</span><br>\t\t\t\t\t<span class=\"hljs-comment\">// System.out.println(&quot;rIndex: &quot; + rIndex);</span><br>\t\t\t\t\t<span class=\"hljs-type\">ColumnEntity</span> <span class=\"hljs-variable\">entity</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ColumnEntity</span>();<br>\t\t\t\t\t<span class=\"hljs-type\">Row</span> <span class=\"hljs-variable\">row</span> <span class=\"hljs-operator\">=</span> sheet.getRow(rIndex);<br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (row != <span class=\"hljs-literal\">null</span>) &#123;<br>\t\t\t\t\t\t<span class=\"hljs-keyword\">if</span> (row.getCell(<span class=\"hljs-number\">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue() == <span class=\"hljs-literal\">null</span> || row<br>\t\t\t\t\t\t\t\t.getCell(<span class=\"hljs-number\">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue().isEmpty()) &#123;<br>\t\t\t\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t\t\t\t&#125;<br>\t\t\t\t\t\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t * int firstCellIndex = row.getFirstCellNum(); int lastCellIndex =</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t * row.getLastCellNum(); for (int cIndex = firstCellIndex; cIndex &lt;</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t * lastCellIndex; cIndex++) &#123; //遍历列 Cell cell = row.getCell(cIndex); if (cell !=</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t * null) &#123; System.out.println(cell.toString()); &#125; &#125;</span><br><span class=\"hljs-comment\">\t\t\t\t\t\t */</span><br>\t\t\t\t\t\t<br>\t\t\t\t\t\t<span class=\"hljs-comment\">// 解析对象</span><br>\t\t\t\t\t\tentity.setPhysicalColumnName(<br>\t\t\t\t\t\t\t\trow.getCell(<span class=\"hljs-number\">0</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class=\"hljs-comment\">// 列物理名</span><br>\t\t\t\t\t\tentity.setLogicalColumnName(<br>\t\t\t\t\t\t\t\trow.getCell(<span class=\"hljs-number\">1</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class=\"hljs-comment\">// 列逻辑名</span><br>\t\t\t\t\t\tentity.setType(row.getCell(<span class=\"hljs-number\">2</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class=\"hljs-comment\">// 类型</span><br>\t\t\t\t\t\tentity.setLength(row.getCell(<span class=\"hljs-number\">3</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class=\"hljs-comment\">// 长度</span><br>\t\t\t\t\t\tentity.setDecimal(row.getCell(<span class=\"hljs-number\">4</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue());<span class=\"hljs-comment\">// 精度</span><br>\t\t\t\t\t\tentity.setPrimaryKey(<span class=\"hljs-string\">&quot;*&quot;</span><br>\t\t\t\t\t\t\t\t.equals(row.getCell(<span class=\"hljs-number\">5</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue()));<span class=\"hljs-comment\">// 是否主键</span><br>\t\t\t\t\t\tentity.setNotNull(<span class=\"hljs-string\">&quot;*&quot;</span><br>\t\t\t\t\t\t\t\t.equals(row.getCell(<span class=\"hljs-number\">6</span>, MissingCellPolicy.CREATE_NULL_AS_BLANK).getStringCellValue()));<span class=\"hljs-comment\">// 是否非空</span><br>\t\t\t\t\t\t<span class=\"hljs-comment\">// 存入list</span><br>\t\t\t\t\t\tentities.add(entity);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>\t\t\t\tSystem.out.println(<span class=\"hljs-string\">&quot;找不到指定的文件&quot;</span>);<br>\t\t\t\t<span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;<br>\t\t\t&#125;<br>\t\t&#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>\t\t\te.printStackTrace();<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-type\">TableEntity</span> <span class=\"hljs-variable\">tableEntity</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TableEntity</span>();<br>\t\ttableEntity.setEntities(entities);<br>\t\ttableEntity.setDatabaseName(databaseName);<br>\t\ttableEntity.setLogicalTableName(logicalTableName);<br>\t\ttableEntity.setPhysicalTableName(physicalTableName);<br>\t\t<span class=\"hljs-keyword\">return</span> tableEntity;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 将表实体转换为sql并输出为txt</span><br><span class=\"hljs-comment\">\t * </span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@param</span> tableEntity</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">convertSQL</span><span class=\"hljs-params\">(TableEntity tableEntity)</span> &#123;<br>\t\t<span class=\"hljs-type\">StringBuffer</span> <span class=\"hljs-variable\">sql</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringBuffer</span>();<br>\t\tsql.append(<span class=\"hljs-string\">&quot;CREATE TABLE `&quot;</span>);<br>\t\tsql.append(tableEntity.getDatabaseName());<br>\t\tsql.append(<span class=\"hljs-string\">&quot;`.`&quot;</span>);<br>\t\tsql.append(tableEntity.getPhysicalTableName());<br>\t\tsql.append(<span class=\"hljs-string\">&quot;` (&quot;</span>);<br>\t\t<span class=\"hljs-comment\">// CREATE TABLE `databaseName`.`tablePhysicalName` (</span><br>\t\tList&lt;ColumnEntity&gt; cellEnties = tableEntity.getEntities();<br>\t\t<span class=\"hljs-comment\">// 主键</span><br>\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">primaryKey</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>\t\t<span class=\"hljs-comment\">// 获取主键</span><br>\t\t<span class=\"hljs-keyword\">for</span> (ColumnEntity item : cellEnties) &#123;<br>\t\t\t<span class=\"hljs-comment\">// 将pk为true的设为主键</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (item.isPrimaryKey()) &#123;<br>\t\t\t\tprimaryKey = item.getPhysicalColumnName();<br>\t\t\t\t<span class=\"hljs-keyword\">break</span>;<br>\t\t\t&#125;<br>\t\t&#125;<br>\t\t<span class=\"hljs-comment\">// 循环列</span><br>\t\t<span class=\"hljs-keyword\">for</span> (ColumnEntity item : cellEnties) &#123;<br>\t\t\tsql.append(<span class=\"hljs-string\">&quot; `&quot;</span>);<br>\t\t\tsql.append(item.getPhysicalColumnName().trim());<br>\t\t\tsql.append(<span class=\"hljs-string\">&quot;` &quot;</span>);<br>\t\t\t<span class=\"hljs-comment\">// `physicalColumnName`</span><br><br>\t\t\t<span class=\"hljs-comment\">// 根据NOT NULL 来拼接</span><br>\t\t\t<span class=\"hljs-keyword\">if</span> (item.isNotNull()) &#123; <span class=\"hljs-comment\">// 如果不允许为空，则拼接NOT NULL</span><br>\t\t\t\t<span class=\"hljs-comment\">//类型</span><br>\t\t\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">type</span> <span class=\"hljs-operator\">=</span> item.getType().toLowerCase();<br>\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(type.indexOf(<span class=\"hljs-string\">&quot;varchar&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype= TableTypeConstant.VARCHAR;<br>\t\t\t\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type.indexOf(<span class=\"hljs-string\">&quot;number&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype=TableTypeConstant.INT;<br>\t\t\t\t\t<span class=\"hljs-comment\">//默认长度</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(item.getLength()==<span class=\"hljs-literal\">null</span>||item.getLength().isEmpty()) &#123;<br>\t\t\t\t\t\titem.setLength(<span class=\"hljs-string\">&quot;11&quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(type.indexOf(<span class=\"hljs-string\">&quot;char&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype=TableTypeConstant.CHAR;<br>\t\t\t\t&#125;<br><br>\t\t\t\t<br>\t\t\t\t<span class=\"hljs-comment\">// 根据类型选择是否拼接长度</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (TableTypeConstant.CHAR.equals(type) || TableTypeConstant.VARCHAR.equals(type)) &#123; <span class=\"hljs-comment\">// 文本需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(&quot;</span>);<br>\t\t\t\t\tsql.append(item.getLength());<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.TEXT.equals(type) || TableTypeConstant.LONG_TEXT.equals(type)) &#123; <span class=\"hljs-comment\">// 文本不需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.DATE.equals(type)) &#123; <span class=\"hljs-comment\">// 时间不需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot; NOT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.DATE_TIME.equals(type)||TableTypeConstant.TIME_STAMP.equals(type)) &#123; <span class=\"hljs-comment\">// 时间需要拼接长度 并且长度为0</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(0) NOT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.INT.equals(type)) &#123; <span class=\"hljs-comment\">// 数字需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(&quot;</span>);<br>\t\t\t\t\tsql.append(item.getLength());<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;)  NOT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125;<br>\t\t\t&#125; <span class=\"hljs-keyword\">else</span> &#123; <span class=\"hljs-comment\">// 如果允许为空，则拼接 NULL DEFAULT NULL</span><br>\t\t\t\t<br>\t\t\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">type</span> <span class=\"hljs-operator\">=</span> item.getType().toLowerCase();<br>\t\t\t\t<span class=\"hljs-comment\">//类型转换</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span>(type.indexOf(<span class=\"hljs-string\">&quot;varchar&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype=TableTypeConstant.VARCHAR;<br>\t\t\t\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (type.indexOf(<span class=\"hljs-string\">&quot;number&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype=TableTypeConstant.INT;<br>\t\t\t\t\t<span class=\"hljs-comment\">//默认长度</span><br>\t\t\t\t\t<span class=\"hljs-keyword\">if</span>(item.getLength()==<span class=\"hljs-literal\">null</span>||item.getLength().isEmpty()) &#123;<br>\t\t\t\t\t\titem.setLength(<span class=\"hljs-string\">&quot;11&quot;</span>);<br>\t\t\t\t\t&#125;<br>\t\t\t\t&#125;<span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span>(type.indexOf(<span class=\"hljs-string\">&quot;char&quot;</span>)!=-<span class=\"hljs-number\">1</span>) &#123;<br>\t\t\t\t\ttype=TableTypeConstant.CHAR;<br>\t\t\t\t&#125;<br>\t\t\t\t<br>\t\t\t\t<span class=\"hljs-comment\">// 根据类型选择是否拼接长度</span><br>\t\t\t\t<span class=\"hljs-keyword\">if</span> (TableTypeConstant.CHAR.equals(type) || TableTypeConstant.VARCHAR.equals(type)) &#123; <span class=\"hljs-comment\">// 文本需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(&quot;</span>);<br>\t\t\t\t\tsql.append(item.getLength());<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.TEXT.equals(type) || TableTypeConstant.LONG_TEXT.equals(type)) &#123; <span class=\"hljs-comment\">// 文本不需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot; CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.DATE.equals(type)) &#123; <span class=\"hljs-comment\">// 时间不需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot; NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.DATE_TIME.equals(type)||TableTypeConstant.TIME_STAMP.equals(type)) &#123; <span class=\"hljs-comment\">// 时间需要拼接长度 并且长度为0</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(0) NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (TableTypeConstant.INT.equals(type) || TableTypeConstant.BIG_INT.equals(type) || TableTypeConstant.LONG.equals(type)) &#123; <span class=\"hljs-comment\">// 数字需要拼接长度</span><br>\t\t\t\t\tsql.append(type);<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;(&quot;</span>);<br>\t\t\t\t\tsql.append(item.getLength());<br>\t\t\t\t\tsql.append(<span class=\"hljs-string\">&quot;)  NULL DEFAULT NULL COMMENT &#x27;&quot;</span>);<br>\t\t\t\t&#125;<br>\t\t\t&#125;<br><br>\t\t\t<span class=\"hljs-comment\">// 拼接逻辑列名</span><br>\t\t\tsql.append(item.getLogicalColumnName());<br>\t\t\tsql.append(<span class=\"hljs-string\">&quot;&#x27;,&quot;</span>);<br>\t\t&#125;<br><br>\t\t<span class=\"hljs-comment\">// 拼接主键</span><br>\t\tsql.append(<span class=\"hljs-string\">&quot; PRIMARY KEY (`&quot;</span>);<br>\t\tsql.append(primaryKey);<br>\t\tsql.append(<span class=\"hljs-string\">&quot;`) USING BTREE ) &quot;</span>);<br>\t\t<span class=\"hljs-comment\">// 拼接引擎和逻辑表名</span><br>\t\tsql.append(<span class=\"hljs-string\">&quot;ENGINE = InnoDB CHARACTER SET = utf8mb4 COLLATE = utf8mb4_general_ci COMMENT = &#x27;&quot;</span>);<br>\t\tsql.append(tableEntity.getLogicalTableName());<br>\t\tsql.append(<span class=\"hljs-string\">&quot;&#x27;  ROW_FORMAT = Compact;&quot;</span>);<br>\t\tSystem.err.println(sql);<br>\t\t<span class=\"hljs-keyword\">try</span> &#123;<br>\t\t\twriteTXT(<span class=\"hljs-string\">&quot;&quot;</span>, sql.toString(), tableEntity.getPhysicalTableName() + tableEntity.getLogicalTableName());<br>\t\t\tSystem.out<br>\t\t\t\t\t.println(<span class=\"hljs-string\">&quot;已导出:&quot;</span> + tableEntity.getPhysicalTableName() + tableEntity.getLogicalTableName() + <span class=\"hljs-string\">&quot;.txt!&quot;</span>);<br>\t\t&#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;<br>\t\t\te.printStackTrace();<br>\t\t\tSystem.err.println(<span class=\"hljs-string\">&quot;导出文件失败&quot;</span>);<br>\t\t&#125;<br>\t&#125;<br><br>\t<span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">\t * 将字符串写入txt并导出</span><br><span class=\"hljs-comment\">\t * </span><br><span class=\"hljs-comment\">\t * <span class=\"hljs-doctag\">@throws</span> Exception</span><br><span class=\"hljs-comment\">\t */</span><br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">writeTXT</span><span class=\"hljs-params\">(String path, String value, String fileName)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;<br>\t\t<span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">f</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(path + fileName + <span class=\"hljs-string\">&quot;.txt&quot;</span>);<br>\t\t<span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">fos1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(f);<br>\t\t<span class=\"hljs-type\">OutputStreamWriter</span> <span class=\"hljs-variable\">dos1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OutputStreamWriter</span>(fos1);<br>\t\tdos1.write(value);<br>\t\tdos1.close();<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"主入口\"><a href=\"#主入口\" class=\"headerlink\" title=\"主入口\"></a>主入口</h2><p>通过控制台输入Excel路径，会在jar包同级目录下生成包含建表SQL的TXT文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MainApplication</span> &#123;<br>\t<span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>\t\t<span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) &#123;<br>\t\t\t<span class=\"hljs-type\">Excel</span> <span class=\"hljs-variable\">excel</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Excel</span>();<br>\t\t\t<span class=\"hljs-type\">Scanner</span> <span class=\"hljs-variable\">scanner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Scanner</span>(System.in);<br>\t\t\tSystem.err.println(<span class=\"hljs-string\">&quot;请输入Excel的路径：&quot;</span>);<br>\t\t\t<span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">excelPath</span> <span class=\"hljs-operator\">=</span> scanner.nextLine();<br>\t\t\t<span class=\"hljs-type\">TableEntity</span> <span class=\"hljs-variable\">tEntity</span> <span class=\"hljs-operator\">=</span> excel.readExcel(excelPath);<br>\t\t\t<span class=\"hljs-keyword\">if</span>(tEntity==<span class=\"hljs-literal\">null</span>) &#123;<br>\t\t\t\t<span class=\"hljs-keyword\">continue</span>;<br>\t\t\t&#125;<br>\t\t\texcel.convertSQL(tEntity);<br>\t\t&#125;<br>\t&#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>基本上就是解析EXCEL，然后根据数据类型拼接SQL语句。</p>\n<p>目前支持情况：</p>\n<ul>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> VARCHAR</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> INT</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> LONG</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> DATE</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> DATETIME</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> TIMESTAMP</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> TEXT</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> LONGTEXT</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> CHAR</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 是否为空</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> 单主键</li>\n<li><input checked=\"\" disabled=\"\" type=\"checkbox\"> BIGINT</li>\n<li><input disabled=\"\" type=\"checkbox\"> FLOAT</li>\n<li><input disabled=\"\" type=\"checkbox\"> DOUBLE</li>\n<li><input disabled=\"\" type=\"checkbox\"> DECIMAL</li>\n<li><input disabled=\"\" type=\"checkbox\"> 联合主键</li>\n<li><input disabled=\"\" type=\"checkbox\"> 自定义字符集编码</li>\n</ul>\n<blockquote>\n<p>较原文没啥改动，只是增加了部分字段，处理了部分默认值问题。</p>\n</blockquote>\n",
            "tags": [
                "POI"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(2)/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(2)/",
            "title": "EasyExcel保姆级教程(2)",
            "date_published": "2024-01-03T13:13:21.645Z",
            "content_html": "<blockquote>\n<p>上文详细介绍了<code>easyExcel</code>的优点以及相关的读操作，通过这些案例你会发现，阿里巴巴的<code>easyExcel</code>真的对POI做了大量的封装和优化，同时让我们开发者使用也变得那么的so easy，那么今天博猪就紧着介绍一下<code>easyExcel</code>相关的写操作，看完这些案例就会发现Excel的处理也不是那么头疼了。</p>\n</blockquote>\n<h1 id=\"Excel操作-写\"><a href=\"#Excel操作-写\" class=\"headerlink\" title=\"Excel操作-写\"></a>Excel操作-写</h1><h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><blockquote>\n<p>创建导出数据，我们默认用一个私有方法代替。</p>\n<p>生成文件为了方便查看，博猪统一放在<code>C:\\Users\\$&#123;userName&#125;</code>目录下；</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 生成模拟数据</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> createNum   创建数量</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">private</span> List&lt;SimpleWriteEntity&gt; <span class=\"hljs-title function_\">createData</span><span class=\"hljs-params\">(<span class=\"hljs-type\">int</span> createNum)</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>    <span class=\"hljs-type\">Random</span> <span class=\"hljs-variable\">random</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Random</span>();<br>    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; createNum; i++) &#123;<br>        <span class=\"hljs-type\">SimpleWriteEntity</span> <span class=\"hljs-variable\">entity</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleWriteEntity</span>();<br>        entity.setTitle(<span class=\"hljs-string\">&quot;标题&quot;</span> + i);<br>        entity.setDateTitle(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>());<br>        entity.setNumberTitle(random.nextDouble());<br>        list.add(entity);<br>    &#125;<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"简单写\"><a href=\"#简单写\" class=\"headerlink\" title=\"简单写\"></a>简单写</h2><h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleWriteEntity</span> &#123;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 忽略这个字段</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelIgnore</span><br>    <span class=\"hljs-keyword\">private</span> String ignoreFiled;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 最简单的写</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSimpleWrite</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; data = createData(<span class=\"hljs-number\">10</span>);<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;simpleWrite&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 写法1：</span><br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    <span class=\"hljs-comment\">// 如果这里想使用03 则 传入excelType参数即可</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(data);<br><br>    <span class=\"hljs-comment\">//写法2</span><br>    <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">excelWriter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.writerSheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).build();<br>        excelWriter.write(data, writeSheet);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class=\"hljs-keyword\">if</span> (excelWriter != <span class=\"hljs-literal\">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"根据参数只导出指定列\"><a href=\"#根据参数只导出指定列\" class=\"headerlink\" title=\"根据参数只导出指定列\"></a>根据参数只导出指定列</h2><h3 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 根据参数只导出指定列</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 根据自己或者排除自己需要的列</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接写即可</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2.1.1</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteByParams</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;SimpleWriteEntity&gt; data = createData(<span class=\"hljs-number\">10</span>);<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;writeByParams&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br><br>    <span class=\"hljs-comment\">// 根据用户传入字段 假设我们要忽略 date</span><br>    Set&lt;String&gt; excludeColumnFiledNames = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;String&gt;();<br>    excludeColumnFiledNames.add(<span class=\"hljs-string\">&quot;dateTitle&quot;</span>);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).excludeColumnFiledNames(excludeColumnFiledNames).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>)<br>            .doWrite(data);<br><br>    <span class=\"hljs-comment\">// 根据用户传入字段 假设我们只要导出 date</span><br>    Set&lt;String&gt; includeColumnFiledNames = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashSet</span>&lt;String&gt;();<br>    includeColumnFiledNames.add(<span class=\"hljs-string\">&quot;dateTitle&quot;</span>);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).includeColumnFiledNames(includeColumnFiledNames).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>)<br>            .doWrite(data);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"指定写入的列\"><a href=\"#指定写入的列\" class=\"headerlink\" title=\"指定写入的列\"></a>指定写入的列</h2><h3 id=\"对象-1\"><a href=\"#对象-1\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">WriteByAnnotationEntity</span> &#123;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;字符串标题&quot;, index = 0)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;日期标题&quot;, index = 1)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 这里设置3 会导致第二列空的</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;数字标题&quot;, index = 3)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-2\"><a href=\"#测试代码-2\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 指定写入的列</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> WriteByAnnotationEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;注解指定写入的列</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteByAnnotation</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteByAnnotation&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, WriteByAnnotationEntity.class).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"复杂头写入\"><a href=\"#复杂头写入\" class=\"headerlink\" title=\"复杂头写入\"></a>复杂头写入</h2><h3 id=\"对象-2\"><a href=\"#对象-2\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ComplexHeadEntity</span> &#123;<br>    <span class=\"hljs-meta\">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;字符串标题&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;日期标题&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-meta\">@ExcelProperty(&#123;&quot;主标题&quot;, &quot;数字标题&quot;&#125;)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-3\"><a href=\"#测试代码-3\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 复杂头写入</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> ComplexHeadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteComplexHead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteComplexHead&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    EasyExcel.write(file, ComplexHeadEntity.class).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"同一个对象数据写到同一个Sheet\"><a href=\"#同一个对象数据写到同一个Sheet\" class=\"headerlink\" title=\"同一个对象数据写到同一个Sheet\"></a>同一个对象数据写到同一个Sheet</h2><h3 id=\"测试代码-4\"><a href=\"#测试代码-4\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 重复多次写入-写到同一个sheet</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接调用二次写入即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span>  <span class=\"hljs-title function_\">testWriteManyDataToOneSheet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteManyDataToOneSheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">excelWriter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写</span><br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class=\"hljs-comment\">// 这里注意 如果同一个sheet只要创建一次</span><br>        <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.writerSheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).build();<br>        <span class=\"hljs-comment\">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>            <span class=\"hljs-comment\">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class=\"hljs-number\">10</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class=\"hljs-keyword\">if</span> (excelWriter != <span class=\"hljs-literal\">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"同一个对象数据写到不同sheet\"><a href=\"#同一个对象数据写到不同sheet\" class=\"headerlink\" title=\"同一个对象数据写到不同sheet\"></a>同一个对象数据写到不同sheet</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 重复多次写入-写到不同的sheet 同一个对象</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接调用二次写入即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteManyDataToManySheet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteManyDataToManySheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">excelWriter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 这里 指定文件</span><br>        excelWriter = EasyExcel.write(file, SimpleWriteEntity.class).build();<br>        <span class=\"hljs-comment\">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来。这里最终会写到5个sheet里面</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>            <span class=\"hljs-comment\">// 每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样</span><br>            <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.writerSheet(i, <span class=\"hljs-string\">&quot;模板&quot;</span> + i).build();<br>            <span class=\"hljs-comment\">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class=\"hljs-number\">10</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class=\"hljs-keyword\">if</span> (excelWriter != <span class=\"hljs-literal\">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"不同对象写到不同sheet中\"><a href=\"#不同对象写到不同sheet中\" class=\"headerlink\" title=\"不同对象写到不同sheet中\"></a>不同对象写到不同sheet中</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 重复多次写入-写到不同的sheet 不同的对象</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;注解指定复杂的头</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接调用二次写入即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteManyDataAndManySheet</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteManyDataAndManySheet&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-type\">ExcelWriter</span> <span class=\"hljs-variable\">excelWriter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 这里 指定文件</span><br>        excelWriter = EasyExcel.write(file).build();<br>        <span class=\"hljs-comment\">// 去调用写入,这里我调用了五次，实际使用时根据数据库分页的总的页数来。这里最终会写到5个sheet里面</span><br>        <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-number\">5</span>; i++) &#123;<br>            <span class=\"hljs-comment\">/**每次都要创建writeSheet 这里注意必须指定sheetNo 而且sheetName必须不一样。</span><br><span class=\"hljs-comment\">             * 这里注意&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;.class 可以每次都变，我这里为了方便 所以用的同一个class 实际上可以一直变</span><br><span class=\"hljs-comment\">              */</span><br>            <span class=\"hljs-type\">WriteSheet</span> <span class=\"hljs-variable\">writeSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.writerSheet(i, <span class=\"hljs-string\">&quot;模板&quot;</span> + i).head(SimpleWriteEntity.class).build();<br>            <span class=\"hljs-comment\">// 分页去数据库查询数据 这里可以去数据库查询每一页的数据</span><br>            List&lt;SimpleWriteEntity&gt; data = createData(<span class=\"hljs-number\">5</span>);<br>            excelWriter.write(data, writeSheet);<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-comment\">// 千万别忘记finish 会帮忙关闭流</span><br>        <span class=\"hljs-keyword\">if</span> (excelWriter != <span class=\"hljs-literal\">null</span>) &#123;<br>            excelWriter.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"日期、数字或者自定义格式转换\"><a href=\"#日期、数字或者自定义格式转换\" class=\"headerlink\" title=\"日期、数字或者自定义格式转换\"></a>日期、数字或者自定义格式转换</h2><h3 id=\"对象-3\"><a href=\"#对象-3\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CoverDataWriteEntity</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 我想所有的 字符串起前面加上&quot;自定义：&quot;三个字</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(value = &quot;字符串标题&quot;, converter = CustomStringConverter.class)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 我想写到excel 用年月日的格式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 我想写到excel 用百分比表示</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@NumberFormat(&quot;#.##%&quot;)</span><br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-5\"><a href=\"#测试代码-5\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 日期、数字或者自定义格式转换</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> CoverDataWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 使用&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty&#125;配合使用注解&#123;<span class=\"hljs-doctag\">@link</span> DateTimeFormat&#125;、&#123;<span class=\"hljs-doctag\">@link</span> NumberFormat&#125;或者自定义注解</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteWithCovertData</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteWithCovertData&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, CoverDataWriteEntity.class).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(createData(<span class=\"hljs-number\">10</span>));<br><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"图片导出\"><a href=\"#图片导出\" class=\"headerlink\" title=\"图片导出\"></a>图片导出</h2><h3 id=\"对象-4\"><a href=\"#对象-4\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@ContentRowHeight(100)</span><br><span class=\"hljs-meta\">@ColumnWidth(100 / 8)</span><br><span class=\"hljs-meta\">@Data</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ImageWriteEntity</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> File file;<br>    <span class=\"hljs-keyword\">private</span> InputStream inputStream;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 如果string类型 必须指定转换器，string默认转换成string</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(converter = StringImageConverter.class)</span><br>    <span class=\"hljs-keyword\">private</span> String string;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-type\">byte</span>[] byteArray;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 根据url导出</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@since</span> 2.1.1</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> URL url;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-6\"><a href=\"#测试代码-6\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 图片导出</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> ImageWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteImage</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteImage&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 如果使用流 记得关闭</span><br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        List&lt;ImageWriteEntity&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;ImageWriteEntity&gt;();<br>        <span class=\"hljs-type\">ImageWriteEntity</span> <span class=\"hljs-variable\">imageData</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ImageWriteEntity</span>();<br>        list.add(imageData);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">imagePath</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + <span class=\"hljs-string\">&quot;image&quot;</span> + File.separator + <span class=\"hljs-string\">&quot;img.jpg&quot;</span>;<br>        <span class=\"hljs-comment\">// 放入五种类型的图片 实际使用只要选一种即可</span><br>        imageData.setByteArray(FileUtils.readFileToByteArray(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(imagePath)));<br>        imageData.setFile(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(imagePath));<br>        imageData.setString(imagePath);<br>        inputStream = FileUtils.openInputStream(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(imagePath));<br>        imageData.setInputStream(inputStream);<br>        imageData.setUrl(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URL</span>(<br>                <span class=\"hljs-string\">&quot;https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fc-ssl.duitang.com%2Fuploads%2Fitem%2F201610%2F05%2F20161005195151_rzGhS.thumb.400_0.jpeg&amp;refer=http%3A%2F%2Fc-ssl.duitang.com&amp;app=2002&amp;size=f9999,10000&amp;q=a80&amp;n=0&amp;g=0n&amp;fmt=jpeg?sec=1625563170&amp;t=8d28f9633784ab21a52583629fcbac53&quot;</span>));<br>        EasyExcel.write(file, ImageWriteEntity.class).sheet().doWrite(list);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        e.printStackTrace();<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (inputStream != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-keyword\">try</span> &#123;<br>                inputStream.close();<br>            &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"注解自定义样式\"><a href=\"#注解自定义样式\" class=\"headerlink\" title=\"注解自定义样式\"></a>注解自定义样式</h2><h3 id=\"对象-5\"><a href=\"#对象-5\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-comment\">// 头背景设置成红色 IndexedColors.RED.getIndex()</span><br><span class=\"hljs-meta\">@HeadStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 10)</span><br><span class=\"hljs-comment\">// 头字体设置成20</span><br><span class=\"hljs-meta\">@HeadFontStyle(fontHeightInPoints = 20)</span><br><span class=\"hljs-comment\">// 内容的背景设置成绿色 IndexedColors.GREEN.getIndex()</span><br><span class=\"hljs-meta\">@ContentStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 17)</span><br><span class=\"hljs-comment\">// 内容字体设置成20</span><br><span class=\"hljs-meta\">@ContentFontStyle(fontHeightInPoints = 20)</span><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> SimpleWriteEntity</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> Excel简单写实体类,通过注解写入样式</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2021/5/29 21:58</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleWriteWithStyleByAnnotationEntity</span> &#123;<br><br>    <span class=\"hljs-comment\">// 字符串的头背景设置成粉红 IndexedColors.PINK.getIndex()</span><br>    <span class=\"hljs-meta\">@HeadStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 14)</span><br>    <span class=\"hljs-comment\">// 字符串的头字体设置成20</span><br>    <span class=\"hljs-meta\">@HeadFontStyle(fontHeightInPoints = 30)</span><br>    <span class=\"hljs-comment\">// 字符串的内容的背景设置成天蓝 IndexedColors.SKY_BLUE.getIndex()</span><br>    <span class=\"hljs-meta\">@ContentStyle(fillPatternType = FillPatternType.SOLID_FOREGROUND, fillForegroundColor = 40)</span><br>    <span class=\"hljs-comment\">// 字符串的内容字体设置成20</span><br>    <span class=\"hljs-meta\">@ContentFontStyle(fontHeightInPoints = 30)</span><br><br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;数字标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 忽略这个字段</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelIgnore</span><br>    <span class=\"hljs-keyword\">private</span> String ignoreFiled;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-7\"><a href=\"#测试代码-7\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 注解形式自定义样式</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteWithStyleByAnnotationEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接写即可</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@since</span> 2.2.0-beta1</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteWithStyleByAnnotation</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteWithStyleByAnnotation&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteWithStyleByAnnotationEntity.class).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义样式\"><a href=\"#自定义样式\" class=\"headerlink\" title=\"自定义样式\"></a>自定义样式</h2><h3 id=\"测试代码-8\"><a href=\"#测试代码-8\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 自定义样式</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 创建一个style策略 并注册</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteWithStyleByCustom</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteWithStyleByCustom&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 头的策略</span><br>    <span class=\"hljs-type\">WriteCellStyle</span> <span class=\"hljs-variable\">headWriteCellStyle</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteCellStyle</span>();<br>    <span class=\"hljs-comment\">// 背景设置为红色</span><br>    headWriteCellStyle.setFillForegroundColor(IndexedColors.RED.getIndex());<br>    <span class=\"hljs-type\">WriteFont</span> <span class=\"hljs-variable\">headWriteFont</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteFont</span>();<br>    headWriteFont.setFontHeightInPoints((<span class=\"hljs-type\">short</span>)<span class=\"hljs-number\">20</span>);<br>    headWriteCellStyle.setWriteFont(headWriteFont);<br>    <span class=\"hljs-comment\">// 内容的策略</span><br>    <span class=\"hljs-type\">WriteCellStyle</span> <span class=\"hljs-variable\">contentWriteCellStyle</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteCellStyle</span>();<br>    <span class=\"hljs-comment\">// 这里需要指定 FillPatternType 为FillPatternType.SOLID_FOREGROUND 不然无法显示背景颜色.头默认了 FillPatternType所以可以不指定</span><br>    contentWriteCellStyle.setFillPatternType(FillPatternType.SOLID_FOREGROUND);<br>    <span class=\"hljs-comment\">// 背景绿色</span><br>    contentWriteCellStyle.setFillForegroundColor(IndexedColors.GREEN.getIndex());<br>    <span class=\"hljs-type\">WriteFont</span> <span class=\"hljs-variable\">contentWriteFont</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WriteFont</span>();<br>    <span class=\"hljs-comment\">// 字体大小</span><br>    contentWriteFont.setFontHeightInPoints((<span class=\"hljs-type\">short</span>)<span class=\"hljs-number\">20</span>);<br>    contentWriteCellStyle.setWriteFont(contentWriteFont);<br>    <span class=\"hljs-comment\">// 这个策略是 头是头的样式 内容是内容的样式 其他的策略可以自己实现</span><br>    <span class=\"hljs-type\">HorizontalCellStyleStrategy</span> <span class=\"hljs-variable\">horizontalCellStyleStrategy</span> <span class=\"hljs-operator\">=</span><br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HorizontalCellStyleStrategy</span>(headWriteCellStyle, contentWriteCellStyle);<br><br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).registerWriteHandler(horizontalCellStyleStrategy).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>)<br>            .doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"动态头，实时生成头写入\"><a href=\"#动态头，实时生成头写入\" class=\"headerlink\" title=\"动态头，实时生成头写入\"></a>动态头，实时生成头写入</h2><h3 id=\"创建头数据\"><a href=\"#创建头数据\" class=\"headerlink\" title=\"创建头数据\"></a>创建头数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> List&lt;List&lt;String&gt;&gt; <span class=\"hljs-title function_\">head</span><span class=\"hljs-params\">()</span> &#123;<br>    List&lt;List&lt;String&gt;&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;List&lt;String&gt;&gt;();<br>    List&lt;String&gt; head0 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>    head0.add(<span class=\"hljs-string\">&quot;字符串&quot;</span> + System.currentTimeMillis());<br>    List&lt;String&gt; head1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>    head1.add(<span class=\"hljs-string\">&quot;数字&quot;</span> + System.currentTimeMillis());<br>    List&lt;String&gt; head2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>    head2.add(<span class=\"hljs-string\">&quot;日期&quot;</span> + System.currentTimeMillis());<br>    list.add(head0);<br>    list.add(head1);<br>    list.add(head2);<br>    <span class=\"hljs-keyword\">return</span> list;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-9\"><a href=\"#测试代码-9\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 动态头，实时生成头写入</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 思路是这样子的，先创建List&lt;String&gt;头格式的sheet仅仅写入头,然后通过table 不写入头的方式 去写入数据</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 然后写入table即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteByDynamicHead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteByDynamicHead&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    EasyExcel.write(file)<br>            <span class=\"hljs-comment\">// 这里放入动态头</span><br>            .head(head()).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>)<br>            <span class=\"hljs-comment\">// 当然这里数据也可以用 List&lt;List&lt;String&gt;&gt; 去传入</span><br>            .doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"自定义拦截器\"><a href=\"#自定义拦截器\" class=\"headerlink\" title=\"自定义拦截器\"></a>自定义拦截器</h2><h3 id=\"创建Excel表拦截器\"><a href=\"#创建Excel表拦截器\" class=\"headerlink\" title=\"创建Excel表拦截器\"></a>创建Excel表拦截器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> CustomCellWriteHandler</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span> 自定义拦截器。对第一行第一列的头超链接到:https://github.com/alibaba/easyexcel</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2021/6/6 17:40</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomCellWriteHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">CellWriteHandler</span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(CustomCellWriteHandler.class);<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeCellCreate</span><span class=\"hljs-params\">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Row row, Head head</span><br><span class=\"hljs-params\">            , Integer integer, Integer integer1, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCellCreate</span><span class=\"hljs-params\">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, Cell cell</span><br><span class=\"hljs-params\">            , Head head, Integer integer, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCellDataConverted</span><span class=\"hljs-params\">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, CellData cellData</span><br><span class=\"hljs-params\">            , Cell cell, Head head, Integer integer, Boolean aBoolean)</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterCellDispose</span><span class=\"hljs-params\">(WriteSheetHolder writeSheetHolder, WriteTableHolder writeTableHolder, List&lt;CellData&gt; list</span><br><span class=\"hljs-params\">            , Cell cell, Head head, Integer integer, Boolean isHead)</span> &#123;<br>        <span class=\"hljs-comment\">// 这里可以对cell进行任何操作</span><br>        LOGGER.info(<span class=\"hljs-string\">&quot;第&#123;&#125;行，第&#123;&#125;列写入完成。&quot;</span>, cell.getRowIndex(), cell.getColumnIndex());<br>        <span class=\"hljs-keyword\">if</span> (isHead &amp;&amp; cell.getColumnIndex() == <span class=\"hljs-number\">0</span>) &#123;<br>            <span class=\"hljs-type\">CreationHelper</span> <span class=\"hljs-variable\">createHelper</span> <span class=\"hljs-operator\">=</span> writeSheetHolder.getSheet().getWorkbook().getCreationHelper();<br>            <span class=\"hljs-type\">Hyperlink</span> <span class=\"hljs-variable\">hyperlink</span> <span class=\"hljs-operator\">=</span> createHelper.createHyperlink(HyperlinkType.URL);<br>            hyperlink.setAddress(<span class=\"hljs-string\">&quot;https://github.com/alibaba/easyexcel&quot;</span>);<br>            cell.setHyperlink(hyperlink);<br>    &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"创建ExcelSheet拦截器\"><a href=\"#创建ExcelSheet拦截器\" class=\"headerlink\" title=\"创建ExcelSheet拦截器\"></a>创建Excel<code>Sheet</code>拦截器</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@ClassName</span> CustomSheetWriteHandler</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>  自定义拦截器.对第一列第一行和第二行的数据新增下拉框，显示 测试1 测试2</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Author</span> will</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span> 2021/6/6 17:44</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomSheetWriteHandler</span> <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">SheetWriteHandler</span>&#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(CustomSheetWriteHandler.class);<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">beforeSheetCreate</span><span class=\"hljs-params\">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;<br><br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">afterSheetCreate</span><span class=\"hljs-params\">(WriteWorkbookHolder writeWorkbookHolder, WriteSheetHolder writeSheetHolder)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;第&#123;&#125;个Sheet写入成功。&quot;</span>, writeSheetHolder.getSheetNo());<br>        <span class=\"hljs-comment\">// 区间设置 第一列第一行和第二行的数据。由于第一行是头，所以第一、二行的数据实际上是第二三行</span><br>        <span class=\"hljs-type\">CellRangeAddressList</span> <span class=\"hljs-variable\">cellRangeAddressList</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CellRangeAddressList</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>);<br>        <span class=\"hljs-type\">DataValidationHelper</span> <span class=\"hljs-variable\">helper</span> <span class=\"hljs-operator\">=</span> writeSheetHolder.getSheet().getDataValidationHelper();<br>        <span class=\"hljs-type\">DataValidationConstraint</span> <span class=\"hljs-variable\">constraint</span> <span class=\"hljs-operator\">=</span> helper.createExplicitListConstraint(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[] &#123;<span class=\"hljs-string\">&quot;测试1&quot;</span>, <span class=\"hljs-string\">&quot;测试2&quot;</span>&#125;);<br>        <span class=\"hljs-type\">DataValidation</span> <span class=\"hljs-variable\">dataValidation</span> <span class=\"hljs-operator\">=</span> helper.createValidation(constraint, cellRangeAddressList);<br>        writeSheetHolder.getSheet().addValidationData(dataValidation);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试代码-10\"><a href=\"#测试代码-10\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 下拉，超链接等自定义拦截器（上面几点都不符合但是要对单元格进行操作的参照这个）</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * demo这里实现2点。</span><br><span class=\"hljs-comment\"> * 1. 对第一行第一列的头超链接到:https://github.com/alibaba/easyexcel</span><br><span class=\"hljs-comment\"> * 2. 对第一列第一行和第二行的数据新增下拉框，显示 测试1 测试2</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleWriteEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 注册拦截器 &#123;<span class=\"hljs-doctag\">@link</span> CustomCellWriteHandler&#125; &#123;<span class=\"hljs-doctag\">@link</span> CustomSheetWriteHandler&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 直接写即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testWriteByCustomHandler</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> FileUtil.readUserHomeFile(<span class=\"hljs-string\">&quot;WriteByCustomHandler&quot;</span> + System.currentTimeMillis() + SUFFIX_EXCEL_FILE_TYPE);<br>    <span class=\"hljs-comment\">// 这里 需要指定写用哪个class去写，然后写到第一个sheet，名字为模板 然后文件流会自动关闭</span><br>    EasyExcel.write(file, SimpleWriteEntity.class).registerWriteHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomSheetWriteHandler</span>())<br>            .registerWriteHandler(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomCellWriteHandler</span>()).sheet(<span class=\"hljs-string\">&quot;模板&quot;</span>).doWrite(createData(<span class=\"hljs-number\">10</span>));<br>&#125;<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "POI",
                "EasyExcel"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(1)/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/POI/EasyExcel%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B(1)/",
            "title": "EasyExcel保姆级教程(1)",
            "date_published": "2024-01-03T13:13:21.644Z",
            "content_html": "<h1 id=\"EasyExcel保姆级教程-1\"><a href=\"#EasyExcel保姆级教程-1\" class=\"headerlink\" title=\"EasyExcel保姆级教程(1)\"></a>EasyExcel保姆级教程(1)</h1><blockquote>\n<p>由于博猪所在行业使用到关于Excel导入、导出的功能比较多，本文主要详细介绍一下博猪使用的阿里巴巴的<code>easyExcel</code>，让Excel相关操作没那么多烦恼。</p>\n</blockquote>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><h2 id=\"Excel的缺点\"><a href=\"#Excel的缺点\" class=\"headerlink\" title=\"Excel的缺点\"></a>Excel的缺点</h2><blockquote>\n<p>Java解析、生成Excel比较有名的框架有Apache poi、jxl。但他们都存在一个严重的问题就是非常的耗内存，poi有一套SAX模式的API可以一定程度的解决一些内存溢出的问题，但POI还是有一些缺陷，比如07版Excel解压缩以及解压后存储都是在内存中完成的，内存消耗依然很大。easyexcel重写了poi对07版Excel的解析，能够原本一个3M的excel用POI sax依然需要100M左右内存降低到KB级别，并且再大的excel不会出现内存溢出，03版依赖POI的sax模式。在上层做了模型转换的封装，让使用者更加简单方便</p>\n</blockquote>\n<ul>\n<li><strong>Excel读写时候内存溢出</strong></li>\n</ul>\n<blockquote>\n<p>虽然POI是目前使用最多的用来做excel解析的框架，但这个框架并不那么完美。大部分使用POI都是使用他的userModel模式。userModel的好处是上手容易使用简单，随便拷贝个代码跑一下，剩下就是写业务转换了，虽然转换也要写上百行代码，相对比较好理解。然而userModel模式最大的问题是在于非常大的内存消耗，一个几兆的文件解析要用掉上百兆的内存。现在很多应用采用这种模式，之所以还正常在跑一定是并发不大，并发上来后一定会OOM或者频繁的full gc</p>\n</blockquote>\n<ul>\n<li><strong>其他开源框架使用复杂</strong></li>\n</ul>\n<blockquote>\n<p>对POI有过深入了解的估计才知道原来POI还有SAX模式。但SAX模式相对比较复杂，excel有03和07两种版本，两个版本数据存储方式截然不同，sax解析方式也各不一样。想要了解清楚这两种解析方式，才去写代码测试，估计两天时间是需要的。再加上即使解析完，要转换到自己业务模型还要很多繁琐的代码。总体下来感觉至少需要三天，由于代码复杂，后续维护成本巨大。</p>\n</blockquote>\n<ul>\n<li><strong>其他开源框架存在一些BUG修复不及时</strong></li>\n</ul>\n<h2 id=\"EasyExcel简介\"><a href=\"#EasyExcel简介\" class=\"headerlink\" title=\"EasyExcel简介\"></a>EasyExcel简介</h2><p>EasyExcel是一个基于Java的简单、省内存的读写Excel的开源项目。在尽可能节约内存的情况下支持读写百M的Excel。</p>\n<blockquote>\n<p>阿里巴巴GitHub地址：<a href=\"https://github.com/alibaba/easyexcel\">Github</a></p>\n</blockquote>\n<h1 id=\"EasyExcelDemo\"><a href=\"#EasyExcelDemo\" class=\"headerlink\" title=\"EasyExcelDemo\"></a>EasyExcelDemo</h1><h2 id=\"项目准备\"><a href=\"#项目准备\" class=\"headerlink\" title=\"项目准备\"></a>项目准备</h2><ul>\n<li>创建空的Maven项目</li>\n<li>添加Maven依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs xml\"><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/easyexcel --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>easyexcel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>2.2.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!--lombok插件 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>org.projectlombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>lombok<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.18.6<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">optional</span>&gt;</span>true<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">optional</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- junit测试 --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>junit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>4.12<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">scope</span>&gt;</span>compile<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">scope</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br><span class=\"hljs-comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span><br><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">dependency</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">groupId</span>&gt;</span>com.alibaba<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">groupId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">artifactId</span>&gt;</span>fastjson<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">artifactId</span>&gt;</span><br>    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">version</span>&gt;</span>1.2.75<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">version</span>&gt;</span><br><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>新建<code>util</code>包，创建<code>FileUtil</code>工具类</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FileUtil</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 读取文件成输入流</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> fileName   文件名称</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> InputStream <span class=\"hljs-title function_\">getResourcesFileInputStream</span><span class=\"hljs-params\">(String fileName)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class=\"hljs-string\">&quot;&quot;</span> + fileName);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取文件资源根路径，resource</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> String <span class=\"hljs-title function_\">getPath</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> FileUtil.class.getResource(<span class=\"hljs-string\">&quot;/&quot;</span>).getPath();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建resource下文件</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> pathName   路径名称</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> File <span class=\"hljs-title function_\">createNewFile</span><span class=\"hljs-params\">(String pathName)</span> &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(getPath() + pathName);<br>        <span class=\"hljs-keyword\">if</span> (file.exists()) &#123;<br>            file.delete();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">if</span> (!file.getParentFile().exists()) &#123;<br>                file.getParentFile().mkdirs();<br>            &#125;<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> file;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 读取文件</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> pathName    全路径文件名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> File <span class=\"hljs-title function_\">readFile</span><span class=\"hljs-params\">(String pathName)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(getPath() + pathName);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 读取用户目录下面的文件</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> pathName    全路径文件名</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> File <span class=\"hljs-title function_\">readUserHomeFile</span><span class=\"hljs-params\">(String pathName)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(System.getProperty(<span class=\"hljs-string\">&quot;user.home&quot;</span>) + File.separator + pathName);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Excel操作-读\"><a href=\"#Excel操作-读\" class=\"headerlink\" title=\"Excel操作-读\"></a>Excel操作-读</h2><blockquote>\n<p>测试类相关常量如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">SUFFIX_EXCEL_FILE_TYPE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;.xlsx&quot;</span>;<br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">READ_ROOT_RESOURCE</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;read&quot;</span>;<br></code></pre></td></tr></table></figure>\n</blockquote>\n<h3 id=\"最简单的读\"><a href=\"#最简单的读\" class=\"headerlink\" title=\"最简单的读\"></a>最简单的读</h3><h4 id=\"excel示例\"><a href=\"#excel示例\" class=\"headerlink\" title=\"excel示例\"></a>excel示例</h4><p><img src=\"https://cdn.nlark.com/yuque/0/2020/png/553000/1584450793123-1fe49477-0609-4fd8-8ef8-0b907141486f.png#align=left&display=inline&height=229&originHeight=229&originWidth=332&size=0&status=done&style=none&width=332\" alt=\"image\"></p>\n<h4 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnnotationReadEntity</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数字标题</span><br><span class=\"hljs-comment\">     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(index = 2)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"监听器\"><a href=\"#监听器\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleReadListener</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AnalysisEventListener</span>&lt;SimpleReadEntity&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(SimpleReadListener.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">BATCH_COUNT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    List&lt;SimpleReadEntity&gt; saveList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;SimpleReadEntity&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> EntityDao entityDao;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SimpleReadListener</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class=\"hljs-built_in\">this</span>.entityDao = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EntityDao</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> demoDAO</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">SimpleReadListener</span><span class=\"hljs-params\">(EntityDao demoDAO)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 这个每一条数据解析都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> simpleReadEntity</span><br><span class=\"hljs-comment\">     *            one row value. Is is same as &#123;<span class=\"hljs-doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(SimpleReadEntity simpleReadEntity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSONObject.toJSONString(simpleReadEntity));<br>        saveList.add(simpleReadEntity);<br>        <span class=\"hljs-comment\">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class=\"hljs-keyword\">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class=\"hljs-comment\">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 所有数据解析完成了 都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAfterAllAnalysed</span><span class=\"hljs-params\">(AnalysisContext analysisContext)</span> &#123;<br>       <span class=\"hljs-comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class=\"hljs-string\">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 批量保存方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">batchSave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class=\"hljs-string\">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"持久层\"><a href=\"#持久层\" class=\"headerlink\" title=\"持久层\"></a>持久层</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">EntityDao</span>&lt;T&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(EntityDao.class);<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">batchSave</span><span class=\"hljs-params\">(List&lt;T&gt; list)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;EntityDao.batchSave:&#123;&#125;&quot;</span> + JSONObject.toJSONString(list));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码\"><a href=\"#测试代码\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 最简单的读</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接读即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSimpleRead1</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-comment\">// 有个很重要的点 DemoDataListener 不能被spring管理，要每次读取excel都要new,然后里面用到spring可以构造方法传进去</span><br>    <span class=\"hljs-comment\">// 写法1：</span><br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 文件流会自动关闭</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 简单度方式2</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSimpleRead2</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-type\">ExcelReader</span> <span class=\"hljs-variable\">excelReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName, SimpleReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).build();<br>        <span class=\"hljs-type\">ReadSheet</span> <span class=\"hljs-variable\">readSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.readSheet(<span class=\"hljs-number\">0</span>).build();<br>        excelReader.read(readSheet);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (excelReader != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"根据注解读取\"><a href=\"#根据注解读取\" class=\"headerlink\" title=\"根据注解读取\"></a>根据注解读取</h3><h4 id=\"excel示例-1\"><a href=\"#excel示例-1\" class=\"headerlink\" title=\"excel示例\"></a>excel示例</h4><blockquote>\n<p>参照：<a href=\"#e3mb9\">excel示例</a></p>\n</blockquote>\n<h4 id=\"对象-1\"><a href=\"#对象-1\" class=\"headerlink\" title=\"对象\"></a>对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnnotationReadEntity</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 用名字去匹配，这里需要注意，如果名字重复，会导致只有一个字段读取到数据</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;字符串标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-meta\">@ExcelProperty(&quot;日期标题&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Date dateTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 数字标题</span><br><span class=\"hljs-comment\">     * 强制读取第三个 这里不建议 index 和 name 同时用，要么一个对象只用index，要么一个对象只用name去匹配</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(index = 2)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"监听器-1\"><a href=\"#监听器-1\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">AnnotationReadListener</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AnalysisEventListener</span>&lt;AnnotationReadEntity&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(AnnotationReadListener.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">BATCH_COUNT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    List&lt;AnnotationReadEntity&gt; saveList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;AnnotationReadEntity&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> EntityDao entityDao;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AnnotationReadListener</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class=\"hljs-built_in\">this</span>.entityDao = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EntityDao</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> demoDAO</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">AnnotationReadListener</span><span class=\"hljs-params\">(EntityDao demoDAO)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 这个每一条数据解析都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> entity</span><br><span class=\"hljs-comment\">     *            one row value. Is is same as &#123;<span class=\"hljs-doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(AnnotationReadEntity entity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;解析到一条数据:&quot;</span>, entity);<br>        saveList.add(entity);<br>        <span class=\"hljs-comment\">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class=\"hljs-keyword\">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class=\"hljs-comment\">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 所有数据解析完成了 都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAfterAllAnalysed</span><span class=\"hljs-params\">(AnalysisContext analysisContext)</span> &#123;<br>       <span class=\"hljs-comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class=\"hljs-string\">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 批量保存方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">batchSave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class=\"hljs-string\">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码-1\"><a href=\"#测试代码-1\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 注解读取,与标题不匹配的名称可忽略</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testAnnotationRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;annotationRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-type\">ExcelReader</span> <span class=\"hljs-variable\">excelReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName, AnnotationReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AnnotationReadListener</span>()).build();<br>        <span class=\"hljs-type\">ReadSheet</span> <span class=\"hljs-variable\">readSheet</span> <span class=\"hljs-operator\">=</span> EasyExcel.readSheet(<span class=\"hljs-number\">0</span>).build();<br>        excelReader.read(readSheet);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (excelReader != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"读多个sheet\"><a href=\"#读多个sheet\" class=\"headerlink\" title=\"读多个sheet\"></a>读多个sheet</h3><h4 id=\"测试代码-2\"><a href=\"#测试代码-2\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 读多个或者全部sheet,这里注意一个sheet不能读取多次，多次读取需要重新读取文件</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接读即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testRepeatedRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 读取全部sheet</span><br>    <span class=\"hljs-comment\">// 这里需要注意 SimpleReadListener 的 doAfterAllAnalysed 会在每个sheet读取完毕后调用一次。然后所有sheet都会往同一个 SimpleReadListener 里面写</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).doReadAll();<br><br>    <span class=\"hljs-comment\">// 读取部分sheet</span><br>    fileName = FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-type\">ExcelReader</span> <span class=\"hljs-variable\">excelReader</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        excelReader = EasyExcel.read(fileName).build();<br><br>        <span class=\"hljs-comment\">// 这里为了简单 所以注册了 同样的head 和Listener 自己使用功能必须不同的Listener</span><br>        <span class=\"hljs-type\">ReadSheet</span> <span class=\"hljs-variable\">readSheet1</span> <span class=\"hljs-operator\">=</span><br>                EasyExcel.readSheet(<span class=\"hljs-number\">0</span>).head(SimpleReadEntity.class).registerReadListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).build();<br>        <span class=\"hljs-type\">ReadSheet</span> <span class=\"hljs-variable\">readSheet2</span> <span class=\"hljs-operator\">=</span><br>                EasyExcel.readSheet(<span class=\"hljs-number\">1</span>).head(SimpleReadEntity.class).registerReadListener(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).build();<br>        <span class=\"hljs-comment\">// 这里注意 一定要把sheet1 sheet2 一起传进去，不然有个问题就是03版的excel 会读取多次，浪费性能</span><br>        excelReader.read(readSheet1, readSheet2);<br>    &#125; <span class=\"hljs-keyword\">finally</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (excelReader != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-comment\">// 这里千万别忘记关闭，读的时候会创建临时文件，到时磁盘会崩的</span><br>            excelReader.finish();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"读取多行\"><a href=\"#读取多行\" class=\"headerlink\" title=\"读取多行\"></a>读取多行</h3><h4 id=\"测试代码-3\"><a href=\"#测试代码-3\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 多行头</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 设置headRowNumber参数，然后读。 这里要注意headRowNumber如果不指定， 会根据你传入的class的&#123;<span class=\"hljs-doctag\">@link</span> ExcelProperty#value()&#125;里面的表头的数量来决定行数，</span><br><span class=\"hljs-comment\"> * 如果不传入class则默认为1.当然你指定了headRowNumber不管是否传入class都是以你传入的为准。</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testManyHeaderRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).sheet()<br>            <span class=\"hljs-comment\">// 这里可以设置1，因为头就是一行。如果多行头，可以设置其他值。不传入也可以，因为默认会根据DemoData 来解析，他没有指定头，也就是默认1行</span><br>            .headRowNumber(<span class=\"hljs-number\">1</span>).doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"同步返回数据\"><a href=\"#同步返回数据\" class=\"headerlink\" title=\"同步返回数据\"></a>同步返回数据</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 同步的返回，不推荐使用，如果数据量大会把数据放到内存里面</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSyncResRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet 同步读取会自动finish</span><br>    List&lt;SimpleReadEntity&gt; list = EasyExcel.read(fileName).head(SimpleReadEntity.class).sheet().doReadSync();<br>    <span class=\"hljs-keyword\">for</span> (SimpleReadEntity data : list) &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;读取到数据: &quot;</span> + JSON.toJSONString(data));<br>    &#125;<br>    <span class=\"hljs-comment\">// 这里 也可以不指定class，返回一个list，然后读取第一个sheet 同步读取会自动finish</span><br>    List&lt;Map&lt;Integer, String&gt;&gt; listMap = EasyExcel.read(fileName).sheet().doReadSync();<br>    <span class=\"hljs-keyword\">for</span> (Map&lt;Integer, String&gt; data : listMap) &#123;<br>        <span class=\"hljs-comment\">// 返回每条数据的键值对 表示所在的列 和所在列的值</span><br>        System.out.println(JSON.toJSONString(data));<br>        System.out.println(<span class=\"hljs-string\">&quot;读取到数据: &quot;</span> + JSON.toJSONString(data));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"读取表头数据\"><a href=\"#读取表头数据\" class=\"headerlink\" title=\"读取表头数据\"></a>读取表头数据</h3><h4 id=\"在SimpleReadListener监听器上增加方法\"><a href=\"#在SimpleReadListener监听器上增加方法\" class=\"headerlink\" title=\"在SimpleReadListener监听器上增加方法\"></a>在<code>SimpleReadListener</code>监听器上增加方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 这里会一行行的返回头</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> headMap</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> context</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invokeHeadMap</span><span class=\"hljs-params\">(Map&lt;Integer, String&gt; headMap, AnalysisContext context)</span> &#123;<br>    LOGGER.info(<span class=\"hljs-string\">&quot;解析到一条头数据:&#123;&#125;&quot;</span>, JSON.toJSONString(headMap));<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码-4\"><a href=\"#测试代码-4\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 读取表头数据</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接读即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testHeaderRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, SimpleReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h3><h4 id=\"对象-2\"><a href=\"#对象-2\" class=\"headerlink\" title=\"对象\"></a>对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ExceptionReadEntity</span> &#123;<br>    <span class=\"hljs-comment\">/** 标题 */</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 用日期去接字符串 肯定报错</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> String dateTitle;<br>    <span class=\"hljs-comment\">/** 数字标题 */</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"在SimpleReadListener监听器上增加方法-1\"><a href=\"#在SimpleReadListener监听器上增加方法-1\" class=\"headerlink\" title=\"在SimpleReadListener监听器上增加方法\"></a>在<code>SimpleReadListener</code>监听器上增加方法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 在转换异常 获取其他异常下会调用本接口。抛出异常则停止读取。如果这里不抛出异常则 继续读取下一行。</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> exception</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@param</span> context</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@throws</span> Exception</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Override</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onException</span><span class=\"hljs-params\">(Exception exception, AnalysisContext context)</span>&#123;<br>    LOGGER.error(<span class=\"hljs-string\">&quot;解析失败，但是继续解析下一行:&#123;&#125;&quot;</span>, exception.getMessage());<br>    <span class=\"hljs-comment\">// 如果是某一个单元格的转换异常 能获取到具体行号</span><br>    <span class=\"hljs-comment\">// 如果要获取头的信息 配合invokeHeadMap使用</span><br>    <span class=\"hljs-keyword\">if</span> (exception <span class=\"hljs-keyword\">instanceof</span> ExcelDataConvertException) &#123;<br>        <span class=\"hljs-type\">ExcelDataConvertException</span> <span class=\"hljs-variable\">excelDataConvertException</span> <span class=\"hljs-operator\">=</span> (ExcelDataConvertException)exception;<br>        LOGGER.error(<span class=\"hljs-string\">&quot;第&#123;&#125;行，第&#123;&#125;列解析异常&quot;</span>, excelDataConvertException.getRowIndex(),<br>                excelDataConvertException.getColumnIndex());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码-5\"><a href=\"#测试代码-5\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 数据转换等异常处理</span><br><span class=\"hljs-comment\"> *</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> ExceptionReadEntity&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> SimpleReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 3. 直接读即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testSimpleReadOnException</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, ExceptionReadEntity.class,<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SimpleReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"测试不创建对象的读取\"><a href=\"#测试不创建对象的读取\" class=\"headerlink\" title=\"测试不创建对象的读取\"></a>测试不创建对象的读取</h3><h4 id=\"监听器-2\"><a href=\"#监听器-2\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">NotCreateObjectReadListener</span>  <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AnalysisEventListener</span>&lt;Map&lt;Integer, String&gt;&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(NotCreateObjectReadListener.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">BATCH_COUNT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    List&lt;Map&lt;Integer, String&gt;&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;Map&lt;Integer, String&gt;&gt;();<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(Map&lt;Integer, String&gt; data, AnalysisContext context)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;解析到一条数据:&#123;&#125;&quot;</span>, JSON.toJSONString(data));<br>        list.add(data);<br>        <span class=\"hljs-keyword\">if</span> (list.size() &gt;= BATCH_COUNT) &#123;<br>            saveData();<br>            list.clear();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAfterAllAnalysed</span><span class=\"hljs-params\">(AnalysisContext analysisContext)</span> &#123;<br>        saveData();<br>        LOGGER.info(<span class=\"hljs-string\">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 加上存储数据库</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">saveData</span><span class=\"hljs-params\">()</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, list.size());<br>        LOGGER.info(<span class=\"hljs-string\">&quot;存储数据库成功！&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码-6\"><a href=\"#测试代码-6\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testNotCreateObjectRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 只要，然后读取第一个sheet 同步读取会自动finish</span><br>    EasyExcel.read(fileName, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">NotCreateObjectReadListener</span>()).sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"格式转换\"><a href=\"#格式转换\" class=\"headerlink\" title=\"格式转换\"></a>格式转换</h3><h4 id=\"对象-3\"><a href=\"#对象-3\" class=\"headerlink\" title=\"对象\"></a>对象</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-meta\">@Getter</span><br><span class=\"hljs-meta\">@Setter</span><br><span class=\"hljs-meta\">@ToString</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConverterReadEntity</span> &#123;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 我自定义 转换器，不管数据库传过来什么 。我给他加上“自定义：”</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@ExcelProperty(converter = CustomStringConverter.class)</span><br>    <span class=\"hljs-keyword\">private</span> String title;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 这里用string 去接日期才能格式化。我想接收年月日格式</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@DateTimeFormat(&quot;yyyy年MM月dd日HH时mm分ss秒&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> String dateTitle;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 我想接收百分比的数字</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@NumberFormat(&quot;#.##%&quot;)</span><br>    <span class=\"hljs-keyword\">private</span> Double numberTitle;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"监听器-3\"><a href=\"#监听器-3\" class=\"headerlink\" title=\"监听器\"></a>监听器</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ConverterReadListener</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">AnalysisEventListener</span>&lt;ConverterReadEntity&gt; &#123;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">Logger</span> <span class=\"hljs-variable\">LOGGER</span> <span class=\"hljs-operator\">=</span> LoggerFactory.getLogger(ConverterReadListener.class);<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 每隔5条存储数据库，实际使用中可以3000条，然后清理list ，方便内存回收</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">BATCH_COUNT</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;<br>    List&lt;ConverterReadEntity&gt; saveList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;ConverterReadEntity&gt;();<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 假设这个是一个DAO，当然有业务逻辑这个也可以是一个service。当然如果不用存储这个对象没用。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> EntityDao entityDao;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ConverterReadListener</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 这里是demo，所以随便new一个。实际使用如果到了spring,请使用下面的有参构造函数</span><br>        <span class=\"hljs-built_in\">this</span>.entityDao = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">EntityDao</span>();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 如果使用了spring,请使用这个构造方法。每次创建Listener的时候需要把spring管理的类传进来</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> demoDAO</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">ConverterReadListener</span><span class=\"hljs-params\">(EntityDao demoDAO)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.entityDao = demoDAO;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 这个每一条数据解析都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> entity</span><br><span class=\"hljs-comment\">     *            one row value. Is is same as &#123;<span class=\"hljs-doctag\">@link</span> AnalysisContext#readRowHolder()&#125;</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">invoke</span><span class=\"hljs-params\">(ConverterReadEntity entity, AnalysisContext analysisContext)</span> &#123;<br>        LOGGER.info(<span class=\"hljs-string\">&quot;解析到一条数据:&quot;</span>, entity);<br>        saveList.add(entity);<br>        <span class=\"hljs-comment\">// 达到BATCH_COUNT了，需要去存储一次数据库，防止数据几万条数据在内存，容易OOM</span><br>        <span class=\"hljs-keyword\">if</span> (saveList.size() &gt;= BATCH_COUNT) &#123;<br>            batchSave();<br>            <span class=\"hljs-comment\">// 存储完成清理 list</span><br>            saveList.clear();<br>        &#125;<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 所有数据解析完成了 都会来调用</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> analysisContext</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doAfterAllAnalysed</span><span class=\"hljs-params\">(AnalysisContext analysisContext)</span> &#123;<br>       <span class=\"hljs-comment\">// 这里也要保存数据，确保最后遗留的数据也存储到数据库</span><br>        batchSave();<br>        LOGGER.info(<span class=\"hljs-string\">&quot;所有数据解析完成！&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 批量保存方法</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">batchSave</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">if</span> (!saveList.isEmpty()) &#123;<br>            LOGGER.info(<span class=\"hljs-string\">&quot;&#123;&#125;条数据，开始存储数据库！&quot;</span>, saveList.size());<br>            entityDao.batchSave(saveList);<br>            LOGGER.info(<span class=\"hljs-string\">&quot;存储数据库成功！&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"测试代码-7\"><a href=\"#测试代码-7\" class=\"headerlink\" title=\"测试代码\"></a>测试代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * 日期、数字或者自定义格式转换</span><br><span class=\"hljs-comment\"> * &lt;p&gt;</span><br><span class=\"hljs-comment\"> * 默认读的转换器&#123;<span class=\"hljs-doctag\">@link</span> DefaultConverterLoader#loadDefaultReadConverter()&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;1. 创建excel对应的实体对象 参照&#123;<span class=\"hljs-doctag\">@link</span> ConverterReadEntity&#125;.里面可以使用注解&#123;<span class=\"hljs-doctag\">@link</span> DateTimeFormat&#125;、&#123;<span class=\"hljs-doctag\">@link</span> NumberFormat&#125;或者自定义注解</span><br><span class=\"hljs-comment\"> * &lt;p&gt;2. 由于默认一行行的读取excel，所以需要创建excel一行一行的回调监听器，参照&#123;<span class=\"hljs-doctag\">@link</span> ConverterReadListener&#125;</span><br><span class=\"hljs-comment\"> * &lt;p&gt;3. 直接读即可</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-meta\">@Test</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span>  <span class=\"hljs-title function_\">testConvertRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">fileName</span> <span class=\"hljs-operator\">=</span> FileUtil.getPath() + READ_ROOT_RESOURCE + File.separator + <span class=\"hljs-string\">&quot;simpleRead&quot;</span> + SUFFIX_EXCEL_FILE_TYPE;<br>    <span class=\"hljs-comment\">// 这里 需要指定读用哪个class去读，然后读取第一个sheet</span><br>    EasyExcel.read(fileName, ConverterReadEntity.class, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ConverterReadListener</span>())<br>            <span class=\"hljs-comment\">// 这里注意 我们也可以registerConverter来指定自定义转换器， 但是这个转换变成全局了， 所有java为string,excel为string的都会用这个转换器。</span><br>            <span class=\"hljs-comment\">// 如果就想单个字段使用请使用@ExcelProperty 指定converter</span><br>            <span class=\"hljs-comment\">// .registerConverter(new CustomStringStringConverter())</span><br>            <span class=\"hljs-comment\">// 读取sheet</span><br>            .sheet().doRead();<br>&#125;<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "POI",
                "EasyExcel"
            ]
        }
    ]
}