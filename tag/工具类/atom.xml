<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</id>
    <title>Will • Posts by &#34;工具类&#34; tag</title>
    <link href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io" />
    <updated>2024-01-03T13:13:21.654Z</updated>
    <category term="开发习惯" />
    <category term="思考" />
    <category term="思维习惯" />
    <category term="感言" />
    <category term="Docker" />
    <category term="LINUX" />
    <category term="Node" />
    <category term="前端" />
    <category term="Nvm" />
    <category term="CentOS" />
    <category term="Linux" />
    <category term="Crontab" />
    <category term="Jenkins" />
    <category term="IDEA" />
    <category term="Alibaba Cloud Toolkit" />
    <category term="Archery" />
    <category term="MySql" />
    <category term="工具" />
    <category term="Maven" />
    <category term="Git" />
    <category term="JAVA" />
    <category term="shell" />
    <category term="信息安全等级保护认证" />
    <category term="系统认证" />
    <category term="读书笔记" />
    <category term="BeetlSql" />
    <category term="Beetl" />
    <category term="异常" />
    <category term="Java IO-初识IO" />
    <category term="Spring" />
    <category term="SpringCloud" />
    <category term="SpringCloud Alibaba" />
    <category term="枚举" />
    <category term="POI" />
    <category term="Spring Boot" />
    <category term="VinUtil" />
    <category term="VerificationCode" />
    <category term="SOAR" />
    <category term="其他" />
    <category term="ProtoBuffer" />
    <category term="博客园" />
    <category term="博客" />
    <category term="MongoDb" />
    <category term="Lombok工具库详解" />
    <category term="常用开发库" />
    <category term="JSON类库详解" />
    <category term="Hutool" />
    <category term="工具类" />
    <category term="Spring常用工具类" />
    <category term="异步编程" />
    <category term="线程" />
    <category term="方法论" />
    <category term="开源协议" />
    <category term="CentOS7" />
    <category term="MongoDB" />
    <category term="Redis" />
    <category term="VMware" />
    <category term="Typora" />
    <category term="PostMan" />
    <category term="Java8" />
    <category term="特性" />
    <category term="JDBC" />
    <category term="Mysql" />
    <category term="EasyExcel" />
    <category term="日志类库详解" />
    <category term="Script" />
    <category term="设计模式" />
    <category term="MyBatis" />
    <category term="Apache Common" />
    <category term="Google Guava" />
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/</id>
        <title>Spring常用工具类</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Spring%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Spring作为常用的开发框架，在Spring框架应用中，排在ApacheCommon，Guava, Huool等通用库后，第二优先级可以考虑使用Spring-core-xxx.jar中的util包。&lt;br&gt;另外对于工具类，要站在高一点的角度知道有哪些，而不是只看到代码… 用的时候具体看下即可)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;内置的resouce类型&#34;&gt;&lt;a href=&#34;#内置的resouce类型&#34; class=&#34;headerlink&#34; title=&#34;内置的resouce类型&#34;&gt;&lt;/a&gt;内置的resouce类型&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;UrlResource&lt;/li&gt;
&lt;li&gt;ClassPathResource&lt;/li&gt;
&lt;li&gt;FileSystemResource&lt;/li&gt;
&lt;li&gt;ServletContextResource&lt;/li&gt;
&lt;li&gt;InputStreamResource&lt;/li&gt;
&lt;li&gt;ByteArrayResource&lt;/li&gt;
&lt;li&gt;EncodedResource 也就是Resource加上encoding, 可以认为是有编码的资源&lt;/li&gt;
&lt;li&gt;VfsResource(在jboss里经常用到, 相应还有 工具类 VfsUtils)&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.ResourceUtils 用于处理表达资源字符串前缀描述资源的工具. 如: “classpath:”. 有 getURL, getFile, isFileURL, isJarURL, extractJarFileURL&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;工具类&#34;&gt;&lt;a href=&#34;#工具类&#34; class=&#34;headerlink&#34; title=&#34;工具类&#34;&gt;&lt;/a&gt;工具类&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;org.springframework.core.annotation.AnnotationUtils 处理注解&lt;/li&gt;
&lt;li&gt;org.springframework.core.io.support.PathMatchingResourcePatternResolver 用 于处理 ant 匹配风格,找出所有的资源, 结合上面的resource的概念一起使用,对于遍历文件很有用. 具体请详细查看javadoc&lt;/li&gt;
&lt;li&gt;org.springframework.core.io.support.PropertiesLoaderUtils 加载Properties资源工具类,和Resource结合&lt;/li&gt;
&lt;li&gt;org.springframework.core.BridgeMethodResolver 桥接方法分析器. 关于桥接方法请参考: &lt;a href=&#34;http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5&#34;&gt;http://java.sun.com/docs/books/jls/third_edition/html/expressions.html#15.12.4.5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;org.springframework.core.GenericTypeResolver 范型分析器, 在用于对范型方法, 参数分析.&lt;/li&gt;
&lt;li&gt;org.springframework.core.NestedExceptionUtils&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;xml工具&#34;&gt;&lt;a href=&#34;#xml工具&#34; class=&#34;headerlink&#34; title=&#34;# xml工具&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#xml%E5%B7%A5%E5%85%B7&#34;&gt;#&lt;/a&gt; xml工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;org.springframework.util.xml.AbstractStaxContentHandler&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.AbstractStaxXMLReader&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.AbstractXMLReader&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.AbstractXMLStreamReader&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.DomUtils&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.SimpleNamespaceContext&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.SimpleSaxErrorHandler&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.SimpleTransformErrorListener&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.StaxUtils&lt;/li&gt;
&lt;li&gt;org.springframework.util.xml.TransformerUtils&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;其它工具集&#34;&gt;&lt;a href=&#34;#其它工具集&#34; class=&#34;headerlink&#34; title=&#34;# 其它工具集&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#%E5%85%B6%E5%AE%83%E5%B7%A5%E5%85%B7%E9%9B%86&#34;&gt;#&lt;/a&gt; 其它工具集&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;org.springframework.util.AntPathMatcherant风格的处理&lt;/li&gt;
&lt;li&gt;org.springframework.util.AntPathStringMatcher&lt;/li&gt;
&lt;li&gt;org.springframework.util.Assert断言,在我们的参数判断时应该经常用&lt;/li&gt;
&lt;li&gt;org.springframework.util.CachingMapDecorator&lt;/li&gt;
&lt;li&gt;org.springframework.util.ClassUtils用于Class的处理&lt;/li&gt;
&lt;li&gt;org.springframework.util.CollectionUtils用于处理集合的工具&lt;/li&gt;
&lt;li&gt;org.springframework.util.CommonsLogWriter&lt;/li&gt;
&lt;li&gt;org.springframework.util.CompositeIterator&lt;/li&gt;
&lt;li&gt;org.springframework.util.ConcurrencyThrottleSupport&lt;/li&gt;
&lt;li&gt;org.springframework.util.CustomizableThreadCreator&lt;/li&gt;
&lt;li&gt;org.springframework.util.DefaultPropertiesPersister&lt;/li&gt;
&lt;li&gt;org.springframework.util.DigestUtils摘要处理, 这里有用于md5处理信息的&lt;/li&gt;
&lt;li&gt;org.springframework.util.FileCopyUtils文件的拷贝处理, 结合Resource的概念一起来处理, 真的是很方便&lt;/li&gt;
&lt;li&gt;org.springframework.util.FileSystemUtils&lt;/li&gt;
&lt;li&gt;org.springframework.util.LinkedCaseInsensitiveMap key值不区分大小写的LinkedMap&lt;/li&gt;
&lt;li&gt;org.springframework.util.LinkedMultiValueMap一个key可以存放多个值的LinkedMap&lt;/li&gt;
&lt;li&gt;org.springframework.util.Log4jConfigurer一个log4j的启动加载指定配制文件的工具类&lt;/li&gt;
&lt;li&gt;org.springframework.util.NumberUtils处理数字的工具类, 有parseNumber 可以把字符串处理成我们指定的数字格式, 还支持format格式, convertNumberToTargetClass 可以实现Number类型的转化.&lt;/li&gt;
&lt;li&gt;org.springframework.util.ObjectUtils有很多处理null object的方法. 如nullSafeHashCode, nullSafeEquals, isArray, containsElement, addObjectToArray, 等有用的方法&lt;/li&gt;
&lt;li&gt;org.springframework.util.PatternMatchUtilsspring里用于处理简单的匹配. 如 Spring’s typical “xxx”, “xxx” and “xxx” pattern styles&lt;/li&gt;
&lt;li&gt;org.springframework.util.PropertyPlaceholderHelper用于处理占位符的替换&lt;/li&gt;
&lt;li&gt;org.springframework.util.ReflectionUtils反映常用工具方法. 有 findField, setField, getField, findMethod, invokeMethod等有用的方法&lt;/li&gt;
&lt;li&gt;org.springframework.util.SerializationUtils用于java的序列化与反序列化. serialize与deserialize方法&lt;/li&gt;
&lt;li&gt;org.springframework.util.StopWatch一个很好的用于记录执行时间的工具类, 且可以用于任务分阶段的测试时间. 最后支持一个很好看的打印格式. 这个类应该经常用&lt;/li&gt;
&lt;li&gt;org.springframework.util.StringUtils&lt;/li&gt;
&lt;li&gt;org.springframework.util.SystemPropertyUtils&lt;/li&gt;
&lt;li&gt;org.springframework.util.TypeUtils用于类型相容的判断. isAssignable&lt;/li&gt;
&lt;li&gt;org.springframework.util.WeakReferenceMonitor弱引用的监控&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;和web相关的工具&#34;&gt;&lt;a href=&#34;#和web相关的工具&#34; class=&#34;headerlink&#34; title=&#34;# 和web相关的工具&#34;&gt;&lt;/a&gt;&lt;a href=&#34;#%E5%92%8Cweb%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B7%A5%E5%85%B7&#34;&gt;#&lt;/a&gt; 和web相关的工具&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;org.springframework.web.util.CookieGenerator&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.HtmlCharacterEntityDecoder&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.HtmlCharacterEntityReferences&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.HtmlUtils&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.HttpUrlTemplate&lt;ul&gt;
&lt;li&gt;这个类用于用字符串模板构建url, 它会自动处理url里的汉字及其它相关的编码. 在读取别人提供的url资源时, 应该经常用&lt;/li&gt;
&lt;li&gt;String url &amp;#x3D; “&lt;a href=&#34;http://localhost/myapp/%7Bname%7D/%7Bid%7D&#34;&gt;http://localhost/myapp/{name}/{id}&lt;/a&gt;“;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.JavaScriptUtils&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.Log4jConfigListener&lt;ul&gt;
&lt;li&gt;用listener的方式来配制log4j在web环境下的初始化&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.UriTemplate&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.UriUtils处理uri里特殊字符的编码&lt;/li&gt;
&lt;li&gt;org.springframework.web.util.WebUtils&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="常用开发库" />
        <category term="工具类" />
        <category term="Spring常用工具类" />
        <updated>2024-01-03T13:13:21.654Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Hutool/</id>
        <title>Hutool</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Hutool/"/>
        <content type="html">&lt;blockquote&gt;
&lt;p&gt;Hutool作为后起之秀，功能上也比较全。但是要注意一点，它的开源协议是：中国第一个开源协议&lt;a href=&#34;http://license.coscl.org.cn/MulanPSL&#34;&gt;木兰宽松许可证, 第1版&lt;/a&gt;，对此在商业项目中需要谨慎些，在个人项目无所谓。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Hutool是一个小而全的Java工具类库，通过静态方法封装，降低相关API的学习成本，提高工作效率，使Java拥有函数式语言般的优雅，让Java语言也可以“甜甜的”。&lt;/p&gt;
&lt;p&gt;Hutool中的工具方法来自于每个用户的精雕细琢，它涵盖了Java开发底层代码中的方方面面，它既是大型项目开发中解决小问题的利器，也是小型项目中的效率担当；&lt;/p&gt;
&lt;p&gt;Hutool是项目中“util”包友好的替代，它节省了开发人员对项目中公用类和公用工具方法的封装时间，使开发专注于业务，同时可以最大限度的避免封装不完善带来的bug。&lt;/p&gt;
&lt;h2 id=&#34;Hutool名称的由来&#34;&gt;&lt;a href=&#34;#Hutool名称的由来&#34; class=&#34;headerlink&#34; title=&#34;Hutool名称的由来&#34;&gt;&lt;/a&gt;Hutool名称的由来&lt;/h2&gt;&lt;p&gt;Hutool &amp;#x3D; Hu + tool，是原公司项目底层代码剥离后的开源库，“Hu”是公司名称的表示，tool表示工具。Hutool谐音“糊涂”，一方面简洁易懂，一方面寓意“难得糊涂”。&lt;/p&gt;
&lt;h2 id=&#34;Hutool如何改变我们的coding方式&#34;&gt;&lt;a href=&#34;#Hutool如何改变我们的coding方式&#34; class=&#34;headerlink&#34; title=&#34;Hutool如何改变我们的coding方式&#34;&gt;&lt;/a&gt;Hutool如何改变我们的coding方式&lt;/h2&gt;&lt;p&gt;Hutool的目标是使用一个工具方法代替一段复杂代码，从而最大限度的避免“复制粘贴”代码的问题，彻底改变我们写代码的方式。&lt;/p&gt;
&lt;p&gt;以计算MD5为例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;【以前】打开搜索引擎 -&amp;gt; 搜“Java MD5加密” -&amp;gt; 打开某篇博客-&amp;gt; 复制粘贴 -&amp;gt; 改改好用&lt;/li&gt;
&lt;li&gt;【现在】引入Hutool -&amp;gt; SecureUtil.md5()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Hutool的存在就是为了减少代码搜索成本，避免网络上参差不齐的代码出现导致的bug。&lt;/p&gt;
&lt;h1 id=&#34;包含组件&#34;&gt;&lt;a href=&#34;#包含组件&#34; class=&#34;headerlink&#34; title=&#34;包含组件&#34;&gt;&lt;/a&gt;包含组件&lt;/h1&gt;&lt;p&gt;一个Java基础工具类，对文件、流、加密解密、转码、正则、线程、XML等JDK方法进行封装，组成各种Util工具类，同时提供以下组件：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;模块&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hutool-aop&lt;/td&gt;
&lt;td&gt;JDK动态代理封装，提供非IOC下的切面支持&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-bloomFilter&lt;/td&gt;
&lt;td&gt;布隆过滤，提供一些Hash算法的布隆过滤&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-cache&lt;/td&gt;
&lt;td&gt;简单缓存实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-core&lt;/td&gt;
&lt;td&gt;核心，包括Bean操作、日期、各种Util等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-cron&lt;/td&gt;
&lt;td&gt;定时任务模块，提供类Crontab表达式的定时任务&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-crypto&lt;/td&gt;
&lt;td&gt;加密解密模块，提供对称、非对称和摘要算法封装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-db&lt;/td&gt;
&lt;td&gt;JDBC封装后的数据操作，基于ActiveRecord思想&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-dfa&lt;/td&gt;
&lt;td&gt;基于DFA模型的多关键字查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-extra&lt;/td&gt;
&lt;td&gt;扩展模块，对第三方封装（模板引擎、邮件、Servlet、二维码、Emoji、FTP、分词等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-http&lt;/td&gt;
&lt;td&gt;基于HttpUrlConnection的Http客户端封装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-log&lt;/td&gt;
&lt;td&gt;自动识别日志实现的日志门面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-script&lt;/td&gt;
&lt;td&gt;脚本执行封装，例如Javascript&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-setting&lt;/td&gt;
&lt;td&gt;功能更强大的Setting配置文件和Properties封装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-system&lt;/td&gt;
&lt;td&gt;系统参数调用封装（JVM信息等）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-json&lt;/td&gt;
&lt;td&gt;JSON实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-captcha&lt;/td&gt;
&lt;td&gt;图片验证码实现&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-poi&lt;/td&gt;
&lt;td&gt;针对POI中Excel的封装&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hutool-socket&lt;/td&gt;
&lt;td&gt;基于Java的NIO和AIO的Socket封装&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可以根据需求对每个模块单独引入，也可以通过引入&lt;code&gt;hutool-all&lt;/code&gt;方式引入所有模块。&lt;/p&gt;
&lt;h1 id=&#34;文档&#34;&gt;&lt;a href=&#34;#文档&#34; class=&#34;headerlink&#34; title=&#34;文档&#34;&gt;&lt;/a&gt;文档&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hutool.cn/docs/&#34;&gt;中文文档&lt;/a&gt; 看这里&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.hutool.club/docs/&#34;&gt;中文文档（备用）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apidoc.gitee.com/loolly/hutool/&#34;&gt;参考API&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;h2 id=&#34;Maven&#34;&gt;&lt;a href=&#34;#Maven&#34; class=&#34;headerlink&#34; title=&#34;Maven&#34;&gt;&lt;/a&gt;Maven&lt;/h2&gt;&lt;p&gt;在项目的pom.xml的dependencies中加入以下内容:&lt;/p&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;cn.hutool&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;hutool-all&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;              &lt;br&gt;    &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;5.1.0&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Gradle&#34;&gt;&lt;a href=&#34;#Gradle&#34; class=&#34;headerlink&#34; title=&#34;Gradle&#34;&gt;&lt;/a&gt;Gradle&lt;/h2&gt;&lt;figure class=&#34;highlight gradle&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs gradle&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;compile&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;cn.hutool:hutool-all:5.1.0&amp;#x27;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;非Maven项目&#34;&gt;&lt;a href=&#34;#非Maven项目&#34; class=&#34;headerlink&#34; title=&#34;非Maven项目&#34;&gt;&lt;/a&gt;非Maven项目&lt;/h2&gt;&lt;p&gt;点击以下任一链接，下载&lt;code&gt;hutool-all-X.X.X.jar&lt;/code&gt;即可：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://repo1.maven.org/maven2/cn/hutool/hutool-all/5.1.0/&#34;&gt;Maven中央库1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://repo2.maven.org/maven2/cn/hutool/hutool-all/5.1.0/&#34;&gt;Maven中央库2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意 Hutool 5.x支持JDK8+，对Android平台没有测试，不能保证所有工具类获工具方法可用。 如果你的项目使用JDK7，请使用Hutool 4.x版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;编译安装&#34;&gt;&lt;a href=&#34;#编译安装&#34; class=&#34;headerlink&#34; title=&#34;编译安装&#34;&gt;&lt;/a&gt;编译安装&lt;/h2&gt;&lt;p&gt;访问Hutool的码云主页：&lt;a href=&#34;https://gitee.com/loolly/hutool&#34;&gt;https://gitee.com/loolly/hutool在新窗口打开&lt;/a&gt; 下载整个项目源码（v5-master或v5-dev分支都可）然后进入Hutool项目目录执行：&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs bash&#34;&gt;./hutool.sh install&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;然后就可以使用Maven引入了。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;著作权归@pdai所有 原文链接：&lt;a href=&#34;https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html&#34;&gt;https://pdai.tech/md/develop/package/dev-package-x-hu-tool.html&lt;/a&gt;&lt;/p&gt;
</content>
        <category term="常用开发库" />
        <category term="Hutool" />
        <category term="工具类" />
        <updated>2024-01-03T13:13:21.653Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/</id>
        <title>Apache Common</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/"/>
        <content type="html">&lt;h1 id=&#34;Apache-Common包简介&#34;&gt;&lt;a href=&#34;#Apache-Common包简介&#34; class=&#34;headerlink&#34; title=&#34;Apache Common包简介&#34;&gt;&lt;/a&gt;Apache Common包简介&lt;/h1&gt;&lt;p&gt;Apache Commons是对JDK的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题，减少重复劳动。官网网址:&lt;a href=&#34;http://commons.apache.org/&#34;&gt;http://commons.apache.org&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;Common包包含哪些类？&#34;&gt;&lt;a href=&#34;#Common包包含哪些类？&#34; class=&#34;headerlink&#34; title=&#34;Common包包含哪些类？&#34;&gt;&lt;/a&gt;Common包包含哪些类？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;请参考：&lt;a href=&#34;http://commons.apache.org/&#34;&gt;Apache Common官方网站&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;常用包梳理&#34;&gt;&lt;a href=&#34;#常用包梳理&#34; class=&#34;headerlink&#34; title=&#34;常用包梳理&#34;&gt;&lt;/a&gt;常用包梳理&lt;/h2&gt;&lt;p&gt;| 包名         | 介绍     |&lt;br&gt;| ————- |:————-:| &lt;br&gt;| commons-lang      | 提供字符串处理、数值处理、对象等工具方法 |&lt;br&gt;| commons-collections | 集合工具类,用来操作各种集合     |&lt;br&gt;| commons-io         | IO流操作的工具类     |&lt;br&gt;| commons-beanutils  | Java Bean 操作和封装工具     |  &lt;br&gt;| commons-dbcp2     | 数据库连接池实现  |&lt;br&gt;| commons-pool2      | 对象池实现,用于数据库连接池等 |&lt;br&gt;| commons-fileupload | HTML文件上传工具     | &lt;br&gt;| commons-codec      | 编码&amp;#x2F;解码算法,如Base64、Hex、MD5等 |  &lt;br&gt;| commons-net        | 网络工具,如FTP、Telnet、DNS等 |&lt;br&gt;| commons-configuration | 配置文件解析器   |&lt;br&gt;| commons-vfs        | 虚拟文件系统,对各种文件系统的包装| &lt;br&gt;| commons-digester   | XML解析器    | &lt;br&gt;| commons-logging    | 日志记录器抽象层|&lt;br&gt;| commons-validator  | 数据校验器|&lt;/p&gt;
&lt;h3 id=&#34;Commons-BeanUtils&#34;&gt;&lt;a href=&#34;#Commons-BeanUtils&#34; class=&#34;headerlink&#34; title=&#34;Commons BeanUtils&#34;&gt;&lt;/a&gt;Commons BeanUtils&lt;/h3&gt;&lt;p&gt;针对Bean的一个工具集。由于Bean往往是有一堆get和set组成，所以BeanUtils也是在此基础上进行一些包装。它利用Java的反射机制，从动态的生成对bean的getter和setter的调用代码，到模拟创建一个动态的bean，等等。&lt;br&gt;这个包看似简单，却是很多开源项目的基石：如在著名的Struts和Spring Framework中，我们都能找到BeanUtils的影子。大家猜猜看，有哪位名人是BeanUtils的作者之一？没错，就是Struts的创始人Craig McClanahan。&lt;br&gt;一个比较常用的功能是Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。&lt;/p&gt;
&lt;h4 id=&#34;模块介绍&#34;&gt;&lt;a href=&#34;#模块介绍&#34; class=&#34;headerlink&#34; title=&#34;模块介绍&#34;&gt;&lt;/a&gt;模块介绍&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包名&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;beanutils&lt;/td&gt;
&lt;td&gt;核心包，主要是一些常用的工具类及接口定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;converters&lt;/td&gt;
&lt;td&gt;转换String到需要类型的类，实现Converter接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;这些转换器实现了 LocaleConverter 接口,并提供了根据本地语言环境格式化对象到字符串以及解析字符串到对象的功能。&lt;br/&gt;主要用途是:&lt;br/&gt;国际化:    根据不同语言环境解析和格式化数值&lt;br/&gt;本地化的 Bean 操作:    解析不同本地语言环境的请求参数到 Bean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expression&lt;/td&gt;
&lt;td&gt;统一的表达式语言接口,定义表达式解析、求值和设置属性值等方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;代码案例&#34;&gt;&lt;a href=&#34;#代码案例&#34; class=&#34;headerlink&#34; title=&#34;代码案例&#34;&gt;&lt;/a&gt;代码案例&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; lombok.Data;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.BeanUtils;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.ConvertUtils;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.converters.DateConverter;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.lang.reflect.InvocationTargetException;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Arrays;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Date;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.HashMap;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Map;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * CovertTest * &lt;span class=&#34;hljs-doctag&#34;&gt;@author&lt;/span&gt; will */&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanUtilTest&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串转换为指定类型  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCovertToInteger&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;, Integer.class);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (i &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Integer) &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can cast to integer&amp;quot;&lt;/span&gt;);  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the number result is &amp;quot;&lt;/span&gt; + (Integer) i);  &lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.err.print(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can not cast to target Instance!&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串数组转换为指定类型数组  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testConvertArrToIntegerArr&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;convert&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;, Integer.class);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (convert &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Integer[]) &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can cast to Integer Array&amp;quot;&lt;/span&gt;);  &lt;br&gt;            Integer[] integers = (Integer[]) convert;  &lt;br&gt;            Arrays.stream(integers).forEach(System.out::println);  &lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.err.print(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can not cast to target Instance!&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串转换为日期类型  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCovertToDate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 日期格式转换  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DateConverter&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dateConverter&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DateConverter&lt;/span&gt;();  &lt;br&gt;        dateConverter.setPatterns(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yyyy-MM-dd&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;&amp;#125;);  &lt;br&gt;        ConvertUtils.register(dateConverter, Date.class);  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;convert&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-12-01&amp;quot;&lt;/span&gt;, Date.class);  &lt;br&gt;        System.out.println(convert);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 常规时间类型转换  &lt;/span&gt;&lt;br&gt;        System.out.println(ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-06-30 09:53:55&amp;quot;&lt;/span&gt;, Date.class));  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testBeanUtil&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &amp;#123;  &lt;br&gt;        Map&amp;lt;String, Object&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt;();  &lt;br&gt;        map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;);  &lt;br&gt;        map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;18&amp;quot;&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 将map数据拷贝到Java Bean中  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.populate(p, map);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p is &amp;quot;&lt;/span&gt; + p);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 对象拷贝  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.copyProperties(p1, p);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p1 is &amp;quot;&lt;/span&gt; + p1);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 拷贝指定的属性  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.copyProperty(p2,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will_yang&amp;quot;&lt;/span&gt;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p2 is &amp;quot;&lt;/span&gt; + p2);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 设置指定的属性  &lt;/span&gt;&lt;br&gt;        BeanUtils.setProperty(p2, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p2 is &amp;quot;&lt;/span&gt; + p2);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//对象克隆  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; BeanUtils.cloneBean(p2);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bean = &amp;quot;&lt;/span&gt; + bean);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;&amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String age;  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Codec&#34;&gt;&lt;a href=&#34;#Commons-Codec&#34; class=&#34;headerlink&#34; title=&#34;Commons Codec&#34;&gt;&lt;/a&gt;Commons Codec&lt;/h2&gt;&lt;p&gt;是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。&lt;/p&gt;
&lt;h3 id=&#34;二进制相关&#34;&gt;&lt;a href=&#34;#二进制相关&#34; class=&#34;headerlink&#34; title=&#34;二进制相关&#34;&gt;&lt;/a&gt;二进制相关&lt;/h3&gt;&lt;p&gt;二进制包主要提供16进制、Base64、Base32等的编解码工具类。&lt;/p&gt;
&lt;h4 id=&#34;16进制（Hex类）&#34;&gt;&lt;a href=&#34;#16进制（Hex类）&#34; class=&#34;headerlink&#34; title=&#34;16进制（Hex类）&#34;&gt;&lt;/a&gt;16进制（Hex类）&lt;/h4&gt;&lt;p&gt;十六进制常用于将二进制以更简短的方式展示，比如MD5是128位，展现起来太长，而转换为16进制后只需要32个字符即可表示出来。&lt;br&gt;示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// byte数组转为16进制字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Hex.encodeHexString(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;System.out.println(hex);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 16进制字符串解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] src = Hex.decodeHex(hex);&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(src));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-Base64，Base32，Base16&#34;&gt;&lt;a href=&#34;#2-Base64，Base32，Base16&#34; class=&#34;headerlink&#34; title=&#34;2. Base64，Base32，Base16&#34;&gt;&lt;/a&gt;2. Base64，Base32，Base16&lt;/h4&gt;&lt;p&gt;Base64是网络上最常见的用于传输二进制数据的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。Base32就是使用32个可打印字符，Base16就是使用16个（实际上相当于16进制）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;编码表字符串&lt;/td&gt;
&lt;td&gt;位数不足是否会补全 &amp;#x3D;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base16&lt;/td&gt;
&lt;td&gt;数字0&lt;del&gt;9 和 字母 A&lt;/del&gt;F&lt;/td&gt;
&lt;td&gt;不会，位数刚好是 4 的倍数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base32&lt;/td&gt;
&lt;td&gt;大写字母A&lt;del&gt;Z 和 数字2&lt;/del&gt;7&lt;/td&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base64&lt;/td&gt;
&lt;td&gt;Base大写字母A-Z，小写字母a-z，数字0~9以及”+”，”&amp;#x2F;“&lt;/td&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// base64编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;base64&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Base64.encodeBase64String(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;System.out.println(base64);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// base64解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] src = Base64.decodeBase64(base64);&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(src));&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 字符串是否是base64&lt;/span&gt;&lt;br&gt;Base64.isBase64(base64);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Base32 Base16 同理&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Codec还提供了Base系列的流处理，以流的方式去处理Base编解码，示例如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以流方式提供Base64编码和解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 附：&amp;quot;123&amp;quot;的base64编码为&amp;quot;MTIz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对输入流做base64编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ebis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64InputStream&lt;/span&gt;(is, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;enc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; IOUtils.toString(ebis, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// MTIz&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对base64数据流做解码&lt;/span&gt;&lt;br&gt;is = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(enc.getBytes());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dbis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64InputStream&lt;/span&gt;(is, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dec&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; IOUtils.toString(dbis, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 123&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// -----------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将数据做base64编码写入输出流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;baos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ebos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64OutputStream&lt;/span&gt;(baos, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;IOUtils.write(data, ebos, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;enc2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; baos.toString(); &lt;span class=&#34;hljs-comment&#34;&gt;// MTIz&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将base64数据做解码写入输出流&lt;/span&gt;&lt;br&gt;baos = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dbos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64OutputStream&lt;/span&gt;(baos, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;);&lt;br&gt;IOUtils.write(data, dbos, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dec2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; dbos.toString(); &lt;span class=&#34;hljs-comment&#34;&gt;// 123&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;URL相关&#34;&gt;&lt;a href=&#34;#URL相关&#34; class=&#34;headerlink&#34; title=&#34;URL相关&#34;&gt;&lt;/a&gt;URL相关&lt;/h3&gt;&lt;p&gt;URL之所以要进行编码，是因为URL中有些字符会引起歧义。&lt;/p&gt;
&lt;p&gt;例如URL参数字符串中使用key&amp;#x3D;value键值对这样的形式来传参，键值对之间以&amp;amp;符号分隔，如&amp;#x2F;s?q&amp;#x3D;abc&amp;amp;ie&amp;#x3D;utf-8。如果你的value字符串中包含了&amp;#x3D;或者&amp;amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;amp;和&amp;#x3D;符号进行转义，也就是对其进行编码。&lt;/p&gt;
&lt;p&gt;又如URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。&lt;/p&gt;
&lt;p&gt;URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。&lt;/p&gt;
&lt;p&gt;编解码示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;URLCodec&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;urlCodec&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;URLCodec&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// url编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;encUrl&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; urlCodec.encode(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://x.com?f=哈&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(encUrl);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// url解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;decUrl&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; urlCodec.decode(encUrl);&lt;br&gt;System.out.println(decUrl);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;摘要算法&#34;&gt;&lt;a href=&#34;#摘要算法&#34; class=&#34;headerlink&#34; title=&#34;摘要算法&#34;&gt;&lt;/a&gt;摘要算法&lt;/h3&gt;&lt;p&gt;摘要算法是一种单向的散列算法，它满足以下几个特点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入长度是任意的&lt;/li&gt;
&lt;li&gt;输出长度是固定的&lt;/li&gt;
&lt;li&gt;对每一个给定的输入，计算输出是很容易的&lt;/li&gt;
&lt;li&gt;不可逆，无法通过输出推算出原数据&lt;/li&gt;
&lt;li&gt;输出不依赖于输入。就是输入数据变动一个字节结果会相差很多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于摘要算法以上特点，主要用于数据完整性校验。例如网上的资源一般会提供一个摘要值（一般用MD5算法），用户下载后可以通过工具对资源做MD5后和网上给定的值比较，如果不一致说明文件不完整了，可能是下载过程网络波动内容有丢失，也可能被人篡改过。&lt;/p&gt;
&lt;p&gt;也可以做数据的指纹，比如网盘秒传，就是利用摘要值做判断。客户端上传前先对文件做摘要值，传给服务端，服务端发现有相同摘要的文件说明两个文件内容是一致的，这样就无需上传直接将文件存储路径指向这个文件就可以了，既实现了秒传，还节约了服务器磁盘空间（不同用户相同内容的文件实际上指向的是同一份文件）。&lt;/p&gt;
&lt;p&gt;很多系统也将密码做md5后存储，其中这种方式并不安全。md5已经很很多公开结果了，并且使用彩虹表碰撞也很容易破解了。所以并不建议使用md5存储密码。密码推荐使用BCrypt算法。&lt;/p&gt;
&lt;p&gt;摘要算法主要有以下几个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MD(Message Digest)：消息摘要&lt;/li&gt;
&lt;li&gt;SHA(Secure Hash Algorithm)：安全散列&lt;/li&gt;
&lt;li&gt;MAC(Message Authentication Code)：消息认证码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1. MD系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要有MD2、MD4、MD5，目前一般常用MD5&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 如果使用Java自带的api需要十多行才能实现md5算法&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对数据做md5，参数支持字符串，字节数据，输入流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;md5&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.md5Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2. SHA系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SHA系列有SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，SHA3-224、SHA3-256、SHA3-384、SHA3-512等。目前安全起见一般选择256以上，推荐384以上。当然摘要越长则计算耗时也越长，需要根据需求权衡。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 参数支持字符串，字节数据，输入流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha1Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha256Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha384Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha512Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_256Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_384Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_512Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3. HMAC系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HMAC(keyed-Hash Message Authentication Code)系列是包含密钥的散列算法，包含了MD和SHA两个系列的消息摘要算法。融合了MD，SHA：&lt;/p&gt;
&lt;p&gt;MD系列：HMacMD2，HMacMD4，HMacMD5&lt;/p&gt;
&lt;p&gt;SHA系列：HMacSHA1，HMacSHA224，HMacSHA256，HMacSHA38&lt;/p&gt;
&lt;p&gt;，HMacSHA512&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asdf3234asdf3234asdf3234asdf3234&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;valueToDigest&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试数据&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// valueToDigest参数支持字节数据，流，文件等&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 做HMAC-MD5摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacMd5&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 做HMAC-sha摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Collections&#34;&gt;&lt;a href=&#34;#Commons-Collections&#34; class=&#34;headerlink&#34; title=&#34;Commons Collections&#34;&gt;&lt;/a&gt;Commons Collections&lt;/h2&gt;&lt;p&gt;Apache Commons Collections 是对 java.util.Collection 的扩展。&lt;/p&gt;
&lt;p&gt;目前 &lt;strong&gt;Collections&lt;/strong&gt; 包有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commons-collections&lt;/li&gt;
&lt;li&gt;commons-collections4&lt;br&gt;commons-collections 最新版本是3.2.2，不支持泛型，目前官方已不在维护。&lt;br&gt;collections4 目前最新版本是4.4，最低要求 Java8 以上。&lt;br&gt;相对于 collections 来说完全支持 Java8 的特性并且支持泛型，该版本无法兼容旧有版本，于是为了避免冲突改名为 collections4。推荐直接使用该版本。（注：两个版本可以共存，使用时需要注意）。&lt;br&gt;这里使用3.2.2版本的中包名做下介绍：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包名&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;collections&lt;/td&gt;
&lt;td&gt;CommonsCollections自定义的一组公用的接口和工具类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bag&lt;/td&gt;
&lt;td&gt;实现Bag接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bidimap&lt;/td&gt;
&lt;td&gt;实现BidiMap系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;实现Buffer接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collection&lt;/td&gt;
&lt;td&gt;实现java.util.Collection接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;comparators&lt;/td&gt;
&lt;td&gt;实现java.util.Comparator接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functors&lt;/td&gt;
&lt;td&gt;Commons Collections自定义的一组功能类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iterators&lt;/td&gt;
&lt;td&gt;实现java.util.Iterator接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyvalue&lt;/td&gt;
&lt;td&gt;实现集合和键&amp;#x2F;值映射相关的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;实现java.util.List接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;td&gt;实现Map系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;实现Set系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;工具类&#34;&gt;&lt;a href=&#34;#工具类&#34; class=&#34;headerlink&#34; title=&#34;工具类&#34;&gt;&lt;/a&gt;工具类&lt;/h3&gt;&lt;h4 id=&#34;CollectionUtils&#34;&gt;&lt;a href=&#34;#CollectionUtils&#34; class=&#34;headerlink&#34; title=&#34;CollectionUtils&#34;&gt;&lt;/a&gt;CollectionUtils&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 判断是否为空（null或空list都为true）&lt;/span&gt;&lt;br&gt;CollectionUtils.isEmpty(list1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 添加元素（忽略null元素）&lt;/span&gt;&lt;br&gt;CollectionUtils.addIgnoreNull(list1, str);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list是否包含subList中的所有元素&lt;/span&gt;&lt;br&gt;CollectionUtils.containsAll(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list是否包含subList中的任意一个元素&lt;/span&gt;&lt;br&gt;CollectionUtils.containsAny(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1 减去 list2&lt;/span&gt;&lt;br&gt;CollectionUtils.subtract(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [&amp;quot;3&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 合并两个list并去重&lt;/span&gt;&lt;br&gt;CollectionUtils.union(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;//[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 取两个list同时存在的元素&lt;/span&gt;&lt;br&gt;CollectionUtils.intersection(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;ListUtils&#34;&gt;&lt;a href=&#34;#ListUtils&#34; class=&#34;headerlink&#34; title=&#34;ListUtils&#34;&gt;&lt;/a&gt;ListUtils&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 同CollectionUtils, 返回结果为List&lt;/span&gt;&lt;br&gt;ListUtils.subtract(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [&amp;quot;3&amp;quot;]&lt;/span&gt;&lt;br&gt;ListUtils.union(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;//[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;]&lt;/span&gt;&lt;br&gt;ListUtils.intersection(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 判断两个集合中的内容是否完全相同（顺序也一致）&lt;/span&gt;&lt;br&gt;ListUtils.isEqualList(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1如果为null则转换为空List&lt;/span&gt;&lt;br&gt;ListUtils.emptyIfNull(list1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1中所有元素做Hash&lt;/span&gt;&lt;br&gt;ListUtils.hashCodeForList(list1);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了以上介绍了两个还有 MapUtils，SetUtils，EnumerationUtils，IterableUtils 等不是很常用就不多做介绍了。&lt;/p&gt;
&lt;h3 id=&#34;集合扩展&#34;&gt;&lt;a href=&#34;#集合扩展&#34; class=&#34;headerlink&#34; title=&#34;集合扩展&#34;&gt;&lt;/a&gt;集合扩展&lt;/h3&gt;&lt;h4 id=&#34;FixedSizeList&#34;&gt;&lt;a href=&#34;#FixedSizeList&#34; class=&#34;headerlink&#34; title=&#34;FixedSizeList&#34;&gt;&lt;/a&gt;FixedSizeList&lt;/h4&gt;&lt;p&gt;FixedSizeList 用于装饰另一个 List 以阻止修改其大小。不支持添加、删除、清除等操作。set 方法是允许的（因为它不会改变列表大小），下面看代码示例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 装饰一下原list&lt;/span&gt;&lt;br&gt;List&amp;lt;String&amp;gt; list = FixedSizeList.fixedSizeList(sourceList);&lt;br&gt;list.set(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [11,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以下改变容器size的操作会抛出异常&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;list.remove(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;list.clear(); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;SetUniqueList&#34;&gt;&lt;a href=&#34;#SetUniqueList&#34; class=&#34;headerlink&#34; title=&#34;SetUniqueList&#34;&gt;&lt;/a&gt;SetUniqueList&lt;/h4&gt;&lt;p&gt;SetUniqueList 用来装饰另一个 List 以确保不存在重复元素，内部使用了 Set 来判断重复问题&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 元素不重复的list&lt;/span&gt;&lt;br&gt;SetUniqueList&amp;lt;String&amp;gt; list = SetUniqueList.setUniqueList(sourceList);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 存在则不处理，不会影响原来顺序&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1,2]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;TransformedList&#34;&gt;&lt;a href=&#34;#TransformedList&#34; class=&#34;headerlink&#34; title=&#34;TransformedList&#34;&gt;&lt;/a&gt;TransformedList&lt;/h4&gt;&lt;p&gt;TransformedList 装饰另一个 List 以转换添加的对象。add 和 set 方法受此类影响。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 转换list,在添加元素的时候会通过第二个参数Transformer转换一下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// （Transformer接口只有一个抽象方法可以使用lambda表达式）&lt;/span&gt;&lt;br&gt;       &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// transformingList不会对原list的已有元素做转换&lt;/span&gt;&lt;br&gt;TransformedList&amp;lt;String&amp;gt; list = TransformedList.transformingList(sourceList, e -&amp;gt; e.concat(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1, 2, a_]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// transformedList会对原list的已有元素做转换&lt;/span&gt;&lt;br&gt;list = TransformedList.transformedList(sourceList, e -&amp;gt; e.concat(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1_, 2_, a_]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PredicatedList&#34;&gt;&lt;a href=&#34;#PredicatedList&#34; class=&#34;headerlink&#34; title=&#34;PredicatedList&#34;&gt;&lt;/a&gt;PredicatedList&lt;/h4&gt;&lt;p&gt;PredicatedList 装饰另一个 List ，装饰后的 List 在添加元素的时候会调用 Predicate 接口来判断元素，匹配通过才会被添加到集合中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在添加元素的时候会通过第二个参数Predicate判断一下是否符合要求，符合要求才添加进来&lt;/span&gt;&lt;br&gt;PredicatedList&amp;lt;String&amp;gt; list = PredicatedList.predicatedList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(), e -&amp;gt; e.startsWith(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_4&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [_4]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以下会抛异常：java.lang.IllegalArgumentException: Cannot add Object &amp;#x27;4&amp;#x27;&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;ListOrderedSet&#34;&gt;&lt;a href=&#34;#ListOrderedSet&#34; class=&#34;headerlink&#34; title=&#34;ListOrderedSet&#34;&gt;&lt;/a&gt;ListOrderedSet&lt;/h4&gt;&lt;p&gt;ListOrderedSet 有序的Set，顺序按照元素添加顺序排列，类似 List&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 有序的set，按照插入顺序排序&lt;/span&gt;&lt;br&gt;Set&amp;lt;String&amp;gt; set = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ListOrderedSet&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;);&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;);&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;哈哈&amp;quot;&lt;/span&gt;);&lt;br&gt;println(set); &lt;span class=&#34;hljs-comment&#34;&gt;// [aa,11,哈哈]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Bag&#34;&gt;&lt;a href=&#34;#Bag&#34; class=&#34;headerlink&#34; title=&#34;Bag&#34;&gt;&lt;/a&gt;Bag&lt;/h4&gt;&lt;p&gt;Bag 接口是带计数功能的集合扩展，它继承了 Collection 接口，可以当做集合来使用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bag 带计数功能的集合&lt;/span&gt;&lt;br&gt;Bag&amp;lt;String&amp;gt; bag = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashBag&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(bag.size()); &lt;span class=&#34;hljs-comment&#34;&gt;// 3&lt;/span&gt;&lt;br&gt;println(bag.getCount(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// 2&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Map扩展&#34;&gt;&lt;a href=&#34;#Map扩展&#34; class=&#34;headerlink&#34; title=&#34;Map扩展&#34;&gt;&lt;/a&gt;Map扩展&lt;/h3&gt;&lt;h4 id=&#34;MultiValuedMap&#34;&gt;&lt;a href=&#34;#MultiValuedMap&#34; class=&#34;headerlink&#34; title=&#34;MultiValuedMap&#34;&gt;&lt;/a&gt;MultiValuedMap&lt;/h4&gt;&lt;p&gt;MultiValuedMap 和正常的 Map 有点区别，同一个 key 允许存放多个 value，这些 value 会放到一个 List 中。这个功能如果用 Java 的 Map 我们需要构造一个 &lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 加个各种操作来实现&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list实现，允许value重复&lt;/span&gt;&lt;br&gt;ListValuedMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayListValuedHashMap&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 注意：value的泛型是String, 但是get方法返回的是List&amp;lt;String&amp;gt;&lt;/span&gt;&lt;br&gt;List&amp;lt;String&amp;gt; users2 = map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// [张三,李四,张三]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// multiMap的其他方法&lt;/span&gt;&lt;br&gt;map.containsKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;map.containsValue(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;map.containsMapping(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.size(); &lt;span class=&#34;hljs-comment&#34;&gt;// 4&lt;/span&gt;&lt;br&gt;&lt;br&gt;Collection&amp;lt;String&amp;gt; ss = map.values();&lt;span class=&#34;hljs-comment&#34;&gt;// [张三,李四,张三,12]&lt;/span&gt;&lt;br&gt;map.remove(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 清空user的所有value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 转换为原生map&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Collection&amp;lt;String&amp;gt;&amp;gt; jMap = map.asMap();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;CaseInsensitiveMap&#34;&gt;&lt;a href=&#34;#CaseInsensitiveMap&#34; class=&#34;headerlink&#34; title=&#34;CaseInsensitiveMap&#34;&gt;&lt;/a&gt;CaseInsensitiveMap&lt;/h4&gt;&lt;p&gt;key大小写不敏感的Map&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// key大小写不敏感&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CaseInsensitiveMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ONE&amp;quot;&lt;/span&gt;);&lt;br&gt;println(o); &lt;span class=&#34;hljs-comment&#34;&gt;// 1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;OrderedMap&#34;&gt;&lt;a href=&#34;#OrderedMap&#34; class=&#34;headerlink&#34; title=&#34;OrderedMap&#34;&gt;&lt;/a&gt;OrderedMap&lt;/h4&gt;&lt;p&gt;有顺序的 Map，按照插入顺序排序。如果使用 hashMap 的话 key 会按照 hash 值排序，可能和插入顺序一样，也可能不一样。key 数量和不同 JDK 版本都可能影响顺序，这是由于不同版本 jdk map 的 hash 算法有区别，hash 算法和当前 map 的容量也有关系。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// key有序：按照插入顺序&lt;/span&gt;&lt;br&gt;OrderedMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ListOrderedMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;哈哈&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 得到的keySet有序&lt;/span&gt;&lt;br&gt;Set&amp;lt;String&amp;gt; set = map.keySet(); &lt;span class=&#34;hljs-comment&#34;&gt;// 哈哈,此处,cc,dd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nk&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.nextKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// cc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;pk&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.previousKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 哈哈&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;LRUMap&#34;&gt;&lt;a href=&#34;#LRUMap&#34; class=&#34;headerlink&#34; title=&#34;LRUMap&#34;&gt;&lt;/a&gt;LRUMap&lt;/h4&gt;&lt;p&gt;LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。&lt;/p&gt;
&lt;p&gt;各种缓存框架都有对 LRU 算法的支持，如 EhCache，GuavaCache，Redis 等，可以说是很常用的一种算法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;LRUMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LRUMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 最早没有被使用的aa将被移出&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// [bb:2, cc:3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 访问一次bb，此时在put的话将会移出最早没有被访问的cc&lt;/span&gt;&lt;br&gt;map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// [bb:2, dd:4]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PassiveExpiringMap&#34;&gt;&lt;a href=&#34;#PassiveExpiringMap&#34; class=&#34;headerlink&#34; title=&#34;PassiveExpiringMap&#34;&gt;&lt;/a&gt;PassiveExpiringMap&lt;/h4&gt;&lt;p&gt;装饰一个 Map 以在达到过期时间时删除过期条目。当在 Map 中放置键值对时，此装饰器使用 ExpirationPolicy 来确定条目应保持多长时间，由到期时间值定义。当对 Map 做操作的时候才会检查元素是否过期并触发删除操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 存活一秒钟&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ttlMillis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;;&lt;br&gt;PassiveExpiringMap.ExpirationPolicy&amp;lt;String, String&amp;gt; ep = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PassiveExpiringMap&lt;/span&gt;.ConstantTimeToLiveExpirationPolicy&amp;lt;&amp;gt;(ttlMillis);&lt;br&gt;PassiveExpiringMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PassiveExpiringMap&lt;/span&gt;&amp;lt;&amp;gt;(ep);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 等待一秒后在获取&lt;/span&gt;&lt;br&gt;Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;vc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;println(vc); &lt;span class=&#34;hljs-comment&#34;&gt;// null&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;6-ReferenceMap&#34;&gt;&lt;a href=&#34;#6-ReferenceMap&#34; class=&#34;headerlink&#34; title=&#34;6. ReferenceMap&#34;&gt;&lt;/a&gt;6. ReferenceMap&lt;/h4&gt;&lt;p&gt;ReferenceMap 允许垃圾收集器删除映射。可以指定使用什么类型的引用来存储映射的键和值。如果使用的不是强引用，则垃圾收集器可以在键或值变得不可访问，或者 JVM 内存不足时删除映射。用它做一个简易的缓存不会导致存放内容过多导致内存溢出。&lt;/p&gt;
&lt;h4 id=&#34;BidiMap&#34;&gt;&lt;a href=&#34;#BidiMap&#34; class=&#34;headerlink&#34; title=&#34;BidiMap&#34;&gt;&lt;/a&gt;BidiMap&lt;/h4&gt;&lt;p&gt;BidiMap 允许在 key 和 value 之间进行双向查找。其中一个键可以查找一个值，一个值可以同样轻松地查找一个键。这个接口扩展了 Map，value 不允许重复，如果重复将同时覆盖旧的键值对。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 双向map, 可通过value获取key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// value也不允许重复，如果重复将会覆盖旧值&lt;/span&gt;&lt;br&gt;BidiMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeBidiMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;猫&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// value重复的话key也会被覆盖，相当于&amp;quot;cat2:猫&amp;quot;会覆盖掉&amp;quot;cat:猫&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// map.put(&amp;quot;cat2&amp;quot;, &amp;quot;猫&amp;quot;);&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;cat=猫, dog=狗&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.getKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;);&lt;br&gt;println(key); &lt;span class=&#34;hljs-comment&#34;&gt;// dog&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 反向，value变为key，key变为value&lt;/span&gt;&lt;br&gt;BidiMap&amp;lt;String, String&amp;gt; iMap = map.inverseBidiMap();&lt;br&gt;println(iMap); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;狗=dog, 猫=cat&amp;#125;&lt;/span&gt;&lt;br&gt;println(iMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// dog&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对反向map操作同时影响原map&lt;/span&gt;&lt;br&gt;iMap.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;鱼&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;);&lt;br&gt;println(iMap); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;狗=dog, 猫=cat, 鱼=fish&amp;#125;&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;cat=猫, dog=狗, fish=鱼&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Compress&#34;&gt;&lt;a href=&#34;#Commons-Compress&#34; class=&#34;headerlink&#34; title=&#34;Commons Compress&#34;&gt;&lt;/a&gt;Commons Compress&lt;/h2&gt;&lt;p&gt;压缩、解压缩文件的组件，可以操作rar、cpio、Unix dump、tar、zip、gzip、XZ、Pack200和bzip2格式的压缩文件。&lt;/p&gt;
&lt;h3 id=&#34;压缩&#34;&gt;&lt;a href=&#34;#压缩&#34; class=&#34;headerlink&#34; title=&#34;压缩&#34;&gt;&lt;/a&gt;压缩&lt;/h3&gt;&lt;p&gt;压缩：按某种算法减小文件所占用空间的大小&lt;br&gt;解压：按对应的逆向算法恢复文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;GzipCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.gz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GzipCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.gz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BZip2CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.bz2&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BZip2CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.bz2&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XZCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.xz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XZCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.xz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedLZ4CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedLZ4CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlockLZ4CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.block_lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlockLZ4CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.block_lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pack200CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.pack&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pack200CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.pack&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeflateCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.deflate&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeflateCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.deflate&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZMACompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.lzma&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZMACompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.lzma&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedSnappyCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.sz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedSnappyCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.sz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.Z&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;gzip&#34;&gt;&lt;a href=&#34;#gzip&#34; class=&#34;headerlink&#34; title=&#34;gzip&#34;&gt;&lt;/a&gt;gzip&lt;/h4&gt;&lt;p&gt;gzip是Unix，Linux上常用的压缩工具，也是当今的WEB站点上非常流行的压缩技术。其有压缩级别等概念，可以通过GzipParameters去设置。JDK8也自带了GZIPInputStream类，用法类似。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// gzip压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;GzipParameters&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;parameters&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipParameters&lt;/span&gt;();&lt;br&gt;parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);&lt;br&gt;parameters.setOperatingSystem(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;parameters.setFilename(FilenameUtils.getName(file));&lt;br&gt;parameters.setComment(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test file&amp;quot;&lt;/span&gt;);&lt;br&gt;parameters.setModificationTime(System.currentTimeMillis());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;fos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(file + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;GzipCompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gzos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorOutputStream&lt;/span&gt;(fos, parameters);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file)) &amp;#123;&lt;br&gt;    IOUtils.copy(is, gzos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// gzip解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gzFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js.gz&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(gzFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;GzipCompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;GzipParameters&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; gis.getMetaData();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js&amp;quot;&lt;/span&gt;);&lt;br&gt;    FileUtils.copyToFile(gis, targetFile);&lt;br&gt;    targetFile.setLastModified(p.getModificationTime());&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;bz2&#34;&gt;&lt;a href=&#34;#bz2&#34; class=&#34;headerlink&#34; title=&#34;bz2&#34;&gt;&lt;/a&gt;bz2&lt;/h4&gt;&lt;p&gt;bz2是Linux下常见的压缩文件格式，是由具有高压缩率的压缩工具bzip2生成，以后缀为.bz2结尾的压缩文件。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 压缩bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.bz2&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(targetFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;BZip2CompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BZip2CompressorOutputStream&lt;/span&gt;(os);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(srcFile)) &amp;#123;&lt;br&gt;    IOUtils.copy(is, bzos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 解压bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.bz2&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(bzFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;BZip2CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BZip2CompressorInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;    FileUtils.copyToFile(bzis, targetFile);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其他压缩算法的使用方式和bz2基本一致，这里就不做代码示例了。&lt;/p&gt;
&lt;h3 id=&#34;归档&#34;&gt;&lt;a href=&#34;#归档&#34; class=&#34;headerlink&#34; title=&#34;归档&#34;&gt;&lt;/a&gt;归档&lt;/h3&gt;&lt;p&gt;归档：将许多零散的文件整理为一个文件，文件总大小基本不变&lt;br&gt;解包：从归档文件中释放文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;TarArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档&lt;code&gt;*.tar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TarArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包&lt;code&gt;*.tar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZipArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.zip&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZipArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.zip&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JarArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.jar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JarArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.jar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DumpArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档&lt;code&gt;*.dump&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DumpArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包&lt;code&gt;*.dump&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CpioArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.cpio&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CpioArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.cpio&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.ar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.ar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArjArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.arj&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SevenZOutputFile&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.7z&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SevenZFile&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.7z&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其中zip，jar，cpio，ar，7z既支持归档也支持压缩，能在归档的过程中做压缩处理。&lt;/p&gt;
&lt;p&gt;由于他们会处理一个个零散的文件，所以会有ArchiveEntry的概念，即一个ArchiveEntry代表归档包内的一个目录或文件。&lt;/p&gt;
&lt;h4 id=&#34;tar&#34;&gt;&lt;a href=&#34;#tar&#34; class=&#34;headerlink&#34; title=&#34;tar&#34;&gt;&lt;/a&gt;tar&lt;/h4&gt;&lt;p&gt;tar是Unix和Linux系统上的常用的压缩归档工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为”tar”。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// tar压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcDir&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveOutputStream&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(targetFile))) &amp;#123;&lt;br&gt;        tarRecursive(tos, srcDir, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 递归压缩目录下的文件和目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tarRecursive&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TarArchiveOutputStream tos, File srcFile, String basePath)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (srcFile.isDirectory()) &amp;#123;&lt;br&gt;        File[] files = srcFile.listFiles();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nextBasePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; basePath + srcFile.getName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ArrayUtils.isEmpty(files)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 空目录&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveEntry&lt;/span&gt;(srcFile, nextBasePath);&lt;br&gt;            tos.putArchiveEntry(entry);&lt;br&gt;            tos.closeArchiveEntry();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (File file : files) &amp;#123;&lt;br&gt;                tarRecursive(tos, file, nextBasePath);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveEntry&lt;/span&gt;(srcFile, basePath + srcFile.getName());&lt;br&gt;        tos.putArchiveEntry(entry);&lt;br&gt;        FileUtils.copyFile(srcFile, tos);&lt;br&gt;        tos.closeArchiveEntry();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// tar解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;untar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;        TarArchiveEntry nextEntry;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((nextEntry = tis.getNextTarEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; nextEntry.getName();&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, name);&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果是目录，创建目录&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (nextEntry.isDirectory()) &amp;#123;&lt;br&gt;                file.mkdir();&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//文件则写入具体的路径中&lt;/span&gt;&lt;br&gt;                FileUtils.copyToFile(tis, file);&lt;br&gt;                file.setLastModified(nextEntry.getLastModifiedDate().getTime());&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;7z&#34;&gt;&lt;a href=&#34;#7z&#34; class=&#34;headerlink&#34; title=&#34;7z&#34;&gt;&lt;/a&gt;7z&lt;/h4&gt;&lt;p&gt;7z 是一种全新的压缩格式，它拥有极高的压缩比。&lt;/p&gt;
&lt;p&gt;7z 格式的主要特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放的结构&lt;/li&gt;
&lt;li&gt;高压缩比&lt;/li&gt;
&lt;li&gt;强大的 AES-256 加密&lt;/li&gt;
&lt;li&gt;能够兼容任意压缩、转换、加密算法&lt;/li&gt;
&lt;li&gt;最高支持 16000000000 GB 的文件压缩&lt;/li&gt;
&lt;li&gt;以 Unicode 为标准的文件名&lt;/li&gt;
&lt;li&gt;支持固实压缩&lt;/li&gt;
&lt;li&gt;支持文件头压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 7z压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;_7z&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;SevenZOutputFile&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outputFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SevenZOutputFile&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.7z&amp;quot;&lt;/span&gt;))) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;);&lt;br&gt;        _7zRecursive(outputFile, srcFile, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 递归压缩目录下的文件和目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;_7zRecursive&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(SevenZOutputFile _7zFile, File srcFile, String basePath)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (srcFile.isDirectory()) &amp;#123;&lt;br&gt;        File[] files = srcFile.listFiles();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nextBasePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; basePath + srcFile.getName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 空目录&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ArrayUtils.isEmpty(files)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;SevenZArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; _7zFile.createArchiveEntry(srcFile, nextBasePath);&lt;br&gt;            _7zFile.putArchiveEntry(entry);&lt;br&gt;            _7zFile.closeArchiveEntry();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (File file : files) &amp;#123;&lt;br&gt;                _7zRecursive(_7zFile, file, nextBasePath);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SevenZArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; _7zFile.createArchiveEntry(srcFile, basePath + srcFile.getName());&lt;br&gt;        _7zFile.putArchiveEntry(entry);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] bs = FileUtils.readFileToByteArray(srcFile);&lt;br&gt;        _7zFile.write(bs);&lt;br&gt;        _7zFile.closeArchiveEntry();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 7z解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;un7z&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;SevenZFile&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;archive&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SevenZFile&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test.7z&amp;quot;&lt;/span&gt;))) &amp;#123;&lt;br&gt;        SevenZArchiveEntry entry;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((entry = archive.getNextEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, entry.getName());&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (entry.isDirectory()) &amp;#123;&lt;br&gt;                file.mkdirs();&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (entry.hasStream()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt; [] buf = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;byte&lt;/span&gt; [&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;baos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; (len = archive.read(buf)) &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;) &amp;#123;&lt;br&gt;                    baos.write(buf, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, len);&lt;br&gt;                &amp;#125;&lt;br&gt;                FileUtils.writeByteArrayToFile(file, baos.toByteArray());&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;修改归档文件&#34;&gt;&lt;a href=&#34;#修改归档文件&#34; class=&#34;headerlink&#34; title=&#34;修改归档文件&#34;&gt;&lt;/a&gt;修改归档文件&lt;/h3&gt;&lt;p&gt;有时候我们会有修改归档内文件的需求，比如添加、删除一个文件，修改其中的文件内容等，当然我们也可以全部解压出来改完后在压缩回去。这样除了代码量多一些外，归档文件大也会导致操作时间过长。那么有没有办法用代码去动态的修改归档文件里的内容呢？&lt;/p&gt;
&lt;p&gt;org.apache.commons.compress.changes包下正好就提供了一些类用于动态的修改归档文件里的内容。下面看一个简单的例子&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tarFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(tarFile);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 替换后会覆盖原test.tar，如果是windows可能会由于文件被访问而覆盖报错&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(tarFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tais&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(is);&lt;br&gt;     &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;taos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveOutputStream&lt;/span&gt;(os)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSet&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;changes&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChangeSet&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 删除&amp;quot;test.tar中&amp;quot;的&amp;quot;dir/1.txt&amp;quot;文件&lt;/span&gt;&lt;br&gt;    changes.delete(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dir/1.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 删除&amp;quot;test.tar&amp;quot;中的&amp;quot;t&amp;quot;目录&lt;/span&gt;&lt;br&gt;    changes.delete(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 添加文件，如果已存在则替换&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;addFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;addEntry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; taos.createArchiveEntry(addFile, addFile.getName());&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// add可传第三个参数：true: 已存在则替换(默认值)， false: 不替换&lt;/span&gt;&lt;br&gt;    changes.add(addEntry, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(addFile));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 执行修改&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSetPerformer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;performer&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChangeSetPerformer&lt;/span&gt;(changes);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSetResults&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; performer.perform(tais, taos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;h4 id=&#34;简单工厂&#34;&gt;&lt;a href=&#34;#简单工厂&#34; class=&#34;headerlink&#34; title=&#34;简单工厂&#34;&gt;&lt;/a&gt;简单工厂&lt;/h4&gt;&lt;p&gt;commons-compress还提供了一些简单的工厂类用户动态的获取压缩流和归档流。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用factory动态获取归档流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveStreamFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArchiveStreamFactory&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;archiveName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ArchiveStreamFactory.TAR;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/in.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/out.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ais&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createArchiveInputStream(archiveName, is);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;aos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createArchiveOutputStream(archiveName, os);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 其他业务操作&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// ------------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用factory动态获取压缩流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorStreamFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompressorStreamFactory&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;compressName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CompressorStreamFactory.GZIP;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/in.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/out.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;cis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createCompressorInputStream(compressName, is);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;cos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createCompressorOutputStream(compressName, os);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 其他业务操作&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;同时解压解包&#34;&gt;&lt;a href=&#34;#同时解压解包&#34; class=&#34;headerlink&#34; title=&#34;同时解压解包&#34;&gt;&lt;/a&gt;同时解压解包&lt;/h4&gt;&lt;p&gt;上面说了很多都是单一的操作，那么如果解压”test.tar.gz”这种归档和压缩于一体的文件呢？&lt;/p&gt;
&lt;p&gt;其实很简单，我们不需要先解压在解包，可以一步同时完成解压和解包，只需要将对应的流包装一下即可（不得不感叹Java IO的装饰者模式设计真的很巧妙）。下面看代码示例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 解压 解包test.tar.gz文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 先解压，所以需要先用gzip流包装文件流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorInputStream&lt;/span&gt;(is);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在解包，用tar流包装gzip流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;ArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tgis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(gis)) &amp;#123;&lt;br&gt;    ArchiveEntry nextEntry;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((nextEntry = tgis.getNextEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; nextEntry.getName();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, name);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 如果是目录，创建目录&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (nextEntry.isDirectory()) &amp;#123;&lt;br&gt;            file.mkdir();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 文件则写入具体的路径中&lt;/span&gt;&lt;br&gt;            FileUtils.copyToFile(tgis, file);&lt;br&gt;            file.setLastModified(nextEntry.getLastModifiedDate().getTime());&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Configuration&#34;&gt;&lt;a href=&#34;#Commons-Configuration&#34; class=&#34;headerlink&#34; title=&#34;Commons Configuration&#34;&gt;&lt;/a&gt;Commons Configuration&lt;/h2&gt;&lt;p&gt;是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载配置信息。&lt;/p&gt;
&lt;h2 id=&#34;Commons-CSV&#34;&gt;&lt;a href=&#34;#Commons-CSV&#34; class=&#34;headerlink&#34; title=&#34;Commons CSV&#34;&gt;&lt;/a&gt;Commons CSV&lt;/h2&gt;&lt;p&gt;是一个用来读写各种Comma Separated Value(CSV)格式文件的Java类库。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Daemon&#34;&gt;&lt;a href=&#34;#Commons-Daemon&#34; class=&#34;headerlink&#34; title=&#34;Commons Daemon&#34;&gt;&lt;/a&gt;Commons Daemon&lt;/h2&gt;&lt;p&gt;实现将普通的Java应用变成系统的后台服务,例如 Tomcat 就是利用这个项目来实现作为 Linux 和 Windows 的服务启动和停止的。&lt;/p&gt;
&lt;h2 id=&#34;Commons-DBCP&#34;&gt;&lt;a href=&#34;#Commons-DBCP&#34; class=&#34;headerlink&#34; title=&#34;Commons DBCP&#34;&gt;&lt;/a&gt;Commons DBCP&lt;/h2&gt;&lt;p&gt;数据库连接池。&lt;/p&gt;
&lt;h2 id=&#34;Commons-DBUtils&#34;&gt;&lt;a href=&#34;#Commons-DBUtils&#34; class=&#34;headerlink&#34; title=&#34;Commons DBUtils&#34;&gt;&lt;/a&gt;Commons DBUtils&lt;/h2&gt;&lt;p&gt;是JDBC工具组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Digester&#34;&gt;&lt;a href=&#34;#Commons-Digester&#34; class=&#34;headerlink&#34; title=&#34;Commons Digester&#34;&gt;&lt;/a&gt;Commons Digester&lt;/h2&gt;&lt;p&gt;是XML到Java对象的映射工具集。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Email&#34;&gt;&lt;a href=&#34;#Commons-Email&#34; class=&#34;headerlink&#34; title=&#34;Commons Email&#34;&gt;&lt;/a&gt;Commons Email&lt;/h2&gt;&lt;p&gt;是邮件操作组件，对Java Mail API进行了封装，提供了常用的邮件发送和接收类，简化邮件操作。该组件依赖Java Mail API。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Exec&#34;&gt;&lt;a href=&#34;#Commons-Exec&#34; class=&#34;headerlink&#34; title=&#34;Commons Exec&#34;&gt;&lt;/a&gt;Commons Exec&lt;/h2&gt;&lt;p&gt;提供一些常用的方法用来执行外部进程，如执行exe文件或命令行。&lt;/p&gt;
&lt;h2 id=&#34;Commons-FileUpload&#34;&gt;&lt;a href=&#34;#Commons-FileUpload&#34; class=&#34;headerlink&#34; title=&#34;Commons FileUpload&#34;&gt;&lt;/a&gt;Commons FileUpload&lt;/h2&gt;&lt;p&gt;为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。&lt;/p&gt;
&lt;h2 id=&#34;Commons-IO&#34;&gt;&lt;a href=&#34;#Commons-IO&#34; class=&#34;headerlink&#34; title=&#34;Commons IO&#34;&gt;&lt;/a&gt;Commons IO&lt;/h2&gt;&lt;p&gt;是处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。&lt;/p&gt;
&lt;h2 id=&#34;Commons-JCI&#34;&gt;&lt;a href=&#34;#Commons-JCI&#34; class=&#34;headerlink&#34; title=&#34;Commons JCI&#34;&gt;&lt;/a&gt;Commons JCI&lt;/h2&gt;&lt;p&gt;提供通用的Java编译器接口。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Lang3&#34;&gt;&lt;a href=&#34;#Commons-Lang3&#34; class=&#34;headerlink&#34; title=&#34;Commons Lang3&#34;&gt;&lt;/a&gt;Commons Lang3&lt;/h2&gt;&lt;p&gt;是处理Java基本对象方法的工具类包，该类包提供对字符、数组等基本对象的操作，弥补了java.lang api基本处理方法上的不足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html&#34;&gt;API 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具类&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ArrayUtils&lt;/td&gt;
&lt;td&gt;用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BitField&lt;/td&gt;
&lt;td&gt;用于操作位元，提供了一些方便而安全的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BooleanUtils&lt;/td&gt;
&lt;td&gt;用于操作和转换boolean或者Boolean及相应的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharEncoding&lt;/td&gt;
&lt;td&gt;包含了Java环境支持的字符编码，提供是否支持某种编码的判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharRange&lt;/td&gt;
&lt;td&gt;用于设定字符范围并做相应检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharSet&lt;/td&gt;
&lt;td&gt;用于设定一组字符作为范围并做相应检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharSetUtils&lt;/td&gt;
&lt;td&gt;用于操作CharSet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharUtils&lt;/td&gt;
&lt;td&gt;用于操作char值和Character对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClassUtils&lt;/td&gt;
&lt;td&gt;用于对Java类的操作，不使用反射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ObjectUtils&lt;/td&gt;
&lt;td&gt;用于操作Java对象，提供null安全的访问和其他一些功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomStringUtils&lt;/td&gt;
&lt;td&gt;用于生成随机的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SerializationUtils&lt;/td&gt;
&lt;td&gt;用于处理对象序列化，提供比一般Java序列化更高级的处理能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringEscapeUtils&lt;/td&gt;
&lt;td&gt;用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringUtils&lt;/td&gt;
&lt;td&gt;处理String的核心类，提供了相当多的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SystemUtils&lt;/td&gt;
&lt;td&gt;在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Validate&lt;/td&gt;
&lt;td&gt;提供验证的操作，有点类似assert断言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WordUtils&lt;/td&gt;
&lt;td&gt;用于处理单词大小写、换行等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Commons-Logging&#34;&gt;&lt;a href=&#34;#Commons-Logging&#34; class=&#34;headerlink&#34; title=&#34;Commons Logging&#34;&gt;&lt;/a&gt;Commons Logging&lt;/h2&gt;&lt;p&gt;提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。类包给中间件&amp;#x2F;日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Math&#34;&gt;&lt;a href=&#34;#Commons-Math&#34; class=&#34;headerlink&#34; title=&#34;Commons Math&#34;&gt;&lt;/a&gt;Commons Math&lt;/h2&gt;&lt;p&gt;轻量级自容器的数学和统计计算方法类包，包含大多数常用的数值算法。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Net&#34;&gt;&lt;a href=&#34;#Commons-Net&#34; class=&#34;headerlink&#34; title=&#34;Commons Net&#34;&gt;&lt;/a&gt;Commons Net&lt;/h2&gt;&lt;p&gt;封装了各种网络协议的客户端，支持FTP、NNTP、SMTP、POP3、Telnet等协议。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Pool&#34;&gt;&lt;a href=&#34;#Commons-Pool&#34; class=&#34;headerlink&#34; title=&#34;Commons Pool&#34;&gt;&lt;/a&gt;Commons Pool&lt;/h2&gt;&lt;p&gt;提供了一整套用于实现对象池化的框架，以及若干各具特色的对象池实现，可以有效地减少处理对象池化时的工作量。类包用于提高像文件句柄、数据库连接、socket通信这类大对象的调用效率，简单的说就是一种对象一次创建多次使用的技术。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Primitives&#34;&gt;&lt;a href=&#34;#Commons-Primitives&#34; class=&#34;headerlink&#34; title=&#34;Commons Primitives&#34;&gt;&lt;/a&gt;Commons Primitives&lt;/h2&gt;&lt;p&gt;提供了一个更小，更快和更易使用的对Java基本类型的支持。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Validator&#34;&gt;&lt;a href=&#34;#Commons-Validator&#34; class=&#34;headerlink&#34; title=&#34;Commons Validator&#34;&gt;&lt;/a&gt;Commons Validator&lt;/h2&gt;&lt;p&gt;提供了一个简单的、可扩展的框架来在一个XML文件中定义校验器(校验方法)和校验规则。支持校验规则的和错误消息的国际化。&lt;/p&gt;
&lt;h2 id=&#34;Apache-HttpClient&#34;&gt;&lt;a href=&#34;#Apache-HttpClient&#34; class=&#34;headerlink&#34; title=&#34;Apache HttpClient&#34;&gt;&lt;/a&gt;Apache HttpClient&lt;/h2&gt;&lt;p&gt;曾经是Apache Commons的子项目，后来独立出来。HttpClient简化HTTP客户端与服务器的各种通讯，实现HTTP客户端程序（也就是浏览器程序）的功能。&lt;/p&gt;
</content>
        <category term="常用开发库" />
        <category term="工具类" />
        <category term="Apache Common" />
        <updated>2024-01-03T13:13:21.652Z</updated>
    </entry>
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Google%20Guava/</id>
        <title>Google Guava</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Google%20Guava/"/>
        <content type="html">&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Guava工程包含了若干被Google的 Java项目广泛依赖 的核心库，例如：集合 &lt;code&gt;[collections]&lt;/code&gt; 、缓存&lt;code&gt; [caching]&lt;/code&gt; 、原生类型支持 &lt;code&gt;[primitives support]&lt;/code&gt; 、并发库&lt;code&gt; [concurrency libraries]&lt;/code&gt; 、通用注解&lt;code&gt; [common annotations]&lt;/code&gt; 、字符串处理&lt;code&gt; [string processing]&lt;/code&gt; 、&lt;code&gt;I/O&lt;/code&gt; 等等。 所有这些工具每天都在被Google的工程师应用在产品服务中。&lt;/p&gt;
&lt;p&gt;guava的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效设计良好的API，被Google的开发者设计，实现和使用&lt;/li&gt;
&lt;li&gt;遵循高效的java语法实践&lt;/li&gt;
&lt;li&gt;使代码更刻度，简洁，简单&lt;/li&gt;
&lt;li&gt;节约时间，资源，提高生产力&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;推荐网址&#34;&gt;&lt;a href=&#34;#推荐网址&#34; class=&#34;headerlink&#34; title=&#34;推荐网址&#34;&gt;&lt;/a&gt;推荐网址&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guava/wiki/Home&#34;&gt;Guava Wiki&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://guava.dev/releases/snapshot-jre/api/docs/&#34;&gt;Guava API Doc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/google/guava&#34;&gt;Guava Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://ifeve.com/google-guava/&#34;&gt;Guava 中文教程 - ifeve.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;使用Guava&#34;&gt;&lt;a href=&#34;#使用Guava&#34; class=&#34;headerlink&#34; title=&#34;使用Guava&#34;&gt;&lt;/a&gt;使用Guava&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注意：JDK 1.8 or higher.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight xml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs xml&#34;&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;com.google.guava&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;guava&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;28.2-jre&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-comment&#34;&gt;&amp;lt;!-- or, for Android: --&amp;gt;&lt;/span&gt;&lt;br&gt;  &lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;28.2-android&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-tag&#34;&gt;&amp;lt;/&lt;span class=&#34;hljs-name&#34;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;内容简介&#34;&gt;&lt;a href=&#34;#内容简介&#34; class=&#34;headerlink&#34; title=&#34;内容简介&#34;&gt;&lt;/a&gt;内容简介&lt;/h1&gt;&lt;h2 id=&#34;基本工具-Basic-utilities&#34;&gt;&lt;a href=&#34;#基本工具-Basic-utilities&#34; class=&#34;headerlink&#34; title=&#34;基本工具 [Basic utilities]&#34;&gt;&lt;/a&gt;基本工具 &lt;code&gt;[Basic utilities]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;让使用Java语言变得更舒适&lt;/p&gt;
&lt;h3 id=&#34;Optional&#34;&gt;&lt;a href=&#34;#Optional&#34; class=&#34;headerlink&#34; title=&#34;Optional&#34;&gt;&lt;/a&gt;Optional&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 使用和避免null：null是模棱两可的，会引起令人困惑的错误，有些时候它让人很不舒服。很多Guava工具类用快速失败拒绝null值，而不是盲目地接受&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Optional类是Java8为了解决null值判断问题，借鉴google guava类库的Optional类而引入的一个同名Optional类，使用Optional类可以避免显式的null值判断（null的防御性检查），避免null导致的NPE（NullPointerException）。&lt;/p&gt;
&lt;p&gt;这里讲的optional 也是指jdk中的optional，其实二者类似，但是编码使用gauva的optional，阿里巴巴编程规范会提醒换成jdk自带的optional。&lt;/p&gt;
&lt;p&gt;这里强调一下Optional的用法。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;不要用isPressent判断一个对象是否为空&lt;/strong&gt;&lt;br&gt;这种用法不但没有减少null的防御性检查，而且增加了Optional包装的过程，违背了Optional设计的初衷，因此开发中要避免这种糟糕的使用&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TestEnum&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/***&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 编号和对应的名称&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    a(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aname&amp;quot;&lt;/span&gt;),&lt;br&gt;    b(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbbb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bname&amp;quot;&lt;/span&gt;),&lt;br&gt;    c(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cccc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cname&amp;quot;&lt;/span&gt;),&lt;br&gt;    ;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Getter&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String code;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Getter&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;&lt;br&gt;    TestEnum(String code, String name) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.code = code;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getNameByCod&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String code)&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;String&amp;gt; nameOfCode = Arrays.stream(TestEnum.values())&lt;br&gt;                .filter(item -&amp;gt; StringUtils.equals(item.code, code))&lt;br&gt;                .map(TestEnum::getName)&lt;br&gt;                .findFirst();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//不要这样使用optional 这样optional的意义：优雅的处理空指针 就不存在了&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (nameOfCode.isPresent()) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;不存在&amp;quot;&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 请使用orElseThrow 和orElse&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; nameOfCode.orElseThrow(() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;不存在&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;考虑让方法返回optional&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;《Effective Java》中对方法返回Optional的一些观点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;容器（包括，集合，映射，数组，stream，optional）都不应该包装在Optional进行返回，返回空的容器能让客户端免于处理一个Optional&lt;/li&gt;
&lt;li&gt;如果无法返回结果，且没有返回结果客户端必须进行特殊的处理，那么就应该声明返回optional&lt;/li&gt;
&lt;li&gt;返回optional并不是一个不需要成本的操作，无论返回空，还是非空，使用optional作为返回值的方法都是需要初始化的，所以optional在看重性能的情况下使用不当是一种性能的浪费&lt;/li&gt;
&lt;li&gt;永远不要返回基本类型对于包装类型的Optional，这需要进行基本类型-&amp;gt;包装类型-&amp;gt;optional的三层包装，可以使用OptionalInt，optionallong等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;PreConditions前置条件检查&#34;&gt;&lt;a href=&#34;#PreConditions前置条件检查&#34; class=&#34;headerlink&#34; title=&#34;PreConditions前置条件检查&#34;&gt;&lt;/a&gt;PreConditions前置条件检查&lt;/h3&gt;&lt;p&gt;前置条件: 让方法中的条件检查更简单&lt;/p&gt;
&lt;p&gt;根据参数分为三种：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;参数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;没有额外参数&lt;/td&gt;
&lt;td&gt;抛出的异常中没有错误消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有一个Object对象作为额外参数&lt;/td&gt;
&lt;td&gt;抛出的异常使用Object.toString() 作为错误消息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有一个String对象作为额外参数，并且有一组任意数量的附加Object对象&lt;/td&gt;
&lt;td&gt;这个变种处理异常消息的方式有点类似printf，但考虑GWT的兼容性和效率，只支持%s指示符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;test1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Integer index, List&amp;lt;String&amp;gt;list)&lt;/span&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (Objects.isNull(index))&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index不可以为空&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (CollectionUtils.isEmpty(list))&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;list不可以为空&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (index&amp;lt;&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;||index&amp;gt;=list.size())&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(String.format(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;越界无法获取，下标%S&amp;quot;&lt;/span&gt;,index));&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list.get(index);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;test2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Integer index, List&amp;lt;String&amp;gt;list)&lt;/span&gt;&amp;#123;&lt;br&gt;    Preconditions.checkNotNull(index,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;index不可以为空&amp;quot;&lt;/span&gt;);&lt;br&gt;    Preconditions.checkNotNull(list,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;list不可以为空&amp;quot;&lt;/span&gt;);&lt;br&gt;    Preconditions.checkElementIndex(index,list.size(),String.format(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;越界无法获取，下标%S&amp;quot;&lt;/span&gt;,index));&lt;br&gt;    Preconditions.checkArgument(index &amp;gt;= &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;&amp;amp;&amp;amp;index&amp;lt;list.size(),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;越界无法获取，下标%S&amp;quot;&lt;/span&gt;,index);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list.get(index);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;test1 缺点：if看起来臃肿，优点：可用抛出我们系统的自定义异常便于前端反馈&lt;br&gt;test2 优点：简单直接，缺点：抛出的都是jdk中的异常，通一异常处理可能无法返回正确提示的通一结果集给前端&lt;br&gt;我们可用写一个带异常Class的工具类或者直接代理guava中的Predition 加一层try catch 使我其抛出我们系统的自定义异常。&lt;/p&gt;
&lt;h3 id=&#34;ComparisonChain和Ordering&#34;&gt;&lt;a href=&#34;#ComparisonChain和Ordering&#34; class=&#34;headerlink&#34; title=&#34;ComparisonChain和Ordering&#34;&gt;&lt;/a&gt;ComparisonChain和Ordering&lt;/h3&gt;&lt;p&gt;想象一个场景，人先根据age排序后根据height排序&lt;/p&gt;
&lt;h4 id=&#34;实现comparable&#34;&gt;&lt;a href=&#34;#实现comparable&#34; class=&#34;headerlink&#34; title=&#34;实现comparable&#34;&gt;&lt;/a&gt;实现comparable&lt;/h4&gt;&lt;p&gt;这是常规写法。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Builder&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@NoArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@AllArgsConstructor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;People&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Comparable&lt;/span&gt;&amp;lt;People&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Integer age;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Integer height;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(People o)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!Objects.equals(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age, o.age)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age - o.age;&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.height - o.height;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;People&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; People.builder().build();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;People&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; People.builder().build();&lt;br&gt;        List&amp;lt;People&amp;gt; list = Arrays.asList(p1, p2);&lt;br&gt;        Collections.sort(list);&lt;br&gt;        System.out.println(list);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//你或许会写得更高级一点 如下&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(People o)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ageCompare&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Ints.compare(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age, o.age);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ageCompare==&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Ints.compare(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.height, o.height);&lt;br&gt;        &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ageCompare;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述代码缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写法繁琐  &lt;/li&gt;
&lt;li&gt;忽略了空指针， return this.age - o.age; 这一句存在空指针的情况，对null进行拆箱直接NPE（NullPoint Exception，及空指针异常）  &lt;/li&gt;
&lt;li&gt;维护复杂，再加一个存款，加逻辑复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;JAVA8使用Stream进行操作&#34;&gt;&lt;a href=&#34;#JAVA8使用Stream进行操作&#34; class=&#34;headerlink&#34; title=&#34;JAVA8使用Stream进行操作&#34;&gt;&lt;/a&gt;JAVA8使用Stream进行操作&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(People o)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;thisAge&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Optional.ofNullable(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age).orElse(Integer.MAX_VALUE);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;thisHeight&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Optional.ofNullable(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.height).orElse(Integer.MAX_VALUE);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;oAge&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Optional.ofNullable(o.age).orElse(Integer.MAX_VALUE);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;oHeight&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Optional.ofNullable(o.height).orElse(Integer.MAX_VALUE);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (thisAge!=oAge)&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; thisAge-oAge;&lt;br&gt;    &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; thisHeight - oHeight;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;上述代码，规避了NPE,但是缺点依旧存在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Stream复杂的写法，导致语法不明显，逻辑不通俗易懂。&lt;/li&gt;
&lt;li&gt;维护复杂，如果增加条件则需要变更方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;ComparisonChain&#34;&gt;&lt;a href=&#34;#ComparisonChain&#34; class=&#34;headerlink&#34; title=&#34;ComparisonChain&#34;&gt;&lt;/a&gt;ComparisonChain&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compareTo&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(People o)&lt;/span&gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; ComparisonChain.start()  &lt;br&gt;            .compare(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.getAge(), o.getAge(), Ordering.natural().nullsFirst())  &lt;br&gt;            .compare(&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.getHeight(), o.getHeight(), Ordering.natural().nullsFirst())  &lt;br&gt;            .result();  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优雅的处理空指针，传入比较器 Ordering.natural().nullsFirst() 让null在最前面&lt;/li&gt;
&lt;li&gt;语义化明显：先比较age 后比较 height，null在最前面&lt;/li&gt;
&lt;li&gt;更易于维护，只需要加一行&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Ordering&#34;&gt;&lt;a href=&#34;#Ordering&#34; class=&#34;headerlink&#34; title=&#34;Ordering&#34;&gt;&lt;/a&gt;Ordering&lt;/h4&gt;&lt;p&gt;Ordering是Guava流畅风格比较器Comparator的实现，它可以用来构建复杂的比较器，以完成排序的功能。&lt;/p&gt;
&lt;p&gt;从实现上说Ordering实例就是一个特殊的Comparator实例。Ordering把很多基于Comparator的静态方法比如&lt;/p&gt;
&lt;p&gt;Collections.max包装成自己的实例方法(非静态方法)，并且提供了链式调用方法，来定制和增强现有的比较器。&lt;/p&gt;
&lt;h5 id=&#34;创建排序器&#34;&gt;&lt;a href=&#34;#创建排序器&#34; class=&#34;headerlink&#34; title=&#34;创建排序器&#34;&gt;&lt;/a&gt;创建排序器&lt;/h5&gt;&lt;p&gt;常见的排序器可以由下面的静态方法创建&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;natural()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对可排序类型做自然排序，如数字按照大小，日期按照先后顺序&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);&lt;br&gt;    list.sort(Ordering.natural());&lt;br&gt;    System.out.println(list.toString());&lt;span class=&#34;hljs-comment&#34;&gt;//[1, 3, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;usingToString()&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;按对象的字符串形式做字典排序，即使用toString()返回的字符串按字典顺序进行排序。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; stringList = Lists.newArrayList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zhangsan&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;lisi&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;wangwu&amp;quot;&lt;/span&gt;);&lt;br&gt;        Collections.sort(stringList,Ordering.usingToString());&lt;br&gt;        System.out.println(stringList.toString());&lt;span class=&#34;hljs-comment&#34;&gt;//[lisi, wangwu, zhangsan]&lt;/span&gt;&lt;br&gt;        list.sort(Ordering.usingToString());&lt;br&gt;        System.out.println(list.toString());&lt;span class=&#34;hljs-comment&#34;&gt;//[1, 3, 5, 6, 7, 8, 9]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;from()&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;zhangsan&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;lisi&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;());&lt;br&gt;List&amp;lt;User&amp;gt; users =  Lists.newArrayList(zhangsan,lisi);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//按照age字段进行排序&lt;/span&gt;&lt;br&gt;Ordering&amp;lt;User&amp;gt; ordering1 = Ordering.from(Comparator.comparingInt(u -&amp;gt; u.getAge()));&lt;br&gt;users.sort(ordering1);&lt;br&gt;System.out.println(users.toString());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;链式调用方法&#34;&gt;&lt;a href=&#34;#链式调用方法&#34; class=&#34;headerlink&#34; title=&#34;链式调用方法&#34;&gt;&lt;/a&gt;链式调用方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;reverse()&lt;br&gt;获取语义相反的排序器&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;);&lt;br&gt;list.sort(Ordering.natural().reverse());&lt;br&gt;System.out.println(list.toString());&lt;span class=&#34;hljs-comment&#34;&gt;//[9, 8, 7, 6, 5, 3, 1]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nullsFirst()&lt;br&gt;使用当前排序器，但额外把null值排到最前面&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list1 = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//Collections.sort(list1); // 出现异常...&lt;/span&gt;&lt;br&gt;Collections.sort(list1, Ordering.natural().nullsFirst());&lt;br&gt;System.out.println(list1);&lt;span class=&#34;hljs-comment&#34;&gt;//[null, 1, 2, 3, 5, 8]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nullsLast()&lt;br&gt;使用当前排序器，但额外把null值排到最后面&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list2 = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//Collections.sort(list1); // 出现异常...&lt;/span&gt;&lt;br&gt;Collections.sort(list1, Ordering.natural().nullsLast());&lt;br&gt;System.out.println(list1);&lt;span class=&#34;hljs-comment&#34;&gt;//[1, 2, 3, 5, 8, null]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;compound(Comparator)&lt;br&gt;成另一个比较器，以处理当前排序器中的相等情况&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;首先按照年龄进行排序，如果年龄相同则按照薪水排序&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Comparator&amp;lt;UserPojo&amp;gt; objectComparator = Comparator.comparingInt(u -&amp;gt; u.getAge());&lt;br&gt;        Comparator&amp;lt;UserPojo&amp;gt; objectComparator2 = Comparator.comparing(u -&amp;gt; u.getSalary());&lt;br&gt;        Ordering&amp;lt;UserPojo&amp;gt; ordering1 = Ordering.from(objectComparator).compound(objectComparator2);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;UserPojo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;zhangsan&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserPojo&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;UserPojo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;lisi&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserPojo&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;UserPojo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;wangwu&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserPojo&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;UserPojo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;amao&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;UserPojo&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;杨猫&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;,&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Company&lt;/span&gt;(),&lt;span class=&#34;hljs-number&#34;&gt;4000&lt;/span&gt;);&lt;br&gt;        List&amp;lt;UserPojo&amp;gt; users =  Lists.newArrayList(zhangsan,lisi,wangwu,amao);&lt;br&gt;        users.sort(ordering1);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//[UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]&lt;/span&gt;&lt;br&gt;        System.out.println(users.toString());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;onResultOf(Function)&lt;br&gt;把比较器的元素使用Function函数转化成一个值result，再对这个值应用Ordering的比较方法。result的排序顺序就是最后的排序顺序&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;UserPojo&amp;gt; users2 =  Lists.newArrayList(zhangsan,lisi,wangwu,amao,&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;        Ordering&amp;lt;UserPojo&amp;gt; fOrdering = Ordering.natural().onResultOf(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Function&lt;/span&gt;&amp;lt;UserPojo, Comparable&amp;gt;() &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;@Nullable&lt;/span&gt; Comparable &lt;span class=&#34;hljs-title function_&#34;&gt;apply&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Nullable&lt;/span&gt; UserPojo userPojo)&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; userPojo.getSalary();&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;).nullsFirst();&lt;br&gt;        users2.sort(fOrdering);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//[null, UserPojo(name=张三, age= 20,company=Company(name=null, address=null), salary=1000), UserPojo(name=李四, age= 30,company=Company(name=null, address=null), salary=2000), UserPojo(name=王五, age= 30,company=Company(name=null, address=null), salary=3000), UserPojo(name=杨猫, age= 30,company=Company(name=null, address=null), salary=4000)]&lt;/span&gt;&lt;br&gt;        System.out.println(users2.toString());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意链式排序器的调用顺序–从右往左的顺序，上面Ordering.natural().onResultOf().nullsFirst();&lt;br&gt;先调用apply方法获取salary值，并把salary为null的元素放到最前面，然后把剩下的进行自然排序&lt;br&gt;所以如果将nullsFirst放在onResultOf的左边则会报异常&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;运用排序器&#34;&gt;&lt;a href=&#34;#运用排序器&#34; class=&#34;headerlink&#34; title=&#34;运用排序器&#34;&gt;&lt;/a&gt;运用排序器&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;greatestOf(Iterable iterable,int k)&lt;br&gt;获取可迭代对象中最大的k个元素&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; result = Ordering.natural().greatestOf(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;)),&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;       System.out.println(result);&lt;span class=&#34;hljs-comment&#34;&gt;//[5, 4]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;leastOf(Iterable iterable,int k)&lt;br&gt;对元素按照从小到大排序，并返回前k个元素&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; result1 = Ordering.natural().leastOf(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;)),&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;System.out.println(result1);&lt;span class=&#34;hljs-comment&#34;&gt;//[1, 2]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;isOrdered(Iterable)&lt;br&gt;判断可迭代对象是否已按照排序器排序:允许有排序值相等的元素&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;Collections.sort(list);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;order&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Ordering.natural().isOrdered(list);&lt;br&gt;System.out.println(order);&lt;span class=&#34;hljs-comment&#34;&gt;//true&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;sortedCopy(Iterable)&lt;br&gt;返回一个新的已经排序的列表，原来的列表顺序不会变&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; nums = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;));&lt;br&gt;List&amp;lt;Integer&amp;gt; resultCopy = Ordering.natural().sortedCopy(nums);&lt;br&gt;System.out.println(resultCopy); &lt;span class=&#34;hljs-comment&#34;&gt;// [1, 3, 4]&lt;/span&gt;&lt;br&gt;System.out.println(nums); &lt;span class=&#34;hljs-comment&#34;&gt;// [4, 1, 3]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;min(E,E,…)&lt;br&gt;返回最小值，如果有多个，则返回第一个&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;min&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Ordering.natural().min(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;System.out.println(min);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;max(E,E,…)&lt;br&gt;返回最大值，如果有多个，则返回第一个&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;max&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Ordering.natural().max(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;System.out.println(max)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;不可变集合&#34;&gt;&lt;a href=&#34;#不可变集合&#34; class=&#34;headerlink&#34; title=&#34;不可变集合&#34;&gt;&lt;/a&gt;不可变集合&lt;/h3&gt;&lt;p&gt;使用场景：&lt;/p&gt;
&lt;p&gt;如定义一系列状态比如吃饭，睡觉，过马路，需要根据这个状态判断是否可以玩手机，可以在类中定义集合包装这个三个状态，如果当前状态属于三个之一那么不可以玩手机，你可以使用基本的hashset，但是hashset的元素可以被更改，导致可能方法的判断和原本的语义出现出入&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;当对象被不可信的库调用时，不可变形式是安全的；&lt;br&gt;不可变对象被多个线程调用时，不存在竞态条件问题&lt;br&gt;不可变集合不需要考虑变化，因此可以节省时间和空间。所有不可变的集合都比它们的可变 形式有更好的内存利用率（分析和测试细节）；&lt;br&gt;不可变对象因为有固定不变，可以作为常量来安全使用&lt;/p&gt;
&lt;h3 id=&#34;新集合类型&#34;&gt;&lt;a href=&#34;#新集合类型&#34; class=&#34;headerlink&#34; title=&#34;新集合类型&#34;&gt;&lt;/a&gt;新集合类型&lt;/h3&gt;&lt;h4 id=&#34;Multiset&#34;&gt;&lt;a href=&#34;#Multiset&#34; class=&#34;headerlink&#34; title=&#34;Multiset&#34;&gt;&lt;/a&gt;Multiset&lt;/h4&gt;&lt;p&gt;可以用两种方式看待Multiset：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有元素顺序限制的ArrayList&lt;br&gt;  当把Multiset看成普通的Collection时，它表现得就像无序的ArrayList&lt;ul&gt;
&lt;li&gt;add(E)添加单个给定元素&lt;/li&gt;
&lt;li&gt;iterator()返回一个迭代器，包含Multiset的所有元素（包括重复的元素）&lt;/li&gt;
&lt;li&gt;size()返回所有元素的总个数（包括重复的元素）&lt;/li&gt;
&lt;li&gt;Map&amp;lt;E, Integer&amp;gt;，键为元素，值为计数0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Multiset看作Map&amp;lt;E, Integer&amp;gt;时，它也提供了符合性能期望的查询操作：&lt;br&gt;  - count(Object)返回给定元素的计数。HashMultiset.count的复杂度为O(1)，TreeMultiset.count的复杂度为O(log n)。&lt;br&gt;  - entrySet()返回Set&amp;lt;Multiset.Entry&amp;gt;，和Map的entrySet类似。&lt;br&gt;  - elementSet()返回所有不重复元素的Set，和Map的keySet()类似。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;MultiSetTest&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/****&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * java 8 一下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;statisticsWordCount1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(List&amp;lt;String&amp;gt; list)&lt;/span&gt; &amp;#123;&lt;br&gt;        Map&amp;lt;String, Integer&amp;gt; countMap = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (list == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt; || list.size() == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; countMap;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (String s : list) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nowCount&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; countMap.getOrDefault(s, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;            countMap.put(s, nowCount + &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; countMap;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * java 8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;statisticsWordCount2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(List&amp;lt;String&amp;gt; list)&lt;/span&gt; &amp;#123;&lt;br&gt;        list = Optional.ofNullable(list).orElse(Collections.emptyList());&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list.stream()&lt;br&gt;                .collect(Collectors.groupingBy(t -&amp;gt; t,&lt;br&gt;                        Collectors.reducing(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, num -&amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, Integer::sum)));&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * guava api&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; list&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Map&amp;lt;String, Integer&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;statisticsWordCount3&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(List&amp;lt;String&amp;gt; list)&lt;/span&gt; &amp;#123;&lt;br&gt;        list = Optional.ofNullable(list).orElse(Collections.emptyList());&lt;br&gt;        HashMultiset&amp;lt;String&amp;gt; multiset = HashMultiset.create(list);&lt;br&gt;        System.out.println(multiset);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; multiset.stream()&lt;br&gt;                .collect(Collectors.toMap(item -&amp;gt; item, multiset::count, BinaryOperator.maxBy(Ordering.natural())));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        Map&amp;lt;String, Integer&amp;gt; map = statisticsWordCount3(Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;));&lt;br&gt;        map.forEach((k, v) -&amp;gt; System.out.println(k + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt; + v));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;SortedMultiset&#34;&gt;&lt;a href=&#34;#SortedMultiset&#34; class=&#34;headerlink&#34; title=&#34;SortedMultiset&#34;&gt;&lt;/a&gt;SortedMultiset&lt;/h4&gt;&lt;p&gt;Multiset 接口的变种，它支持高效地获取指定范围的子集。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SortMultiSetTest&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 在不改变源money 元素的情况下 统计介于min和max间的钱&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * money中的null 视为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;Float&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;findMoneyBetween1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; min, &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; max, List&amp;lt;Float&amp;gt; money)&lt;/span&gt; &amp;#123;&lt;br&gt;        money = Optional.ofNullable(money).orElse(Collections.emptyList());&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; money.stream().map(item -&amp;gt; Optional.ofNullable(item).orElse(&lt;span class=&#34;hljs-number&#34;&gt;0F&lt;/span&gt;))&lt;br&gt;                .filter(item -&amp;gt; item &amp;gt; min &amp;amp;&amp;amp; item &amp;lt; max)&lt;br&gt;                .collect(Collectors.toList());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 在不改变源money 元素的情况下 统计介于min和max间的钱&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * money中的null 视为0&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; List&amp;lt;Float&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;findMoneyBetween2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; min, &lt;span class=&#34;hljs-type&#34;&gt;float&lt;/span&gt; max, List&amp;lt;Float&amp;gt; money)&lt;/span&gt; &amp;#123;&lt;br&gt;        money = Optional.ofNullable(money).orElse(Collections.emptyList());&lt;br&gt;        TreeMultiset&amp;lt;Float&amp;gt; treeMultiset = TreeMultiset.create(Ordering.&amp;lt;Float&amp;gt;natural().onResultOf(f1 -&amp;gt; Optional.ofNullable(f1).orElse(&lt;span class=&#34;hljs-number&#34;&gt;0F&lt;/span&gt;)));&lt;br&gt;        treeMultiset.addAll(money);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Lists.newLinkedList(treeMultiset.subMultiset(min, BoundType.CLOSED, max, BoundType.CLOSED));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;Multimap&#34;&gt;&lt;a href=&#34;#Multimap&#34; class=&#34;headerlink&#34; title=&#34;Multimap&#34;&gt;&lt;/a&gt;Multimap&lt;/h4&gt;&lt;p&gt;Guava的 Multimap可以很容易地把一个键映射到多个值。换句话说，Multimap是把键映射到任意多个值的一般方式。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Map&amp;lt;String, Collection&amp;lt;Integer&amp;gt;&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;mergeMap1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Map&amp;lt;String, Integer&amp;gt; map1, Map&amp;lt;String, Integer&amp;gt; map2)&lt;/span&gt; &amp;#123;&lt;br&gt;    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());&lt;br&gt;    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());&lt;br&gt;    Set&amp;lt;String&amp;gt; allKey = Stream.of(map1.keySet(), map2.keySet()).flatMap(Collection::stream).collect(Collectors.toSet());&lt;br&gt;    Map&amp;lt;String, Collection&amp;lt;Integer&amp;gt;&amp;gt; resMap = Maps.newHashMap();&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (String key : allKey) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;integer1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map1.get(key);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;integer2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map2.get(key);&lt;br&gt;        Set&amp;lt;Integer&amp;gt; tempSet = Sets.newHashSet();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (Objects.nonNull(integer1)) &amp;#123;&lt;br&gt;            tempSet.add(integer1);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (Objects.nonNull(integer2)) &amp;#123;&lt;br&gt;            tempSet.add(integer2);&lt;br&gt;        &amp;#125;&lt;br&gt;        resMap.put(key, tempSet);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; resMap;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Map&amp;lt;String, Collection&amp;lt;Integer&amp;gt;&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;mergeMap2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Map&amp;lt;String, Integer&amp;gt; map1, Map&amp;lt;String, Integer&amp;gt; map2)&lt;/span&gt; &amp;#123;&lt;br&gt;    map1 = Optional.ofNullable(map1).orElse(Collections.emptyMap());&lt;br&gt;    map2 = Optional.ofNullable(map2).orElse(Collections.emptyMap());&lt;br&gt;    Multimap&amp;lt;String, Integer&amp;gt; multimap = HashMultimap.create();&lt;br&gt;    map1.forEach(multimap::put);&lt;br&gt;    map2.forEach(multimap::put);&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; multimap.asMap();&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;BiMap&#34;&gt;&lt;a href=&#34;#BiMap&#34; class=&#34;headerlink&#34; title=&#34;BiMap&#34;&gt;&lt;/a&gt;BiMap&lt;/h4&gt;&lt;p&gt;BiMap是特殊的Map：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以用 inverse()反转BiMap&amp;lt;K, V&amp;gt;的键值映射&lt;/li&gt;
&lt;li&gt;保证值是唯一的，因此 values()返回Set而不是普通的Collection&lt;/li&gt;
&lt;li&gt;在BiMap中，如果你想把键映射到已经存在的值，会抛出IllegalArgumentException异常。如果对特定值，你想要强制替换它的键，请使用 BiMap.forcePut(key, value)。&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BiMapLearn&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//想象这是用户id 和用户名对应map&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//你需要根据id查询用户名。根据用户名查询id（用户名同样不可以重复）&lt;/span&gt;&lt;br&gt;        HashBiMap&amp;lt;String, String&amp;gt; userNameAndIdMap = HashBiMap.create();&lt;br&gt;        userNameAndIdMap.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2017015600&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;陈兴cupk&amp;quot;&lt;/span&gt;);&lt;br&gt;        userNameAndIdMap.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;80309525&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;陈兴cmbnk&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 重复value 会抛出异常ava.lang.IllegalArgumentException:&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// value already present: 陈兴cmbnk&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//        userNameAndIdMap.put(&amp;quot;309525&amp;quot;,&amp;quot;陈兴cmbnk&amp;quot;);&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//forcePut 可以强制替换 key -value 组合&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//        userNameAndIdMap.forcePut(&amp;quot;309525&amp;quot;,&amp;quot;陈兴cmbnk&amp;quot;);&lt;/span&gt;&lt;br&gt;        System.out.println(userNameAndIdMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2017015600&amp;quot;&lt;/span&gt;));&lt;br&gt;        System.out.println(userNameAndIdMap.inverse().get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;陈兴cmbnk&amp;quot;&lt;/span&gt;));&lt;br&gt;        System.out.println(userNameAndIdMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;80309525&amp;quot;&lt;/span&gt;));&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//set类型的key value&lt;/span&gt;&lt;br&gt;        Set&amp;lt;String&amp;gt; strings = userNameAndIdMap.keySet();&lt;br&gt;        Set&amp;lt;String&amp;gt; values = userNameAndIdMap.values();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;Table&#34;&gt;&lt;a href=&#34;#Table&#34; class=&#34;headerlink&#34; title=&#34;Table&#34;&gt;&lt;/a&gt;Table&lt;/h4&gt;&lt;p&gt;使用场景：当你需要多个字段作为key时，你可能为这个key编写一个类，重写equals和hashMap。或者使用形同Map&amp;lt;FirstName, Map&amp;lt;LastName, Person&amp;gt;&amp;gt;的map结构，前者编码繁琐，后者使用不友好（第一个get后判空，后才能左第二次get）&lt;/p&gt;
&lt;p&gt;Guava为此提供了新集合类型Table，它有两个支持所有类型的键：”行”和”列”。Table提供多种视图，以便你从各种角度使用它：&lt;/p&gt;
&lt;p&gt;rowMap()：用Map&amp;lt;R, Map&amp;lt;C, V&amp;gt;&amp;gt;表现Table&amp;lt;R, C, V&amp;gt;。同样的， rowKeySet()返回”行”的集合Set。&lt;/p&gt;
&lt;p&gt;row ：用Map&amp;lt;C, V&amp;gt;返回给定”行”的所有列，对这个map进行的写操作也将写入Table中。&lt;/p&gt;
&lt;p&gt;类似的列访问方法：columnMap()、columnKeySet()、column。（基于列的访问会比基于的行访问稍微低效点）&lt;/p&gt;
&lt;p&gt;cellSet()：用元素类型为Table.Cell的Set表现Table&amp;lt;R, C, V&amp;gt;。Cell类似于Map.Entry，但它是用行和列两个键区分的。&lt;/p&gt;
&lt;p&gt;使用案例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TableLearn&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(getNameByAgeAndNo1(&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;201715600&amp;quot;&lt;/span&gt;));&lt;br&gt;        System.out.println(getNameByAgeAndNo2(&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;201715600&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//根据年龄和编号 获取名字，编写KeyOfAgeAndNo 重写equals hashcode&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getNameByAgeAndNo1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age,String no)&lt;/span&gt;&amp;#123;&lt;br&gt;        HashMap&amp;lt;KeyOfAgeAndNo, String&amp;gt; memory = Maps.newHashMap();&lt;br&gt;        memory.put(KeyOfAgeAndNo.of(&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;201715600&amp;quot;&lt;/span&gt;),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;大一的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;        memory.put(KeyOfAgeAndNo.of(&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0929&amp;quot;&lt;/span&gt;),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;高一的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;        memory.put(KeyOfAgeAndNo.of(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;80303697&amp;quot;&lt;/span&gt;),&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;实习的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Optional.ofNullable(memory.get(KeyOfAgeAndNo.of(age, no)))&lt;br&gt;                .orElseThrow(() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查无此人&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//编写KeyOfAgeAndNo 重写equals hashcode&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;KeyOfAgeAndNo&lt;/span&gt;&amp;#123;&lt;br&gt;        Integer age;&lt;br&gt;        String no;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; KeyOfAgeAndNo &lt;span class=&#34;hljs-title function_&#34;&gt;of&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;( Integer age,String no)&lt;/span&gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;KeyOfAgeAndNo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;KeyOfAgeAndNo&lt;/span&gt;();&lt;br&gt;            res.age=age;&lt;br&gt;            res.no=no;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Object o)&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (&lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt; == o) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (!(o &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; KeyOfAgeAndNo)) &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;KeyOfAgeAndNo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;that&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (KeyOfAgeAndNo) o;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Objects.equals(age, that.age) &amp;amp;&amp;amp;&lt;br&gt;                    Objects.equals(no, that.no);&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;hashCode&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Objects.hash(age, no);&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;//使用table &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getNameByAgeAndNo2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; age,String no)&lt;/span&gt;&amp;#123;&lt;br&gt;        HashBasedTable&amp;lt;Integer ,String,String&amp;gt;table=HashBasedTable.create();&lt;br&gt;        table.put(&lt;span class=&#34;hljs-number&#34;&gt;17&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;201715600&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;大一的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;        table.put(&lt;span class=&#34;hljs-number&#34;&gt;14&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;0929&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;高一的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;        table.put(&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;80303697&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;实习的陈兴&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Optional.ofNullable(table.get(age, no))&lt;br&gt;                .orElseThrow(() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查无此人&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&#34;ClassToInstanceMap&#34;&gt;&lt;a href=&#34;#ClassToInstanceMap&#34; class=&#34;headerlink&#34; title=&#34;ClassToInstanceMap&#34;&gt;&lt;/a&gt;ClassToInstanceMap&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;使用场景，类型指向实例，使用普通map需要&lt;/li&gt;
&lt;li&gt;示例&lt;br&gt;  getInstanceByClass1需要进行强转因为map get方法返回object类型，不能限制key的类型&lt;br&gt;  getInstanceByClass2则没有这种需要 且可以限定key的类型&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassToInstanceMapLearn&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//静态内部类实现单例 和ClassToInstanceMap 使用没有必要关系&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SingletonHolder&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; ClassToInstanceMapLearn INSTANCE;&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;            INSTANCE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassToInstanceMapLearn&lt;/span&gt;();&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;ClassToInstanceMapLearn&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ClassToInstanceMapLearn Constructor&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; ClassToInstanceMapLearn &lt;span class=&#34;hljs-title function_&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; SingletonHolder.INSTANCE;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Map&amp;lt;Class&amp;lt;?&amp;gt;, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; ClassToInstanceMapLearn&amp;gt; Memory1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        Memory1.put(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//加入从 简单工场拿SingletonHolder实例 强转化 将抛出异常&lt;/span&gt;&lt;br&gt;        Memory1.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassToInstanceMapLearn&lt;/span&gt;&amp;gt; T &lt;span class=&#34;hljs-title function_&#34;&gt;getInstanceByClass1&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Class&amp;lt;T&amp;gt; clazz)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//需要强转需要去判断 是否是clazz的实例 错误写法&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (T) Optional.ofNullable(Memory1.get(clazz))&lt;br&gt;                .orElseThrow(() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;不存在&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; ClassToInstanceMap&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; ClassToInstanceMapLearn&amp;gt; Memory2 = MutableClassToInstanceMap.create();&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;&lt;br&gt;        Memory2.putInstance(ClassToInstanceMapLearn.class, ClassToInstanceMapLearn.newInstance());&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//无法加入&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//        Memory2.put(SingletonHolder.class, ClassToInstanceMapLearn.newInstance());&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;lt;T &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ClassToInstanceMapLearn&lt;/span&gt;&amp;gt; T &lt;span class=&#34;hljs-title function_&#34;&gt;getInstanceByClass2&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Class&amp;lt;T&amp;gt; clazz)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//不需要强转&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Optional.ofNullable(Memory2.getInstance(clazz))&lt;br&gt;                .orElseThrow(() -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;不存在&amp;quot;&lt;/span&gt;));&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(getInstanceByClass1(ClassToInstanceMapLearn.class));&lt;br&gt;         System.out.println(getInstanceByClass2(ClassToInstanceMapLearn.class));&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;集合-Collections&#34;&gt;&lt;a href=&#34;#集合-Collections&#34; class=&#34;headerlink&#34; title=&#34;集合[Collections]&#34;&gt;&lt;/a&gt;集合&lt;code&gt;[Collections]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Guava对JDK集合的扩展，这是Guava最成熟和为人所知的部分&lt;br&gt;guava 中的集合工具常常以集合名称加s出现&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Collections2 因为java存在Collections guava加了2&lt;/li&gt;
&lt;li&gt;Lists&lt;/li&gt;
&lt;li&gt;Maps&lt;/li&gt;
&lt;li&gt;Sets&lt;br&gt;等等 上面介绍的新集合类型也存在对应的工具类&lt;br&gt;这些工具类的共性&lt;strong&gt;都存在静态工厂方法&lt;/strong&gt;&lt;br&gt;为什么要使用静态工厂方法，它相比于构造方法（这里的静态工厂方法不是指，设计模式中的工厂模式）&lt;br&gt;《Effective Java》第一条 使用静态工厂方法代替构造器，给予了解答&lt;/li&gt;
&lt;li&gt;静态工厂方法有名字&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//这一句是什么意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;big1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BigInteger&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Random&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;));&lt;br&gt;System.out.println(big1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//这一句又是什么意思&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;BigInteger&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;big2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; BigInteger.probablePrime(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Random&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;));&lt;br&gt;System.out.println(big2);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;静态工厂方法，不必每次都生成一个对象&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//虽然下面两句都在放屁，但是前者的屁更臭&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;flag&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Random&lt;/span&gt;().nextInt() % &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//每次生成一个新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Boolean&lt;/span&gt;(flag);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//不会生成新对象&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Boolean.valueOf(flag);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;静态工厂方法可以返回任何原返回类型的子类型，如guava中的api&lt;/li&gt;
&lt;li&gt;静态工厂的返回对象的类可也随着每次调用而变化，取决于入参类似于简单工厂模式&lt;/li&gt;
&lt;li&gt;静态工厂方法返回的对象所属的类可以在，在编写百行该静态工厂方法的类时不存在，如JDBC数据库连接&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Collections2&#34;&gt;&lt;a href=&#34;#Collections2&#34; class=&#34;headerlink&#34; title=&#34;Collections2&#34;&gt;&lt;/a&gt;Collections2&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;过滤&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;filterLearn&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;    Collection&amp;lt;Integer&amp;gt; filter = Collections2.filter(list, Objects::nonNull);&lt;br&gt;    System.out.println(list);&lt;br&gt;    System.out.println(filter);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//返回一个继承了AbstractCollection的集合&lt;/span&gt;&lt;br&gt;    System.out.println(filter.getClass());&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;转换&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Collections2Test&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Integer nums;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Collections2Test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Integer nums)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.nums = nums;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;transformLearn&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Collections2Test&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;c1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Collections2Test&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Collections2Test&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;c2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ne &lt;span class=&#34;hljs-title function_&#34;&gt;Collections2Test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Collections2Test&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;c3&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Collections2Test&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;        List&amp;lt;Collections2Test&amp;gt; list = Arrays.asList(c1, c2, c3);&lt;br&gt;        Collection&amp;lt;Integer&amp;gt; transform = Collections2.transform(list,&lt;br&gt;                t -&amp;gt; Optional.ofNullable(t)&lt;br&gt;                        .orElse(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Collections2Test&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;)).nums);&lt;br&gt;        System.out.println(transform);&lt;br&gt;        System.out.println(transform.getClass());&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;全排列&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;    ArrayList&amp;lt;Integer&amp;gt; list = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;    Collection&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; lists = Collections2.orderedPermutations(list);&lt;br&gt;    lists.forEach(System.out::println);&lt;br&gt;    Collection&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; permutations = Collections2.permutations(list);&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;====&amp;quot;&lt;/span&gt;);&lt;br&gt;    permutations.forEach(System.out::println);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Lists&#34;&gt;&lt;a href=&#34;#Lists&#34; class=&#34;headerlink&#34; title=&#34;Lists&#34;&gt;&lt;/a&gt;Lists&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;切割&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取一个字符串中的全部字符，返回不可变集合&lt;/span&gt;&lt;br&gt;ImmutableList&amp;lt;Character&amp;gt; chars = Lists.charactersOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(chars);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//按照大小分割list&lt;/span&gt;&lt;br&gt;ArrayList&amp;lt;Integer&amp;gt; intList = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;);&lt;br&gt;List&amp;lt;List&amp;lt;Integer&amp;gt;&amp;gt; partitionList = Lists.partition(intList, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;System.out.println(partitionList);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Sets&#34;&gt;&lt;a href=&#34;#Sets&#34; class=&#34;headerlink&#34; title=&#34;Sets&#34;&gt;&lt;/a&gt;Sets&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;交集&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;HashSet&amp;lt;Integer&amp;gt; set1 = Sets.newHashSet(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;HashSet&amp;lt;Integer&amp;gt; set2 = Sets.newHashSet(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//返回交集&lt;/span&gt;&lt;br&gt;Sets.SetView&amp;lt;Integer&amp;gt; intersection = Sets.intersection(set1, set2);&lt;br&gt;System.out.println(intersection);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;差集&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//返回set1中存在 s2中不存在的元素&lt;/span&gt;&lt;br&gt;System.out.println(Sets.difference(set1, set2));&lt;br&gt;System.out.println(Sets.difference(set2, set1));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;并集&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//返回并集&lt;/span&gt;&lt;br&gt;Sets.SetView&amp;lt;Integer&amp;gt; union = Sets.union(set1, set2);&lt;br&gt;System.out.println(union);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;过滤&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;System.out.println(Sets.filter(union, t -&amp;gt; t % &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;Maps&#34;&gt;&lt;a href=&#34;#Maps&#34; class=&#34;headerlink&#34; title=&#34;Maps&#34;&gt;&lt;/a&gt;Maps&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;uniqueIndex 根据传入的function生成map&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;ArrayList&amp;lt;Integer&amp;gt; list1 = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//传入function根据function生成map 要求 key 不可重复&lt;/span&gt;&lt;br&gt;ImmutableMap&amp;lt;String, Integer&amp;gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;获取两个map的不同&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//如果你预计hashMap的大小请使用这个方法&lt;/span&gt;&lt;br&gt;HashMap&amp;lt;String, Integer&amp;gt; map1 = Maps.newHashMapWithExpectedSize(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;map1.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;map1.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;map1.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;map1.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;map1.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;ArrayList&amp;lt;Integer&amp;gt; list1 = Lists.newArrayList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//传入function根据function生成map 要求 key 不可重复&lt;/span&gt;&lt;br&gt;ImmutableMap&amp;lt;String, Integer&amp;gt; integerImmutableMap = Maps.uniqueIndex(list1, String::valueOf);&lt;br&gt;MapDifference&amp;lt;String, Integer&amp;gt; difference = Maps.difference(map1, integerImmutableMap);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//左边独有key&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; mapLeft = difference.entriesOnlyOnLeft();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//右边独有key&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; mapRight = difference.entriesOnlyOnRight();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//两个map相同key 但是不同value&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, MapDifference.ValueDifference&amp;lt;Integer&amp;gt;&amp;gt; valueDifferenceMap = difference.entriesDiffering();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//左边map的值 有边map的值&lt;/span&gt;&lt;br&gt;System.out.println(valueDifferenceMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;).rightValue());&lt;br&gt;System.out.println(valueDifferenceMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;).leftValue());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;过滤&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//过滤map 中的Entries&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; filterEntriesMap = Maps.filterEntries(map1, e -&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; e != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; StringUtils.equals(e.getKey(), String.valueOf(e.getValue()));&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//过滤key&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; filterKeysMap = Maps.filterKeys(map1, StringUtils::isNotBlank);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//过滤value&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; filterValuesMap = Maps.filterValues(map1, v -&amp;gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;assert&lt;/span&gt; v != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; v % &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt; == &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;根据map构造转换器&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;HashBiMap&amp;lt;String, Integer&amp;gt; biMapForConverter = HashBiMap.create(integerImmutableMap);&lt;br&gt;Converter&amp;lt;String, Integer&amp;gt; converter = Maps.asConverter(biMapForConverter);&lt;br&gt;System.out.println(converter.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;));&lt;br&gt;Iterable&amp;lt;Integer&amp;gt; convertRes = converter.convertAll(Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;转换&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Map&amp;lt;String, String&amp;gt; transformEntriesMap = Maps.transformEntries(map1, (key, value) -&amp;gt; String.valueOf(map1.get(key)));&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//同样还存在&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//        Maps.transformValues()&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字符串处理&#34;&gt;&lt;a href=&#34;#字符串处理&#34; class=&#34;headerlink&#34; title=&#34;字符串处理&#34;&gt;&lt;/a&gt;字符串处理&lt;/h2&gt;&lt;h3 id=&#34;连接器-Joiner&#34;&gt;&lt;a href=&#34;#连接器-Joiner&#34; class=&#34;headerlink&#34; title=&#34;连接器[Joiner]&#34;&gt;&lt;/a&gt;连接器&lt;code&gt;[Joiner]&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;连接任何实现了Iterable结果的类型&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//跳过null&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Joiner.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).skipNulls().join(list);&lt;br&gt;System.out.println(str1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//用NNNN代替空&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Joiner.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).useForNull(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;NNNN&amp;quot;&lt;/span&gt;).join(list);&lt;br&gt;System.out.println(str2);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//空指针&lt;/span&gt;&lt;br&gt;String str3= Joiner.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).join(list);&lt;br&gt;System.out.println(str3);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;连接map&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;HashMap&amp;lt;String, String&amp;gt; map = Maps.newHashMap();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//每一个k-v连接方式为\n  kv连接方式为-&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Joiner.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;).withKeyValueSeparator(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;).join(map);&lt;br&gt;System.out.println(str1);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;连接实现了Appendable的任何类型&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;StringBuilder&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str3&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Joiner.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).appendTo(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StringBuilder&lt;/span&gt;(), Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;));&lt;br&gt;System.out.println(str3);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;分割器-Splitter&#34;&gt;&lt;a href=&#34;#分割器-Splitter&#34; class=&#34;headerlink&#34; title=&#34;分割器[Splitter]&#34;&gt;&lt;/a&gt;分割器&lt;code&gt;[Splitter]&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;分隔成list&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;String str=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1-2  -3 - 4- - - &amp;quot;&lt;/span&gt;;&lt;br&gt;List&amp;lt;String&amp;gt; list1 = Splitter.fixedLength(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).splitToList(str);&lt;br&gt;System.out.println(list1);&lt;br&gt;List&amp;lt;String&amp;gt; list2 = Splitter.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).splitToList(str);&lt;br&gt;System.out.println(list2);&lt;br&gt;List&amp;lt;String&amp;gt; list3 = Splitter.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).trimResults().splitToList(str);&lt;br&gt;System.out.println(list3);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;分割成map&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;String str2=&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1#2-2#3-3#1&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//每一组entry使用的是-分割 k和v使用的#分割&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, String&amp;gt; map = Splitter.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).withKeyValueSeparator(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt;).split(str2);&lt;br&gt;map.forEach((k,v)-&amp;gt; System.out.println(k+&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;gt;&amp;quot;&lt;/span&gt;+v));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;分割成Iterable&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Iterable&amp;lt;String&amp;gt; stringIterable = Splitter.on(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;-&amp;quot;&lt;/span&gt;).split(str);&lt;br&gt;stringIterable.iterator().forEachRemaining(System.out::println);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;字符匹配器&#34;&gt;&lt;a href=&#34;#字符匹配器&#34; class=&#34;headerlink&#34; title=&#34;字符匹配器&#34;&gt;&lt;/a&gt;字符匹配器&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//删除字符&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/1/2/3/4&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.is(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;/&amp;#x27;&lt;/span&gt;).removeFrom(str);&lt;br&gt;System.out.println(str1);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.anyOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/1&amp;quot;&lt;/span&gt;).removeFrom(str);&lt;br&gt;System.out.println(str2);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str3&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.noneOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12/&amp;quot;&lt;/span&gt;).removeFrom(str);&lt;br&gt;System.out.println(str3);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str4&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.inRange(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;).removeFrom(str);&lt;br&gt;System.out.println(str4);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//替换&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str5&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.inRange(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;).replaceFrom(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a1b2c3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(str5);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//裁剪&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str6&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CharMatcher.inRange(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;).trimTrailingFrom(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a1b2c3&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(str6);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//比对&lt;/span&gt;&lt;br&gt;System.out.println(CharMatcher.inRange(&lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;).matchesAllOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1b2&amp;quot;&lt;/span&gt;));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;字符集和大小写格式&#34;&gt;&lt;a href=&#34;#字符集和大小写格式&#34; class=&#34;headerlink&#34; title=&#34;字符集和大小写格式&#34;&gt;&lt;/a&gt;字符集和大小写格式&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Charsets针对所有Java平台都要保证支持的六种字符集提供了常量引用。尝试使用这些常量，而不是通过名称获取字符集实例。&lt;/li&gt;
&lt;li&gt;CaseFormat&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;缓存-Caches&#34;&gt;&lt;a href=&#34;#缓存-Caches&#34; class=&#34;headerlink&#34; title=&#34;缓存[Caches]&#34;&gt;&lt;/a&gt;缓存&lt;code&gt;[Caches]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Guava Cache：本地缓存实现，支持多种缓存过期策略&lt;/p&gt;
&lt;h2 id=&#34;函数式风格-Functional-idioms&#34;&gt;&lt;a href=&#34;#函数式风格-Functional-idioms&#34; class=&#34;headerlink&#34; title=&#34;函数式风格[Functional idioms]&#34;&gt;&lt;/a&gt;函数式风格&lt;code&gt;[Functional idioms]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Guava的函数式支持可以显著简化代码，但请谨慎使用它&lt;/p&gt;
&lt;h2 id=&#34;并发-Concurrency&#34;&gt;&lt;a href=&#34;#并发-Concurrency&#34; class=&#34;headerlink&#34; title=&#34;并发[Concurrency]&#34;&gt;&lt;/a&gt;并发&lt;code&gt;[Concurrency]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;强大而简单的抽象，让编写正确的并发代码更简单&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ListenableFuture：完成后触发回调的Future&lt;/li&gt;
&lt;li&gt;Service框架：抽象可开启和关闭的服务，帮助你维护服务的状态逻辑&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;字符串处理-Strings&#34;&gt;&lt;a href=&#34;#字符串处理-Strings&#34; class=&#34;headerlink&#34; title=&#34;字符串处理[Strings]&#34;&gt;&lt;/a&gt;字符串处理&lt;code&gt;[Strings]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;非常有用的字符串工具，包括分割、连接、填充等操作&lt;/p&gt;
&lt;h2 id=&#34;原生类型-Primitives&#34;&gt;&lt;a href=&#34;#原生类型-Primitives&#34; class=&#34;headerlink&#34; title=&#34;原生类型[Primitives]&#34;&gt;&lt;/a&gt;原生类型&lt;code&gt;[Primitives]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;扩展 JDK 未提供的原生类型（如int、char）操作， 包括某些类型的无符号形式&lt;/p&gt;
&lt;h2 id=&#34;区间-Ranges&#34;&gt;&lt;a href=&#34;#区间-Ranges&#34; class=&#34;headerlink&#34; title=&#34;区间[Ranges]&#34;&gt;&lt;/a&gt;区间&lt;code&gt;[Ranges]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;可比较类型的区间API，包括连续和离散类型&lt;/p&gt;
&lt;h2 id=&#34;I-x2F-O&#34;&gt;&lt;a href=&#34;#I-x2F-O&#34; class=&#34;headerlink&#34; title=&#34;I&amp;#x2F;O&#34;&gt;&lt;/a&gt;I&amp;#x2F;O&lt;/h2&gt;&lt;p&gt;简化I&amp;#x2F;O尤其是I&amp;#x2F;O流和文件的操作，针对Java5和6版本&lt;/p&gt;
&lt;h2 id=&#34;散列-Hash&#34;&gt;&lt;a href=&#34;#散列-Hash&#34; class=&#34;headerlink&#34; title=&#34;散列[Hash]&#34;&gt;&lt;/a&gt;散列&lt;code&gt;[Hash]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;提供比Object.hashCode()更复杂的散列实现，并提供布鲁姆过滤器的实现&lt;/p&gt;
&lt;h2 id=&#34;事件总线-EventBus&#34;&gt;&lt;a href=&#34;#事件总线-EventBus&#34; class=&#34;headerlink&#34; title=&#34;事件总线[EventBus]&#34;&gt;&lt;/a&gt;事件总线&lt;code&gt;[EventBus]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;发布-订阅模式的组件通信，但组件不需要显式地注册到其他组件中&lt;/p&gt;
&lt;h2 id=&#34;数学运算-Math&#34;&gt;&lt;a href=&#34;#数学运算-Math&#34; class=&#34;headerlink&#34; title=&#34;数学运算[Math]&#34;&gt;&lt;/a&gt;数学运算&lt;code&gt;[Math]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;优化的、充分测试的数学工具类&lt;/p&gt;
&lt;h2 id=&#34;反射-Reflection&#34;&gt;&lt;a href=&#34;#反射-Reflection&#34; class=&#34;headerlink&#34; title=&#34;反射[Reflection]&#34;&gt;&lt;/a&gt;反射&lt;code&gt;[Reflection]&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;Guava 的 Java 反射机制工具类&lt;/p&gt;
</content>
        <category term="常用开发库" />
        <category term="工具类" />
        <category term="Google Guava" />
        <updated>2024-01-03T13:13:21.652Z</updated>
    </entry>
</feed>
