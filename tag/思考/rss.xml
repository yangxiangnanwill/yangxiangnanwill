<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Will • Posts by &#34;思考&#34; tag</title>
        <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</link>
        <description>愿你一生努力，一生被爱</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 21:13:21 +0800</lastBuildDate>
        <category>开发习惯</category>
        <category>思考</category>
        <category>思维习惯</category>
        <category>感言</category>
        <category>Docker</category>
        <category>LINUX</category>
        <category>Node</category>
        <category>前端</category>
        <category>Nvm</category>
        <category>CentOS</category>
        <category>Linux</category>
        <category>Crontab</category>
        <category>Jenkins</category>
        <category>IDEA</category>
        <category>Alibaba Cloud Toolkit</category>
        <category>Archery</category>
        <category>MySql</category>
        <category>工具</category>
        <category>Maven</category>
        <category>Git</category>
        <category>JAVA</category>
        <category>shell</category>
        <category>信息安全等级保护认证</category>
        <category>系统认证</category>
        <category>读书笔记</category>
        <category>BeetlSql</category>
        <category>Beetl</category>
        <category>异常</category>
        <category>Java IO-初识IO</category>
        <category>Spring</category>
        <category>SpringCloud</category>
        <category>SpringCloud Alibaba</category>
        <category>枚举</category>
        <category>POI</category>
        <category>Spring Boot</category>
        <category>VinUtil</category>
        <category>VerificationCode</category>
        <category>SOAR</category>
        <category>其他</category>
        <category>ProtoBuffer</category>
        <category>博客园</category>
        <category>博客</category>
        <category>MongoDb</category>
        <category>Lombok工具库详解</category>
        <category>常用开发库</category>
        <category>JSON类库详解</category>
        <category>Hutool</category>
        <category>工具类</category>
        <category>Spring常用工具类</category>
        <category>异步编程</category>
        <category>线程</category>
        <category>方法论</category>
        <category>开源协议</category>
        <category>CentOS7</category>
        <category>MongoDB</category>
        <category>Redis</category>
        <category>VMware</category>
        <category>Typora</category>
        <category>PostMan</category>
        <category>Java8</category>
        <category>特性</category>
        <category>JDBC</category>
        <category>Mysql</category>
        <category>EasyExcel</category>
        <category>日志类库详解</category>
        <category>Script</category>
        <category>设计模式</category>
        <category>MyBatis</category>
        <category>Apache Common</category>
        <category>Google Guava</category>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</guid>
            <title>开发好习惯</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</link>
            <category>开发习惯</category>
            <category>思考</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;写干净的代码，做风一样的男子！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编程5分钟，查代码2小时!&lt;/p&gt;
&lt;p&gt;在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当有人指出程序员代码有BUG时，程序员的回答各有不同：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可能啊，在我电脑上运行没有问题呀!&lt;/li&gt;
&lt;li&gt;我已经一星期没碰这块代码啦!&lt;/li&gt;
&lt;li&gt;没事，我改一行代码就可以了，不影响程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;center&gt;程序员调 Bug 的样子，非常真实~&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;​                                                                                                                         &lt;center&gt;↓↓↓&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif&#34; alt=&#34;0?wx_fmt=gif&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调bug是火，bug是烟。一处点火，四处冒烟&lt;/p&gt;
&lt;p&gt;下面奉上我日常开发的一些总结.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;如何减少代码的BUG呢-在此分享几个技巧&#34;&gt;&lt;a href=&#34;#如何减少代码的BUG呢-在此分享几个技巧&#34; class=&#34;headerlink&#34; title=&#34;如何减少代码的BUG呢?在此分享几个技巧&#34;&gt;&lt;/a&gt;如何减少代码的BUG呢?在此分享几个技巧&lt;/h1&gt;&lt;h2 id=&#34;别对警告视而不见&#34;&gt;&lt;a href=&#34;#别对警告视而不见&#34; class=&#34;headerlink&#34; title=&#34;别对警告视而不见&#34;&gt;&lt;/a&gt;别对警告视而不见&lt;/h2&gt;&lt;p&gt;相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的目标是，写干净的代码，做风一样的男子!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编程习惯&#34;&gt;&lt;a href=&#34;#编程习惯&#34; class=&#34;headerlink&#34; title=&#34;编程习惯&#34;&gt;&lt;/a&gt;编程习惯&lt;/h2&gt;&lt;p&gt;种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。&lt;/p&gt;
&lt;h2 id=&#34;写代码的时间问题&#34;&gt;&lt;a href=&#34;#写代码的时间问题&#34; class=&#34;headerlink&#34; title=&#34;写代码的时间问题&#34;&gt;&lt;/a&gt;写代码的时间问题&lt;/h2&gt;&lt;p&gt;对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。&lt;/p&gt;
&lt;p&gt;虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;验证、自测&#34;&gt;&lt;a href=&#34;#验证、自测&#34; class=&#34;headerlink&#34; title=&#34;验证、自测&#34;&gt;&lt;/a&gt;验证、自测&lt;/h2&gt;&lt;p&gt;在提交测试前要多验证，其中包括自动化测试、手动跑用例等。&lt;/p&gt;
&lt;p&gt;有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。&lt;/p&gt;
&lt;p&gt;这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试&lt;/p&gt;
&lt;h2 id=&#34;仔细的DEBUG&#34;&gt;&lt;a href=&#34;#仔细的DEBUG&#34; class=&#34;headerlink&#34; title=&#34;仔细的DEBUG&#34;&gt;&lt;/a&gt;仔细的DEBUG&lt;/h2&gt;&lt;p&gt;在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。&lt;/p&gt;
&lt;h2 id=&#34;仔细的设计&#34;&gt;&lt;a href=&#34;#仔细的设计&#34; class=&#34;headerlink&#34; title=&#34;仔细的设计&#34;&gt;&lt;/a&gt;仔细的设计&lt;/h2&gt;&lt;p&gt;在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。&lt;/p&gt;
&lt;h2 id=&#34;避免干扰&#34;&gt;&lt;a href=&#34;#避免干扰&#34; class=&#34;headerlink&#34; title=&#34;避免干扰&#34;&gt;&lt;/a&gt;避免干扰&lt;/h2&gt;&lt;p&gt;有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;写注释，写注释，写注释。重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;因为前期的注释有利于后续开发的时候容易减少bug。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自从修改了注释模板，整个人精神多了，bug也明显少了，如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png&#34; alt=&#34;image-20201215145125620&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;敢于维护上古代码&#34;&gt;&lt;a href=&#34;#敢于维护上古代码&#34; class=&#34;headerlink&#34; title=&#34;敢于维护上古代码&#34;&gt;&lt;/a&gt;敢于维护上古代码&lt;/h2&gt;&lt;p&gt;博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E8%A7%82%E5%90%8E%E6%84%9F/</guid>
            <title>追风筝的人观后感</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E8%A7%82%E5%90%8E%E6%84%9F/</link>
            <category>思考</category>
            <category>感言</category>
            <category>读书笔记</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;为你，千千万万遍！For you，a thousand times over！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;“许多年过去了，人们说陈年旧事可以被埋葬，然而我终于明白这是错的，因为往事会自行爬上来。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有没有那么一些人，一些事，停留在你的脑海深处，你不想要去回忆？你曾用尽全力把它们遗忘，埋葬，封印，超度……然而，当你以为已经可以遗忘到不再去想的时候，往事却又毫无征兆的在你生命某个瞬间，像电影放映一般，真实再现，一帧都没有落下……&lt;br&gt;最近又重温了一下高中的看过的追风筝的人，可能时过境迁，心境不同，感受颇多，特此记录一下。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;一个不能为自己挺身而出的孩子，长大后只能是个懦夫&lt;/code&gt;&lt;br&gt;阿米尔，生性懦弱，却又一直生活在自我欺骗的强大中。他怂恿哈桑做的很多不善的恶作剧，统统都由哈桑帮他无偿的背黑锅；就连最后看到哈桑为了帮他保护追到的风筝而被人侮辱强暴的时候，他仍然懦弱的跑开了；而后，为了逃避内心的谴责和独占父亲的宠爱，阿米尔想让父亲把哈桑父子赶出家门，在被拒绝之后，又导演了一出监守自盗栽赃诬陷的把戏，企图让哈桑永远的消失在面前。&lt;br&gt;哈桑，虽出身低微，却勤劳勇敢，朴实忠贞。他以一生兑现着对阿米尔少爷的忠诚，从小为他出头，为他被黑锅，为他追风筝，为他挣名声，就连洞悉了阿米尔的诬陷把戏后，仍然一声不吭的甘愿背负。一个虽卑微，虽没有太多文化，却无限完美的男孩儿形象。&lt;/p&gt;
&lt;p&gt;是的，曾几何时，我们都是孩子，我们都有着自己内心深处小心呵护的自尊与懦弱，我们或贫穷或富裕或懦弱或勇敢或虚伪或真实，在大人们的眼中，这或许都是小孩子的把戏，小孩子的无知，小孩子的不懂事，小孩子的无心之失。&lt;/p&gt;
&lt;p&gt;然而事实真的是这样吗？如果一个孩子从小就不能为自己和自己的伙伴挺身而出一次，那么长大之后，他就真的只能是一个懦夫。&lt;/p&gt;
&lt;p&gt;如果你曾经是阿米尔，你会为自己的懦弱而给自己的忠诚玩伴带来的伤害而忏悔，并勇敢面对，自我救赎吗？&lt;br&gt;如果你曾经是哈桑，你会为自己有这样一个懦弱，自私，见死不救的玩伴却忠诚到底不离不弃吗？&lt;/p&gt;
&lt;p&gt;答案或许不言自明，做阿米尔难，做哈桑更难。但哪一个才是你自己？&lt;br&gt;&lt;strong&gt;为你，千千万万次！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;你从我身上看到什么?     一辈子！&lt;/code&gt;&lt;br&gt;没有读过书的哈桑，或许讲不出什么经典的语句，但每一句质朴的话，都是他用一生兑现的承诺。&lt;/p&gt;
&lt;p&gt;哈桑从出生起叫的第一个人名就是阿米尔，一生干的最多的事，就是为阿米尔追风筝，直到最后，也是被塔利班杀害在了为阿米尔家驻守的大房子里面。&lt;/p&gt;
&lt;p&gt;我常常在想，哈桑临死的那一刻是安然的么？是可以瞑目的么？书中没有讲，但我觉得他应该是安然的，因为以哈桑的性格，他在生命的最后一刻都坚守在了自己少爷家的祖宅前面，虽然那一刻，他的少爷可能已在千里之外享受这他的另一种人生，可能祖宅对他而言也没有那么的重要，但是，至少对于哈桑，他是重要的，也是这一生当中或许唯一的重要。&lt;/p&gt;
&lt;p&gt;我们的人生有多少次承诺没有兑现？或许，是我们找了种种理由去解释它的无法兑现，以此消除我们内心的亏欠，以此自我欺骗的说服自己没有兑现的理所当然，好在以后的日子里悠然生活，安然入睡。为此，我们可能一次又一次的撒谎，骗别人也骗自己，好让自己在未来的故事里，活得坦然一些。&lt;/p&gt;
&lt;p&gt;然而，真相就在那里，它不会因为你的无视、掩盖、编造和涂抹就变得不再真实，它永远印刻在岁月里，拷问着你的灵魂。不要以那时还小作为最好的理由，因为有人为你将承诺放在了心上，你却将它踩在脚下。&lt;/p&gt;
&lt;p&gt;一日是一生的缩影。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;再次成为好人的路！&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;“我知道电话线连着的，并不只是拉辛汗，还有我过去那些未曾赎还的罪行。”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;阿米尔虽然幸运的从战乱中的阿富汗逃了出去，再后来的日子里过着平静而殷实的生活，然而他并没有能够逃过灵魂的拷问，至此以后的半生，他都反复的被自责和愧疚所煎熬着。&lt;br&gt;也许，在自责和煎熬中，阿米尔其实已经踏出了自我救赎的第一步，意识的自我救赎，至少童年的那段阴影能够笼罩他后来万里之外的人生，就证明了阿米尔骨子里的善其实一直都在，只是在懦弱和患得患失中，始终被他人性的恶所胁迫着，无法展露真容。&lt;/p&gt;
&lt;p&gt;没有良心，没有美德的人，不会痛苦。&lt;/p&gt;
&lt;p&gt;因此，阿米尔的痛苦便来自于他灵魂深处潜藏着的良心与美德，它们一直在折磨着他，也在督促着他，尽快走上自我救赎的道路。  &lt;/p&gt;
&lt;p&gt;我的离开很久远了，久远的足以遗忘，也足以被遗忘。&lt;/p&gt;
&lt;p&gt;终于，阿米尔冒着战火硝烟回到了阿富汗，为的只是去寻找已故童年玩伴哈桑的儿子索拉博，并排除万难，将他带回到了自己的身边。&lt;/p&gt;
&lt;p&gt;时过境迁，阿米尔回到了故土，早已物是人非，曾经那个为他千千万万次追风筝的人早已逝去，有些东西，人生中错过了，就不会再得到。那些被风吹落的风筝，那些见证了你过往的人，还有那些被岁月封存的记忆，会在晨曦中拔地而起，而后飘然远去。&lt;/p&gt;
&lt;p&gt;故事到这里，或许该结尾了，阿米尔终于在经过几十年的良心拷问和灵魂煎熬之后，冲破了那个曾经懦弱逃避的自我，重新坚强的面对自己的不堪过往，并勇敢的穿越烽火硝烟，回到那个故事最初的地方，获得了重新改写人生的机会，完成了自我的救赎。&lt;/p&gt;
&lt;p&gt;我不知道，每个人的一生中，是否都有这样的机会，找到那条重新成为好人的路，或许我们都不认为自己是坏人，当然阿米尔也不是，但是，不可否认的，我们都有那个不敢面对的自己，如果可以，我说如果可以的话，你敢像阿米尔那样回到最初，翻出那个曾经不敢面对的自己，将它带出尘埃，让结局重新改写吗？&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;你想要我追那只风筝给你吗？&lt;/strong&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;code&gt;“我很高兴终于有人识破我的真面目，我装得太累了！”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;阿米尔的前半生都在斗风筝，也是斗风筝的高手，却从未有一次去追过风筝，因为前半生，他不需要追，有他的哈桑为他去追，千千万万次。&lt;/p&gt;
&lt;p&gt;这一次，在他的后半生里，他第一次追风筝，为哈桑的儿子索拉博而追。&lt;/p&gt;
&lt;p&gt;我们可以相信，追回的，不只是风筝，还有那许许多多承载浸透在风筝里的说了和没有说的过往，还有那许许多多完成了和未完成的心愿。&lt;/p&gt;
&lt;p&gt;人生上半场，我们都在拼命往前，在匆忙赶路中，不断的接受现实和丢失那个最初的自己，但我们却总是自我安慰说，这就是生活，我也是被逼无奈，于是继续伪装，继续逃避，继续自我麻醉。&lt;/p&gt;
&lt;p&gt;我们怕回头，我们不敢回头，于是，一个个装作没有遗憾，也没有缺失一样的继续生活。&lt;/p&gt;
&lt;p&gt;我们或多或少的，都在自己的人生中追逐着自己的那一枚风筝，为此，我们奔跑着，跳跃着，翻滚着，哭闹着，厮打着，只知向前，眼中心里想的都是得到它。 或许我们还曾为此选择放弃、背叛、欺骗、隐忍、牺牲，可是那些得到是否真是生命中的必须，而那些失去是否才真的弥足珍贵呢？&lt;/p&gt;
&lt;p&gt;或许，人到中年，很多人已经觉得见惯了生活的残忍从而学会了自我的保护，很多人已经对自我之外的其他任何不再感兴趣，即使再有哈桑为我们无条件付出，他也觉得是理所当然；再有牺牲和背叛，他也觉得是顺理成章。&lt;/p&gt;
&lt;p&gt;如果，之前你没有觉得这是一种负罪需要自我的救赎，你觉得不少人也都这样，所以我这样也是被逼无奈；那么之后，请你明白，你就是你，你的决定也就只是你的决定，与他人无关，即使你可以声称是受了他人的影响，是受了社会的胁迫，但请记住，你的人生最终只由你个人书写。&lt;/p&gt;
&lt;p&gt;所以，如果在某一天里，或是读了这篇文章过后，无论是为谁，就当是为我们自己，为那些生命里为你默默付出过，你却还没来得及感谢的人，回到那里，别只顾着斗风筝，为他们追一次风筝，哪怕就一次！&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%87%B4%E6%AD%A3%E5%9C%A8%E5%A5%8B%E6%96%97%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%BD%A0/</guid>
            <title>致正在奋斗路上的你</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%87%B4%E6%AD%A3%E5%9C%A8%E5%A5%8B%E6%96%97%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%BD%A0/</link>
            <category>思考</category>
            <category>感言</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;致正在奋斗路上的你&#34;&gt;&lt;a href=&#34;#致正在奋斗路上的你&#34; class=&#34;headerlink&#34; title=&#34;致正在奋斗路上的你&#34;&gt;&lt;/a&gt;致正在奋斗路上的你&lt;/h1&gt;&lt;h1 id=&#34;致正在奋斗路上的你-1&#34;&gt;&lt;a href=&#34;#致正在奋斗路上的你-1&#34; class=&#34;headerlink&#34; title=&#34;致正在奋斗路上的你&#34;&gt;&lt;/a&gt;致正在奋斗路上的你&lt;/h1&gt;&lt;h2 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;写这个博客的目的主要是为了针对身边某些正在处于大学的朋友，感觉他们很迷茫，然后很刻苦，但是感觉努力的不在点上，所以我趁我考试的路上写下了这篇博客，一是为了记录一下这次旅行和放松的机会；二是给身边的一些朋友&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当你看到这个文章的时候，本博猪正在从大连回北京的路上，此时九点五十左右，博猪辗转反侧，夜不能寐，特此写下这篇文章，记录一下次不是在上坡的路上就是在上坡的路上的考试之旅，顺便缓解一下博猪六个小时屁股的煎熬。&lt;br&gt;首先按照常规流程博猪自我介绍一下，博猪笔名will，意义如何自行百度，98年出身，山东泰安人士，本博猪2019年3月份入坑，主要从事于车险，车险金融行业，先后参与过北汽鹏龙二期改造、北汽鹏龙微信端开发，捷通达集团车险经济平台理赔、续保、新车销售、部分报表统计等开发，参与北汽鹏龙中行、平安、浙江中行快速对接和流程设计和开发（SSI架构，前端LayUI），捷通达参与Erp,Sap系统资源对接，目前手里维护者九、十个左右的项目，目前正在长城驻场开发，参与车服务保代经济云系统、续保系统，主要负责续保系统的需求分析和业务开发，车服务系统对账方面开发和长城原系统和第三方系统对接封装基于spring cloud alibaba的相关工具类。目前项目已经上生产环境，目前正协助压测人员进行压力测试。&lt;/p&gt;
&lt;p&gt;OK，博猪履历介绍到这里，俗话说三年小架构，博猪目标如此，也正在努力的朝着这个目标前进，废话不说博猪写这篇文章的目的是分享一下自己的学习方式和一些学习心得，缘由是博猪身边有几个入坑这个专业的大学生最近看他们也是挺努力刻苦的，但是学习的点总是不在那个关键的地方上，这样博猪心有余而力不足，想好心帮忙但是每次都是很费劲的完成。&lt;br&gt;那么，我分享一下我的学习方式，顺便跟着博猪思考一下博猪对你们的问题，是否对你现在有所触动和能解决你手里的问题！&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;有目的的学习&lt;/p&gt;
&lt;p&gt;目的很重要，因为它是你迷茫路上的一个指路灯，至少它能让你有一个目的地，在我的世界观里面target很重要，至少它能让你知道你下一步至少干啥，然后具体咋实现看你如何安排了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q: 	你是否有想过近三年或者你毕业进入社会想干啥或者想过什么样的生活了没有？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;坚持&lt;/p&gt;
&lt;p&gt;俗话说师傅领进门，修行靠个人，虽然博猪当时也啥都学，什么3dmax，ps，电商，嗯，因为我刚开始报的是电商的专业，然后大一上学期末临时转的软件开发，然后靠扎实的C语言的基础，自学的JAVA，JAVAEE，JAVA WEB，MySQL等，因为学校教程太慢，太杂，我当时的想法很简单，就是工作，然后赚钱，然后我静静的边抽烟边刷了一遍招聘软件上的软件开发的技术，然后回去下载资料，自己学，上机课我就偷偷的猫到一个角落自己戴着耳机学习，然后一遍遍的码代码，自己不关心的科目期末不挂科就行，寒暑假初中同学高中同学聚会能推就推。&lt;br&gt;所以，如果说我提出的第一点占头百分之二十的话，那么坚持就能占百分之七十。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Q:	如果你已经深深的思考了第一题，那么鉴于第一题的基础上，你是否能你的目标坚持下去的努力？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不浮躁&lt;/p&gt;
&lt;p&gt;博猪很喜欢博猪学校的校训:坚持 不浮躁，坚持容易，不浮躁难。coding本身就是一个很枯燥无聊，甚至很容易没得朋友的一个事情，所以让自己的心沉下来很重要。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有属于自己的学习体系&lt;/p&gt;
&lt;p&gt;有自己的学习体系很重要，作为一个成年人应该有个事情紧急程度的排序，给自己的科目或者事情排个序，那个可以做那个可以不做，不要把自己搞得很乱又很累。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会自己思考&lt;/p&gt;
&lt;p&gt;身边的朋友很多就是遇到问题就是，为啥明明都是一模一样的，为啥我的就直接报错，那么你有没有想过这个程序为啥这样执行？还有你执行完一个程序后是否进行复验程序？程序是不会骗人的，所以多多吃一些异常报错有营养，对自己成长有好处的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会自己解决问题&lt;/p&gt;
&lt;p&gt;遇到一个问题以后，你要相信一句话这个一定不是你一个人再犯，肯定会有前人给你踩过坑，所以遇到问题学会找谷哥或者找度娘。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;学会正确的搜索关键词&lt;/p&gt;
&lt;p&gt;一个正确的搜索关键词会大大提高搜索引擎给你的搜索结果，也大大减少了浏览器因模糊或者一些广告给你带来的困扰。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;切勿好高骛远&lt;/p&gt;
&lt;p&gt;博猪最近遇到很多刚入行的小白，感觉微服务不过如此，业主不过如此，但是真正到自己手里的时候，连最基本的crud都不会，当然博猪和技术经理交给他们的这就是一些crud的项目模块，当然前期由于长城这个公司刚成立，一些最基本的技术沉淀都没有，当然博猪算是经历了一次一个公司技术体系从无到有的一个过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;建议藏在内容里面，答案请自行寻找&lt;/p&gt;
&lt;p&gt;俗话说的好，九为数极，哈哈，这个建议是针对将来入职程序猿的盆友建议，如果还在读大学建议赶紧找个对象，要不然你会发现你工作入职后不是你想象的白领的生活，而是整天不断的需求和加班，996的生活，正在朝着你招手，所以博猪最大的遗憾就是没在大学期间找个女票。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;话就絮叨到这里了，22点50了，车快到站了，博猪也要收拾一下东西回家了，哈哈末尾送你们一句话，也是博猪最近闲下来刷剧看到的一句话感觉挺不错的，句子如下：&lt;br&gt;须知少时凌云志，曾许人间第一流！&lt;/p&gt;
&lt;p&gt;下面贴两张博猪拍的两张图片：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135857.jpg&#34;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135915.jpg&#34;&gt;​&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</guid>
            <title>开发好习惯</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/</link>
            <category>开发习惯</category>
            <category>思考</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;写干净的代码，做风一样的男子！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编程5分钟，查代码2小时!&lt;/p&gt;
&lt;p&gt;在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;当有人指出程序员代码有BUG时，程序员的回答各有不同：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可能啊，在我电脑上运行没有问题呀!&lt;/li&gt;
&lt;li&gt;我已经一星期没碰这块代码啦!&lt;/li&gt;
&lt;li&gt;没事，我改一行代码就可以了，不影响程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;
&lt;center&gt;程序员调 Bug 的样子，非常真实~&lt;/center&gt;
&lt;/div&gt;

&lt;p&gt;​                                                                                                                         &lt;center&gt;↓↓↓&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1&#34; alt=&#34;0?wx_fmt=gif&amp;amp;wxfrom=5&amp;amp;wx_lazy=1&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif&#34; alt=&#34;0?wx_fmt=gif&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;调bug是火，bug是烟。一处点火，四处冒烟&lt;/p&gt;
&lt;p&gt;下面奉上我日常开发的一些总结.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;如何减少代码的BUG呢-在此分享几个技巧&#34;&gt;&lt;a href=&#34;#如何减少代码的BUG呢-在此分享几个技巧&#34; class=&#34;headerlink&#34; title=&#34;如何减少代码的BUG呢?在此分享几个技巧&#34;&gt;&lt;/a&gt;如何减少代码的BUG呢?在此分享几个技巧&lt;/h1&gt;&lt;h2 id=&#34;别对警告视而不见&#34;&gt;&lt;a href=&#34;#别对警告视而不见&#34; class=&#34;headerlink&#34; title=&#34;别对警告视而不见&#34;&gt;&lt;/a&gt;别对警告视而不见&lt;/h2&gt;&lt;p&gt;相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们的目标是，写干净的代码，做风一样的男子!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;编程习惯&#34;&gt;&lt;a href=&#34;#编程习惯&#34; class=&#34;headerlink&#34; title=&#34;编程习惯&#34;&gt;&lt;/a&gt;编程习惯&lt;/h2&gt;&lt;p&gt;种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。&lt;/p&gt;
&lt;h2 id=&#34;写代码的时间问题&#34;&gt;&lt;a href=&#34;#写代码的时间问题&#34; class=&#34;headerlink&#34; title=&#34;写代码的时间问题&#34;&gt;&lt;/a&gt;写代码的时间问题&lt;/h2&gt;&lt;p&gt;对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。&lt;/p&gt;
&lt;p&gt;虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc&#34; alt=&#34;程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;验证、自测&#34;&gt;&lt;a href=&#34;#验证、自测&#34; class=&#34;headerlink&#34; title=&#34;验证、自测&#34;&gt;&lt;/a&gt;验证、自测&lt;/h2&gt;&lt;p&gt;在提交测试前要多验证，其中包括自动化测试、手动跑用例等。&lt;/p&gt;
&lt;p&gt;有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。&lt;/p&gt;
&lt;p&gt;这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试&lt;/p&gt;
&lt;h2 id=&#34;仔细的DEBUG&#34;&gt;&lt;a href=&#34;#仔细的DEBUG&#34; class=&#34;headerlink&#34; title=&#34;仔细的DEBUG&#34;&gt;&lt;/a&gt;仔细的DEBUG&lt;/h2&gt;&lt;p&gt;在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。&lt;/p&gt;
&lt;h2 id=&#34;仔细的设计&#34;&gt;&lt;a href=&#34;#仔细的设计&#34; class=&#34;headerlink&#34; title=&#34;仔细的设计&#34;&gt;&lt;/a&gt;仔细的设计&lt;/h2&gt;&lt;p&gt;在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。&lt;/p&gt;
&lt;h2 id=&#34;避免干扰&#34;&gt;&lt;a href=&#34;#避免干扰&#34; class=&#34;headerlink&#34; title=&#34;避免干扰&#34;&gt;&lt;/a&gt;避免干扰&lt;/h2&gt;&lt;p&gt;有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;&lt;a href=&#34;#注释&#34; class=&#34;headerlink&#34; title=&#34;注释&#34;&gt;&lt;/a&gt;注释&lt;/h2&gt;&lt;p&gt;写注释，写注释，写注释。重要的事情说三遍。&lt;/p&gt;
&lt;p&gt;因为前期的注释有利于后续开发的时候容易减少bug。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;自从修改了注释模板，整个人精神多了，bug也明显少了，如图：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png&#34; alt=&#34;image-20201215145125620&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;敢于维护上古代码&#34;&gt;&lt;a href=&#34;#敢于维护上古代码&#34; class=&#34;headerlink&#34; title=&#34;敢于维护上古代码&#34;&gt;&lt;/a&gt;敢于维护上古代码&lt;/h2&gt;&lt;p&gt;博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。&lt;/p&gt;
&lt;p&gt;‍&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/</guid>
            <title>异步编程(1)-初识异步</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/</link>
            <category>思考</category>
            <category>JAVA</category>
            <category>异步编程</category>
            <category>线程</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;近期博猪在负责一个风险测算的模块，其中的具体过程博猪就不细说了，但是总体的感觉就是心中有无数个草泥马在奔腾，但是现在仔细感觉还是值得写个博客来记录一下的。&lt;br&gt;具体场景为有些业务导入牵扯到一些计算，业务那边说是导入数据量比较庞大，所以博猪就用异步+多线程的方式处理了这个业务，本地和Linux环境跑了几遍，20个字段，2w数据，5个线程，总体耗时也就三秒左右，还是挺可观的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;什么异步编程&#34;&gt;&lt;a href=&#34;#什么异步编程&#34; class=&#34;headerlink&#34; title=&#34;什么异步编程&#34;&gt;&lt;/a&gt;什么异步编程&lt;/h1&gt;&lt;p&gt;Java 异步编程是一种让程序并行运行的方式，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且等工作单元运行结束后通知主应用程序线程它的运行结果或者失败原因。使用异步编程有许多好处，例如可以提高应用程序的性能和响应能力，提高线程的利用率，减少线程间的通信开销等。&lt;br&gt;Java 异步编程的核心是线程池，程序员可以通过提交任务到线程池来实现异步编程。&lt;br&gt;Java 异步编程在现实生活中有很多应用，例如网络 IO 请求、日志打印、异步打日志、异步消息处理等。&lt;br&gt;具体来说,Java异步编程包括以下几个要点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动异步任务:通过某种机制启动一个与主程序分离的异步任务,比如线程、Future、CompletableFuture等。&lt;/li&gt;
&lt;li&gt;异步任务独立执行:一旦异步任务启动,主程序可以继续执行,而异步任务将在后台独立运行。&lt;/li&gt;
&lt;li&gt;获取异步执行的结果(可选):主程序如果需要异步任务的结果,可以通过某种方式获取其结果,比如调用Future的get方法或给CompletionHandler传递结果。但这不是异步执行的必要条件,有的异步任务不需要返回结果。&lt;/li&gt;
&lt;li&gt;异常处理(可选):通过 completion handlers 或其他异常处理机制对异步任务可能抛出的异常进行处理。&lt;/li&gt;
&lt;li&gt;线程管理(可选):有的异步方式需要手动管理执行线程,有的则通过线程池等机制自动管理。&lt;br&gt;所以,总体来说,Java异步编程的关键就是启动一个与主程序分离的异步任务,并让其在后台运行,而主程序可以继续流程,不等待其完成。在需要结果或异常时,再通过相应机制获取或处理。&lt;br&gt;这一模式允许程序同时处理多个任务,提高了程序的并发能力和响应性。线程的自动管理也简化了手动管理线程的难度。Java提供了多种实现异步编程的方式,比如线程、Future、CompletableFuture、响应式框架等。随着Java的发展,这些方式越来越简便高效。&lt;br&gt;但其核心思想仍然是让异步任务独立于主程序执行,以实现并发和提高响应性。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/</guid>
            <title>异常处理及思考</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/</link>
            <category>思考</category>
            <category>异常</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;Java中应该如何处理异常，这个话题看似简单，不就是&lt;code&gt;try...catch&lt;/code&gt;嘛，但是往往BUG更容易出现在一些简单地、我们更容易忽略的地方。&lt;/p&gt;
&lt;p&gt;一个好的异常处理能让开发人员快速定位异常信息和修复问题，同时也能更好的让使用人员进进行捕获和处理异常信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;使用finally或try…with…resource关闭资源&#34;&gt;&lt;a href=&#34;#使用finally或try…with…resource关闭资源&#34; class=&#34;headerlink&#34; title=&#34;使用finally或try…with…resource关闭资源&#34;&gt;&lt;/a&gt;使用finally或try…with…resource关闭资源&lt;/h1&gt;&lt;p&gt;如果我们在try代码块中需要使用到一些资源，比如&lt;code&gt;InputStream&lt;/code&gt;，在使用完之后我们需要将资源关闭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;错误示例如下：&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;incorrectRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:\\a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;        inputStream = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// read something&lt;/span&gt;&lt;br&gt;        inputStream.close();&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件未找到&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件读取异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上面这段代码中，只要在文件读取时没有出现异常，这段代码是可以正常工作的，但是只要在try块中的close()方法中抛出异常，资源就不会被关闭。&lt;/p&gt;
&lt;p&gt;所以这种情况我们应该将资源关闭的代码放在finally中或者使用try…with…resource语句。&lt;/p&gt;
&lt;p&gt;应该使用finally，在finally块中的代码不管是否出现异常，都会被执行，因此可以确保资源对象被关闭。&lt;/p&gt;
&lt;p&gt;正确示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;correctRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:\\a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;        inputStream = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// read something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件未找到&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件读取异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;finally&lt;/span&gt;&amp;#123;&lt;br&gt;        inputStream.close();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者使用IoUtil工具等关闭流，eg:IoUtil.close(inputStream);&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;使用try…with…resource&#34;&gt;&lt;a href=&#34;#使用try…with…resource&#34; class=&#34;headerlink&#34; title=&#34;使用try…with…resource&#34;&gt;&lt;/a&gt;使用try…with…resource&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;随着资源使用的增多，当打开多个资源是对应的资源关闭也是一个问题。因为资源打开的越多，finally中嵌套的次数越多，这将导致大量的无用代码，从而导致代码的臃肿。&lt;/p&gt;
&lt;p&gt;try…with…resource正是java 1.7中新增的语法糖功能，而通过这个语法糖功能，无需我们手动的关闭资源，程序会自动关闭我们打开的资源。&lt;/p&gt;
&lt;p&gt;对应的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;越晚声明的对象，会越早被close掉,即先开后闭原则&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;correctRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(javaFile);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;fileLen&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;) file.length();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;byte&lt;/span&gt;[fileLen];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file)) &amp;#123;&lt;br&gt;        is.read(bytes);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(bytes, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;content = \n&amp;quot;&lt;/span&gt; + content);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException ioException) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;流关闭异常&amp;quot;&lt;/span&gt;, ioException);&lt;br&gt;        ioException.printStackTrace();&lt;br&gt;    &amp;#125;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;使用更明确的异常&#34;&gt;&lt;a href=&#34;#使用更明确的异常&#34; class=&#34;headerlink&#34; title=&#34;使用更明确的异常&#34;&gt;&lt;/a&gt;使用更明确的异常&lt;/h1&gt;&lt;p&gt;如果我们的方法需要向外抛出异常，那么异常类型越具体越好。因为在外部调用你代码的其他人对你内部的实现逻辑可能并不清楚，所以要确保能提供给他尽可能多的信息，可以让别人在使用你的方法时更容易理解，这样调用方可以更好地处理抛出的异常。&lt;/p&gt;
&lt;p&gt;比如，在你的方法内容抛出&lt;code&gt;NumberFormatException&lt;/code&gt;比抛出&lt;code&gt;IllegalArgumentException&lt;/code&gt;或者直接抛出&lt;code&gt;Exception&lt;/code&gt;，所代表的含义就会更明确。&lt;/p&gt;
&lt;h1 id=&#34;方法注释中对异常进行说明&#34;&gt;&lt;a href=&#34;#方法注释中对异常进行说明&#34; class=&#34;headerlink&#34; title=&#34;方法注释中对异常进行说明&#34;&gt;&lt;/a&gt;方法注释中对异常进行说明&lt;/h1&gt;&lt;p&gt;如果你的方法声明了可能会抛出异常，那么在方法的文档注释中，应该对异常进行说明。这和上一条的目的一样，都是为了让方法的调用者能提前获得更多的信息，方便他避免在调用你方法时出现异常，或者更明确如果进行异常处理。&lt;/p&gt;
&lt;p&gt;所以，我们应该在方法的文档注释中添加@throws声明，并说明什么情况下会抛出对应的异常。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 获取数据库连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; cfg                     数据库信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;                        数据库连接信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@throws&lt;/span&gt; ClassNotFoundException 数据库驱动获取异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@throws&lt;/span&gt; SQLException           数据库连接异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Connection &lt;span class=&#34;hljs-title function_&#34;&gt;getConnect&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataSourceConfig cfg)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; ClassNotFoundException, SQLException &amp;#123;&lt;br&gt;    Class.forName(cfg.getDriverClass());&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUserName(), cfg.getPassword());&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;在异常中携带足够的描述信息&#34;&gt;&lt;a href=&#34;#在异常中携带足够的描述信息&#34; class=&#34;headerlink&#34; title=&#34;在异常中携带足够的描述信息&#34;&gt;&lt;/a&gt;在异常中携带足够的描述信息&lt;/h1&gt;&lt;p&gt;这一点和前两条做法的目的类似。在异常中携带足够的描述信息，是为了在出现该异常时，能够在日志文件中查看异常信息时，能看到更有用的信息。&lt;/p&gt;
&lt;p&gt;所以我们应该尽可能准确地描述出为什么抛出了这个异常，并提供最相关的数据信息让别人定位。&lt;/p&gt;
&lt;p&gt;当然这里也不能太极端，你洋洋洒洒写一篇小作文，应该使用简短的一段信息描述，让运维同事能了解到这个问题的严重性，更轻松地分析问题所在。&lt;/p&gt;
&lt;p&gt;也不用提供一堆额外的冗余信息，尽量做到足够精准。比如当你再创建一个Long对象时如果传入一个字符串，就会抛出&lt;code&gt;NumberFormatException&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NumberFormatException&lt;/code&gt;的类名已经告诉我们出现的是数字格式化异常，所以在&lt;code&gt;message&lt;/code&gt;中只需要提供输入的字符串。如果你定义的异常类名不能很明确的表达出是什么异常，比如&lt;code&gt;BusinessException&lt;/code&gt;，你就应该在&lt;code&gt;message&lt;/code&gt;中表达出更多的信息。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sss&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Long.valueOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sss&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式化异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  * 自定义异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String message)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(message);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String message, Throwable cause)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(message, cause);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;控制台打印信息如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Exception in thread &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; ExceptionTest$CustomException: 数字格式化异常&lt;br&gt;	at ExceptionTest.main(ExceptionTest.java:&lt;span class=&#34;hljs-number&#34;&gt;77&lt;/span&gt;)&lt;br&gt;Caused by: java.lang.NumberFormatException: For input string: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sss&amp;quot;&lt;/span&gt;&lt;br&gt;	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:&lt;span class=&#34;hljs-number&#34;&gt;65&lt;/span&gt;)&lt;br&gt;	at java.lang.Long.parseLong(Long.java:&lt;span class=&#34;hljs-number&#34;&gt;589&lt;/span&gt;)&lt;br&gt;	at java.lang.Long.valueOf(Long.java:&lt;span class=&#34;hljs-number&#34;&gt;803&lt;/span&gt;)&lt;br&gt;	at ExceptionTest.main(ExceptionTest.java:&lt;span class=&#34;hljs-number&#34;&gt;75&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;先捕获更明确的异常&#34;&gt;&lt;a href=&#34;#先捕获更明确的异常&#34; class=&#34;headerlink&#34; title=&#34;先捕获更明确的异常&#34;&gt;&lt;/a&gt;先捕获更明确的异常&lt;/h1&gt;&lt;p&gt;一般在我们使用的IDE中，如果当你在做异常捕获时，先捕获了不太具体的异常比如&lt;code&gt;Exception&lt;/code&gt;，然后再捕获更具体的异常如&lt;code&gt;IOException&lt;/code&gt;，都会提示我们后面的catch块无法到达。所以我们应该先捕获最具体的异常类，将不太具体的异常类的捕获放在最后。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;catchException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        doSomthing(...)&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;格式异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IllegalArgumentException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;非法参数&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要捕获Throwable&#34;&gt;&lt;a href=&#34;#不要捕获Throwable&#34; class=&#34;headerlink&#34; title=&#34;不要捕获Throwable&#34;&gt;&lt;/a&gt;不要捕获&lt;code&gt;Throwable&lt;/code&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Throwable&lt;/code&gt;是所有&lt;code&gt;Exception&lt;/code&gt;和&lt;code&gt;Error&lt;/code&gt;的父类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然可以在&lt;code&gt;catch&lt;/code&gt;块中捕获它，但是我们不应该这样去做。因为如果使用了&lt;code&gt;Throwable&lt;/code&gt;，那么不仅会对所有抛出的&lt;code&gt;Exception&lt;/code&gt;进行捕获，还会捕获所有的&lt;code&gt;Error&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而当我们的程序抛出&lt;code&gt;Error&lt;/code&gt;时表示是一个无法处理的严重问题，例如典型的&lt;code&gt;OutofMemoryError&lt;/code&gt;，&lt;code&gt;StackOverflowError&lt;/code&gt;等，这两个&lt;code&gt;Error&lt;/code&gt;都是由程序无法控制并且不能处理的情况引起的。所以说，最好不要在你的&lt;code&gt;catch&lt;/code&gt;中捕获&lt;code&gt;Throwable&lt;/code&gt;，除非你非常确定&lt;code&gt;try&lt;/code&gt;块中的代码抛出的是可以处理的异常情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;错误示例如下：&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;catchThrowable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 不要这样做&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要将异常忽略&#34;&gt;&lt;a href=&#34;#不要将异常忽略&#34; class=&#34;headerlink&#34; title=&#34;不要将异常忽略&#34;&gt;&lt;/a&gt;不要将异常忽略&lt;/h1&gt;&lt;p&gt;在你开发的时候可能非常确定不会抛出异常，并且在你开发时确实没有发生过抛出异常的情况，所以你在&lt;code&gt;catch&lt;/code&gt;块中没有对异常做任何处理。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doNotIgnoreExceptions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 认为永远不会执行到这里&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是，你其实不确定在将来会不会有人在你的try块中添加新的代码，并且他可能也不会意识到他添加的代码会导致有异常抛出，这将会导致在线上真的有异常产生，但是没有一个人知道。&lt;/p&gt;
&lt;p&gt;所以，你至少应该在catch中打印一行日志，告诉同事，“警报，这里出现了一个不可能会出现的异常”。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doNotIgnoreExceptions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;		log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;警报，这里出现了一个不可能会出现的异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要打印日志后又将异常抛出&#34;&gt;&lt;a href=&#34;#不要打印日志后又将异常抛出&#34; class=&#34;headerlink&#34; title=&#34;不要打印日志后又将异常抛出&#34;&gt;&lt;/a&gt;不要打印日志后又将异常抛出&lt;/h1&gt;&lt;p&gt;这一条可能绝大多数人都会犯过，我见过非常多别人的代码在异常处理时，先打印了一行异常日志，然后将异常抛出，或者转成一个&lt;code&gt;RuntimeException&lt;/code&gt;抛出。&lt;/p&gt;
&lt;p&gt;甚至在一些开源框架中都有出现过。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCatchEx&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Long&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; e;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你可能会认为这样做很直观，也没什么错，让调用你方法的人去处理就好了。但是这样一来，在日志中会对抛出的一个异常打印多条错误信息。&lt;/p&gt;
&lt;p&gt;重复的日志并没有带来任何有价值的信息，参考上面第4条中描述，在异常信息中应该携带足够的信息，并且要做到精准。如果需要在添加其他信息，你应该将捕获到的异常封装在你的自定义异常中再进行抛出。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wrapException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String input)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; CustomException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// do something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式转换异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以，我们应该只有在想对异常进行处理时捕获，否则就应该在抛出去，并且在方法前面上加以说明，让调用方去处理。&lt;/p&gt;
&lt;h1 id=&#34;在包装异常时使用原始异常&#34;&gt;&lt;a href=&#34;#在包装异常时使用原始异常&#34; class=&#34;headerlink&#34; title=&#34;在包装异常时使用原始异常&#34;&gt;&lt;/a&gt;在包装异常时使用原始异常&lt;/h1&gt;&lt;p&gt;通常在项目开发时，都会有一套自定义的异常，用于将API中的标准异常封装到自定义异常中，可以用于在外层做一些统一的异常处理。&lt;/p&gt;
&lt;p&gt;但是我们在使用自定义异常对原始异常进行封装时，需要确保将原始异常作为cause保存在自定义异常中，否则你在外层将会丢失原始异常的堆栈跟踪信息，到你你无法通过异常信息分析抛出异常的具体原因。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wrapException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String input)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; CustomException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// do something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 将e作为构造参数中的cause&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式转换异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;在抛出或者捕获异常时，我们应该考虑很多不同的事情，上面所说的大多数都是为了提高代码的可读性和提供给别人的API更易用。&lt;/p&gt;
&lt;p&gt;通常异常不光是一种错误处理机制，同时还具备一定的信息媒介作用。我们应该遵循这些异常处理的规则和最佳实践，写出更规范，不让别人吐槽的好代码。&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA_%E6%B5%85%E6%9E%90%E6%9E%9A%E4%B8%BE/</guid>
            <title>JAVA_浅析枚举</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA_%E6%B5%85%E6%9E%90%E6%9E%9A%E4%B8%BE/</link>
            <category>思考</category>
            <category>JAVA</category>
            <category>枚举</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;1-简介&#34;&gt;&lt;a href=&#34;#1-简介&#34; class=&#34;headerlink&#34; title=&#34;1.简介&#34;&gt;&lt;/a&gt;1.简介&lt;/h1&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;font color=&#34;red&#34;&gt;Enum 一般用来表示&lt;strong&gt;一组相同类型的常量&lt;/strong&gt;&lt;/font&gt;&amp;#x3D;&amp;#x3D;。如：性别、日期、月份、颜色等。对这些属性用常量的好处是显而易见的，不仅可以保证单例，且在比较的时候可以用 ”&amp;#x3D;&amp;#x3D;” 来替换 equals。在 JDK1.5 之前是没有 Enum 这个类型的，那时候一般用接口常量来替代。&lt;/p&gt;
&lt;h1 id=&#34;2-Enum究竟是啥&#34;&gt;&lt;a href=&#34;#2-Enum究竟是啥&#34; class=&#34;headerlink&#34; title=&#34;2.Enum究竟是啥&#34;&gt;&lt;/a&gt;2.Enum究竟是啥&lt;/h1&gt;&lt;p&gt;你是否被问到过以下的问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;枚举允许继承类吗？&lt;/li&gt;
&lt;li&gt;枚举允许实现接口吗？&lt;/li&gt;
&lt;li&gt;枚举可以用等号比较吗？&lt;/li&gt;
&lt;li&gt;可以继承枚举吗？&lt;/li&gt;
&lt;li&gt;枚举是单例吗？&lt;/li&gt;
&lt;li&gt;当使用compareTo()比较枚举时，比较的是什么？&lt;/li&gt;
&lt;li&gt;当使用equals()比较枚举的时候，比较的是什么？&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;面试官的问题五花八门，但归根结底都是在考察同一个问题：枚举的本质。&lt;/p&gt;
&lt;p&gt;那么枚举究竟是啥?&lt;/p&gt;
&lt;p&gt;废话不说,先看源代码:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Enum&lt;/span&gt;&amp;lt;E &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Enum&lt;/span&gt;&amp;lt;E&amp;gt;&amp;gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Comparable&lt;/span&gt;&amp;lt;E&amp;gt;, Serializable &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;//*******        &lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;从源代码可以看出Enum的本质是一个抽象类,所以上述问题基本上都迎刃而解了.&lt;/p&gt;
&lt;h1 id=&#34;3-Enum的特性&#34;&gt;&lt;a href=&#34;#3-Enum的特性&#34; class=&#34;headerlink&#34; title=&#34;3.Enum的特性&#34;&gt;&lt;/a&gt;3.Enum的特性&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Enum常量隐式的加上了static和final，一旦被创建就无法修改&lt;/li&gt;
&lt;li&gt;Enum提供了是类型安全的(type-safe)&lt;/li&gt;
&lt;li&gt;Enum隐式的加上了values()方法，返回一个数组包含所有的Enum常量&lt;/li&gt;
&lt;li&gt;两个Enum常量可以使用 &lt;code&gt;==&lt;/code&gt;或&lt;code&gt;equals()&lt;/code&gt;方法比较&lt;/li&gt;
&lt;li&gt;Enum可以用在switch语句中，就像int，String。&lt;/li&gt;
&lt;li&gt;Enum有自己的名称空间&lt;/li&gt;
&lt;li&gt;Enum可以实现Java接口&lt;/li&gt;
&lt;li&gt;可以在Enum中定义构造器&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;4-Enum的注意事项&#34;&gt;&lt;a href=&#34;#4-Enum的注意事项&#34; class=&#34;headerlink&#34; title=&#34;4.Enum的注意事项&#34;&gt;&lt;/a&gt;4.Enum的注意事项&lt;/h1&gt;&lt;h3 id=&#34;Enum的用法&#34;&gt;&lt;a href=&#34;#Enum的用法&#34; class=&#34;headerlink&#34; title=&#34;Enum的用法&#34;&gt;&lt;/a&gt;Enum的用法&lt;/h3&gt;&lt;p&gt;1 . Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。&lt;/p&gt;
&lt;h3 id=&#34;Enum的用法-1&#34;&gt;&lt;a href=&#34;#Enum的用法-1&#34; class=&#34;headerlink&#34; title=&#34;Enum的用法&#34;&gt;&lt;/a&gt;Enum的用法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;在创建Enum常量的时候可以指定值，但是这个时候你需要定义一个成员变量构造器。构造器必须是private的，不然会报编译错误.&lt;strong&gt;​&lt;/strong&gt;&amp;lt;&amp;#x2F;font&amp;gt;&lt;/strong&gt;&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;5-EumDemo&#34;&gt;&lt;a href=&#34;#5-EumDemo&#34; class=&#34;headerlink&#34; title=&#34;5.EumDemo&#34;&gt;&lt;/a&gt;5.EumDemo&lt;/h1&gt;&lt;p&gt;1)创建一个水果相关的枚举&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt; &amp;#123;  &lt;br&gt;    APPLE, PEAR, PEACH, ORANGE;  &lt;br&gt;&amp;#125; &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;再看看Fruit反编译的结果:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; test;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Enum&lt;/span&gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Fruit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String s, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(s, i);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Fruit[] values() &amp;#123;  &lt;br&gt;        Fruit afruit[];  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i;  &lt;br&gt;        Fruit afruit1[];  &lt;br&gt;        System.arraycopy(afruit = ENUM$VALUES, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, afruit1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;[i = afruit.length], &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, i);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; afruit1;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Fruit &lt;span class=&#34;hljs-title function_&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String s)&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Fruit)Enum.valueOf(test/Fruit, s);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit APPLE;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEAR;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEACH;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit ORANGE;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit ENUM$VALUES[];  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;  &lt;br&gt;        APPLE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;APPLE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);  &lt;br&gt;        PEAR = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEAR&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);  &lt;br&gt;        PEACH = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEACH&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);  &lt;br&gt;        ORANGE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ORANGE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);  &lt;br&gt;        ENUM$VALUES = (&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;[] &amp;#123;  &lt;br&gt;            APPLE, PEAR, PEACH, ORANGE  &lt;br&gt;        &amp;#125;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意这几行：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit APPLE;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEAR;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEACH;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit ORANGE;  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到我们定义的几个成员变量,JVM底层把它转换成Eunm类型.&lt;/p&gt;
&lt;p&gt;我们还是再写点代码看看:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt; &amp;#123;  &lt;br&gt;    APPLE &amp;#123;   &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am an apple.&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    PEAR &amp;#123;   &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a pear.&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    PEACH &amp;#123;   &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a peach.&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;,  &lt;br&gt;    ORANGE;  &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a fruit.&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其中，只有Orange没有Overide test()方法；&lt;/p&gt;
&lt;p&gt;在main方法里面调用:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs Java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;  &lt;br&gt;        Fruit.APPLE.test();  &lt;br&gt;        Fruit.PEAR.test();  &lt;br&gt;        Fruit.PEACH.test();  &lt;br&gt;        Fruit.ORANGE.test();  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;输出结果:&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs css&#34;&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;I&lt;/span&gt; am an apple. &lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;I&lt;/span&gt; am &lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt; pear. &lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;I&lt;/span&gt; am &lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt; peach. &lt;br&gt;&lt;span class=&#34;hljs-selector-tag&#34;&gt;I&lt;/span&gt; am &lt;span class=&#34;hljs-selector-tag&#34;&gt;a&lt;/span&gt; fruit.&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，重新定义了test方法的APPLE,PEAR,PEACH覆盖了从父类继承过来的默认行为，而未从新定义test方法的ORANGE却沿袭了父类的行为，多态性在这里展现出来了。&lt;/p&gt;
&lt;p&gt;再看看反编译后的文件:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://img-blog.csdn.net/20160413220702331&#34;&gt;&lt;/p&gt;
&lt;p&gt;发现多了几个内部类的字节码文件,看看反编译后的代码:&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Jad home page: http://www.geocities.com/kpdus/jad.html  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Decompiler options: packimports(3)   &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Source File Name:   Fruit.java  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; test;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.io.PrintStream;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Enum&lt;/span&gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Fruit&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String s, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i)&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(s, i);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a fruit.&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Fruit[] values() &amp;#123;  &lt;br&gt;        Fruit afruit[];  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i;  &lt;br&gt;        Fruit afruit1[];  &lt;br&gt;        System.arraycopy(afruit = ENUM$VALUES, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, afruit1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;[i = afruit.length], &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, i);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; afruit1;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Fruit &lt;span class=&#34;hljs-title function_&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String s)&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; (Fruit)Enum.valueOf(test/Fruit, s);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    Fruit(String s, &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; i, Fruit fruit) &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;(s, i);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit APPLE;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEAR;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit PEACH;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit ORANGE;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; Fruit ENUM$VALUES[];  &lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &amp;#123;  &lt;br&gt;        APPLE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;APPLE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am an apple.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        PEAR = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEAR&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;  &lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a pear.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        PEACH = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEACH&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) &amp;#123;  &lt;br&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a peach.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        ORANGE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ORANGE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);  &lt;br&gt;        ENUM$VALUES = (&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;[] &amp;#123;  &lt;br&gt;            APPLE, PEAR, PEACH, ORANGE  &lt;br&gt;        &amp;#125;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;注意这段代码：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt;   &lt;br&gt;    &amp;#123;  &lt;br&gt;        APPLE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;APPLE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;) &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am an apple.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        PEAR = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEAR&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;) &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a pear.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        PEACH = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;PEACH&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;) &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;  &lt;br&gt;            &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;I am a peach.&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;;  &lt;br&gt;        ORANGE = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Fruit&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ORANGE&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);  &lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;　这个时候的APPLE，PEAR，PEACH已经以匿名内部类的方式对Fruit进行了Overide，自然体现出了多态，多出的那三个疑似内部类的class文件也就是它们！而ORANGE，没有重写test方法，仍然以一个Fruit实例的形式出现。&lt;/p&gt;
&lt;h1 id=&#34;6-反思-Enum多态体现的好处&#34;&gt;&lt;a href=&#34;#6-反思-Enum多态体现的好处&#34; class=&#34;headerlink&#34; title=&#34;6.反思-Enum多态体现的好处&#34;&gt;&lt;/a&gt;6.反思-Enum多态体现的好处&lt;/h1&gt;&lt;p&gt;其实通过上面我们可以通过Enum(枚举类)实现单例工厂模式,这样就能省去多余的判断步骤和不必要的父类和其他的相关类,大大提高我们的代码效率.&lt;/p&gt;
&lt;h2 id=&#34;lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt&#34;&gt;&lt;a href=&#34;#lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt&#34; class=&#34;headerlink&#34; title=&#34;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;​练习小Demo​**&amp;lt;&amp;#x2F;font&amp;gt;**&#34;&gt;&lt;/a&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;练习小Demo&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.创建Dog和Persion类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.Enum.Model;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/17 14:47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dog&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String age;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗狗的无参数构造器&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Dog&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name, String age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗狗的有参数构造器&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;bark&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;汪汪&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.Enum.Model;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/17 14:51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Persion&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String age;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Persion&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;人的无参数构造器&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;Persion&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name, String age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;人的有参数构造器&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;speak&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;说话&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setName&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String name)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.name = name;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; String &lt;span class=&#34;hljs-title function_&#34;&gt;getAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; age;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;setAge&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String age)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.age = age;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2.创建单例工厂类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.Enum.Singletion;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.Enum.Model.Dog;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.Enum.Model.Persion;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/17 14:52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SingletonInstanceFactory&lt;/span&gt; &amp;#123;&lt;br&gt;&lt;br&gt;    INSTANCE_FACTORY;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Persion persion;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; Dog dog;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;SingletonInstanceFactory&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        persion = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Persion&lt;/span&gt;();&lt;br&gt;        dog = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Dog&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Persion &lt;span class=&#34;hljs-title function_&#34;&gt;getPersion&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; persion;&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Dog &lt;span class=&#34;hljs-title function_&#34;&gt;getDog&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; dog;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3.进行测试&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.Enum;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.Enum.Model.Dog;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.Enum.Model.Persion;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.Enum.Singletion.SingletonInstanceFactory;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/17 17:18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Demo&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test01&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Dog&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dog1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; SingletonInstanceFactory.INSTANCE_FACTORY.getDog();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Dog&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dog2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; SingletonInstanceFactory.INSTANCE_FACTORY.getDog();&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dog1 = &amp;quot;&lt;/span&gt; + dog1);&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dog2 = &amp;quot;&lt;/span&gt; + dog2);&lt;br&gt;        dog1.bark();&lt;br&gt;        dog2.bark();&lt;br&gt;        System.out.println(dog1 == dog2);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Persion&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;persion1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Persion&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;persion2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;persion1 = &amp;quot;&lt;/span&gt; + persion1);&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;persion2 = &amp;quot;&lt;/span&gt; + persion2);&lt;br&gt;        persion1.speak();&lt;br&gt;        persion2.speak();&lt;br&gt;        System.out.println(persion1 == persion2);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;4.运行结果&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;结果如下:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190717172845.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</guid>
            <title>JAVA8-字符串</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-%E5%AD%97%E7%AC%A6%E4%B8%B2/</link>
            <category>思考</category>
            <category>JAVA</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;Java 8 相对于之前的版本，添加了许多新的字符串相关特性，并对现有的 API 进行了优化。&lt;/p&gt;
&lt;h1 id=&#34;StringJoiner&#34;&gt;&lt;a href=&#34;#StringJoiner&#34; class=&#34;headerlink&#34; title=&#34;StringJoiner&#34;&gt;&lt;/a&gt;StringJoiner&lt;/h1&gt;&lt;h2 id=&#34;详解&#34;&gt;&lt;a href=&#34;#详解&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;拼接字符串&lt;/p&gt;
&lt;h2 id=&#34;用法&#34;&gt;&lt;a href=&#34;#用法&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//不指定前缀和后缀&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;StringJoiner&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;stringJoiner&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StringJoiner&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//指定前缀和后缀&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//StringJoiner stringJoiner = new StringJoiner(&amp;quot;,&amp;quot;,&amp;quot;&amp;#123;&amp;quot;,&amp;quot;&amp;#125;&amp;quot;);&lt;/span&gt;&lt;br&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;list.forEach(str-&amp;gt;stringJoiner.add(str));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;String-join&#34;&gt;&lt;a href=&#34;#String-join&#34; class=&#34;headerlink&#34; title=&#34;String.join&#34;&gt;&lt;/a&gt;String.join&lt;/h1&gt;&lt;h2 id=&#34;详解-1&#34;&gt;&lt;a href=&#34;#详解-1&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h2&gt;&lt;p&gt;拼接字符串，缺点是无法指定前缀和后缀&lt;/p&gt;
&lt;h2 id=&#34;用法-1&#34;&gt;&lt;a href=&#34;#用法-1&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(String.join(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt;, list));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;字符串实例方法&#34;&gt;&lt;a href=&#34;#字符串实例方法&#34; class=&#34;headerlink&#34; title=&#34;字符串实例方法&#34;&gt;&lt;/a&gt;字符串实例方法&lt;/h1&gt;&lt;p&gt;Java 8 向 &lt;code&gt;String&lt;/code&gt; 类中添加了许多实例方法，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;isEmpty()&lt;/code&gt;：判断字符串是否为空。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;chars()&lt;/code&gt;：返回一个 IntStream，其中包含此字符串中的字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;codePoints()&lt;/code&gt;：返回一个 IntStream，其中包含此字符串中的 Unicode 代码点。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-Date%20Time%20API/</guid>
            <title>JAVA8-Date Time API</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-Date%20Time%20API/</link>
            <category>思考</category>
            <category>JAVA</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该文章仅仅记录Java 8 新增日期相关的API文档。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;时区概念&#34;&gt;&lt;a href=&#34;#时区概念&#34; class=&#34;headerlink&#34; title=&#34;时区概念&#34;&gt;&lt;/a&gt;时区概念&lt;/h1&gt;&lt;p&gt;Java8中日期和时间类的设计中,把相关API分成了两个包:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;java.time:该包中的日期和时间类是不具有时区的,比如LocalDate、LocalTime、LocalDateTime等。  &lt;/li&gt;
&lt;li&gt;java.time.zone:该包中的日期和时间类则是带时区的,比如ZonedDateTime、OffsetDateTime等。这样的设计有以下几个重要&lt;br&gt;原因:&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;方便不同场景使用对于不需要时区信息的场景,使用java.time中的类足够,简单易用。&lt;br&gt; 对于需要时区功能的场景,使用java.time.zone中的类,可以很好地完成不同时区的转换和处理。&lt;/li&gt;
&lt;li&gt;避免在不需要时区信息的情况下携带时区,影响程序性能如果所有日期时间类都内置时区信息,则在不需要时区的场景下,多余的时区数据也会被加载和携带,浪费资源。&lt;/li&gt;
&lt;li&gt;实现互操作java.time中的无时区类可以很容易地和java.time.zone中的有时区类互操作,相互转换。  这样可以在两种场景间灵活切换。&lt;/li&gt;
&lt;li&gt;实现隔离并减少依赖通过包的划分,java.time和java.time.zone具有了一定的隔离度,互不依赖。  如果没有这个划分,那么利用不到时区信息的类也不得不依赖所有的时区数据库数据,会增加Java SE的大小。&lt;/li&gt;
&lt;li&gt;方便未来拓展如果未来需要扩展新的日期时间相关功能,也可以通过包的划分加以区隔,同时又能够与现有类方便地互操作。 这种设计更具有可扩展性。&lt;br&gt;所以,总体来说,Java 8之所以采用有时区和无时区两套 API 的设计,主要还是基于性能、 interchangeability、可扩展性等方面的考量。&lt;br&gt;这种设计解耦了不同的需求场景,使得日期时间类组更为灵活和高效。&lt;br&gt;同时,两套 API 又可以很好地协作,这为我们在不同的场景下选择恰当的工具提供了可能。&lt;br&gt;OK，接下来记录一下Java8中常用的几个日期类。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;Clock&#34;&gt;&lt;a href=&#34;#Clock&#34; class=&#34;headerlink&#34; title=&#34;Clock&#34;&gt;&lt;/a&gt;Clock&lt;/h2&gt;&lt;h3 id=&#34;详解&#34;&gt;&lt;a href=&#34;#详解&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;可以取代&lt;code&gt;System.currentTimeMillis()&lt;/code&gt;,时区敏感，带有时区信息。&lt;/p&gt;
&lt;h3 id=&#34;用法&#34;&gt;&lt;a href=&#34;#用法&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Clock&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;clock&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Clock.systemDefaultZone();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;millis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; clock.millis();&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Instant&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;instant&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; clock.instant();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 可用历史日期类进行解析，legacy java.util.Date&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Date&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;legacyDate&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Date.from(instant);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;ZoneId&#34;&gt;&lt;a href=&#34;#ZoneId&#34; class=&#34;headerlink&#34; title=&#34;ZoneId&#34;&gt;&lt;/a&gt;ZoneId&lt;/h2&gt;&lt;h3 id=&#34;详解-1&#34;&gt;&lt;a href=&#34;#详解-1&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;新的时区类 &lt;code&gt;java.time.ZoneId&lt;/code&gt; 是原有的 &lt;code&gt;java.util.TimeZone&lt;/code&gt; 类的替代品。 ZoneId对象可以通过 &lt;code&gt;ZoneId.of()&lt;/code&gt; 方法创建，也可以通过 &lt;code&gt;ZoneId.systemDefault()&lt;/code&gt; 获取系统默认时区。&lt;/p&gt;
&lt;h3 id=&#34;用法-1&#34;&gt;&lt;a href=&#34;#用法-1&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 打印所有有效的时区标识 available timezone ids&lt;/span&gt;&lt;br&gt;System.out.println(ZoneId.getAvailableZoneIds());&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 指定上海时区，ZoneRules[currentStandardOffset=+08:00]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ZoneId&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;shanghaiZoneId&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ZoneId.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Shanghai&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;有了 ZoneId，我们就可以将一个 LocalDate、LocalTime 或 LocalDateTime 对象转化为 ZonedDateTime 对象。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 当前时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;localDateTime&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalDateTime.now();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 把不带有时区时间转变成带有时区的时间&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ZonedDateTime&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;zonedDateTime&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ZonedDateTime.of(localDateTime, shanghaiZoneId);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ZonedDateTime 对象由两部分构成：LocalDateTime 和 ZoneId，其中 2018-03-03T15:26:56.147 部分为 LocalDateTime，&lt;code&gt;+08:00[Asia/Shanghai]&lt;/code&gt; 部分为ZoneId。&lt;/p&gt;
&lt;h2 id=&#34;LocalTime&#34;&gt;&lt;a href=&#34;#LocalTime&#34; class=&#34;headerlink&#34; title=&#34;LocalTime&#34;&gt;&lt;/a&gt;LocalTime&lt;/h2&gt;&lt;h3 id=&#34;详解-2&#34;&gt;&lt;a href=&#34;#详解-2&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）&lt;/p&gt;
&lt;h3 id=&#34;用法-2&#34;&gt;&lt;a href=&#34;#用法-2&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 定义两个时区,东八区、东七区，东八区比东七区早(快)一个点  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ZoneId&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;systemDefault&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ZoneId.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Shanghai&amp;quot;&lt;/span&gt;);  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ZoneId&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;laosZone&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ZoneId.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Vientiane&amp;quot;&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalTime&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;systemLdt&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalTime.now(systemDefault);  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalTime&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;laosLdt&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalTime.now(laosZone);  &lt;br&gt;  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;systemLdt = &amp;quot;&lt;/span&gt; + systemLdt);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;laosLdt = &amp;quot;&lt;/span&gt; + laosLdt);  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// true  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;laosLdt.isBefore(systemLdt) = &amp;quot;&lt;/span&gt; + laosLdt.isBefore(systemLdt));  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Duration&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Duration.between(laosLdt, systemLdt);  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;duration.toHours() = &amp;quot;&lt;/span&gt; + duration.toHours());  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 60  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;duration.toMinutes() = &amp;quot;&lt;/span&gt; + duration.toMinutes());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;LocalDate&#34;&gt;&lt;a href=&#34;#LocalDate&#34; class=&#34;headerlink&#34; title=&#34;LocalDate&#34;&gt;&lt;/a&gt;LocalDate&lt;/h2&gt;&lt;h3 id=&#34;详解-3&#34;&gt;&lt;a href=&#34;#详解-3&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。 可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间&lt;/p&gt;
&lt;h3 id=&#34;用法-3&#34;&gt;&lt;a href=&#34;#用法-3&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;localDate&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalDate.now();  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// localDate = 2023-05-29  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;localDate = &amp;quot;&lt;/span&gt; + localDate);  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// tomorrow = 2023-05-30  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tomorrow&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; localDate.plusDays(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;tomorrow = &amp;quot;&lt;/span&gt; + tomorrow);  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// yesterday = 2023-05-28  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;yesterday&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; tomorrow.minus(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, ChronoUnit.DAYS);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yesterday = &amp;quot;&lt;/span&gt; + yesterday);  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// birthDay = 2023-08-26,星期6  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDate&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;birthDay&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalDate.of(&lt;span class=&#34;hljs-number&#34;&gt;2023&lt;/span&gt;, Month.AUGUST, &lt;span class=&#34;hljs-number&#34;&gt;26&lt;/span&gt;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;birthDay = &amp;quot;&lt;/span&gt; + birthDay);  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;DayOfWeek&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dayOfWeek&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; birthDay.getDayOfWeek();  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dayOfWeek = &amp;quot;&lt;/span&gt; + dayOfWeek.getValue());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;LocalDateTime&#34;&gt;&lt;a href=&#34;#LocalDateTime&#34; class=&#34;headerlink&#34; title=&#34;LocalDateTime&#34;&gt;&lt;/a&gt;LocalDateTime&lt;/h2&gt;&lt;h3 id=&#34;详解-4&#34;&gt;&lt;a href=&#34;#详解-4&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。&lt;/p&gt;
&lt;h3 id=&#34;用法-4&#34;&gt;&lt;a href=&#34;#用法-4&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ldt&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; LocalDateTime.of(LocalDate.now(), LocalTime.now());  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ldt.getDayOfWeek().getValue() = &amp;quot;&lt;/span&gt; + ldt.getDayOfWeek().getValue());  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 29  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ldt.getDayOfMonth() = &amp;quot;&lt;/span&gt; + ldt.getDayOfMonth());  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 1  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ldt.getLong(ChronoField.DAY_OF_WEEK) = &amp;quot;&lt;/span&gt; + ldt.getLong(ChronoField.DAY_OF_WEEK));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;ZonedDateTime&#34;&gt;&lt;a href=&#34;#ZonedDateTime&#34; class=&#34;headerlink&#34; title=&#34;ZonedDateTime&#34;&gt;&lt;/a&gt;ZonedDateTime&lt;/h2&gt;&lt;h3 id=&#34;详解-5&#34;&gt;&lt;a href=&#34;#详解-5&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;ZonedDateTime类是Java 8中日期时间功能里，&lt;code&gt;用于表示带时区的日期与时间信息的类&lt;/code&gt;。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。&lt;/p&gt;
&lt;h3 id=&#34;用法-5&#34;&gt;&lt;a href=&#34;#用法-5&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// ZonedDateTime.now() = 2023-05-29T14:38:14.527+08:00[Asia/Shanghai]  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ZonedDateTime.now() = &amp;quot;&lt;/span&gt; + ZonedDateTime.now());  &lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ZoneId&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;laosZone&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ZoneId.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Asia/Vientiane&amp;quot;&lt;/span&gt;);  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// ZonedDateTime.of(LocalDateTime.now(), laosZone) = 2023-05-29T14:38:14.528+07:00[Asia/Vientiane]  &lt;/span&gt;&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ZonedDateTime.of(LocalDateTime.now(), laosZone) = &amp;quot;&lt;/span&gt; + ZonedDateTime.of(LocalDateTime.now(), laosZone));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;Duration&#34;&gt;&lt;a href=&#34;#Duration&#34; class=&#34;headerlink&#34; title=&#34;Duration&#34;&gt;&lt;/a&gt;Duration&lt;/h2&gt;&lt;h3 id=&#34;详解-6&#34;&gt;&lt;a href=&#34;#详解-6&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;一个Duration对象表示两个Instant间的一段时间&lt;/p&gt;
&lt;h3 id=&#34;用法-6&#34;&gt;&lt;a href=&#34;#用法-6&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Instant&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;first&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Instant.now();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// wait some time while something happens&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Instant&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;second&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Instant.now();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Duration&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;duration&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Duration.between(first, second);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;DateTimeFormatter&#34;&gt;&lt;a href=&#34;#DateTimeFormatter&#34; class=&#34;headerlink&#34; title=&#34;DateTimeFormatter&#34;&gt;&lt;/a&gt;DateTimeFormatter&lt;/h2&gt;&lt;h3 id=&#34;详解-7&#34;&gt;&lt;a href=&#34;#详解-7&#34; class=&#34;headerlink&#34; title=&#34;详解&#34;&gt;&lt;/a&gt;详解&lt;/h3&gt;&lt;p&gt;DateTimeFormatter类是Java 8中日期时间功能里，线程安全。用于解析和格式化日期时间的类。&lt;/p&gt;
&lt;h3 id=&#34;用法-7&#34;&gt;&lt;a href=&#34;#用法-7&#34; class=&#34;headerlink&#34; title=&#34;用法&#34;&gt;&lt;/a&gt;用法&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//pattern.format(LocalDateTime.now()) = 2023/05/29 14:46:25  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;DateTimeFormatter&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;pattern&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DateTimeFormatter.ofPattern(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yyyy/MM/dd HH:mm:ss&amp;quot;&lt;/span&gt;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;pattern.format(LocalDateTime.now()) = &amp;quot;&lt;/span&gt; + pattern.format(LocalDateTime.now()));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</guid>
            <title>JAVA8特性整理</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</link>
            <category>思考</category>
            <category>JAVA</category>
            <category>Java8</category>
            <category>特性</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;新特性简介&#34;&gt;&lt;a href=&#34;#新特性简介&#34; class=&#34;headerlink&#34; title=&#34;新特性简介&#34;&gt;&lt;/a&gt;新特性简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;速度更快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码更少,更简洁(增加了新的语法支持:lambda表达式)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强大的Stream API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;便于并行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大化减少空指针异常(增加Optional类)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;其中最为核心的为 Lambda 表达式与Stream API&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h1 id=&#34;Lambda-表达式&#34;&gt;&lt;a href=&#34;#Lambda-表达式&#34; class=&#34;headerlink&#34; title=&#34;Lambda 表达式&#34;&gt;&lt;/a&gt;Lambda 表达式&lt;/h1&gt;&lt;h2 id=&#34;为啥使用lambda表达式&#34;&gt;&lt;a href=&#34;#为啥使用lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;为啥使用lambda表达式?&#34;&gt;&lt;/a&gt;为啥使用lambda表达式?&lt;/h2&gt;&lt;p&gt;Lambda 是一个 匿名函数，我们可以把 Lambda表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。&lt;/p&gt;
&lt;h2 id=&#34;重要体现——匿名内部类&#34;&gt;&lt;a href=&#34;#重要体现——匿名内部类&#34; class=&#34;headerlink&#34; title=&#34;重要体现——匿名内部类&#34;&gt;&lt;/a&gt;重要体现——匿名内部类&lt;/h2&gt;&lt;h3 id=&#34;从匿名内部类到lambda的转换&#34;&gt;&lt;a href=&#34;#从匿名内部类到lambda的转换&#34; class=&#34;headerlink&#34; title=&#34;从匿名内部类到lambda的转换&#34;&gt;&lt;/a&gt;从匿名内部类到lambda的转换&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;匿名内部类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;runnable&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Runnable&lt;/span&gt;() &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;用lambda表达式表示匿名内部类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;runnable1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ()-&amp;gt;&amp;#123;&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;匿名内部类参数传递&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;TreeSet&amp;lt;String&amp;gt; treeSet = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Comparator&lt;/span&gt;&amp;lt;String&amp;gt;() &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String o1, String o2)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Integer.compare(o1.length(),o2.length());&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;lambda表达式表示匿名内部类参数传递&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;TreeSet&amp;lt;String&amp;gt; treeSet1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;br&gt;        (o1,o2)-&amp;gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;  Integer.compare(o1.length(), o2.length());&lt;br&gt;        &amp;#125;&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;lambda表达式语法&#34;&gt;&lt;a href=&#34;#lambda表达式语法&#34; class=&#34;headerlink&#34; title=&#34;lambda表达式语法&#34;&gt;&lt;/a&gt;lambda表达式语法&lt;/h2&gt;&lt;p&gt;Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 “- -&amp;gt; &amp;gt;” ， 该操作符被称为Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;左侧&lt;/strong&gt;：指定了 Lambda 表达式需要的所有参数&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;右侧&lt;/strong&gt;：指定了 Lambda 体，即 Lambda 表达式要执行的功能。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;strong&gt;语法格式:&lt;/strong&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709144314.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;类型推断&#34;&gt;&lt;a href=&#34;#类型推断&#34; class=&#34;headerlink&#34; title=&#34;类型推断&#34;&gt;&lt;/a&gt;类型推断&lt;/h2&gt;&lt;p&gt;上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”.&lt;/p&gt;
&lt;h1 id=&#34;函数式接口&#34;&gt;&lt;a href=&#34;#函数式接口&#34; class=&#34;headerlink&#34; title=&#34;函数式接口&#34;&gt;&lt;/a&gt;函数式接口&lt;/h1&gt;&lt;h2 id=&#34;啥是函数式接口&#34;&gt;&lt;a href=&#34;#啥是函数式接口&#34; class=&#34;headerlink&#34; title=&#34;啥是函数式接口&#34;&gt;&lt;/a&gt;啥是函数式接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只包含一个抽象方法的接口，称为 函数式接口。&lt;/li&gt;
&lt;li&gt;你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。&lt;/li&gt;
&lt;li&gt;我们可以在任意函数式接口上使用 &amp;#x3D;&amp;#x3D;@FunctionalInterface 注解&amp;#x3D;&amp;#x3D;，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义函数式接口&#34;&gt;&lt;a href=&#34;#自定义函数式接口&#34; class=&#34;headerlink&#34; title=&#34;自定义函数式接口&#34;&gt;&lt;/a&gt;自定义函数式接口&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;作为参数传递lambda表达式&#34;&gt;&lt;a href=&#34;#作为参数传递lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;作为参数传递lambda表达式&#34;&gt;&lt;/a&gt;作为参数传递lambda表达式&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709145553.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Java-内置四大核心函数式接口&#34;&gt;&lt;a href=&#34;#Java-内置四大核心函数式接口&#34; class=&#34;headerlink&#34; title=&#34;Java  内置四大核心函数式接口&#34;&gt;&lt;/a&gt;Java  内置四大核心函数式接口&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数式接口&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Consumer&lt;T&gt;&lt;br/&gt;消费型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;对类型为T的对象应用操作，包含方法：void accept(T t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Supplier&lt;T&gt;&lt;br/&gt;供给型接口&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;返回类型为T的对象，包含方法：T get();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Function&amp;lt;T, R&amp;gt;&lt;br/&gt;函数型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Predicate&lt;T&gt;&lt;br/&gt;断定型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法boolean test(T t);&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;3方法引用与构造器引用&#34;&gt;&lt;a href=&#34;#3方法引用与构造器引用&#34; class=&#34;headerlink&#34; title=&#34;3方法引用与构造器引用&#34;&gt;&lt;/a&gt;3方法引用与构造器引用&lt;/h1&gt;&lt;h2 id=&#34;方法引用&#34;&gt;&lt;a href=&#34;#方法引用&#34; class=&#34;headerlink&#34; title=&#34;方法引用&#34;&gt;&lt;/a&gt;方法引用&lt;/h2&gt;&lt;p&gt;当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！）方法引用：使用操作符 “ ::” 将方法名和对象或类的名字分隔开来。&lt;br&gt;如下三种主要使用情况 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;对象 :: 实例方法&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;类 :: 静态方法&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;类 ::&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150818.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150911.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;构造器引用&#34;&gt;&lt;a href=&#34;#构造器引用&#34; class=&#34;headerlink&#34; title=&#34;构造器引用&#34;&gt;&lt;/a&gt;构造器引用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;&lt;strong&gt;ClassName :: new&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数&lt;br&gt;列表要与接口中抽象方法的参数列表一致！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151215.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数组引用&#34;&gt;&lt;a href=&#34;#数组引用&#34; class=&#34;headerlink&#34; title=&#34;数组引用&#34;&gt;&lt;/a&gt;数组引用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;&lt;strong&gt;type[] :: new&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;强大的-Stream-API&#34;&gt;&lt;a href=&#34;#强大的-Stream-API&#34; class=&#34;headerlink&#34; title=&#34;强大的 Stream API&#34;&gt;&lt;/a&gt;强大的 Stream API&lt;/h1&gt;&lt;h2 id=&#34;了解-Stream&#34;&gt;&lt;a href=&#34;#了解-Stream&#34; class=&#34;headerlink&#34; title=&#34;了解 Stream&#34;&gt;&lt;/a&gt;了解 Stream&lt;/h2&gt;&lt;p&gt;Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API( java.util.stream .*) 。&lt;br&gt;&amp;#x3D;&amp;#x3D;Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;4-2什么是-Stream&#34;&gt;&lt;a href=&#34;#4-2什么是-Stream&#34; class=&#34;headerlink&#34; title=&#34;4.2什么是 Stream&#34;&gt;&lt;/a&gt;4.2什么是 Stream&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;流 (Stream)  到底是什么呢 ？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。&lt;/strong&gt;&lt;br&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;“集合讲的是数据，流讲的是计算！ ”&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;注意：&lt;br&gt;①Stream 自己不会存储元素。&lt;br&gt;②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。&lt;br&gt;③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151831.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-3创建Stream&#34;&gt;&lt;a href=&#34;#4-3创建Stream&#34; class=&#34;headerlink&#34; title=&#34;4.3创建Stream&#34;&gt;&lt;/a&gt;4.3创建Stream&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java8 中的 Collection 接口被扩展，提供了两个获取流的方法 ：&lt;ul&gt;
&lt;li&gt;default Stream&lt;E&gt; stream() : 返回一个顺序流&lt;/li&gt;
&lt;li&gt;default Stream&lt;E&gt; parallelStream() : 返回一个并行流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由数组创建流Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：&lt;br&gt; static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流&lt;br&gt;重载形式，能够处理对应基本类型的数组：&lt;br&gt; public static IntStream stream(int[] array)&lt;br&gt; public static LongStream stream(long[] array)&lt;br&gt; public static DoubleStream stream(double[] array)&lt;/p&gt;
&lt;h2 id=&#34;4-4由值创建流&#34;&gt;&lt;a href=&#34;#4-4由值创建流&#34; class=&#34;headerlink&#34; title=&#34;4.4由值创建流&#34;&gt;&lt;/a&gt;4.4由值创建流&lt;/h2&gt;&lt;p&gt;可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。&lt;br&gt; public static&lt;T&gt; Stream&lt;T&gt; of(T… values) : 返回一个流&lt;/p&gt;
&lt;h2 id=&#34;4-5由函数创建流：创建无限流&#34;&gt;&lt;a href=&#34;#4-5由函数创建流：创建无限流&#34; class=&#34;headerlink&#34; title=&#34;4.5由函数创建流：创建无限流&#34;&gt;&lt;/a&gt;4.5由函数创建流：创建无限流&lt;/h2&gt;&lt;p&gt;可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流。&lt;br&gt; 迭代&lt;br&gt;public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, finalUnaryOperator&lt;T&gt; f)&lt;br&gt; 生成&lt;br&gt;public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) ;&lt;/p&gt;
&lt;h2 id=&#34;4-6Stream-的中间操作&#34;&gt;&lt;a href=&#34;#4-6Stream-的中间操作&#34; class=&#34;headerlink&#34; title=&#34;4.6Stream  的中间操作&#34;&gt;&lt;/a&gt;4.6Stream  的中间操作&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的 处理！而在 终止操作时一次性全部 处理，称为“惰性求值”。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709174819.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/QQ%E6%88%AA%E5%9B%BE20190709175115.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175205.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-7Stream的终止操作&#34;&gt;&lt;a href=&#34;#4-7Stream的终止操作&#34; class=&#34;headerlink&#34; title=&#34;4.7Stream的终止操作&#34;&gt;&lt;/a&gt;4.7Stream的终止操作&lt;/h2&gt;&lt;p&gt;终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175351.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175450.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175603.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175747.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175855.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-8并行-流与-串行-流&#34;&gt;&lt;a href=&#34;#4-8并行-流与-串行-流&#34; class=&#34;headerlink&#34; title=&#34;4.8并行 流与 串行 流&#34;&gt;&lt;/a&gt;4.8并行 流与 串行 流&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;并行流 就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流&amp;#x3D;&amp;#x3D;。Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与sequential() 在并行流与顺序流之间进行切换。&lt;/p&gt;
&lt;h2 id=&#34;4-9练习Demo&#34;&gt;&lt;a href=&#34;#4-9练习Demo&#34; class=&#34;headerlink&#34; title=&#34;4.9练习Demo&#34;&gt;&lt;/a&gt;4.9练习Demo&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建Stream 的四种方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1）. 通过Collection得Stream（）方法（串行流）或者 parallelStream（）方法（并行流）创建Stream。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 1.通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;            或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test1&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//1. 通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream1 = list.stream();&lt;br&gt;        &lt;br&gt;        Stream&amp;lt;String&amp;gt; stream2 = list.parallelStream();&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2）.通过Arrays中得静态方法stream（）获取数组流&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test2&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;IntStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.stream(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&amp;#125;);&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3). 通过Stream类中得 of（）静态方法获取流&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test3&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream = Stream.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4645&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;huinnj&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4）. 创建无限流(迭代、生成)&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 4. 创建无限流(迭代、生成)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test4&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//4. 创建无限流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Integer&amp;gt; stream1 = Stream.iterate(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, (x) -&amp;gt; x * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//生成(无限产生对象)&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Double&amp;gt; stream2 = Stream.generate(() -&amp;gt; Math.random());&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;相关操作&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.StreamAPI;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.StreamAPI.Person;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.*;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.IntStream;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.Stream;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/2 17:47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StreamAPIDemo&lt;/span&gt; &amp;#123;&lt;br&gt;    List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;    &amp;#125;);&lt;br&gt;    List&amp;lt;Person&amp;gt; persons = Arrays.asList(&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;76&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;赵六&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;钱七&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.VOCATION),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.VOCATION)&lt;br&gt;    );&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 1.通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test1&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//1. 通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream1 = list.stream();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream2 = list.parallelStream();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test2&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;IntStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.stream(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&amp;#125;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test3&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream = Stream.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4645&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;huinnj&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 4. 创建无限流(迭代、生成)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test4&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//4. 创建无限流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Integer&amp;gt; stream1 = Stream.iterate(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, (x) -&amp;gt; x * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//生成(无限产生对象)&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Double&amp;gt; stream2 = Stream.generate(() -&amp;gt; Math.random());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 筛选与切片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  filter —— 接收Lambda ，从流中排除某些元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test5&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//内部迭代：在此过程中没有进行过迭代，由Stream api进行迭代&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//中间操作：不会执行任何操作&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Person&amp;gt; stream = list.stream().filter((e) -&amp;gt; &amp;#123;&lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Stream API 中间操作&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; e.getAge() &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;;&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//终止操作：只有执行终止操作才会执行全部。即：延迟加载&lt;/span&gt;&lt;br&gt;        stream.forEach(System.out :: println);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test6&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//外部迭代&lt;/span&gt;&lt;br&gt;        Iterator&amp;lt;Person&amp;gt; it = list.iterator();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (it.hasNext()) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; it.next();&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(person.getAge()&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&amp;#123;&lt;br&gt;               System.out.println(person);&lt;br&gt;           &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * limit —— 截断流，使其元素不超过给定数量。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test7&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//过滤之后取2个值&lt;/span&gt;&lt;br&gt;        list.stream()&lt;br&gt;                .filter((e)-&amp;gt;e.getAge()&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;)&lt;br&gt;                .limit(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).forEach(System.out::println);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * skip（n）—— 跳过元素，返回一个扔掉了前n个元素的流。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 若流中元素不足n个，则返回一个空，与limit（n）互补。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test8&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//跳过前2个值&lt;/span&gt;&lt;br&gt;        list.stream().skip(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * distinct —— 筛选，通过流所生成元素的hashCode（）和equals（）去除重复元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *注意：distinct 需要实体中重写hashCode（）和 equals（）方法才可以使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test9&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        list.stream().distinct().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *	. map ，将元素转换成其他形式或者提取信息。接收一个函数作为参数，该函数会被应用到每个元素		 *	上，并将其映射成一个新的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * map —— 映射 ，将元素转换成其他形式或者提取信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test10&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//将流中每一个元素都映射到map的函数中，每个元素执行这个函数，再返回&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;);&lt;br&gt;        list.stream().map((e)-&amp;gt;e.toUpperCase()).forEach(System.out::println);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//获取Person中的每一个人得名字name，再返回一个集合&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; stringList = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.list.stream().map(Person::getName).collect(Collectors.toList());&lt;br&gt;        stringList.stream().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * flatMap —— 接收一个函数作为参数，将流中的每个值都换成一个流，然后把所有流连接成一个流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test11&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;StreamAPIDemo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StreamAPIDemo&lt;/span&gt;();&lt;br&gt;        List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;);&lt;br&gt;        list.stream().flatMap((e) -&amp;gt; 			             s.filterCharacter(e)).forEach(System.out::println);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果使用map则需要这样写&lt;/span&gt;&lt;br&gt;        list.stream().map((e) -&amp;gt; s.filterCharacter(e)).forEach((e) -&amp;gt; &amp;#123;&lt;br&gt;            e.forEach(System.out::println);&lt;br&gt;        &amp;#125;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	其实map方法就相当于Collaction的add方法，如果add的是个集合得话就会变成二维数组，而flatMap 的话就相当于Collaction的addAll方法，参数如果是集合得话，只是将2个集合合并，而不是变成二维数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	*/&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * sorted有两种方法，一种是不传任何参数，叫自然排序，还有一种需要传Comparator 接口参数，叫做定制排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test12&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 自然排序&lt;/span&gt;&lt;br&gt;        List&amp;lt;Person&amp;gt; persons1 = list.stream().sorted().collect(Collectors.toList());&lt;br&gt;        System.out.println(persons1);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//定制排序&lt;/span&gt;&lt;br&gt;        List&amp;lt;Person&amp;gt; persons2 = list.stream().sorted((e1, e2) -&amp;gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (e1.getAge() == e2.getAge()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (e1.getAge() &amp;gt; e2.getAge()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;).collect(Collectors.toList());&lt;br&gt;        persons2.stream().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * allMatch —— 检查是否匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断所有状态是否都是FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test13&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;isAllBusy&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().allMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(isAllBusy);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * anyMatch —— 检查是否至少匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断是否有一个是FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test14&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().anyMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(b);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * noneMatch —— 检查是否没有匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断是否没有FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test15&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().noneMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(b);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * findFirst —— 返回第一个元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test16&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().findFirst();&lt;br&gt;        person.orElse(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * findAny —— 返回当前流中任意元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test17&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().findAny();&lt;br&gt;        person.orElse(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY));&lt;br&gt;        System.out.println(person);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * count —— 返回流中元素总个数。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test18&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().count();&lt;br&gt;        System.out.println(count);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * max —— 返回流中最大值。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test19&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().max((e1, e2) -&amp;gt; Integer.compare(e1.getAge(), e2.getAge()));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * min —— 返回流中最小值。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test20&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().min((e1, e2) -&amp;gt; Double.compare(e1.getAge(), e2.getAge()));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * reduce（T identitty，BinaryOperator）首先，需要传一个起始值，然后，传入的是一个二元运算。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test21&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; list.stream().reduce(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,Integer::sum);&lt;br&gt;        System.out.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  reduce（BinaryOperator）此方法相对于上面方法来说，没有起始值，则有可能结果为空，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  所以返回的值会被封装到Optional中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test22&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Integer&amp;gt; list = Arrays.asList();&lt;br&gt;        Optional&amp;lt;Integer&amp;gt; sum = list.stream().reduce(Integer :: sum);&lt;br&gt;        sum.orElse(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        System.out.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 将一个字符串转换为流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; str&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Stream&amp;lt;Character&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;filterCharacter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String str)&lt;/span&gt;&amp;#123;&lt;br&gt;        List&amp;lt;Character&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (Character ch : str.toCharArray()) &amp;#123;&lt;br&gt;            list.add(ch);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list.stream();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;5-接口中的默认方法与静态方法&#34;&gt;&lt;a href=&#34;#5-接口中的默认方法与静态方法&#34; class=&#34;headerlink&#34; title=&#34;5.接口中的默认方法与静态方法&#34;&gt;&lt;/a&gt;5.接口中的默认方法与静态方法&lt;/h1&gt;&lt;h2 id=&#34;5-1接口中的默认方法&#34;&gt;&lt;a href=&#34;#5-1接口中的默认方法&#34; class=&#34;headerlink&#34; title=&#34;5.1接口中的默认方法&#34;&gt;&lt;/a&gt;5.1接口中的默认方法&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 &lt;font color=&#34;red&#34;&gt;default&lt;/font&gt; 关键字修饰。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709180636.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;接口默认方法的 ” 类优先 ” 原则&amp;#x3D;&amp;#x3D;&lt;br&gt;若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时&lt;br&gt; 选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。&lt;br&gt; 接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181013.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-2接口中的静态方法&#34;&gt;&lt;a href=&#34;#5-2接口中的静态方法&#34; class=&#34;headerlink&#34; title=&#34;5.2接口中的静态方法&#34;&gt;&lt;/a&gt;5.2接口中的静态方法&lt;/h2&gt;&lt;p&gt;Java8 中，接口中允许添加静态方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181225.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-Optional-类&#34;&gt;&lt;a href=&#34;#6-Optional-类&#34; class=&#34;headerlink&#34; title=&#34;6.Optional 类&#34;&gt;&lt;/a&gt;6.Optional 类&lt;/h1&gt;&lt;p&gt;Optional&lt;T&gt; 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。&lt;br&gt;常用方法：&lt;br&gt;Optional.of(T t) : 创建一个 Optional 实例&lt;br&gt;Optional.empty() : 创建一个空的 Optional 实例&lt;br&gt;Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例&lt;br&gt;isPresent() : 判断是否包含值&lt;br&gt;orElse(T t) : 如果调用对象包含值，返回该值，否则返回t&lt;br&gt;orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值&lt;br&gt;map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()&lt;br&gt;flatMap(Function mapper):与 map 类似，要求返回值必须是Optional&lt;/p&gt;
&lt;h2 id=&#34;一、Optional的构造方式：&#34;&gt;&lt;a href=&#34;#一、Optional的构造方式：&#34; class=&#34;headerlink&#34; title=&#34;一、Optional的构造方式：&#34;&gt;&lt;/a&gt;一、Optional的构造方式：&lt;/h2&gt;&lt;p&gt;1、Optional.of(T)&lt;/p&gt;
&lt;p&gt;该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。&lt;/p&gt;
&lt;p&gt;2、Optional.ofNullable(T)&lt;/p&gt;
&lt;p&gt;该方式的入参可以为null，当入参不确定为非null时使用。&lt;/p&gt;
&lt;p&gt;3、Optional.empty()&lt;/p&gt;
&lt;p&gt;这种方式是返回一个空Optional，等效Optional.ofNullable(null)&lt;/p&gt;
&lt;h2 id=&#34;二、-如何正确使用Optional&#34;&gt;&lt;a href=&#34;#二、-如何正确使用Optional&#34; class=&#34;headerlink&#34; title=&#34;二、 如何正确使用Optional&#34;&gt;&lt;/a&gt;二、 如何正确使用Optional&lt;/h2&gt;&lt;h3 id=&#34;尽量避免使用的地方：&#34;&gt;&lt;a href=&#34;#尽量避免使用的地方：&#34; class=&#34;headerlink&#34; title=&#34;尽量避免使用的地方：&#34;&gt;&lt;/a&gt;尽量避免使用的地方：&lt;/h3&gt;&lt;p&gt;1、避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null !&amp;#x3D; obj没有区别，这样用就没什么意义了。&lt;/p&gt;
&lt;p&gt;2、避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。&lt;/p&gt;
&lt;p&gt;3、避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。&lt;/p&gt;
&lt;p&gt;4、避免使用Optional作为方法的参数，原因同3。&lt;/p&gt;
&lt;h3 id=&#34;正确使用方式：&#34;&gt;&lt;a href=&#34;#正确使用方式：&#34; class=&#34;headerlink&#34; title=&#34;正确使用方式：&#34;&gt;&lt;/a&gt;正确使用方式：&lt;/h3&gt;&lt;p&gt;1、实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse&amp;#x2F;orElseGet方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//存在则返回&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;king&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;king&amp;quot;&lt;/span&gt;);&lt;br&gt;Optional&amp;lt;User&amp;gt; userOpt = Optional.of(king);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt;  userOpt.orElse(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;System.out.println(user.getName());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//不存在提供默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;Optional&amp;lt;User&amp;gt; userOpt2 = Optional.ofNullable(user2);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user3&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; userOpt2.orElse(unknown);&lt;br&gt;System.out.println(user3.getName());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//通过方法提供值&lt;/span&gt;&lt;br&gt;User user4 = userOpt2.&lt;span class=&#34;hljs-keyword&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;ElseGet(()&lt;/span&gt; -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-constructor&#34;&gt;User(0, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DEFAULT&amp;quot;&lt;/span&gt;)&lt;/span&gt;); &lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(user4.get&lt;span class=&#34;hljs-constructor&#34;&gt;Name()&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不建议这样使用：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(userOpt.isPresent()) &amp;#123;&lt;br&gt;    System.out.println(userOpt.get().getName());&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//。。。&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、使用ifPresent()来进行对象操作，存在则操作，否则不操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//实例存在则操作，否则不操作&lt;/span&gt;&lt;br&gt;userOpt.ifPresent(u -&amp;gt; System.out.println(u.getName()));&lt;br&gt;userOpt2.ifPresent(u -&amp;gt; System.out.println(u.getName()));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3、使用map&amp;#x2F;flatMap来获取关联数据&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用map方法获取关联数据&lt;/span&gt;&lt;br&gt;        System.out.println(userOpt.map(u -&amp;gt; u.getName()).orElse(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Unknown&amp;quot;&lt;/span&gt;));&lt;br&gt;        System.out.println(userOpt2.map(u -&amp;gt; u.getName()).orElse(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Default&amp;quot;&lt;/span&gt;));&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//使用flatMap方法获取关联数据&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; interests = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;        user.setInterests(interests);&lt;br&gt;        List&amp;lt;String&amp;gt; interests2 = Optional.of(user)&lt;br&gt;                .flatMap(u -&amp;gt; Optional.ofNullable(u.getInterests()))&lt;br&gt;                .orElse(Collections.emptyList());&lt;br&gt;        System.out.println(interests2.isEmpty());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;7-重复注解与类型注解&#34;&gt;&lt;a href=&#34;#7-重复注解与类型注解&#34; class=&#34;headerlink&#34; title=&#34;7.重复注解与类型注解&#34;&gt;&lt;/a&gt;7.重复注解与类型注解&lt;/h1&gt;&lt;p&gt;Java 8对注解处理提供了两点改进：&amp;#x3D;&amp;#x3D;可重复的注解及可用于类型的注解。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181750.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
