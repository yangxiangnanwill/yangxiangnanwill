{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"思考\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E8%A6%81%E6%9C%89%E4%B8%80%E9%A2%97%E5%A4%A7%E5%BF%83%E8%84%8F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/",
            "title": "开发好习惯",
            "date_published": "2024-01-03T13:13:21.669Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>写干净的代码，做风一样的男子！</p>\n</blockquote>\n<p>编程5分钟，查代码2小时!</p>\n<p>在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。</p>\n<p><img src=\"https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<p><strong>当有人指出程序员代码有BUG时，程序员的回答各有不同：</strong></p>\n<ul>\n<li>不可能啊，在我电脑上运行没有问题呀!</li>\n<li>我已经一星期没碰这块代码啦!</li>\n<li>没事，我改一行代码就可以了，不影响程序。</li>\n</ul>\n<div>\n<center>程序员调 Bug 的样子，非常真实~</center>\n</div>\n\n<p>​                                                                                                                         <center>↓↓↓</center></p>\n<p><img src=\"https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1\"></p>\n<p><img src=\"https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1\"></p>\n<p><img src=\"https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif\" alt=\"0?wx_fmt=gif\"></p>\n<blockquote>\n<p>调bug是火，bug是烟。一处点火，四处冒烟</p>\n<p>下面奉上我日常开发的一些总结.</p>\n</blockquote>\n<h1 id=\"如何减少代码的BUG呢-在此分享几个技巧\"><a href=\"#如何减少代码的BUG呢-在此分享几个技巧\" class=\"headerlink\" title=\"如何减少代码的BUG呢?在此分享几个技巧\"></a>如何减少代码的BUG呢?在此分享几个技巧</h1><h2 id=\"别对警告视而不见\"><a href=\"#别对警告视而不见\" class=\"headerlink\" title=\"别对警告视而不见\"></a>别对警告视而不见</h2><p>相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。</p>\n<p><strong>我们的目标是，写干净的代码，做风一样的男子!</strong></p>\n<p><img src=\"https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<h2 id=\"编程习惯\"><a href=\"#编程习惯\" class=\"headerlink\" title=\"编程习惯\"></a>编程习惯</h2><p>种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。</p>\n<h2 id=\"写代码的时间问题\"><a href=\"#写代码的时间问题\" class=\"headerlink\" title=\"写代码的时间问题\"></a>写代码的时间问题</h2><p>对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。</p>\n<p>虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。</p>\n<p><strong>我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。</strong></p>\n<p><img src=\"https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<h2 id=\"验证、自测\"><a href=\"#验证、自测\" class=\"headerlink\" title=\"验证、自测\"></a>验证、自测</h2><p>在提交测试前要多验证，其中包括自动化测试、手动跑用例等。</p>\n<p>有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。</p>\n<p>这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试</p>\n<h2 id=\"仔细的DEBUG\"><a href=\"#仔细的DEBUG\" class=\"headerlink\" title=\"仔细的DEBUG\"></a>仔细的DEBUG</h2><p>在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。</p>\n<h2 id=\"仔细的设计\"><a href=\"#仔细的设计\" class=\"headerlink\" title=\"仔细的设计\"></a>仔细的设计</h2><p>在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。</p>\n<h2 id=\"避免干扰\"><a href=\"#避免干扰\" class=\"headerlink\" title=\"避免干扰\"></a>避免干扰</h2><p>有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>写注释，写注释，写注释。重要的事情说三遍。</p>\n<p>因为前期的注释有利于后续开发的时候容易减少bug。</p>\n<p><strong>自从修改了注释模板，整个人精神多了，bug也明显少了，如图：</strong></p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png\" alt=\"image-20201215145125620\"></p>\n<h2 id=\"敢于维护上古代码\"><a href=\"#敢于维护上古代码\" class=\"headerlink\" title=\"敢于维护上古代码\"></a>敢于维护上古代码</h2><p>博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。</p>\n<p>‍</p>\n",
            "tags": [
                "开发习惯",
                "思考"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E8%A7%82%E5%90%8E%E6%84%9F/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E8%BF%BD%E9%A3%8E%E7%AD%9D%E7%9A%84%E4%BA%BA%E8%A7%82%E5%90%8E%E6%84%9F/",
            "title": "追风筝的人观后感",
            "date_published": "2024-01-03T13:13:21.669Z",
            "content_html": "<blockquote>\n<p>为你，千千万万遍！For you，a thousand times over！</p>\n</blockquote>\n<blockquote>\n<p>“许多年过去了，人们说陈年旧事可以被埋葬，然而我终于明白这是错的，因为往事会自行爬上来。”</p>\n</blockquote>\n<p>有没有那么一些人，一些事，停留在你的脑海深处，你不想要去回忆？你曾用尽全力把它们遗忘，埋葬，封印，超度……然而，当你以为已经可以遗忘到不再去想的时候，往事却又毫无征兆的在你生命某个瞬间，像电影放映一般，真实再现，一帧都没有落下……<br>最近又重温了一下高中的看过的追风筝的人，可能时过境迁，心境不同，感受颇多，特此记录一下。</p>\n<hr>\n<p><code>一个不能为自己挺身而出的孩子，长大后只能是个懦夫</code><br>阿米尔，生性懦弱，却又一直生活在自我欺骗的强大中。他怂恿哈桑做的很多不善的恶作剧，统统都由哈桑帮他无偿的背黑锅；就连最后看到哈桑为了帮他保护追到的风筝而被人侮辱强暴的时候，他仍然懦弱的跑开了；而后，为了逃避内心的谴责和独占父亲的宠爱，阿米尔想让父亲把哈桑父子赶出家门，在被拒绝之后，又导演了一出监守自盗栽赃诬陷的把戏，企图让哈桑永远的消失在面前。<br>哈桑，虽出身低微，却勤劳勇敢，朴实忠贞。他以一生兑现着对阿米尔少爷的忠诚，从小为他出头，为他被黑锅，为他追风筝，为他挣名声，就连洞悉了阿米尔的诬陷把戏后，仍然一声不吭的甘愿背负。一个虽卑微，虽没有太多文化，却无限完美的男孩儿形象。</p>\n<p>是的，曾几何时，我们都是孩子，我们都有着自己内心深处小心呵护的自尊与懦弱，我们或贫穷或富裕或懦弱或勇敢或虚伪或真实，在大人们的眼中，这或许都是小孩子的把戏，小孩子的无知，小孩子的不懂事，小孩子的无心之失。</p>\n<p>然而事实真的是这样吗？如果一个孩子从小就不能为自己和自己的伙伴挺身而出一次，那么长大之后，他就真的只能是一个懦夫。</p>\n<p>如果你曾经是阿米尔，你会为自己的懦弱而给自己的忠诚玩伴带来的伤害而忏悔，并勇敢面对，自我救赎吗？<br>如果你曾经是哈桑，你会为自己有这样一个懦弱，自私，见死不救的玩伴却忠诚到底不离不弃吗？</p>\n<p>答案或许不言自明，做阿米尔难，做哈桑更难。但哪一个才是你自己？<br><strong>为你，千千万万次！</strong></p>\n<hr>\n<p><code>你从我身上看到什么?     一辈子！</code><br>没有读过书的哈桑，或许讲不出什么经典的语句，但每一句质朴的话，都是他用一生兑现的承诺。</p>\n<p>哈桑从出生起叫的第一个人名就是阿米尔，一生干的最多的事，就是为阿米尔追风筝，直到最后，也是被塔利班杀害在了为阿米尔家驻守的大房子里面。</p>\n<p>我常常在想，哈桑临死的那一刻是安然的么？是可以瞑目的么？书中没有讲，但我觉得他应该是安然的，因为以哈桑的性格，他在生命的最后一刻都坚守在了自己少爷家的祖宅前面，虽然那一刻，他的少爷可能已在千里之外享受这他的另一种人生，可能祖宅对他而言也没有那么的重要，但是，至少对于哈桑，他是重要的，也是这一生当中或许唯一的重要。</p>\n<p>我们的人生有多少次承诺没有兑现？或许，是我们找了种种理由去解释它的无法兑现，以此消除我们内心的亏欠，以此自我欺骗的说服自己没有兑现的理所当然，好在以后的日子里悠然生活，安然入睡。为此，我们可能一次又一次的撒谎，骗别人也骗自己，好让自己在未来的故事里，活得坦然一些。</p>\n<p>然而，真相就在那里，它不会因为你的无视、掩盖、编造和涂抹就变得不再真实，它永远印刻在岁月里，拷问着你的灵魂。不要以那时还小作为最好的理由，因为有人为你将承诺放在了心上，你却将它踩在脚下。</p>\n<p>一日是一生的缩影。</p>\n<p><strong>再次成为好人的路！</strong></p>\n<hr>\n<p><code>“我知道电话线连着的，并不只是拉辛汗，还有我过去那些未曾赎还的罪行。”</code></p>\n<p>阿米尔虽然幸运的从战乱中的阿富汗逃了出去，再后来的日子里过着平静而殷实的生活，然而他并没有能够逃过灵魂的拷问，至此以后的半生，他都反复的被自责和愧疚所煎熬着。<br>也许，在自责和煎熬中，阿米尔其实已经踏出了自我救赎的第一步，意识的自我救赎，至少童年的那段阴影能够笼罩他后来万里之外的人生，就证明了阿米尔骨子里的善其实一直都在，只是在懦弱和患得患失中，始终被他人性的恶所胁迫着，无法展露真容。</p>\n<p>没有良心，没有美德的人，不会痛苦。</p>\n<p>因此，阿米尔的痛苦便来自于他灵魂深处潜藏着的良心与美德，它们一直在折磨着他，也在督促着他，尽快走上自我救赎的道路。  </p>\n<p>我的离开很久远了，久远的足以遗忘，也足以被遗忘。</p>\n<p>终于，阿米尔冒着战火硝烟回到了阿富汗，为的只是去寻找已故童年玩伴哈桑的儿子索拉博，并排除万难，将他带回到了自己的身边。</p>\n<p>时过境迁，阿米尔回到了故土，早已物是人非，曾经那个为他千千万万次追风筝的人早已逝去，有些东西，人生中错过了，就不会再得到。那些被风吹落的风筝，那些见证了你过往的人，还有那些被岁月封存的记忆，会在晨曦中拔地而起，而后飘然远去。</p>\n<p>故事到这里，或许该结尾了，阿米尔终于在经过几十年的良心拷问和灵魂煎熬之后，冲破了那个曾经懦弱逃避的自我，重新坚强的面对自己的不堪过往，并勇敢的穿越烽火硝烟，回到那个故事最初的地方，获得了重新改写人生的机会，完成了自我的救赎。</p>\n<p>我不知道，每个人的一生中，是否都有这样的机会，找到那条重新成为好人的路，或许我们都不认为自己是坏人，当然阿米尔也不是，但是，不可否认的，我们都有那个不敢面对的自己，如果可以，我说如果可以的话，你敢像阿米尔那样回到最初，翻出那个曾经不敢面对的自己，将它带出尘埃，让结局重新改写吗？</p>\n<p><strong>你想要我追那只风筝给你吗？</strong></p>\n<hr>\n<p><code>“我很高兴终于有人识破我的真面目，我装得太累了！”</code></p>\n<p>阿米尔的前半生都在斗风筝，也是斗风筝的高手，却从未有一次去追过风筝，因为前半生，他不需要追，有他的哈桑为他去追，千千万万次。</p>\n<p>这一次，在他的后半生里，他第一次追风筝，为哈桑的儿子索拉博而追。</p>\n<p>我们可以相信，追回的，不只是风筝，还有那许许多多承载浸透在风筝里的说了和没有说的过往，还有那许许多多完成了和未完成的心愿。</p>\n<p>人生上半场，我们都在拼命往前，在匆忙赶路中，不断的接受现实和丢失那个最初的自己，但我们却总是自我安慰说，这就是生活，我也是被逼无奈，于是继续伪装，继续逃避，继续自我麻醉。</p>\n<p>我们怕回头，我们不敢回头，于是，一个个装作没有遗憾，也没有缺失一样的继续生活。</p>\n<p>我们或多或少的，都在自己的人生中追逐着自己的那一枚风筝，为此，我们奔跑着，跳跃着，翻滚着，哭闹着，厮打着，只知向前，眼中心里想的都是得到它。 或许我们还曾为此选择放弃、背叛、欺骗、隐忍、牺牲，可是那些得到是否真是生命中的必须，而那些失去是否才真的弥足珍贵呢？</p>\n<p>或许，人到中年，很多人已经觉得见惯了生活的残忍从而学会了自我的保护，很多人已经对自我之外的其他任何不再感兴趣，即使再有哈桑为我们无条件付出，他也觉得是理所当然；再有牺牲和背叛，他也觉得是顺理成章。</p>\n<p>如果，之前你没有觉得这是一种负罪需要自我的救赎，你觉得不少人也都这样，所以我这样也是被逼无奈；那么之后，请你明白，你就是你，你的决定也就只是你的决定，与他人无关，即使你可以声称是受了他人的影响，是受了社会的胁迫，但请记住，你的人生最终只由你个人书写。</p>\n<p>所以，如果在某一天里，或是读了这篇文章过后，无论是为谁，就当是为我们自己，为那些生命里为你默默付出过，你却还没来得及感谢的人，回到那里，别只顾着斗风筝，为他们追一次风筝，哪怕就一次！</p>\n",
            "tags": [
                "思考",
                "感言",
                "读书笔记"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%87%B4%E6%AD%A3%E5%9C%A8%E5%A5%8B%E6%96%97%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%BD%A0/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E6%8B%A5%E6%8A%B1%E4%B8%96%E7%95%8C%E5%90%A7/%E8%87%B4%E6%AD%A3%E5%9C%A8%E5%A5%8B%E6%96%97%E8%B7%AF%E4%B8%8A%E7%9A%84%E4%BD%A0/",
            "title": "致正在奋斗路上的你",
            "date_published": "2024-01-03T13:13:21.668Z",
            "content_html": "<h1 id=\"致正在奋斗路上的你\"><a href=\"#致正在奋斗路上的你\" class=\"headerlink\" title=\"致正在奋斗路上的你\"></a>致正在奋斗路上的你</h1><h1 id=\"致正在奋斗路上的你-1\"><a href=\"#致正在奋斗路上的你-1\" class=\"headerlink\" title=\"致正在奋斗路上的你\"></a>致正在奋斗路上的你</h1><h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><blockquote>\n<p>写这个博客的目的主要是为了针对身边某些正在处于大学的朋友，感觉他们很迷茫，然后很刻苦，但是感觉努力的不在点上，所以我趁我考试的路上写下了这篇博客，一是为了记录一下这次旅行和放松的机会；二是给身边的一些朋友</p>\n</blockquote>\n<p>当你看到这个文章的时候，本博猪正在从大连回北京的路上，此时九点五十左右，博猪辗转反侧，夜不能寐，特此写下这篇文章，记录一下次不是在上坡的路上就是在上坡的路上的考试之旅，顺便缓解一下博猪六个小时屁股的煎熬。<br>首先按照常规流程博猪自我介绍一下，博猪笔名will，意义如何自行百度，98年出身，山东泰安人士，本博猪2019年3月份入坑，主要从事于车险，车险金融行业，先后参与过北汽鹏龙二期改造、北汽鹏龙微信端开发，捷通达集团车险经济平台理赔、续保、新车销售、部分报表统计等开发，参与北汽鹏龙中行、平安、浙江中行快速对接和流程设计和开发（SSI架构，前端LayUI），捷通达参与Erp,Sap系统资源对接，目前手里维护者九、十个左右的项目，目前正在长城驻场开发，参与车服务保代经济云系统、续保系统，主要负责续保系统的需求分析和业务开发，车服务系统对账方面开发和长城原系统和第三方系统对接封装基于spring cloud alibaba的相关工具类。目前项目已经上生产环境，目前正协助压测人员进行压力测试。</p>\n<p>OK，博猪履历介绍到这里，俗话说三年小架构，博猪目标如此，也正在努力的朝着这个目标前进，废话不说博猪写这篇文章的目的是分享一下自己的学习方式和一些学习心得，缘由是博猪身边有几个入坑这个专业的大学生最近看他们也是挺努力刻苦的，但是学习的点总是不在那个关键的地方上，这样博猪心有余而力不足，想好心帮忙但是每次都是很费劲的完成。<br>那么，我分享一下我的学习方式，顺便跟着博猪思考一下博猪对你们的问题，是否对你现在有所触动和能解决你手里的问题！</p>\n<ul>\n<li><p>有目的的学习</p>\n<p>目的很重要，因为它是你迷茫路上的一个指路灯，至少它能让你有一个目的地，在我的世界观里面target很重要，至少它能让你知道你下一步至少干啥，然后具体咋实现看你如何安排了。</p>\n<blockquote>\n<p>Q: \t你是否有想过近三年或者你毕业进入社会想干啥或者想过什么样的生活了没有？</p>\n</blockquote>\n</li>\n<li><p>坚持</p>\n<p>俗话说师傅领进门，修行靠个人，虽然博猪当时也啥都学，什么3dmax，ps，电商，嗯，因为我刚开始报的是电商的专业，然后大一上学期末临时转的软件开发，然后靠扎实的C语言的基础，自学的JAVA，JAVAEE，JAVA WEB，MySQL等，因为学校教程太慢，太杂，我当时的想法很简单，就是工作，然后赚钱，然后我静静的边抽烟边刷了一遍招聘软件上的软件开发的技术，然后回去下载资料，自己学，上机课我就偷偷的猫到一个角落自己戴着耳机学习，然后一遍遍的码代码，自己不关心的科目期末不挂科就行，寒暑假初中同学高中同学聚会能推就推。<br>所以，如果说我提出的第一点占头百分之二十的话，那么坚持就能占百分之七十。</p>\n<blockquote>\n<p>Q:\t如果你已经深深的思考了第一题，那么鉴于第一题的基础上，你是否能你的目标坚持下去的努力？</p>\n</blockquote>\n</li>\n<li><p>不浮躁</p>\n<p>博猪很喜欢博猪学校的校训:坚持 不浮躁，坚持容易，不浮躁难。coding本身就是一个很枯燥无聊，甚至很容易没得朋友的一个事情，所以让自己的心沉下来很重要。</p>\n</li>\n<li><p>有属于自己的学习体系</p>\n<p>有自己的学习体系很重要，作为一个成年人应该有个事情紧急程度的排序，给自己的科目或者事情排个序，那个可以做那个可以不做，不要把自己搞得很乱又很累。</p>\n</li>\n<li><p>学会自己思考</p>\n<p>身边的朋友很多就是遇到问题就是，为啥明明都是一模一样的，为啥我的就直接报错，那么你有没有想过这个程序为啥这样执行？还有你执行完一个程序后是否进行复验程序？程序是不会骗人的，所以多多吃一些异常报错有营养，对自己成长有好处的。</p>\n</li>\n<li><p>学会自己解决问题</p>\n<p>遇到一个问题以后，你要相信一句话这个一定不是你一个人再犯，肯定会有前人给你踩过坑，所以遇到问题学会找谷哥或者找度娘。</p>\n</li>\n<li><p>学会正确的搜索关键词</p>\n<p>一个正确的搜索关键词会大大提高搜索引擎给你的搜索结果，也大大减少了浏览器因模糊或者一些广告给你带来的困扰。</p>\n</li>\n<li><p>切勿好高骛远</p>\n<p>博猪最近遇到很多刚入行的小白，感觉微服务不过如此，业主不过如此，但是真正到自己手里的时候，连最基本的crud都不会，当然博猪和技术经理交给他们的这就是一些crud的项目模块，当然前期由于长城这个公司刚成立，一些最基本的技术沉淀都没有，当然博猪算是经历了一次一个公司技术体系从无到有的一个过程。</p>\n</li>\n<li><p>建议藏在内容里面，答案请自行寻找</p>\n<p>俗话说的好，九为数极，哈哈，这个建议是针对将来入职程序猿的盆友建议，如果还在读大学建议赶紧找个对象，要不然你会发现你工作入职后不是你想象的白领的生活，而是整天不断的需求和加班，996的生活，正在朝着你招手，所以博猪最大的遗憾就是没在大学期间找个女票。</p>\n</li>\n</ul>\n<p>话就絮叨到这里了，22点50了，车快到站了，博猪也要收拾一下东西回家了，哈哈末尾送你们一句话，也是博猪最近闲下来刷剧看到的一句话感觉挺不错的，句子如下：<br>须知少时凌云志，曾许人间第一流！</p>\n<p>下面贴两张博猪拍的两张图片：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135857.jpg\"></p>\n<p>​<img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201026135915.jpg\">​</p>\n",
            "tags": [
                "思考",
                "感言"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%BC%80%E5%8F%91%E6%84%9F%E6%82%9F/%E5%BC%80%E5%8F%91%E5%A5%BD%E4%B9%A0%E6%83%AF/",
            "title": "开发好习惯",
            "date_published": "2024-01-03T13:13:21.666Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>写干净的代码，做风一样的男子！</p>\n</blockquote>\n<p>编程5分钟，查代码2小时!</p>\n<p>在程序员的编程生涯，免不了和BUG打交道，甚至有些程序员被BUG虐杀的苦不堪言。</p>\n<p><img src=\"https://p3-tt.byteimg.com/origin/4ada0003ada15e3b0683?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<p><strong>当有人指出程序员代码有BUG时，程序员的回答各有不同：</strong></p>\n<ul>\n<li>不可能啊，在我电脑上运行没有问题呀!</li>\n<li>我已经一星期没碰这块代码啦!</li>\n<li>没事，我改一行代码就可以了，不影响程序。</li>\n</ul>\n<div>\n<center>程序员调 Bug 的样子，非常真实~</center>\n</div>\n\n<p>​                                                                                                                         <center>↓↓↓</center></p>\n<p><img src=\"https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wUy7KTTM4IhnOjTMdC3zXRYGElM7Pia1AhvV02UlibtPKoRFc9icv40dHA/0?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1\"></p>\n<p><img src=\"https://ss.csdn.net/p?http://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3wxQKXe3ibNiadib0xqp2uYXribWiby2WCrXmO4q1CXAibbpugibUNvdA2yuuNQ/0?wx_fmt=gif&wxfrom=5&wx_lazy=1\" alt=\"0?wx_fmt=gif&amp;wxfrom=5&amp;wx_lazy=1\"></p>\n<p><img src=\"https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/2A8tXicCG8yka2rcVsmkqPjN4taJfwp3w5fLdGxLudXOB5pdrwh2vbClrZU7KC5QysFhibrkP9spDK2kONPHTUnw/0?wx_fmt=gif\" alt=\"0?wx_fmt=gif\"></p>\n<blockquote>\n<p>调bug是火，bug是烟。一处点火，四处冒烟</p>\n<p>下面奉上我日常开发的一些总结.</p>\n</blockquote>\n<h1 id=\"如何减少代码的BUG呢-在此分享几个技巧\"><a href=\"#如何减少代码的BUG呢-在此分享几个技巧\" class=\"headerlink\" title=\"如何减少代码的BUG呢?在此分享几个技巧\"></a>如何减少代码的BUG呢?在此分享几个技巧</h1><h2 id=\"别对警告视而不见\"><a href=\"#别对警告视而不见\" class=\"headerlink\" title=\"别对警告视而不见\"></a>别对警告视而不见</h2><p>相信不少的程序员会使用IDEA，使用它敲代码，有时候会出现警告，那么这时你对警告就不能视而不见了。</p>\n<p><strong>我们的目标是，写干净的代码，做风一样的男子!</strong></p>\n<p><img src=\"https://p1-tt.byteimg.com/origin/4add00036e54d5cefc42?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<h2 id=\"编程习惯\"><a href=\"#编程习惯\" class=\"headerlink\" title=\"编程习惯\"></a>编程习惯</h2><p>种瓜得瓜种豆得豆，好的编程习惯可以大大降低BUG数量。譬如有if必须写else，即使else是个空语句 。</p>\n<h2 id=\"写代码的时间问题\"><a href=\"#写代码的时间问题\" class=\"headerlink\" title=\"写代码的时间问题\"></a>写代码的时间问题</h2><p>对于程序员而言，千万别熬夜写代码。一些程序员在晚上11点，仍然在敲代码。</p>\n<p>虽然你自己觉得头脑其实很清醒，但是第二天自测，或者QA测试的时候你有可能就会发现问题很多。</p>\n<p><strong>我们一般不提倡长期加班写代码，因为那样会导致Bug率直线上升。</strong></p>\n<p><img src=\"https://p1-tt.byteimg.com/origin/4ade00036510b0efbb55?from=pc\" alt=\"程序员减少代码BUG的7种方法，写干净的代码，做风一样的男子！\"></p>\n<h2 id=\"验证、自测\"><a href=\"#验证、自测\" class=\"headerlink\" title=\"验证、自测\"></a>验证、自测</h2><p>在提交测试前要多验证，其中包括自动化测试、手动跑用例等。</p>\n<p>有一句话说的好，千万别怕麻烦，不然你会麻烦一辈子。</p>\n<p>这也是我认为我现在坚持的比较好的一点，自测ok，然后交给业务测试</p>\n<h2 id=\"仔细的DEBUG\"><a href=\"#仔细的DEBUG\" class=\"headerlink\" title=\"仔细的DEBUG\"></a>仔细的DEBUG</h2><p>在2.4基础上建议自测是仔细的DEBUG一遍，这样能对自己的代码心里有个范围，大体知道风险点和错误是便于直接调整自己的代码。</p>\n<h2 id=\"仔细的设计\"><a href=\"#仔细的设计\" class=\"headerlink\" title=\"仔细的设计\"></a>仔细的设计</h2><p>在程序员编写代码之前，必须对代码的整个结构以及逻辑结构胸有成竹。</p>\n<h2 id=\"避免干扰\"><a href=\"#避免干扰\" class=\"headerlink\" title=\"避免干扰\"></a>避免干扰</h2><p>有部分的程序员敲代码的时候，经常会一边听音乐一边敲代码，这样效率不仅仅低，而且也更容易产生BUG。</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><p>写注释，写注释，写注释。重要的事情说三遍。</p>\n<p>因为前期的注释有利于后续开发的时候容易减少bug。</p>\n<p><strong>自从修改了注释模板，整个人精神多了，bug也明显少了，如图：</strong></p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20201215145135.png\" alt=\"image-20201215145125620\"></p>\n<h2 id=\"敢于维护上古代码\"><a href=\"#敢于维护上古代码\" class=\"headerlink\" title=\"敢于维护上古代码\"></a>敢于维护上古代码</h2><p>博猪开发时间其实很少，只有一年的时间，其实上古代码对于博猪的历练很大，俗话说的好多吃BUG,身体棒棒。博猪入职之后前半年一直维护一个SSI项目，里面用的技术很杂，有的在网上找不到，包括前端和后台，其次最重要的是业务方面，更是不懂，业务一般人不是给你讲的，所以我就一遍遍的启动本地DEBUG,慢慢啃下来的。</p>\n<p>‍</p>\n",
            "tags": [
                "开发习惯",
                "思考"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/",
            "title": "异步编程(1)-初识异步",
            "date_published": "2024-01-03T13:13:21.655Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>近期博猪在负责一个风险测算的模块，其中的具体过程博猪就不细说了，但是总体的感觉就是心中有无数个草泥马在奔腾，但是现在仔细感觉还是值得写个博客来记录一下的。<br>具体场景为有些业务导入牵扯到一些计算，业务那边说是导入数据量比较庞大，所以博猪就用异步+多线程的方式处理了这个业务，本地和Linux环境跑了几遍，20个字段，2w数据，5个线程，总体耗时也就三秒左右，还是挺可观的。</p>\n</blockquote>\n<h1 id=\"什么异步编程\"><a href=\"#什么异步编程\" class=\"headerlink\" title=\"什么异步编程\"></a>什么异步编程</h1><p>Java 异步编程是一种让程序并行运行的方式，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且等工作单元运行结束后通知主应用程序线程它的运行结果或者失败原因。使用异步编程有许多好处，例如可以提高应用程序的性能和响应能力，提高线程的利用率，减少线程间的通信开销等。<br>Java 异步编程的核心是线程池，程序员可以通过提交任务到线程池来实现异步编程。<br>Java 异步编程在现实生活中有很多应用，例如网络 IO 请求、日志打印、异步打日志、异步消息处理等。<br>具体来说,Java异步编程包括以下几个要点:</p>\n<ul>\n<li>启动异步任务:通过某种机制启动一个与主程序分离的异步任务,比如线程、Future、CompletableFuture等。</li>\n<li>异步任务独立执行:一旦异步任务启动,主程序可以继续执行,而异步任务将在后台独立运行。</li>\n<li>获取异步执行的结果(可选):主程序如果需要异步任务的结果,可以通过某种方式获取其结果,比如调用Future的get方法或给CompletionHandler传递结果。但这不是异步执行的必要条件,有的异步任务不需要返回结果。</li>\n<li>异常处理(可选):通过 completion handlers 或其他异常处理机制对异步任务可能抛出的异常进行处理。</li>\n<li>线程管理(可选):有的异步方式需要手动管理执行线程,有的则通过线程池等机制自动管理。<br>所以,总体来说,Java异步编程的关键就是启动一个与主程序分离的异步任务,并让其在后台运行,而主程序可以继续流程,不等待其完成。在需要结果或异常时,再通过相应机制获取或处理。<br>这一模式允许程序同时处理多个任务,提高了程序的并发能力和响应性。线程的自动管理也简化了手动管理线程的难度。Java提供了多种实现异步编程的方式,比如线程、Future、CompletableFuture、响应式框架等。随着Java的发展,这些方式越来越简便高效。<br>但其核心思想仍然是让异步任务独立于主程序执行,以实现并发和提高响应性。</li>\n</ul>\n",
            "tags": [
                "思考",
                "JAVA",
                "异步编程",
                "线程"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/",
            "title": "异常处理及思考",
            "date_published": "2024-01-03T13:13:21.642Z",
            "content_html": "<blockquote>\n<p>Java中应该如何处理异常，这个话题看似简单，不就是<code>try...catch</code>嘛，但是往往BUG更容易出现在一些简单地、我们更容易忽略的地方。</p>\n<p>一个好的异常处理能让开发人员快速定位异常信息和修复问题，同时也能更好的让使用人员进进行捕获和处理异常信息。</p>\n</blockquote>\n<h1 id=\"使用finally或try…with…resource关闭资源\"><a href=\"#使用finally或try…with…resource关闭资源\" class=\"headerlink\" title=\"使用finally或try…with…resource关闭资源\"></a>使用finally或try…with…resource关闭资源</h1><p>如果我们在try代码块中需要使用到一些资源，比如<code>InputStream</code>，在使用完之后我们需要将资源关闭。</p>\n<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">incorrectRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;d:\\\\a.txt&quot;</span>);<br>        inputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file);<br>        <span class=\"hljs-comment\">// read something</span><br>        inputStream.close();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在上面这段代码中，只要在文件读取时没有出现异常，这段代码是可以正常工作的，但是只要在try块中的close()方法中抛出异常，资源就不会被关闭。</p>\n<p>所以这种情况我们应该将资源关闭的代码放在finally中或者使用try…with…resource语句。</p>\n<p>应该使用finally，在finally块中的代码不管是否出现异常，都会被执行，因此可以确保资源对象被关闭。</p>\n<p>正确示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">correctRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;d:\\\\a.txt&quot;</span>);<br>        inputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file);<br>        <span class=\"hljs-comment\">// read something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>        inputStream.close();<br>        <span class=\"hljs-comment\">//或者使用IoUtil工具等关闭流，eg:IoUtil.close(inputStream);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用try…with…resource\"><a href=\"#使用try…with…resource\" class=\"headerlink\" title=\"使用try…with…resource\"></a>使用try…with…resource</h1><blockquote>\n<p>随着资源使用的增多，当打开多个资源是对应的资源关闭也是一个问题。因为资源打开的越多，finally中嵌套的次数越多，这将导致大量的无用代码，从而导致代码的臃肿。</p>\n<p>try…with…resource正是java 1.7中新增的语法糖功能，而通过这个语法糖功能，无需我们手动的关闭资源，程序会自动关闭我们打开的资源。</p>\n<p>对应的条件：</p>\n<ul>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭</strong>​**&lt;&#x2F;font&gt;**</li>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源</strong>​**&lt;&#x2F;font&gt;**</li>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>越晚声明的对象，会越早被close掉,即先开后闭原则</strong>​**&lt;&#x2F;font&gt;**</li>\n</ul>\n</blockquote>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">correctRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(javaFile);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fileLen</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) file.length();<br>    <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[fileLen];<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file)) &#123;<br>        is.read(bytes);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">content</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;content = \\n&quot;</span> + content);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException ioException) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;流关闭异常&quot;</span>, ioException);<br>        ioException.printStackTrace();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用更明确的异常\"><a href=\"#使用更明确的异常\" class=\"headerlink\" title=\"使用更明确的异常\"></a>使用更明确的异常</h1><p>如果我们的方法需要向外抛出异常，那么异常类型越具体越好。因为在外部调用你代码的其他人对你内部的实现逻辑可能并不清楚，所以要确保能提供给他尽可能多的信息，可以让别人在使用你的方法时更容易理解，这样调用方可以更好地处理抛出的异常。</p>\n<p>比如，在你的方法内容抛出<code>NumberFormatException</code>比抛出<code>IllegalArgumentException</code>或者直接抛出<code>Exception</code>，所代表的含义就会更明确。</p>\n<h1 id=\"方法注释中对异常进行说明\"><a href=\"#方法注释中对异常进行说明\" class=\"headerlink\" title=\"方法注释中对异常进行说明\"></a>方法注释中对异常进行说明</h1><p>如果你的方法声明了可能会抛出异常，那么在方法的文档注释中，应该对异常进行说明。这和上一条的目的一样，都是为了让方法的调用者能提前获得更多的信息，方便他避免在调用你方法时出现异常，或者更明确如果进行异常处理。</p>\n<p>所以，我们应该在方法的文档注释中添加@throws声明，并说明什么情况下会抛出对应的异常。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取数据库连接</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> cfg                     数据库信息</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span>                        数据库连接信息</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@throws</span> ClassNotFoundException 数据库驱动获取异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@throws</span> SQLException           数据库连接异常</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Connection <span class=\"hljs-title function_\">getConnect</span><span class=\"hljs-params\">(DataSourceConfig cfg)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, SQLException &#123;<br>    Class.forName(cfg.getDriverClass());<br>    <span class=\"hljs-keyword\">return</span> DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUserName(), cfg.getPassword());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"在异常中携带足够的描述信息\"><a href=\"#在异常中携带足够的描述信息\" class=\"headerlink\" title=\"在异常中携带足够的描述信息\"></a>在异常中携带足够的描述信息</h1><p>这一点和前两条做法的目的类似。在异常中携带足够的描述信息，是为了在出现该异常时，能够在日志文件中查看异常信息时，能看到更有用的信息。</p>\n<p>所以我们应该尽可能准确地描述出为什么抛出了这个异常，并提供最相关的数据信息让别人定位。</p>\n<p>当然这里也不能太极端，你洋洋洒洒写一篇小作文，应该使用简短的一段信息描述，让运维同事能了解到这个问题的严重性，更轻松地分析问题所在。</p>\n<p>也不用提供一堆额外的冗余信息，尽量做到足够精准。比如当你再创建一个Long对象时如果传入一个字符串，就会抛出<code>NumberFormatException</code>。</p>\n<p><code>NumberFormatException</code>的类名已经告诉我们出现的是数字格式化异常，所以在<code>message</code>中只需要提供输入的字符串。如果你定义的异常类名不能很明确的表达出是什么异常，比如<code>BusinessException</code>，你就应该在<code>message</code>中表达出更多的信息。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">sss</span> <span class=\"hljs-operator\">=</span> Long.valueOf(<span class=\"hljs-string\">&quot;sss&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式化异常&quot;</span>, e);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 自定义异常</span><br><span class=\"hljs-comment\">  */</span><br><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">(String message)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(message);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">(String message, Throwable cause)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(message, cause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>控制台打印信息如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Exception in thread <span class=\"hljs-string\">&quot;main&quot;</span> ExceptionTest$CustomException: 数字格式化异常<br>\tat ExceptionTest.main(ExceptionTest.java:<span class=\"hljs-number\">77</span>)<br>Caused by: java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;sss&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">589</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat ExceptionTest.main(ExceptionTest.java:<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"先捕获更明确的异常\"><a href=\"#先捕获更明确的异常\" class=\"headerlink\" title=\"先捕获更明确的异常\"></a>先捕获更明确的异常</h1><p>一般在我们使用的IDE中，如果当你在做异常捕获时，先捕获了不太具体的异常比如<code>Exception</code>，然后再捕获更具体的异常如<code>IOException</code>，都会提示我们后面的catch块无法到达。所以我们应该先捕获最具体的异常类，将不太具体的异常类的捕获放在最后。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">catchException</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        doSomthing(...)<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;格式异常&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IllegalArgumentException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法参数&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要捕获Throwable\"><a href=\"#不要捕获Throwable\" class=\"headerlink\" title=\"不要捕获Throwable\"></a>不要捕获<code>Throwable</code></h1><blockquote>\n<p><code>Throwable</code>是所有<code>Exception</code>和<code>Error</code>的父类。</p>\n</blockquote>\n<p>虽然可以在<code>catch</code>块中捕获它，但是我们不应该这样去做。因为如果使用了<code>Throwable</code>，那么不仅会对所有抛出的<code>Exception</code>进行捕获，还会捕获所有的<code>Error</code>。</p>\n<p>而当我们的程序抛出<code>Error</code>时表示是一个无法处理的严重问题，例如典型的<code>OutofMemoryError</code>，<code>StackOverflowError</code>等，这两个<code>Error</code>都是由程序无法控制并且不能处理的情况引起的。所以说，最好不要在你的<code>catch</code>中捕获<code>Throwable</code>，除非你非常确定<code>try</code>块中的代码抛出的是可以处理的异常情况。</p>\n<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">catchThrowable</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// 不要这样做</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要将异常忽略\"><a href=\"#不要将异常忽略\" class=\"headerlink\" title=\"不要将异常忽略\"></a>不要将异常忽略</h1><p>在你开发的时候可能非常确定不会抛出异常，并且在你开发时确实没有发生过抛出异常的情况，所以你在<code>catch</code>块中没有对异常做任何处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doNotIgnoreExceptions</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>\t\t<span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-comment\">// 认为永远不会执行到这里</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是，你其实不确定在将来会不会有人在你的try块中添加新的代码，并且他可能也不会意识到他添加的代码会导致有异常抛出，这将会导致在线上真的有异常产生，但是没有一个人知道。</p>\n<p>所以，你至少应该在catch中打印一行日志，告诉同事，“警报，这里出现了一个不可能会出现的异常”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doNotIgnoreExceptions</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>\t\t<span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>\t\tlog.error(<span class=\"hljs-string\">&quot;警报，这里出现了一个不可能会出现的异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要打印日志后又将异常抛出\"><a href=\"#不要打印日志后又将异常抛出\" class=\"headerlink\" title=\"不要打印日志后又将异常抛出\"></a>不要打印日志后又将异常抛出</h1><p>这一条可能绝大多数人都会犯过，我见过非常多别人的代码在异常处理时，先打印了一行异常日志，然后将异常抛出，或者转成一个<code>RuntimeException</code>抛出。</p>\n<p>甚至在一些开源框架中都有出现过。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCatchEx</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Long</span>(<span class=\"hljs-string\">&quot;will&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数字格式异常&quot;</span>, e);<br>        <span class=\"hljs-keyword\">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>你可能会认为这样做很直观，也没什么错，让调用你方法的人去处理就好了。但是这样一来，在日志中会对抛出的一个异常打印多条错误信息。</p>\n<p>重复的日志并没有带来任何有价值的信息，参考上面第4条中描述，在异常信息中应该携带足够的信息，并且要做到精准。如果需要在添加其他信息，你应该将捕获到的异常封装在你的自定义异常中再进行抛出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wrapException</span><span class=\"hljs-params\">(String input)</span> <span class=\"hljs-keyword\">throws</span> CustomException &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// do something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>所以，我们应该只有在想对异常进行处理时捕获，否则就应该在抛出去，并且在方法前面上加以说明，让调用方去处理。</p>\n<h1 id=\"在包装异常时使用原始异常\"><a href=\"#在包装异常时使用原始异常\" class=\"headerlink\" title=\"在包装异常时使用原始异常\"></a>在包装异常时使用原始异常</h1><p>通常在项目开发时，都会有一套自定义的异常，用于将API中的标准异常封装到自定义异常中，可以用于在外层做一些统一的异常处理。</p>\n<p>但是我们在使用自定义异常对原始异常进行封装时，需要确保将原始异常作为cause保存在自定义异常中，否则你在外层将会丢失原始异常的堆栈跟踪信息，到你你无法通过异常信息分析抛出异常的具体原因。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wrapException</span><span class=\"hljs-params\">(String input)</span> <span class=\"hljs-keyword\">throws</span> CustomException &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// do something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-comment\">// 将e作为构造参数中的cause</span><br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在抛出或者捕获异常时，我们应该考虑很多不同的事情，上面所说的大多数都是为了提高代码的可读性和提供给别人的API更易用。</p>\n<p>通常异常不光是一种错误处理机制，同时还具备一定的信息媒介作用。我们应该遵循这些异常处理的规则和最佳实践，写出更规范，不让别人吐槽的好代码。</p>\n",
            "tags": [
                "思考",
                "异常"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA_%E6%B5%85%E6%9E%90%E6%9E%9A%E4%B8%BE/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA_%E6%B5%85%E6%9E%90%E6%9E%9A%E4%B8%BE/",
            "title": "JAVA_浅析枚举",
            "date_published": "2024-01-03T13:13:21.642Z",
            "content_html": "<h1 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1.简介\"></a>1.简介</h1><p>&#x3D;&#x3D;<font color=\"red\">Enum 一般用来表示<strong>一组相同类型的常量</strong></font>&#x3D;&#x3D;。如：性别、日期、月份、颜色等。对这些属性用常量的好处是显而易见的，不仅可以保证单例，且在比较的时候可以用 ”&#x3D;&#x3D;” 来替换 equals。在 JDK1.5 之前是没有 Enum 这个类型的，那时候一般用接口常量来替代。</p>\n<h1 id=\"2-Enum究竟是啥\"><a href=\"#2-Enum究竟是啥\" class=\"headerlink\" title=\"2.Enum究竟是啥\"></a>2.Enum究竟是啥</h1><p>你是否被问到过以下的问题：</p>\n<ul>\n<li>枚举允许继承类吗？</li>\n<li>枚举允许实现接口吗？</li>\n<li>枚举可以用等号比较吗？</li>\n<li>可以继承枚举吗？</li>\n<li>枚举是单例吗？</li>\n<li>当使用compareTo()比较枚举时，比较的是什么？</li>\n<li>当使用equals()比较枚举的时候，比较的是什么？</li>\n</ul>\n<p>面试官的问题五花八门，但归根结底都是在考察同一个问题：枚举的本质。</p>\n<p>那么枚举究竟是啥?</p>\n<p>废话不说,先看源代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">abstract</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Enum</span>&lt;E <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Enum</span>&lt;E&gt;&gt;<br>        <span class=\"hljs-keyword\">implements</span> <span class=\"hljs-title class_\">Comparable</span>&lt;E&gt;, Serializable &#123;<br>\t\t<span class=\"hljs-comment\">//*******        </span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>从源代码可以看出Enum的本质是一个抽象类,所以上述问题基本上都迎刃而解了.</p>\n<h1 id=\"3-Enum的特性\"><a href=\"#3-Enum的特性\" class=\"headerlink\" title=\"3.Enum的特性\"></a>3.Enum的特性</h1><ul>\n<li>Enum常量隐式的加上了static和final，一旦被创建就无法修改</li>\n<li>Enum提供了是类型安全的(type-safe)</li>\n<li>Enum隐式的加上了values()方法，返回一个数组包含所有的Enum常量</li>\n<li>两个Enum常量可以使用 <code>==</code>或<code>equals()</code>方法比较</li>\n<li>Enum可以用在switch语句中，就像int，String。</li>\n<li>Enum有自己的名称空间</li>\n<li>Enum可以实现Java接口</li>\n<li>可以在Enum中定义构造器</li>\n</ul>\n<h1 id=\"4-Enum的注意事项\"><a href=\"#4-Enum的注意事项\" class=\"headerlink\" title=\"4.Enum的注意事项\"></a>4.Enum的注意事项</h1><h3 id=\"Enum的用法\"><a href=\"#Enum的用法\" class=\"headerlink\" title=\"Enum的用法\"></a>Enum的用法</h3><p>1 . Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。</p>\n<h3 id=\"Enum的用法-1\"><a href=\"#Enum的用法-1\" class=\"headerlink\" title=\"Enum的用法\"></a>Enum的用法</h3><ol>\n<li>Enum的声明，Enum可以声明在一个类之外或者在类内部，但是不能在方法中。</li>\n<li>&#x3D;&#x3D;<strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>在创建Enum常量的时候可以指定值，但是这个时候你需要定义一个成员变量构造器。构造器必须是private的，不然会报编译错误.<strong>​</strong>&lt;&#x2F;font&gt;</strong>&#x3D;&#x3D;</li>\n</ol>\n<h1 id=\"5-EumDemo\"><a href=\"#5-EumDemo\" class=\"headerlink\" title=\"5.EumDemo\"></a>5.EumDemo</h1><p>1)创建一个水果相关的枚举</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Fruit</span> &#123;  <br>    APPLE, PEAR, PEACH, ORANGE;  <br>&#125; <br></code></pre></td></tr></table></figure>\n\n<p>再看看Fruit反编译的结果:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> test;  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">final</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fruit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Enum</span> &#123;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Fruit</span><span class=\"hljs-params\">(String s, <span class=\"hljs-type\">int</span> i)</span> &#123;  <br>        <span class=\"hljs-built_in\">super</span>(s, i);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Fruit[] values() &#123;  <br>        Fruit afruit[];  <br>        <span class=\"hljs-type\">int</span> i;  <br>        Fruit afruit1[];  <br>        System.arraycopy(afruit = ENUM$VALUES, <span class=\"hljs-number\">0</span>, afruit1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>[i = afruit.length], <span class=\"hljs-number\">0</span>, i);  <br>        <span class=\"hljs-keyword\">return</span> afruit1;  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Fruit <span class=\"hljs-title function_\">valueOf</span><span class=\"hljs-params\">(String s)</span> &#123;  <br>        <span class=\"hljs-keyword\">return</span> (Fruit)Enum.valueOf(test/Fruit, s);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit APPLE;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEAR;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEACH;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit ORANGE;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit ENUM$VALUES[];  <br>    <span class=\"hljs-keyword\">static</span> &#123;  <br>        APPLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;APPLE&quot;</span>, <span class=\"hljs-number\">0</span>);  <br>        PEAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEAR&quot;</span>, <span class=\"hljs-number\">1</span>);  <br>        PEACH = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEACH&quot;</span>, <span class=\"hljs-number\">2</span>);  <br>        ORANGE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;ORANGE&quot;</span>, <span class=\"hljs-number\">3</span>);  <br>        ENUM$VALUES = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>[] &#123;  <br>            APPLE, PEAR, PEACH, ORANGE  <br>        &#125;);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>\n\n<p>注意这几行：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit APPLE;  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEAR;  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEACH;  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit ORANGE;  <br></code></pre></td></tr></table></figure>\n\n<p>可以看到我们定义的几个成员变量,JVM底层把它转换成Eunm类型.</p>\n<p>我们还是再写点代码看看:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">Fruit</span> &#123;  <br>    APPLE &#123;   <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;I am an apple.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    PEAR &#123;   <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;I am a pear.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    PEACH &#123;   <br>        <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;I am a peach.&quot;</span>);  <br>        &#125;  <br>    &#125;,  <br>    ORANGE;  <br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;I am a fruit.&quot;</span>);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>\n\n<p>其中，只有Orange没有Overide test()方法；</p>\n<p>在main方法里面调用:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs Java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        Fruit.APPLE.test();  <br>        Fruit.PEAR.test();  <br>        Fruit.PEACH.test();  <br>        Fruit.ORANGE.test();  <br>&#125;  <br></code></pre></td></tr></table></figure>\n\n<p>输出结果:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs css\"><span class=\"hljs-selector-tag\">I</span> am an apple. <br><span class=\"hljs-selector-tag\">I</span> am <span class=\"hljs-selector-tag\">a</span> pear. <br><span class=\"hljs-selector-tag\">I</span> am <span class=\"hljs-selector-tag\">a</span> peach. <br><span class=\"hljs-selector-tag\">I</span> am <span class=\"hljs-selector-tag\">a</span> fruit.<br></code></pre></td></tr></table></figure>\n\n<p>可以看到，重新定义了test方法的APPLE,PEAR,PEACH覆盖了从父类继承过来的默认行为，而未从新定义test方法的ORANGE却沿袭了父类的行为，多态性在这里展现出来了。</p>\n<p>再看看反编译后的文件:</p>\n<p><img src=\"https://img-blog.csdn.net/20160413220702331\"></p>\n<p>发现多了几个内部类的字节码文件,看看反编译后的代码:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.  </span><br><span class=\"hljs-comment\">// Jad home page: http://www.geocities.com/kpdus/jad.html  </span><br><span class=\"hljs-comment\">// Decompiler options: packimports(3)   </span><br><span class=\"hljs-comment\">// Source File Name:   Fruit.java  </span><br><span class=\"hljs-keyword\">package</span> test;  <br><span class=\"hljs-keyword\">import</span> java.io.PrintStream;  <br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Fruit</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">Enum</span> &#123;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">Fruit</span><span class=\"hljs-params\">(String s, <span class=\"hljs-type\">int</span> i)</span> &#123;  <br>        <span class=\"hljs-built_in\">super</span>(s, i);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;I am a fruit.&quot;</span>);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Fruit[] values() &#123;  <br>        Fruit afruit[];  <br>        <span class=\"hljs-type\">int</span> i;  <br>        Fruit afruit1[];  <br>        System.arraycopy(afruit = ENUM$VALUES, <span class=\"hljs-number\">0</span>, afruit1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>[i = afruit.length], <span class=\"hljs-number\">0</span>, i);  <br>        <span class=\"hljs-keyword\">return</span> afruit1;  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Fruit <span class=\"hljs-title function_\">valueOf</span><span class=\"hljs-params\">(String s)</span> &#123;  <br>        <span class=\"hljs-keyword\">return</span> (Fruit)Enum.valueOf(test/Fruit, s);  <br>    &#125;  <br>    Fruit(String s, <span class=\"hljs-type\">int</span> i, Fruit fruit) &#123;  <br>        <span class=\"hljs-built_in\">this</span>(s, i);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit APPLE;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEAR;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit PEACH;  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit ORANGE;  <br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">final</span> Fruit ENUM$VALUES[];  <br><br>    <span class=\"hljs-keyword\">static</span> &#123;  <br>        APPLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;APPLE&quot;</span>, <span class=\"hljs-number\">0</span>) &#123;  <br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am an apple.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEAR&quot;</span>, <span class=\"hljs-number\">1</span>) &#123;  <br><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am a pear.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEACH = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEACH&quot;</span>, <span class=\"hljs-number\">2</span>) &#123;  <br><br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am a peach.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        ORANGE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;ORANGE&quot;</span>, <span class=\"hljs-number\">3</span>);  <br>        ENUM$VALUES = (<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>[] &#123;  <br>            APPLE, PEAR, PEACH, ORANGE  <br>        &#125;);  <br>    &#125;  <br>&#125;  <br></code></pre></td></tr></table></figure>\n\n<p>注意这段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">static</span>   <br>    &#123;  <br>        APPLE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;APPLE&quot;</span>, <span class=\"hljs-number\">0</span>) &#123;  <br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am an apple.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEAR = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEAR&quot;</span>, <span class=\"hljs-number\">1</span>) &#123;  <br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am a pear.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        PEACH = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;PEACH&quot;</span>, <span class=\"hljs-number\">2</span>) &#123;  <br>            <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test</span><span class=\"hljs-params\">()</span>  <br>            &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;I am a peach.&quot;</span>);  <br>            &#125;  <br>        &#125;;  <br>        ORANGE = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fruit</span>(<span class=\"hljs-string\">&quot;ORANGE&quot;</span>, <span class=\"hljs-number\">3</span>);  <br></code></pre></td></tr></table></figure>\n\n<p>　这个时候的APPLE，PEAR，PEACH已经以匿名内部类的方式对Fruit进行了Overide，自然体现出了多态，多出的那三个疑似内部类的class文件也就是它们！而ORANGE，没有重写test方法，仍然以一个Fruit实例的形式出现。</p>\n<h1 id=\"6-反思-Enum多态体现的好处\"><a href=\"#6-反思-Enum多态体现的好处\" class=\"headerlink\" title=\"6.反思-Enum多态体现的好处\"></a>6.反思-Enum多态体现的好处</h1><p>其实通过上面我们可以通过Enum(枚举类)实现单例工厂模式,这样就能省去多余的判断步骤和不必要的父类和其他的相关类,大大提高我们的代码效率.</p>\n<h2 id=\"lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt\"><a href=\"#lt-font-color-x3D-quot-red-quot-gt-​练习小Demo​-lt-x2F-font-gt\" class=\"headerlink\" title=\"&lt;font color&#x3D;&quot;red&quot;&gt;​练习小Demo​**&lt;&#x2F;font&gt;**\"></a><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>练习小Demo</strong>​**&lt;&#x2F;font&gt;**</h2><p><strong>1.创建Dog和Persion类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com._521it.Enum.Model;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Auther</span>: yangxiangnan</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/7/17 14:47</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span> &#123;<br><br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String age;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;狗狗的无参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Dog</span><span class=\"hljs-params\">(String name, String age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        System.out.println(<span class=\"hljs-string\">&quot;狗狗的有参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">bark</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;汪汪&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(String age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com._521it.Enum.Model;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Auther</span>: yangxiangnan</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/7/17 14:51</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Persion</span> &#123;<br>    <span class=\"hljs-keyword\">private</span> String name;<br>    <span class=\"hljs-keyword\">private</span> String age;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Persion</span><span class=\"hljs-params\">()</span> &#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;人的无参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">Persion</span><span class=\"hljs-params\">(String name, String age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>        System.out.println(<span class=\"hljs-string\">&quot;人的有参数构造器&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">speak</span><span class=\"hljs-params\">()</span>&#123;<br>        System.out.println(<span class=\"hljs-string\">&quot;说话&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getName</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setName</span><span class=\"hljs-params\">(String name)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.name = name;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> String <span class=\"hljs-title function_\">getAge</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> age;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">setAge</span><span class=\"hljs-params\">(String age)</span> &#123;<br>        <span class=\"hljs-built_in\">this</span>.age = age;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>2.创建单例工厂类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com._521it.Enum.Singletion;<br><br><span class=\"hljs-keyword\">import</span> com._521it.Enum.Model.Dog;<br><span class=\"hljs-keyword\">import</span> com._521it.Enum.Model.Persion;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Auther</span>: yangxiangnan</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/7/17 14:52</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">enum</span> <span class=\"hljs-title class_\">SingletonInstanceFactory</span> &#123;<br><br>    INSTANCE_FACTORY;<br><br>    <span class=\"hljs-keyword\">private</span> Persion persion;<br>    <span class=\"hljs-keyword\">private</span> Dog dog;<br><br>    <span class=\"hljs-keyword\">private</span> <span class=\"hljs-title function_\">SingletonInstanceFactory</span><span class=\"hljs-params\">()</span>&#123;<br>        persion = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Persion</span>();<br>        dog = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dog</span>();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Persion <span class=\"hljs-title function_\">getPersion</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> persion;<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> Dog <span class=\"hljs-title function_\">getDog</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-keyword\">return</span> dog;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>3.进行测试</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com._521it.Enum;<br><br><span class=\"hljs-keyword\">import</span> com._521it.Enum.Model.Dog;<br><span class=\"hljs-keyword\">import</span> com._521it.Enum.Model.Persion;<br><span class=\"hljs-keyword\">import</span> com._521it.Enum.Singletion.SingletonInstanceFactory;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Auther</span>: yangxiangnan</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/7/17 17:18</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Demo</span> &#123;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test01</span><span class=\"hljs-params\">()</span>&#123;<br>        <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">dog1</span> <span class=\"hljs-operator\">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getDog();<br>        <span class=\"hljs-type\">Dog</span> <span class=\"hljs-variable\">dog2</span> <span class=\"hljs-operator\">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getDog();<br>        System.out.println(<span class=\"hljs-string\">&quot;dog1 = &quot;</span> + dog1);<br>        System.out.println(<span class=\"hljs-string\">&quot;dog2 = &quot;</span> + dog2);<br>        dog1.bark();<br>        dog2.bark();<br>        System.out.println(dog1 == dog2);<br><br>        <span class=\"hljs-type\">Persion</span> <span class=\"hljs-variable\">persion1</span> <span class=\"hljs-operator\">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();<br>        <span class=\"hljs-type\">Persion</span> <span class=\"hljs-variable\">persion2</span> <span class=\"hljs-operator\">=</span> SingletonInstanceFactory.INSTANCE_FACTORY.getPersion();<br>        System.out.println(<span class=\"hljs-string\">&quot;persion1 = &quot;</span> + persion1);<br>        System.out.println(<span class=\"hljs-string\">&quot;persion2 = &quot;</span> + persion2);<br>        persion1.speak();<br>        persion2.speak();<br>        System.out.println(persion1 == persion2);<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<p><strong>4.运行结果</strong></p>\n<p>结果如下:</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190717172845.png\"></p>\n",
            "tags": [
                "思考",
                "JAVA",
                "枚举"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-%E5%AD%97%E7%AC%A6%E4%B8%B2/",
            "title": "JAVA8-字符串",
            "date_published": "2024-01-03T13:13:21.641Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>Java 8 相对于之前的版本，添加了许多新的字符串相关特性，并对现有的 API 进行了优化。</p>\n<h1 id=\"StringJoiner\"><a href=\"#StringJoiner\" class=\"headerlink\" title=\"StringJoiner\"></a>StringJoiner</h1><h2 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>拼接字符串</p>\n<h2 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//不指定前缀和后缀</span><br><span class=\"hljs-type\">StringJoiner</span> <span class=\"hljs-variable\">stringJoiner</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StringJoiner</span>(<span class=\"hljs-string\">&quot;,&quot;</span>);<br><span class=\"hljs-comment\">//指定前缀和后缀</span><br><span class=\"hljs-comment\">//StringJoiner stringJoiner = new StringJoiner(&quot;,&quot;,&quot;&#123;&quot;,&quot;&#125;&quot;);</span><br>List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>);<br>list.forEach(str-&gt;stringJoiner.add(str));<br></code></pre></td></tr></table></figure>\n<h1 id=\"String-join\"><a href=\"#String-join\" class=\"headerlink\" title=\"String.join\"></a>String.join</h1><h2 id=\"详解-1\"><a href=\"#详解-1\" class=\"headerlink\" title=\"详解\"></a>详解</h2><p>拼接字符串，缺点是无法指定前缀和后缀</p>\n<h2 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;a&quot;</span>,<span class=\"hljs-string\">&quot;b&quot;</span>,<span class=\"hljs-string\">&quot;c&quot;</span>);<br>System.out.println(String.join(<span class=\"hljs-string\">&quot;,&quot;</span>, list));<br></code></pre></td></tr></table></figure>\n<h1 id=\"字符串实例方法\"><a href=\"#字符串实例方法\" class=\"headerlink\" title=\"字符串实例方法\"></a>字符串实例方法</h1><p>Java 8 向 <code>String</code> 类中添加了许多实例方法，包括：</p>\n<ul>\n<li><code>isEmpty()</code>：判断字符串是否为空。</li>\n<li><code>chars()</code>：返回一个 IntStream，其中包含此字符串中的字符。</li>\n<li><code>codePoints()</code>：返回一个 IntStream，其中包含此字符串中的 Unicode 代码点。</li>\n</ul>\n",
            "tags": [
                "思考",
                "JAVA"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-Date%20Time%20API/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8-Date%20Time%20API/",
            "title": "JAVA8-Date Time API",
            "date_published": "2024-01-03T13:13:21.641Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>该文章仅仅记录Java 8 新增日期相关的API文档。</p>\n</blockquote>\n<h1 id=\"时区概念\"><a href=\"#时区概念\" class=\"headerlink\" title=\"时区概念\"></a>时区概念</h1><p>Java8中日期和时间类的设计中,把相关API分成了两个包:</p>\n<ul>\n<li>java.time:该包中的日期和时间类是不具有时区的,比如LocalDate、LocalTime、LocalDateTime等。  </li>\n<li>java.time.zone:该包中的日期和时间类则是带时区的,比如ZonedDateTime、OffsetDateTime等。这样的设计有以下几个重要<br>原因:</li>\n</ul>\n<ol>\n<li>方便不同场景使用对于不需要时区信息的场景,使用java.time中的类足够,简单易用。<br> 对于需要时区功能的场景,使用java.time.zone中的类,可以很好地完成不同时区的转换和处理。</li>\n<li>避免在不需要时区信息的情况下携带时区,影响程序性能如果所有日期时间类都内置时区信息,则在不需要时区的场景下,多余的时区数据也会被加载和携带,浪费资源。</li>\n<li>实现互操作java.time中的无时区类可以很容易地和java.time.zone中的有时区类互操作,相互转换。  这样可以在两种场景间灵活切换。</li>\n<li>实现隔离并减少依赖通过包的划分,java.time和java.time.zone具有了一定的隔离度,互不依赖。  如果没有这个划分,那么利用不到时区信息的类也不得不依赖所有的时区数据库数据,会增加Java SE的大小。</li>\n<li>方便未来拓展如果未来需要扩展新的日期时间相关功能,也可以通过包的划分加以区隔,同时又能够与现有类方便地互操作。 这种设计更具有可扩展性。<br>所以,总体来说,Java 8之所以采用有时区和无时区两套 API 的设计,主要还是基于性能、 interchangeability、可扩展性等方面的考量。<br>这种设计解耦了不同的需求场景,使得日期时间类组更为灵活和高效。<br>同时,两套 API 又可以很好地协作,这为我们在不同的场景下选择恰当的工具提供了可能。<br>OK，接下来记录一下Java8中常用的几个日期类。</li>\n</ol>\n<h2 id=\"Clock\"><a href=\"#Clock\" class=\"headerlink\" title=\"Clock\"></a>Clock</h2><h3 id=\"详解\"><a href=\"#详解\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>可以取代<code>System.currentTimeMillis()</code>,时区敏感，带有时区信息。</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Clock</span> <span class=\"hljs-variable\">clock</span> <span class=\"hljs-operator\">=</span> Clock.systemDefaultZone();<br><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">millis</span> <span class=\"hljs-operator\">=</span> clock.millis();<br><br><span class=\"hljs-type\">Instant</span> <span class=\"hljs-variable\">instant</span> <span class=\"hljs-operator\">=</span> clock.instant();<br><span class=\"hljs-comment\">// 可用历史日期类进行解析，legacy java.util.Date</span><br><span class=\"hljs-type\">Date</span> <span class=\"hljs-variable\">legacyDate</span> <span class=\"hljs-operator\">=</span> Date.from(instant);<br></code></pre></td></tr></table></figure>\n<h2 id=\"ZoneId\"><a href=\"#ZoneId\" class=\"headerlink\" title=\"ZoneId\"></a>ZoneId</h2><h3 id=\"详解-1\"><a href=\"#详解-1\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>新的时区类 <code>java.time.ZoneId</code> 是原有的 <code>java.util.TimeZone</code> 类的替代品。 ZoneId对象可以通过 <code>ZoneId.of()</code> 方法创建，也可以通过 <code>ZoneId.systemDefault()</code> 获取系统默认时区。</p>\n<h3 id=\"用法-1\"><a href=\"#用法-1\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 打印所有有效的时区标识 available timezone ids</span><br>System.out.println(ZoneId.getAvailableZoneIds());<br><span class=\"hljs-comment\">// 指定上海时区，ZoneRules[currentStandardOffset=+08:00]</span><br><span class=\"hljs-type\">ZoneId</span> <span class=\"hljs-variable\">shanghaiZoneId</span> <span class=\"hljs-operator\">=</span> ZoneId.of(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>);<br></code></pre></td></tr></table></figure>\n<p>有了 ZoneId，我们就可以将一个 LocalDate、LocalTime 或 LocalDateTime 对象转化为 ZonedDateTime 对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 当前时间</span><br><span class=\"hljs-type\">LocalDateTime</span> <span class=\"hljs-variable\">localDateTime</span> <span class=\"hljs-operator\">=</span> LocalDateTime.now();<br><span class=\"hljs-comment\">// 把不带有时区时间转变成带有时区的时间</span><br><span class=\"hljs-type\">ZonedDateTime</span> <span class=\"hljs-variable\">zonedDateTime</span> <span class=\"hljs-operator\">=</span> ZonedDateTime.of(localDateTime, shanghaiZoneId);<br></code></pre></td></tr></table></figure>\n<p>ZonedDateTime 对象由两部分构成：LocalDateTime 和 ZoneId，其中 2018-03-03T15:26:56.147 部分为 LocalDateTime，<code>+08:00[Asia/Shanghai]</code> 部分为ZoneId。</p>\n<h2 id=\"LocalTime\"><a href=\"#LocalTime\" class=\"headerlink\" title=\"LocalTime\"></a>LocalTime</h2><h3 id=\"详解-2\"><a href=\"#详解-2\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>LocalTime类是Java 8中日期时间功能里表示一整天中某个时间点的类，它的时间是无时区属性的（早上10点等等）</p>\n<h3 id=\"用法-2\"><a href=\"#用法-2\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 定义两个时区,东八区、东七区，东八区比东七区早(快)一个点  </span><br><span class=\"hljs-type\">ZoneId</span> <span class=\"hljs-variable\">systemDefault</span> <span class=\"hljs-operator\">=</span> ZoneId.of(<span class=\"hljs-string\">&quot;Asia/Shanghai&quot;</span>);  <br><span class=\"hljs-type\">ZoneId</span> <span class=\"hljs-variable\">laosZone</span> <span class=\"hljs-operator\">=</span> ZoneId.of(<span class=\"hljs-string\">&quot;Asia/Vientiane&quot;</span>);  <br>  <br><span class=\"hljs-type\">LocalTime</span> <span class=\"hljs-variable\">systemLdt</span> <span class=\"hljs-operator\">=</span> LocalTime.now(systemDefault);  <br><span class=\"hljs-type\">LocalTime</span> <span class=\"hljs-variable\">laosLdt</span> <span class=\"hljs-operator\">=</span> LocalTime.now(laosZone);  <br>  <br>System.out.println(<span class=\"hljs-string\">&quot;systemLdt = &quot;</span> + systemLdt);  <br>System.out.println(<span class=\"hljs-string\">&quot;laosLdt = &quot;</span> + laosLdt);  <br>  <br><span class=\"hljs-comment\">// true  </span><br>System.out.println(<span class=\"hljs-string\">&quot;laosLdt.isBefore(systemLdt) = &quot;</span> + laosLdt.isBefore(systemLdt));  <br><span class=\"hljs-type\">Duration</span> <span class=\"hljs-variable\">duration</span> <span class=\"hljs-operator\">=</span> Duration.between(laosLdt, systemLdt);  <br><span class=\"hljs-comment\">// 1  </span><br>System.out.println(<span class=\"hljs-string\">&quot;duration.toHours() = &quot;</span> + duration.toHours());  <br><span class=\"hljs-comment\">// 60  </span><br>System.out.println(<span class=\"hljs-string\">&quot;duration.toMinutes() = &quot;</span> + duration.toMinutes());<br></code></pre></td></tr></table></figure>\n<h2 id=\"LocalDate\"><a href=\"#LocalDate\" class=\"headerlink\" title=\"LocalDate\"></a>LocalDate</h2><h3 id=\"详解-3\"><a href=\"#详解-3\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>LocalDate类是Java 8中日期时间功能里表示一个本地日期的类，它的日期是无时区属性的。 可以用来表示生日、节假日期等等。这个类用于表示一个确切的日期，而不是这个日期所在的时间</p>\n<h3 id=\"用法-3\"><a href=\"#用法-3\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">localDate</span> <span class=\"hljs-operator\">=</span> LocalDate.now();  <br><span class=\"hljs-comment\">// localDate = 2023-05-29  </span><br>System.out.println(<span class=\"hljs-string\">&quot;localDate = &quot;</span> + localDate);  <br><span class=\"hljs-comment\">// tomorrow = 2023-05-30  </span><br><span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">tomorrow</span> <span class=\"hljs-operator\">=</span> localDate.plusDays(<span class=\"hljs-number\">1</span>);  <br>System.out.println(<span class=\"hljs-string\">&quot;tomorrow = &quot;</span> + tomorrow);  <br><span class=\"hljs-comment\">// yesterday = 2023-05-28  </span><br><span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">yesterday</span> <span class=\"hljs-operator\">=</span> tomorrow.minus(<span class=\"hljs-number\">2</span>, ChronoUnit.DAYS);  <br>System.out.println(<span class=\"hljs-string\">&quot;yesterday = &quot;</span> + yesterday);  <br>  <br><span class=\"hljs-comment\">// birthDay = 2023-08-26,星期6  </span><br><span class=\"hljs-type\">LocalDate</span> <span class=\"hljs-variable\">birthDay</span> <span class=\"hljs-operator\">=</span> LocalDate.of(<span class=\"hljs-number\">2023</span>, Month.AUGUST, <span class=\"hljs-number\">26</span>);  <br>System.out.println(<span class=\"hljs-string\">&quot;birthDay = &quot;</span> + birthDay);  <br><span class=\"hljs-type\">DayOfWeek</span> <span class=\"hljs-variable\">dayOfWeek</span> <span class=\"hljs-operator\">=</span> birthDay.getDayOfWeek();  <br>System.out.println(<span class=\"hljs-string\">&quot;dayOfWeek = &quot;</span> + dayOfWeek.getValue());<br></code></pre></td></tr></table></figure>\n<h2 id=\"LocalDateTime\"><a href=\"#LocalDateTime\" class=\"headerlink\" title=\"LocalDateTime\"></a>LocalDateTime</h2><h3 id=\"详解-4\"><a href=\"#详解-4\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>LocalDateTime类是Java 8中日期时间功能里，用于表示当地的日期与时间的类，它的值是无时区属性的。你可以将其视为Java 8中LocalDate与LocalTime两个类的结合。</p>\n<h3 id=\"用法-4\"><a href=\"#用法-4\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">LocalDateTime</span> <span class=\"hljs-variable\">ldt</span> <span class=\"hljs-operator\">=</span> LocalDateTime.of(LocalDate.now(), LocalTime.now());  <br><span class=\"hljs-comment\">// 1  </span><br>System.out.println(<span class=\"hljs-string\">&quot;ldt.getDayOfWeek().getValue() = &quot;</span> + ldt.getDayOfWeek().getValue());  <br><span class=\"hljs-comment\">// 29  </span><br>System.out.println(<span class=\"hljs-string\">&quot;ldt.getDayOfMonth() = &quot;</span> + ldt.getDayOfMonth());  <br><span class=\"hljs-comment\">// 1  </span><br>System.out.println(<span class=\"hljs-string\">&quot;ldt.getLong(ChronoField.DAY_OF_WEEK) = &quot;</span> + ldt.getLong(ChronoField.DAY_OF_WEEK));<br></code></pre></td></tr></table></figure>\n<h2 id=\"ZonedDateTime\"><a href=\"#ZonedDateTime\" class=\"headerlink\" title=\"ZonedDateTime\"></a>ZonedDateTime</h2><h3 id=\"详解-5\"><a href=\"#详解-5\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>ZonedDateTime类是Java 8中日期时间功能里，<code>用于表示带时区的日期与时间信息的类</code>。可以用于表示一个真实事件的开始时间，如某火箭升空时间等等。</p>\n<h3 id=\"用法-5\"><a href=\"#用法-5\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// ZonedDateTime.now() = 2023-05-29T14:38:14.527+08:00[Asia/Shanghai]  </span><br>System.out.println(<span class=\"hljs-string\">&quot;ZonedDateTime.now() = &quot;</span> + ZonedDateTime.now());  <br><span class=\"hljs-type\">ZoneId</span> <span class=\"hljs-variable\">laosZone</span> <span class=\"hljs-operator\">=</span> ZoneId.of(<span class=\"hljs-string\">&quot;Asia/Vientiane&quot;</span>);  <br><span class=\"hljs-comment\">// ZonedDateTime.of(LocalDateTime.now(), laosZone) = 2023-05-29T14:38:14.528+07:00[Asia/Vientiane]  </span><br>System.out.println(<span class=\"hljs-string\">&quot;ZonedDateTime.of(LocalDateTime.now(), laosZone) = &quot;</span> + ZonedDateTime.of(LocalDateTime.now(), laosZone));<br></code></pre></td></tr></table></figure>\n<h2 id=\"Duration\"><a href=\"#Duration\" class=\"headerlink\" title=\"Duration\"></a>Duration</h2><h3 id=\"详解-6\"><a href=\"#详解-6\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>一个Duration对象表示两个Instant间的一段时间</p>\n<h3 id=\"用法-6\"><a href=\"#用法-6\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Instant</span> <span class=\"hljs-variable\">first</span> <span class=\"hljs-operator\">=</span> Instant.now();<br><span class=\"hljs-comment\">// wait some time while something happens</span><br><span class=\"hljs-type\">Instant</span> <span class=\"hljs-variable\">second</span> <span class=\"hljs-operator\">=</span> Instant.now();<br><span class=\"hljs-type\">Duration</span> <span class=\"hljs-variable\">duration</span> <span class=\"hljs-operator\">=</span> Duration.between(first, second);<br></code></pre></td></tr></table></figure>\n<h2 id=\"DateTimeFormatter\"><a href=\"#DateTimeFormatter\" class=\"headerlink\" title=\"DateTimeFormatter\"></a>DateTimeFormatter</h2><h3 id=\"详解-7\"><a href=\"#详解-7\" class=\"headerlink\" title=\"详解\"></a>详解</h3><p>DateTimeFormatter类是Java 8中日期时间功能里，线程安全。用于解析和格式化日期时间的类。</p>\n<h3 id=\"用法-7\"><a href=\"#用法-7\" class=\"headerlink\" title=\"用法\"></a>用法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//pattern.format(LocalDateTime.now()) = 2023/05/29 14:46:25  </span><br><span class=\"hljs-type\">DateTimeFormatter</span> <span class=\"hljs-variable\">pattern</span> <span class=\"hljs-operator\">=</span> DateTimeFormatter.ofPattern(<span class=\"hljs-string\">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);  <br>System.out.println(<span class=\"hljs-string\">&quot;pattern.format(LocalDateTime.now()) = &quot;</span> + pattern.format(LocalDateTime.now()));<br></code></pre></td></tr></table></figure>",
            "tags": [
                "思考",
                "JAVA"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/",
            "title": "JAVA8特性整理",
            "date_published": "2024-01-03T13:13:21.641Z",
            "content_html": "<h1 id=\"新特性简介\"><a href=\"#新特性简介\" class=\"headerlink\" title=\"新特性简介\"></a>新特性简介</h1><p><strong>速度更快</strong></p>\n<p><strong>代码更少,更简洁(增加了新的语法支持:lambda表达式)</strong></p>\n<p><strong>强大的Stream API</strong></p>\n<p><strong>便于并行</strong></p>\n<p><strong>最大化减少空指针异常(增加Optional类)</strong></p>\n<p>&#x3D;&#x3D;其中最为核心的为 Lambda 表达式与Stream API&#x3D;&#x3D;</p>\n<h1 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h1><h2 id=\"为啥使用lambda表达式\"><a href=\"#为啥使用lambda表达式\" class=\"headerlink\" title=\"为啥使用lambda表达式?\"></a>为啥使用lambda表达式?</h2><p>Lambda 是一个 匿名函数，我们可以把 Lambda表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。</p>\n<h2 id=\"重要体现——匿名内部类\"><a href=\"#重要体现——匿名内部类\" class=\"headerlink\" title=\"重要体现——匿名内部类\"></a>重要体现——匿名内部类</h2><h3 id=\"从匿名内部类到lambda的转换\"><a href=\"#从匿名内部类到lambda的转换\" class=\"headerlink\" title=\"从匿名内部类到lambda的转换\"></a>从匿名内部类到lambda的转换</h3><p><strong>匿名内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">runnable</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Runnable</span>() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">run</span><span class=\"hljs-params\">()</span> &#123;<br>       System.out.println(<span class=\"hljs-string\">&quot;haha&quot;</span>);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>用lambda表达式表示匿名内部类</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">Runnable</span> <span class=\"hljs-variable\">runnable1</span> <span class=\"hljs-operator\">=</span> ()-&gt;&#123;<br>    System.out.println(<span class=\"hljs-string\">&quot;hello&quot;</span>);<br>&#125;;<br></code></pre></td></tr></table></figure>\n\n<p><strong>匿名内部类参数传递</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">TreeSet&lt;String&gt; treeSet = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Comparator</span>&lt;String&gt;() &#123;<br>    <span class=\"hljs-meta\">@Override</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-type\">int</span> <span class=\"hljs-title function_\">compare</span><span class=\"hljs-params\">(String o1, String o2)</span> &#123;<br>        <span class=\"hljs-keyword\">return</span> Integer.compare(o1.length(),o2.length());<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><strong>lambda表达式表示匿名内部类参数传递</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">TreeSet&lt;String&gt; treeSet1 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeSet</span>&lt;&gt;(<br>        (o1,o2)-&gt;&#123;<br>            <span class=\"hljs-keyword\">return</span>  Integer.compare(o1.length(), o2.length());<br>        &#125;<br>);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"lambda表达式语法\"><a href=\"#lambda表达式语法\" class=\"headerlink\" title=\"lambda表达式语法\"></a>lambda表达式语法</h2><p>Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 “- -&gt; &gt;” ， 该操作符被称为Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：</p>\n<p>​\t\t<strong>左侧</strong>：指定了 Lambda 表达式需要的所有参数</p>\n<p>​\t\t<strong>右侧</strong>：指定了 Lambda 体，即 Lambda 表达式要执行的功能。</p>\n<p>&#x3D;&#x3D;<strong>语法格式:</strong>&#x3D;&#x3D;</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709144314.png\"></p>\n<h2 id=\"类型推断\"><a href=\"#类型推断\" class=\"headerlink\" title=\"类型推断\"></a>类型推断</h2><p>上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”.</p>\n<h1 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h1><h2 id=\"啥是函数式接口\"><a href=\"#啥是函数式接口\" class=\"headerlink\" title=\"啥是函数式接口\"></a>啥是函数式接口</h2><ul>\n<li>只包含一个抽象方法的接口，称为 函数式接口。</li>\n<li>你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。</li>\n<li>我们可以在任意函数式接口上使用 &#x3D;&#x3D;@FunctionalInterface 注解&#x3D;&#x3D;，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。</li>\n</ul>\n<h2 id=\"自定义函数式接口\"><a href=\"#自定义函数式接口\" class=\"headerlink\" title=\"自定义函数式接口\"></a>自定义函数式接口</h2><p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png\"></p>\n<h2 id=\"作为参数传递lambda表达式\"><a href=\"#作为参数传递lambda表达式\" class=\"headerlink\" title=\"作为参数传递lambda表达式\"></a>作为参数传递lambda表达式</h2><p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709145553.png\"></p>\n<h2 id=\"Java-内置四大核心函数式接口\"><a href=\"#Java-内置四大核心函数式接口\" class=\"headerlink\" title=\"Java  内置四大核心函数式接口\"></a>Java  内置四大核心函数式接口</h2><table>\n<thead>\n<tr>\n<th align=\"center\">函数式接口</th>\n<th>参数类型</th>\n<th>返回类型</th>\n<th>用途</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Consumer<T><br/>消费型接口</td>\n<td>T</td>\n<td>void</td>\n<td>对类型为T的对象应用操作，包含方法：void accept(T t)</td>\n</tr>\n<tr>\n<td align=\"center\">Supplier<T><br/>供给型接口</td>\n<td>无</td>\n<td>T</td>\n<td>返回类型为T的对象，包含方法：T get();</td>\n</tr>\n<tr>\n<td align=\"center\">Function&lt;T, R&gt;<br/>函数型接口</td>\n<td>T</td>\n<td>R</td>\n<td>对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t);</td>\n</tr>\n<tr>\n<td align=\"center\">Predicate<T><br/>断定型接口</td>\n<td>T</td>\n<td>boolean</td>\n<td>确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法boolean test(T t);</td>\n</tr>\n</tbody></table>\n<h1 id=\"3方法引用与构造器引用\"><a href=\"#3方法引用与构造器引用\" class=\"headerlink\" title=\"3方法引用与构造器引用\"></a>3方法引用与构造器引用</h1><h2 id=\"方法引用\"><a href=\"#方法引用\" class=\"headerlink\" title=\"方法引用\"></a>方法引用</h2><p>当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！）方法引用：使用操作符 “ ::” 将方法名和对象或类的名字分隔开来。<br>如下三种主要使用情况 ：</p>\n<ul>\n<li>&#x3D;&#x3D;对象 :: 实例方法&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;类 :: 静态方法&#x3D;&#x3D;</li>\n<li>&#x3D;&#x3D;类 ::&#x3D;&#x3D;</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150818.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150911.png\"></p>\n<h2 id=\"构造器引用\"><a href=\"#构造器引用\" class=\"headerlink\" title=\"构造器引用\"></a>构造器引用</h2><p><strong>格式：</strong> <font color=\"red\"><strong>ClassName :: new</strong></font><br>与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数<br>列表要与接口中抽象方法的参数列表一致！</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151215.png\"></p>\n<h2 id=\"数组引用\"><a href=\"#数组引用\" class=\"headerlink\" title=\"数组引用\"></a>数组引用</h2><p><strong>格式：</strong> <font color=\"red\"><strong>type[] :: new</strong></font></p>\n<h1 id=\"强大的-Stream-API\"><a href=\"#强大的-Stream-API\" class=\"headerlink\" title=\"强大的 Stream API\"></a>强大的 Stream API</h1><h2 id=\"了解-Stream\"><a href=\"#了解-Stream\" class=\"headerlink\" title=\"了解 Stream\"></a>了解 Stream</h2><p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API( java.util.stream .*) 。<br>&#x3D;&#x3D;Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。&#x3D;&#x3D;</p>\n<h2 id=\"4-2什么是-Stream\"><a href=\"#4-2什么是-Stream\" class=\"headerlink\" title=\"4.2什么是 Stream\"></a>4.2什么是 Stream</h2><p><strong>流 (Stream)  到底是什么呢 ？</strong><br><strong>是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。</strong><br><font color=\"red\"><strong>“集合讲的是数据，流讲的是计算！ ”</strong></font><br>注意：<br>①Stream 自己不会存储元素。<br>②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。<br>③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151831.png\"></p>\n<h2 id=\"4-3创建Stream\"><a href=\"#4-3创建Stream\" class=\"headerlink\" title=\"4.3创建Stream\"></a>4.3创建Stream</h2><ul>\n<li>Java8 中的 Collection 接口被扩展，提供了两个获取流的方法 ：<ul>\n<li>default Stream<E> stream() : 返回一个顺序流</li>\n<li>default Stream<E> parallelStream() : 返回一个并行流</li>\n</ul>\n</li>\n</ul>\n<p>由数组创建流Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：<br> static <T> Stream<T> stream(T[] array): 返回一个流<br>重载形式，能够处理对应基本类型的数组：<br> public static IntStream stream(int[] array)<br> public static LongStream stream(long[] array)<br> public static DoubleStream stream(double[] array)</p>\n<h2 id=\"4-4由值创建流\"><a href=\"#4-4由值创建流\" class=\"headerlink\" title=\"4.4由值创建流\"></a>4.4由值创建流</h2><p>可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。<br> public static<T> Stream<T> of(T… values) : 返回一个流</p>\n<h2 id=\"4-5由函数创建流：创建无限流\"><a href=\"#4-5由函数创建流：创建无限流\" class=\"headerlink\" title=\"4.5由函数创建流：创建无限流\"></a>4.5由函数创建流：创建无限流</h2><p>可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流。<br> 迭代<br>public static<T> Stream<T> iterate(final T seed, finalUnaryOperator<T> f)<br> 生成<br>public static<T> Stream<T> generate(Supplier<T> s) ;</p>\n<h2 id=\"4-6Stream-的中间操作\"><a href=\"#4-6Stream-的中间操作\" class=\"headerlink\" title=\"4.6Stream  的中间操作\"></a>4.6Stream  的中间操作</h2><p>&#x3D;&#x3D;多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的 处理！而在 终止操作时一次性全部 处理，称为“惰性求值”。&#x3D;&#x3D;</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709174819.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/QQ%E6%88%AA%E5%9B%BE20190709175115.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175205.png\"></p>\n<h2 id=\"4-7Stream的终止操作\"><a href=\"#4-7Stream的终止操作\" class=\"headerlink\" title=\"4.7Stream的终止操作\"></a>4.7Stream的终止操作</h2><p>终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void.</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175351.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175450.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175603.png\"></p>\n<p>Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175747.png\"></p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175855.png\"></p>\n<h2 id=\"4-8并行-流与-串行-流\"><a href=\"#4-8并行-流与-串行-流\" class=\"headerlink\" title=\"4.8并行 流与 串行 流\"></a>4.8并行 流与 串行 流</h2><p>&#x3D;&#x3D;并行流 就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流&#x3D;&#x3D;。Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与sequential() 在并行流与顺序流之间进行切换。</p>\n<h2 id=\"4-9练习Demo\"><a href=\"#4-9练习Demo\" class=\"headerlink\" title=\"4.9练习Demo\"></a>4.9练习Demo</h2><p><strong>创建Stream 的四种方式</strong></p>\n<p>　　1）. 通过Collection得Stream（）方法（串行流）或者 parallelStream（）方法（并行流）创建Stream。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 1.通过Collection得Stream（）方法（串行流）</span><br><span class=\"hljs-comment\">            或者 parallelStream（）方法（并行流）创建Stream</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test1</span> <span class=\"hljs-params\">()</span> &#123;<br>        <br>        <span class=\"hljs-comment\">//1. 通过Collection得Stream（）方法（串行流）</span><br>        <span class=\"hljs-comment\">//或者 parallelStream（）方法（并行流）创建Stream</span><br>        List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>        Stream&lt;String&gt; stream1 = list.stream();<br>        <br>        Stream&lt;String&gt; stream2 = list.parallelStream();<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>2）.通过Arrays中得静态方法stream（）获取数组流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 2. 通过Arrays中得静态方法stream（）获取数组流</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test2</span> <span class=\"hljs-params\">()</span> &#123;<br>        <br>        <span class=\"hljs-comment\">//2. 通过Arrays中得静态方法stream（）获取数组流</span><br>        <span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">stream</span> <span class=\"hljs-operator\">=</span> Arrays.stream(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>&#125;);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>3). 通过Stream类中得 of（）静态方法获取流</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 3. 通过Stream类中得 of（）静态方法获取流</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test3</span> <span class=\"hljs-params\">()</span> &#123;<br>        <br>        <span class=\"hljs-comment\">//3. 通过Stream类中得 of（）静态方法获取流</span><br>        Stream&lt;String&gt; stream = Stream.of(<span class=\"hljs-string\">&quot;4645&quot;</span>, <span class=\"hljs-string\">&quot;huinnj&quot;</span>);<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p>4）. 创建无限流(迭代、生成)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 4. 创建无限流(迭代、生成)</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test4</span> <span class=\"hljs-params\">()</span> &#123;<br>        <br>        <span class=\"hljs-comment\">//4. 创建无限流</span><br>        <span class=\"hljs-comment\">//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）</span><br>        Stream&lt;Integer&gt; stream1 = Stream.iterate(<span class=\"hljs-number\">2</span>, (x) -&gt; x * <span class=\"hljs-number\">2</span>);<br>        <br>        <span class=\"hljs-comment\">//生成(无限产生对象)</span><br>        Stream&lt;Double&gt; stream2 = Stream.generate(() -&gt; Math.random());<br>        <br>    &#125;<br></code></pre></td></tr></table></figure>\n\n<p><strong>相关操作</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">package</span> com._521it.StreamAPI;<br><span class=\"hljs-keyword\">import</span> com._521it.StreamAPI.Person;<br><span class=\"hljs-keyword\">import</span> org.junit.Test;<br><br><span class=\"hljs-keyword\">import</span> java.util.*;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Collectors;<br><span class=\"hljs-keyword\">import</span> java.util.stream.IntStream;<br><span class=\"hljs-keyword\">import</span> java.util.stream.Stream;<br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Auther</span>: yangxiangnan</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Date</span>: 2019/7/2 17:47</span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@Description</span>:</span><br><span class=\"hljs-comment\"> */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">StreamAPIDemo</span> &#123;<br>    List&lt;Person&gt; list = Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>[]&#123;<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-number\">10</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-number\">20</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-number\">30</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-number\">30</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-number\">40</span>),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-number\">50</span>),<br>    &#125;);<br>    List&lt;Person&gt; persons = Arrays.asList(<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;张三&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">76</span>, Status.FREE),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;李四&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>, <span class=\"hljs-number\">12</span>, Status.BUSY),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">35</span>, Status.BUSY),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;赵六&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">3</span>, Status.FREE),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;钱七&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">56</span>, Status.BUSY),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;翠花&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>, <span class=\"hljs-number\">34</span>, Status.VOCATION),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;翠花&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>, <span class=\"hljs-number\">34</span>, Status.FREE),<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;翠花&quot;</span>, <span class=\"hljs-string\">&quot;女&quot;</span>, <span class=\"hljs-number\">34</span>, Status.VOCATION)<br>    );<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 1.通过Collection得Stream（）方法（串行流）</span><br><span class=\"hljs-comment\">     或者 parallelStream（）方法（并行流）创建Stream</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test1</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//1. 通过Collection得Stream（）方法（串行流）</span><br>        <span class=\"hljs-comment\">//或者 parallelStream（）方法（并行流）创建Stream</span><br>        List&lt;String&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>        Stream&lt;String&gt; stream1 = list.stream();<br>        Stream&lt;String&gt; stream2 = list.parallelStream();<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 2. 通过Arrays中得静态方法stream（）获取数组流</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test2</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//2. 通过Arrays中得静态方法stream（）获取数组流</span><br>        <span class=\"hljs-type\">IntStream</span> <span class=\"hljs-variable\">stream</span> <span class=\"hljs-operator\">=</span> Arrays.stream(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">int</span>[]&#123;<span class=\"hljs-number\">3</span>,<span class=\"hljs-number\">5</span>&#125;);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 3. 通过Stream类中得 of（）静态方法获取流</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test3</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//3. 通过Stream类中得 of（）静态方法获取流</span><br>        Stream&lt;String&gt; stream = Stream.of(<span class=\"hljs-string\">&quot;4645&quot;</span>, <span class=\"hljs-string\">&quot;huinnj&quot;</span>);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 创建 Stream的四种方式</span><br><span class=\"hljs-comment\">     * 4. 创建无限流(迭代、生成)</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test4</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//4. 创建无限流</span><br>        <span class=\"hljs-comment\">//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）</span><br>        Stream&lt;Integer&gt; stream1 = Stream.iterate(<span class=\"hljs-number\">2</span>, (x) -&gt; x * <span class=\"hljs-number\">2</span>);<br>        <span class=\"hljs-comment\">//生成(无限产生对象)</span><br>        Stream&lt;Double&gt; stream2 = Stream.generate(() -&gt; Math.random());<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 筛选与切片</span><br><span class=\"hljs-comment\">     *  filter —— 接收Lambda ，从流中排除某些元素。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test5</span> <span class=\"hljs-params\">()</span> &#123;<br>        List&lt;Person&gt; list = Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>[]&#123;<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-number\">10</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-number\">20</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-number\">30</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-number\">40</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-number\">50</span>),<br>        &#125;);<br>        <span class=\"hljs-comment\">//内部迭代：在此过程中没有进行过迭代，由Stream api进行迭代</span><br>        <span class=\"hljs-comment\">//中间操作：不会执行任何操作</span><br>        Stream&lt;Person&gt; stream = list.stream().filter((e) -&gt; &#123;<br>            System.out.println(<span class=\"hljs-string\">&quot;Stream API 中间操作&quot;</span>);<br>            <span class=\"hljs-keyword\">return</span> e.getAge() &gt; <span class=\"hljs-number\">20</span>;<br>        &#125;);<br>        <span class=\"hljs-comment\">//终止操作：只有执行终止操作才会执行全部。即：延迟加载</span><br>        stream.forEach(System.out :: println);<br><br>    &#125;<br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test6</span> <span class=\"hljs-params\">()</span> &#123;<br>        List&lt;Person&gt; list = Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>[]&#123;<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-number\">10</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-number\">20</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;3&quot;</span>, <span class=\"hljs-number\">30</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;4&quot;</span>, <span class=\"hljs-number\">40</span>),<br>                <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;5&quot;</span>, <span class=\"hljs-number\">50</span>),<br>        &#125;);<br>        <span class=\"hljs-comment\">//外部迭代</span><br>        Iterator&lt;Person&gt; it = list.iterator();<br>        <span class=\"hljs-keyword\">while</span> (it.hasNext()) &#123;<br>            <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">person</span> <span class=\"hljs-operator\">=</span> it.next();<br>           <span class=\"hljs-keyword\">if</span>(person.getAge()&gt;<span class=\"hljs-number\">20</span>)&#123;<br>               System.out.println(person);<br>           &#125;<br>        &#125;<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * limit —— 截断流，使其元素不超过给定数量。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test7</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//过滤之后取2个值</span><br>        list.stream()<br>                .filter((e)-&gt;e.getAge()&gt;<span class=\"hljs-number\">30</span>)<br>                .limit(<span class=\"hljs-number\">2</span>).forEach(System.out::println);<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * skip（n）—— 跳过元素，返回一个扔掉了前n个元素的流。</span><br><span class=\"hljs-comment\">     * 若流中元素不足n个，则返回一个空，与limit（n）互补。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test8</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//跳过前2个值</span><br>        list.stream().skip(<span class=\"hljs-number\">2</span>).forEach(System.out::println);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * distinct —— 筛选，通过流所生成元素的hashCode（）和equals（）去除重复元素</span><br><span class=\"hljs-comment\">     *注意：distinct 需要实体中重写hashCode（）和 equals（）方法才可以使用</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test9</span> <span class=\"hljs-params\">()</span> &#123;<br>        list.stream().distinct().forEach(System.out::println);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *\t. map ，将元素转换成其他形式或者提取信息。接收一个函数作为参数，该函数会被应用到每个元素\t\t *\t上，并将其映射成一个新的元素。</span><br><span class=\"hljs-comment\">     * map —— 映射 ，将元素转换成其他形式或者提取信息。</span><br><span class=\"hljs-comment\">     * 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test10</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">//将流中每一个元素都映射到map的函数中，每个元素执行这个函数，再返回</span><br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-string\">&quot;bbb&quot;</span>, <span class=\"hljs-string\">&quot;ccc&quot;</span>, <span class=\"hljs-string\">&quot;ddd&quot;</span>);<br>        list.stream().map((e)-&gt;e.toUpperCase()).forEach(System.out::println);<br><br>        <span class=\"hljs-comment\">//获取Person中的每一个人得名字name，再返回一个集合</span><br>        List&lt;String&gt; stringList = <span class=\"hljs-built_in\">this</span>.list.stream().map(Person::getName).collect(Collectors.toList());<br>        stringList.stream().forEach(System.out::println);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * flatMap —— 接收一个函数作为参数，将流中的每个值都换成一个流，然后把所有流连接成一个流</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test11</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">StreamAPIDemo</span> <span class=\"hljs-variable\">s</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">StreamAPIDemo</span>();<br>        List&lt;String&gt; list = Arrays.asList(<span class=\"hljs-string\">&quot;aaa&quot;</span>, <span class=\"hljs-string\">&quot;bbb&quot;</span>, <span class=\"hljs-string\">&quot;ccc&quot;</span>, <span class=\"hljs-string\">&quot;ddd&quot;</span>);<br>        list.stream().flatMap((e) -&gt; \t\t\t             s.filterCharacter(e)).forEach(System.out::println);<br><br>        <span class=\"hljs-comment\">//如果使用map则需要这样写</span><br>        list.stream().map((e) -&gt; s.filterCharacter(e)).forEach((e) -&gt; &#123;<br>            e.forEach(System.out::println);<br>        &#125;);<br>    &#125;<br>\t<span class=\"hljs-comment\">/*</span><br><span class=\"hljs-comment\">\t其实map方法就相当于Collaction的add方法，如果add的是个集合得话就会变成二维数组，而flatMap 的话就相当于Collaction的addAll方法，参数如果是集合得话，只是将2个集合合并，而不是变成二维数组。</span><br><span class=\"hljs-comment\">\t*/</span><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * sorted有两种方法，一种是不传任何参数，叫自然排序，还有一种需要传Comparator 接口参数，叫做定制排序。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test12</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-comment\">// 自然排序</span><br>        List&lt;Person&gt; persons1 = list.stream().sorted().collect(Collectors.toList());<br>        System.out.println(persons1);<br>        <span class=\"hljs-comment\">//定制排序</span><br>        List&lt;Person&gt; persons2 = list.stream().sorted((e1, e2) -&gt; &#123;<br>            <span class=\"hljs-keyword\">if</span> (e1.getAge() == e2.getAge()) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (e1.getAge() &gt; e2.getAge()) &#123;<br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-number\">1</span>;<br>            &#125;<br>        &#125;).collect(Collectors.toList());<br>        persons2.stream().forEach(System.out::println);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * allMatch —— 检查是否匹配所有元素。</span><br><span class=\"hljs-comment\">     * 判断所有状态是否都是FREE</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test13</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">isAllBusy</span> <span class=\"hljs-operator\">=</span> persons.stream().allMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(isAllBusy);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * anyMatch —— 检查是否至少匹配所有元素。</span><br><span class=\"hljs-comment\">     * 判断是否有一个是FREE</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test14</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> persons.stream().anyMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(b);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * noneMatch —— 检查是否没有匹配所有元素。</span><br><span class=\"hljs-comment\">     * 判断是否没有FREE</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test15</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">boolean</span> <span class=\"hljs-variable\">b</span> <span class=\"hljs-operator\">=</span> persons.stream().noneMatch((e) -&gt; Status.FREE.equals(e.getStatus()));<br>        System.out.println(b);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * findFirst —— 返回第一个元素。</span><br><span class=\"hljs-comment\">     *</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test16</span> <span class=\"hljs-params\">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().findFirst();<br>        person.orElse(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">35</span>, Status.BUSY));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * findAny —— 返回当前流中任意元素。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test17</span> <span class=\"hljs-params\">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().findAny();<br>        person.orElse(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>(<span class=\"hljs-string\">&quot;王五&quot;</span>, <span class=\"hljs-string\">&quot;男&quot;</span>, <span class=\"hljs-number\">35</span>, Status.BUSY));<br>        System.out.println(person);<br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * count —— 返回流中元素总个数。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test18</span> <span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">count</span> <span class=\"hljs-operator\">=</span> persons.stream().count();<br>        System.out.println(count);<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * max —— 返回流中最大值。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test19</span> <span class=\"hljs-params\">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().max((e1, e2) -&gt; Integer.compare(e1.getAge(), e2.getAge()));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * min —— 返回流中最小值。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test20</span> <span class=\"hljs-params\">()</span> &#123;<br>        Optional&lt;Person&gt; person = persons.stream().min((e1, e2) -&gt; Double.compare(e1.getAge(), e2.getAge()));<br>        System.out.println(person);<br><br>    &#125;<br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * reduce（T identitty，BinaryOperator）首先，需要传一个起始值，然后，传入的是一个二元运算。</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test21</span> <span class=\"hljs-params\">()</span> &#123;<br>        List&lt;Integer&gt; list = Arrays.asList(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>, <span class=\"hljs-number\">10</span>);<br>        <span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">sum</span> <span class=\"hljs-operator\">=</span> list.stream().reduce(<span class=\"hljs-number\">0</span>,Integer::sum);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     *  reduce（BinaryOperator）此方法相对于上面方法来说，没有起始值，则有可能结果为空，</span><br><span class=\"hljs-comment\">     *  所以返回的值会被封装到Optional中</span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-meta\">@Test</span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">test22</span> <span class=\"hljs-params\">()</span> &#123;<br>        List&lt;Integer&gt; list = Arrays.asList();<br>        Optional&lt;Integer&gt; sum = list.stream().reduce(Integer :: sum);<br>        sum.orElse(<span class=\"hljs-number\">0</span>);<br>        System.out.println(sum);<br>    &#125;<br><br>    <span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 将一个字符串转换为流</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> str</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span></span><br><span class=\"hljs-comment\">     */</span><br>    <span class=\"hljs-keyword\">public</span> Stream&lt;Character&gt; <span class=\"hljs-title function_\">filterCharacter</span><span class=\"hljs-params\">(String str)</span>&#123;<br>        List&lt;Character&gt; list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>        <span class=\"hljs-keyword\">for</span> (Character ch : str.toCharArray()) &#123;<br>            list.add(ch);<br>        &#125;<br>        <span class=\"hljs-keyword\">return</span> list.stream();<br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"5-接口中的默认方法与静态方法\"><a href=\"#5-接口中的默认方法与静态方法\" class=\"headerlink\" title=\"5.接口中的默认方法与静态方法\"></a>5.接口中的默认方法与静态方法</h1><h2 id=\"5-1接口中的默认方法\"><a href=\"#5-1接口中的默认方法\" class=\"headerlink\" title=\"5.1接口中的默认方法\"></a>5.1接口中的默认方法</h2><p>&#x3D;&#x3D;Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 <font color=\"red\">default</font> 关键字修饰。&#x3D;&#x3D;</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709180636.png\"></p>\n<p>&#x3D;&#x3D;接口默认方法的 ” 类优先 ” 原则&#x3D;&#x3D;<br>若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时<br> 选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。<br> 接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181013.png\"></p>\n<h2 id=\"5-2接口中的静态方法\"><a href=\"#5-2接口中的静态方法\" class=\"headerlink\" title=\"5.2接口中的静态方法\"></a>5.2接口中的静态方法</h2><p>Java8 中，接口中允许添加静态方法。</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181225.png\"></p>\n<h1 id=\"6-Optional-类\"><a href=\"#6-Optional-类\" class=\"headerlink\" title=\"6.Optional 类\"></a>6.Optional 类</h1><p>Optional<T> 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。<br>常用方法：<br>Optional.of(T t) : 创建一个 Optional 实例<br>Optional.empty() : 创建一个空的 Optional 实例<br>Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例<br>isPresent() : 判断是否包含值<br>orElse(T t) : 如果调用对象包含值，返回该值，否则返回t<br>orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值<br>map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()<br>flatMap(Function mapper):与 map 类似，要求返回值必须是Optional</p>\n<h2 id=\"一、Optional的构造方式：\"><a href=\"#一、Optional的构造方式：\" class=\"headerlink\" title=\"一、Optional的构造方式：\"></a>一、Optional的构造方式：</h2><p>1、Optional.of(T)</p>\n<p>该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。</p>\n<p>2、Optional.ofNullable(T)</p>\n<p>该方式的入参可以为null，当入参不确定为非null时使用。</p>\n<p>3、Optional.empty()</p>\n<p>这种方式是返回一个空Optional，等效Optional.ofNullable(null)</p>\n<h2 id=\"二、-如何正确使用Optional\"><a href=\"#二、-如何正确使用Optional\" class=\"headerlink\" title=\"二、 如何正确使用Optional\"></a>二、 如何正确使用Optional</h2><h3 id=\"尽量避免使用的地方：\"><a href=\"#尽量避免使用的地方：\" class=\"headerlink\" title=\"尽量避免使用的地方：\"></a>尽量避免使用的地方：</h3><p>1、避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null !&#x3D; obj没有区别，这样用就没什么意义了。</p>\n<p>2、避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。</p>\n<p>3、避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。</p>\n<p>4、避免使用Optional作为方法的参数，原因同3。</p>\n<h3 id=\"正确使用方式：\"><a href=\"#正确使用方式：\" class=\"headerlink\" title=\"正确使用方式：\"></a>正确使用方式：</h3><p>1、实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse&#x2F;orElseGet方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"> <span class=\"hljs-comment\">//存在则返回</span><br><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">king</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">User</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-string\">&quot;king&quot;</span>);<br>Optional&lt;User&gt; userOpt = Optional.of(king);<br><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user</span> <span class=\"hljs-operator\">=</span>  userOpt.orElse(<span class=\"hljs-literal\">null</span>);<br>System.out.println(user.getName());<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"> <span class=\"hljs-comment\">//不存在提供默认值</span><br><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>Optional&lt;User&gt; userOpt2 = Optional.ofNullable(user2);<br><span class=\"hljs-type\">User</span> <span class=\"hljs-variable\">user3</span> <span class=\"hljs-operator\">=</span> userOpt2.orElse(unknown);<br>System.out.println(user3.getName());<br></code></pre></td></tr></table></figure>\n\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\"> <span class=\"hljs-comment\">//通过方法提供值</span><br>User user4 = userOpt2.<span class=\"hljs-keyword\">or</span><span class=\"hljs-constructor\">ElseGet(()</span> -&gt; <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">User(0, <span class=\"hljs-string\">&quot;DEFAULT&quot;</span>)</span>); <br><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">System</span>.</span></span>out.println(user4.get<span class=\"hljs-constructor\">Name()</span>)<br></code></pre></td></tr></table></figure>\n\n<p>不建议这样使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">if</span>(userOpt.isPresent()) &#123;<br>    System.out.println(userOpt.get().getName());<br>&#125; <span class=\"hljs-keyword\">else</span> &#123;<br>    <span class=\"hljs-comment\">//。。。</span><br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>2、使用ifPresent()来进行对象操作，存在则操作，否则不操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//实例存在则操作，否则不操作</span><br>userOpt.ifPresent(u -&gt; System.out.println(u.getName()));<br>userOpt2.ifPresent(u -&gt; System.out.println(u.getName()));<br></code></pre></td></tr></table></figure>\n\n<p>3、使用map&#x2F;flatMap来获取关联数据</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//使用map方法获取关联数据</span><br>        System.out.println(userOpt.map(u -&gt; u.getName()).orElse(<span class=\"hljs-string\">&quot;Unknown&quot;</span>));<br>        System.out.println(userOpt2.map(u -&gt; u.getName()).orElse(<span class=\"hljs-string\">&quot;Default&quot;</span>));<br>        <span class=\"hljs-comment\">//使用flatMap方法获取关联数据</span><br>        List&lt;String&gt; interests = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;String&gt;();<br>        interests.add(<span class=\"hljs-string\">&quot;a&quot;</span>);interests.add(<span class=\"hljs-string\">&quot;b&quot;</span>);interests.add(<span class=\"hljs-string\">&quot;c&quot;</span>);<br>        user.setInterests(interests);<br>        List&lt;String&gt; interests2 = Optional.of(user)<br>                .flatMap(u -&gt; Optional.ofNullable(u.getInterests()))<br>                .orElse(Collections.emptyList());<br>        System.out.println(interests2.isEmpty());<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"7-重复注解与类型注解\"><a href=\"#7-重复注解与类型注解\" class=\"headerlink\" title=\"7.重复注解与类型注解\"></a>7.重复注解与类型注解</h1><p>Java 8对注解处理提供了两点改进：&#x3D;&#x3D;可重复的注解及可用于类型的注解。&#x3D;&#x3D;</p>\n<p><img src=\"https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181750.png\"></p>\n",
            "tags": [
                "思考",
                "JAVA",
                "Java8",
                "特性"
            ]
        }
    ]
}