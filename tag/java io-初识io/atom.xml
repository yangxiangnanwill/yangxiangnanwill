<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</id>
    <title>Will • Posts by &#34;java io-初识io&#34; tag</title>
    <link href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io" />
    <updated>2024-01-03T13:13:21.640Z</updated>
    <category term="开发习惯" />
    <category term="思考" />
    <category term="思维习惯" />
    <category term="感言" />
    <category term="Docker" />
    <category term="LINUX" />
    <category term="Node" />
    <category term="前端" />
    <category term="Nvm" />
    <category term="CentOS" />
    <category term="Linux" />
    <category term="Crontab" />
    <category term="Jenkins" />
    <category term="IDEA" />
    <category term="Alibaba Cloud Toolkit" />
    <category term="Archery" />
    <category term="MySql" />
    <category term="工具" />
    <category term="Maven" />
    <category term="Git" />
    <category term="JAVA" />
    <category term="shell" />
    <category term="信息安全等级保护认证" />
    <category term="系统认证" />
    <category term="读书笔记" />
    <category term="BeetlSql" />
    <category term="Beetl" />
    <category term="异常" />
    <category term="Java IO-初识IO" />
    <category term="Spring" />
    <category term="SpringCloud" />
    <category term="SpringCloud Alibaba" />
    <category term="枚举" />
    <category term="POI" />
    <category term="Spring Boot" />
    <category term="VinUtil" />
    <category term="VerificationCode" />
    <category term="SOAR" />
    <category term="其他" />
    <category term="ProtoBuffer" />
    <category term="博客园" />
    <category term="博客" />
    <category term="MongoDb" />
    <category term="Lombok工具库详解" />
    <category term="常用开发库" />
    <category term="JSON类库详解" />
    <category term="Hutool" />
    <category term="工具类" />
    <category term="Spring常用工具类" />
    <category term="异步编程" />
    <category term="线程" />
    <category term="方法论" />
    <category term="开源协议" />
    <category term="CentOS7" />
    <category term="MongoDB" />
    <category term="Redis" />
    <category term="VMware" />
    <category term="Typora" />
    <category term="PostMan" />
    <category term="Java8" />
    <category term="特性" />
    <category term="JDBC" />
    <category term="Mysql" />
    <category term="EasyExcel" />
    <category term="日志类库详解" />
    <category term="Script" />
    <category term="设计模式" />
    <category term="MyBatis" />
    <category term="Apache Common" />
    <category term="Google Guava" />
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/IO&amp;NIO&amp;AIO/Java%20IO-%E5%88%9D%E8%AF%86IO/</id>
        <title>Java IO-初识IO</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/IO&amp;NIO&amp;AIO/Java%20IO-%E5%88%9D%E8%AF%86IO/"/>
        <content type="html">&lt;h1 id=&#34;知识体系&#34;&gt;&lt;a href=&#34;#知识体系&#34; class=&#34;headerlink&#34; title=&#34;知识体系&#34;&gt;&lt;/a&gt;知识体系&lt;/h1&gt;&lt;p&gt;&lt;img src=&#34;https://s3.bmp.ovh/imgs/2023/06/23/f10285a1ab40fb85.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;IO理解分类-从传输方式上&#34;&gt;&lt;a href=&#34;#IO理解分类-从传输方式上&#34; class=&#34;headerlink&#34; title=&#34;IO理解分类 - 从传输方式上&#34;&gt;&lt;/a&gt;IO理解分类 - 从传输方式上&lt;/h1&gt;&lt;p&gt;从数据传输方式或者说是运输方式角度看，可以将 IO 类分为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字节流&lt;/li&gt;
&lt;li&gt;字符流&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;字节&lt;/code&gt;是个计算机看的，&lt;code&gt;字符&lt;/code&gt;才是给人看的&lt;/p&gt;
&lt;h1 id=&#34;字节流和字符流的区别&#34;&gt;&lt;a href=&#34;#字节流和字符流的区别&#34; class=&#34;headerlink&#34; title=&#34;字节流和字符流的区别&#34;&gt;&lt;/a&gt;字节流和字符流的区别&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;字节流读取单个字节，字符流读取单个字符(一个字符根据编码的不同，对应的字节也不同，如 UTF-8 编码中文汉字是 3 个字节，GBK编码中文汉字是 2 个字节。)&lt;/li&gt;
&lt;li&gt;字节流用来处理二进制文件(图片、MP3、视频文件)，字符流用来处理文本文件(可以看做是特殊的二进制文件，使用了某种编码，人可以阅读)。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;简而言之，字节是给计算机看的，字符才是给人看的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;字节转字符Input-x2F-OutputStreamReader-x2F-Writer&#34;&gt;&lt;a href=&#34;#字节转字符Input-x2F-OutputStreamReader-x2F-Writer&#34; class=&#34;headerlink&#34; title=&#34;字节转字符Input&amp;#x2F;OutputStreamReader&amp;#x2F;Writer&#34;&gt;&lt;/a&gt;字节转字符Input&amp;#x2F;OutputStreamReader&amp;#x2F;Writer&lt;/h3&gt;&lt;p&gt;编码就是把字符转换为字节，而解码是把字节重新组合成字符。&lt;/p&gt;
&lt;p&gt;如果编码和解码过程使用不同的编码方式那么就出现了乱码。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GBK 编码中，中文字符占 2 个字节，英文字符占 1 个字节；&lt;/li&gt;
&lt;li&gt;UTF-8 编码中，中文字符占 3 个字节，英文字符占 1 个字节；&lt;/li&gt;
&lt;li&gt;UTF-16be 编码中，中文字符和英文字符都占 2 个字节。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;UTF-16be 中的 be 指的是 Big Endian，也就是大端。相应地也有 UTF-16le，le 指的是 Little Endian，也就是小端。&lt;/p&gt;
&lt;p&gt;Java 使用双字节编码 UTF-16be，这不是指 Java 只支持这一种编码方式，而是说 char 这种类型使用 UTF-16be 进行编码。char 类型占 16 位，也就是两个字节，Java 使用这种双字节编码是为了让一个中文或者一个英文都能使用一个 char 来存储。&lt;/p&gt;
&lt;h1 id=&#34;设计模式-装饰器模式&#34;&gt;&lt;a href=&#34;#设计模式-装饰器模式&#34; class=&#34;headerlink&#34; title=&#34;设计模式-装饰器模式&#34;&gt;&lt;/a&gt;设计模式-装饰器模式&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在原有Java的IO操作中使用了特别&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <category term="Java IO-初识IO" />
        <updated>2024-01-03T13:13:21.640Z</updated>
    </entry>
</feed>
