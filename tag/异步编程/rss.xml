<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Will • Posts by &#34;异步编程&#34; tag</title>
        <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</link>
        <description>愿你一生努力，一生被爱</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 21:13:21 +0800</lastBuildDate>
        <category>开发习惯</category>
        <category>思考</category>
        <category>思维习惯</category>
        <category>感言</category>
        <category>Docker</category>
        <category>LINUX</category>
        <category>Node</category>
        <category>前端</category>
        <category>Nvm</category>
        <category>CentOS</category>
        <category>Linux</category>
        <category>Crontab</category>
        <category>Jenkins</category>
        <category>IDEA</category>
        <category>Alibaba Cloud Toolkit</category>
        <category>Archery</category>
        <category>MySql</category>
        <category>工具</category>
        <category>Maven</category>
        <category>Git</category>
        <category>JAVA</category>
        <category>shell</category>
        <category>信息安全等级保护认证</category>
        <category>系统认证</category>
        <category>读书笔记</category>
        <category>BeetlSql</category>
        <category>Beetl</category>
        <category>异常</category>
        <category>Java IO-初识IO</category>
        <category>Spring</category>
        <category>SpringCloud</category>
        <category>SpringCloud Alibaba</category>
        <category>枚举</category>
        <category>POI</category>
        <category>Spring Boot</category>
        <category>VinUtil</category>
        <category>VerificationCode</category>
        <category>SOAR</category>
        <category>其他</category>
        <category>ProtoBuffer</category>
        <category>博客园</category>
        <category>博客</category>
        <category>MongoDb</category>
        <category>Lombok工具库详解</category>
        <category>常用开发库</category>
        <category>JSON类库详解</category>
        <category>Hutool</category>
        <category>工具类</category>
        <category>Spring常用工具类</category>
        <category>异步编程</category>
        <category>线程</category>
        <category>方法论</category>
        <category>开源协议</category>
        <category>CentOS7</category>
        <category>MongoDB</category>
        <category>Redis</category>
        <category>VMware</category>
        <category>Typora</category>
        <category>PostMan</category>
        <category>Java8</category>
        <category>特性</category>
        <category>JDBC</category>
        <category>Mysql</category>
        <category>EasyExcel</category>
        <category>日志类库详解</category>
        <category>Script</category>
        <category>设计模式</category>
        <category>MyBatis</category>
        <category>Apache Common</category>
        <category>Google Guava</category>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(3)-CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92%E8%AF%A6%E8%A7%A3/</guid>
            <title>CompletableFuture 异步编排详解</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(3)-CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92%E8%AF%A6%E8%A7%A3/</link>
            <category>JAVA</category>
            <category>异步编程</category>
            <category>线程</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;查询商品详情页面逻辑比较复杂，有些数据需要远程调用，必然需要花费更多的时间。&lt;br&gt;假如商品详情每个页面查询，需要的如下的标准时间完成，那么用户需要10s才能完成。这里我们需采用异步查询，但是比如接口A查询商品信息，而接口B需要查询商品的SKU,接口C需要查询商品供应商等信息，如接口C必须依赖接口A或接口B的返回值。那么我们就需要使用CompletableFuture接口来实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;一、开启异步编程&#34;&gt;&lt;a href=&#34;#一、开启异步编程&#34; class=&#34;headerlink&#34; title=&#34;一、开启异步编程&#34;&gt;&lt;/a&gt;一、开启异步编程&lt;/h1&gt;&lt;h2 id=&#34;runAsync-无入参、无返回值&#34;&gt;&lt;a href=&#34;#runAsync-无入参、无返回值&#34; class=&#34;headerlink&#34; title=&#34;runAsync:无入参、无返回值&#34;&gt;&lt;/a&gt;runAsync:无入参、无返回值&lt;/h2&gt;&lt;h3 id=&#34;代码示例&#34;&gt;&lt;a href=&#34;#代码示例&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture.runAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;main end ...&lt;br&gt;开启异步任务...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;supplyAsync-：无入参，可以获取返回值&#34;&gt;&lt;a href=&#34;#supplyAsync-：无入参，可以获取返回值&#34; class=&#34;headerlink&#34; title=&#34;supplyAsync ：无入参，可以获取返回值&#34;&gt;&lt;/a&gt;supplyAsync ：无入参，可以获取返回值&lt;/h2&gt;&lt;h3 id=&#34;代码示例-1&#34;&gt;&lt;a href=&#34;#代码示例-1&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; cf = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务，我是返回值&amp;quot;&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取异步任务返回值:&amp;quot;&lt;/span&gt; + cf.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;获取异步任务返回值:开启异步任务，我是返回值&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;二、计算完成回调&#34;&gt;&lt;a href=&#34;#二、计算完成回调&#34; class=&#34;headerlink&#34; title=&#34;二、计算完成回调&#34;&gt;&lt;/a&gt;二、计算完成回调&lt;/h1&gt;&lt;p&gt;当我们想第一个异步任务执行完成后，还需要做其他的事情。我们的&lt;code&gt;CompletableFuture&lt;/code&gt;提供了计算完成时回调方法，&lt;code&gt;whenComplete&lt;/code&gt;、&lt;code&gt;whenCompleteAsync&lt;/code&gt;、&lt;code&gt;exceptionally&lt;/code&gt;等接口。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;whenComplete&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; Throwable&amp;gt; action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;whenCompleteAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; Throwable&amp;gt; action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;whenCompleteAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; Throwable&amp;gt; action, Executor executor)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;T&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;exceptionally&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;Throwable, ? extends T&amp;gt; fn)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code&gt;whenComplete&lt;/code&gt; 可以处理正常和异常的计算结果，&lt;code&gt;exceptionally&lt;/code&gt;: 处理异常情况。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;whenComplete&lt;/code&gt;和&lt;code&gt;whenCompleteAsync&lt;/code&gt; 的区别是whenComplete 是执行当前任务的线程继续执行whenComplete的任务。&lt;/p&gt;
&lt;p&gt;whenCompleteAsync： 是把whenCompleteAsync的任务继续提交给线程池来进行执行。&lt;/p&gt;
&lt;h2 id=&#34;whenCompleteAsync&#34;&gt;&lt;a href=&#34;#whenCompleteAsync&#34; class=&#34;headerlink&#34; title=&#34;whenCompleteAsync&#34;&gt;&lt;/a&gt;whenCompleteAsync&lt;/h2&gt;&lt;h3 id=&#34;代码示例-2&#34;&gt;&lt;a href=&#34;#代码示例-2&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).whenCompleteAsync((res,exp)-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果已经执行完成 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (exp == &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步执行结果为:&amp;quot;&lt;/span&gt; + res);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步执行出错啦，出错信息为：&amp;quot;&lt;/span&gt; + exp.getMessage());  &lt;br&gt;            &amp;#125;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正常&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;main end ...&lt;br&gt;异步结果已经执行完成 ...&lt;br&gt;异步执行结果为:5&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;异常&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;main end ...&lt;br&gt;异步结果已经执行完成 ...&lt;br&gt;异步执行出错啦，出错信息为：java.lang.ArithmeticException: / by zero&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
对于异常的捕获也可以这样写：&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).whenCompleteAsync((res,exp)-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果已经执行完成 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步执行结果为:&amp;quot;&lt;/span&gt; + res);  &lt;br&gt;        &amp;#125;).exceptionally(throwable-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;捕获到异步执行的异常信息，出错信息为：&amp;quot;&lt;/span&gt; + throwable.getMessage());  &lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;res&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;返回默认异常结果：&amp;quot;&lt;/span&gt; + &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
执行结果：&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;异步结果已经执行完成 ...&lt;br&gt;异步执行结果为:null&lt;br&gt;捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero&lt;br&gt;返回默认异常结果：5&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
我们可以看到，通过exceptionally可以捕获异步任务抛出来的异常信息，并对异常进行处理，并可以将处理结果返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;whenComplete虽然可以得到异常信息，但是无法修改结果，exceptionally可以感知异常，同时可以返回默认值。&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;三、handle最终处理&#34;&gt;&lt;a href=&#34;#三、handle最终处理&#34; class=&#34;headerlink&#34; title=&#34;三、handle最终处理&#34;&gt;&lt;/a&gt;三、handle最终处理&lt;/h1&gt;&lt;p&gt;handle和whenComplete方法类似，但是whenComplete能感知异常但是不能返回结果。只能通过exceptionally进行处理。&lt;/p&gt;
&lt;p&gt;而handle即可以获取执行结果，也可以感知异常信息，并能处理执行结果并返回。&lt;/p&gt;
&lt;h2 id=&#34;代码示例-3&#34;&gt;&lt;a href=&#34;#代码示例-3&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h2&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).handleAsync((res, exp) -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;进入handleAsync方法 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (res != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (exp != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;  &lt;br&gt;                System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;捕获到异步执行的异常信息，出错信息为：&amp;quot;&lt;/span&gt; + exp.getMessage());  &lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取异步任务返回值：&amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;进入handleAsync方法 ...&lt;br&gt;捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero&lt;br&gt;获取异步任务返回值：0&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们去掉异常信息，可以看到如下返回值，最终异步执行结果为10；最终执行结果如下：&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;进入handleAsync方法 ...&lt;br&gt;获取异步任务返回值：10&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;四、线程串行化&#34;&gt;&lt;a href=&#34;#四、线程串行化&#34; class=&#34;headerlink&#34; title=&#34;四、线程串行化&#34;&gt;&lt;/a&gt;四、线程串行化&lt;/h1&gt;&lt;p&gt;在CompletableFuture中有以下方法：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenApply&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenApplyAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenApplyAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn, Executor executor)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAccept&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAcceptAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAcceptAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action,Executor executor)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenRun&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Runnable action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenRunAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Runnable action)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenRunAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Runnable action,Executor executor)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;thenApply 方法：当一个线程依赖另一个线程时，获取上一个任务返回结果，并&lt;strong&gt;返回当前任务的返回值&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;thenAccept方法：消费处理结果，接收任务的处理结果，并消费处理，&lt;strong&gt;无返回结果&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;thenRun方法：只要上面的任务执行完成，就开始执行thenRun，只是处理完任务后，执行thenRun的后续操作。&lt;br&gt; thenRun 获取不到上个任务的执行结果，无返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thenRun&#34;&gt;&lt;a href=&#34;#thenRun&#34; class=&#34;headerlink&#34; title=&#34;thenRun&#34;&gt;&lt;/a&gt;thenRun&lt;/h2&gt;&lt;p&gt;thenRun 不能获取上一步的执行结果，并无返回值。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-4&#34;&gt;&lt;a href=&#34;#代码示例-4&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest3&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).thenRun(()-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;任务2启动了...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取异步任务返回值：&amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;任务2启动了...&lt;br&gt;获取异步任务返回值：null&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们需要获取上一步的执行结果，我们使用thenAccept；&lt;/p&gt;
&lt;h2 id=&#34;thenAccept&#34;&gt;&lt;a href=&#34;#thenAccept&#34; class=&#34;headerlink&#34; title=&#34;thenAccept&#34;&gt;&lt;/a&gt;thenAccept&lt;/h2&gt;&lt;p&gt;消费处理结果，接收任务的处理结果，并消费处理，&lt;strong&gt;无返回结果&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-5&#34;&gt;&lt;a href=&#34;#代码示例-5&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest4&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);&lt;br&gt;      &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).thenAcceptAsync((res)-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;任务2启动了... res:&amp;quot;&lt;/span&gt; + res);  &lt;br&gt;        &amp;#125;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取异步任务返回值：&amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;   &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;任务2启动了... res:5&lt;br&gt;获取异步任务返回值：null&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果我们即需要上一步执行结果，并需要返回值供别人使用，那么我们使用thenApply方法;&lt;/p&gt;
&lt;h2 id=&#34;thenApply&#34;&gt;&lt;a href=&#34;#thenApply&#34; class=&#34;headerlink&#34; title=&#34;thenApply&#34;&gt;&lt;/a&gt;thenApply&lt;/h2&gt;&lt;p&gt;当一个线程依赖另一个线程时，获取上一个任务返回结果，并&lt;strong&gt;返回当前任务的返回值&lt;/strong&gt;。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-6&#34;&gt;&lt;a href=&#34;#代码示例-6&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest5&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; future = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service).thenApplyAsync((res)-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;任务2启动了... res:&amp;quot;&lt;/span&gt; + res);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; res;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;获取异步任务返回值：&amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果:&lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务 ...&lt;br&gt;任务2启动了... res:5&lt;br&gt;获取异步任务返回值：5&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;双任务-都执行（并）&#34;&gt;&lt;a href=&#34;#双任务-都执行（并）&#34; class=&#34;headerlink&#34; title=&#34;双任务-都执行（并）&#34;&gt;&lt;/a&gt;双任务-都执行（并）&lt;/h1&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; CompletionStage&amp;lt;V&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenCombine&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,         BiFunction&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; CompletionStage&amp;lt;V&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenCombineAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,         BiFunction&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U,V&amp;gt; CompletionStage&amp;lt;V&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenCombineAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,         BiFunction&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U,? extends V&amp;gt; fn,Executor executor)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAcceptBoth&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,        BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U&amp;gt; action)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAcceptBothAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,        BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U&amp;gt; action)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenAcceptBothAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends U&amp;gt; other,        BiConsumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; U&amp;gt; action, Executor executor)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterBoth&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other,Runnable action)&lt;/span&gt;&amp;#125;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterBothAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other,Runnable action)&lt;/span&gt; &amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterBothAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other,Runnable action,        Executor executor)&lt;/span&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;两个任务必须都完成，触发该任务。&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;runAfterBoth 没有返回值，入参CompletionStage、action；第一个异步任务.runAfterBoth(第二个异步任务,第三个异步任务）&lt;/li&gt;
&lt;li&gt;thenAcceptBoth 可以获取两个任务的返回值。&lt;/li&gt;
&lt;li&gt;thenCombine 可以获取两个任务的返回值，并可以将任务三结果返回。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;runAfterBoth&#34;&gt;&lt;a href=&#34;#runAfterBoth&#34; class=&#34;headerlink&#34; title=&#34;runAfterBoth&#34;&gt;&lt;/a&gt;runAfterBoth&lt;/h2&gt;&lt;h3 id=&#34;代码示例-7&#34;&gt;&lt;a href=&#34;#代码示例-7&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest6&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        f1.runAfterBothAsync(f2, () -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;开启异步任务2 ...&lt;br&gt;main end ...&lt;br&gt;开启异步任务3 ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，任务3是在任务1和任务2执行完成后，才执行的。&lt;/p&gt;
&lt;h2 id=&#34;thenAcceptBoth&#34;&gt;&lt;a href=&#34;#thenAcceptBoth&#34; class=&#34;headerlink&#34; title=&#34;thenAcceptBoth&#34;&gt;&lt;/a&gt;thenAcceptBoth&lt;/h2&gt;&lt;p&gt;我们使用thenAcceptBoth可以感知任务1和任务2的返回值，但是thenAcceptBoth没有返回值。我们看下案例。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-8&#34;&gt;&lt;a href=&#34;#代码示例-8&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest7&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        f1.thenAcceptBothAsync(f2, (f1Res,f2Res) -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ...,f1Res: &amp;quot;&lt;/span&gt; + f1Res + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; f2Res: &amp;quot;&lt;/span&gt; + f2Res);  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;开启异步任务2 ...&lt;br&gt;main end ...&lt;br&gt;开启异步任务3 ...,f1Res: 5 f2Res: will&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到，任务3在任务1和任务2执行后执行了，并获取了任务1和任务2的返回值。&lt;/p&gt;
&lt;h2 id=&#34;thenCombineAsync&#34;&gt;&lt;a href=&#34;#thenCombineAsync&#34; class=&#34;headerlink&#34; title=&#34;thenCombineAsync&#34;&gt;&lt;/a&gt;thenCombineAsync&lt;/h2&gt;&lt;p&gt;可以获取两个任务的返回值，并可以将任务三结果返回&lt;/p&gt;
&lt;h3 id=&#34;代码示例-9&#34;&gt;&lt;a href=&#34;#代码示例-9&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest8&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f3 = f1.thenCombineAsync(f2, (f1Res, f2Res) -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ...,f1Res: &amp;quot;&lt;/span&gt; + f1Res + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot; f2Res: &amp;quot;&lt;/span&gt; + f2Res);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; f1Res + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;---&amp;gt;&amp;quot;&lt;/span&gt; + f2Res;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f3.get() = &amp;quot;&lt;/span&gt; + f3.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;开启异步任务2 ...&lt;br&gt;开启异步任务3 ...,f1Res: 5 f2Res: will&lt;br&gt;f3.get() = 5---&amp;gt;will&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&#34;双任务-任意（或）&#34;&gt;&lt;a href=&#34;#双任务-任意（或）&#34; class=&#34;headerlink&#34; title=&#34;双任务-任意（或）&#34;&gt;&lt;/a&gt;双任务-任意（或）&lt;/h1&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterEither&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other, Runnable action)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterEitherAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other, Runnable action)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;runAfterEitherAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;?&amp;gt; other, Runnable action, Executor executor)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;acceptEither&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends T&amp;gt; other, Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;acceptEitherAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends T&amp;gt; other, Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;acceptEitherAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends T&amp;gt; other, Consumer&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T&amp;gt; action, Executor executor)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;applyToEither&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends T&amp;gt; other, Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, U&amp;gt; fn)&lt;/span&gt;;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;applyToEitherAsync&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletionStage&amp;lt;? extends T&amp;gt; other, Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, U&amp;gt; fn)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当两个任务中，任意一个future任务完成的时候，执行任务。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;applyToEither 两个任务有一个任务执行完成，获取它的返回值，处理任务并有新的返回值。&lt;/li&gt;
&lt;li&gt;acceptEither 两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值。&lt;/li&gt;
&lt;li&gt;runAfterEither 两个任务有一个执行完成，不需要获取future的结果，处理任务，也没有返回值。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;runAfterEitherAsync&#34;&gt;&lt;a href=&#34;#runAfterEitherAsync&#34; class=&#34;headerlink&#34; title=&#34;runAfterEitherAsync&#34;&gt;&lt;/a&gt;runAfterEitherAsync&lt;/h2&gt;&lt;p&gt;不感知结果，自己没有返回值。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-10&#34;&gt;&lt;a href=&#34;#代码示例-10&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest9&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;            &amp;#125;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;Void&amp;gt; f3 = f1.runAfterEitherAsync(f2,()-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f3.get() = &amp;quot;&lt;/span&gt; + f3.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;开启异步任务3 ...&lt;br&gt;f3.get() = null&lt;br&gt;main end ...&lt;br&gt;开启异步任务2 ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们可以看到，任务1执行完成后，任务3不需要等待任务2执行完成，即可启动任务3。但是使用runAfterEitherAsync不能感知任务的返回值，自身也无返回值。&lt;/p&gt;
&lt;h2 id=&#34;acceptEitherAsync&#34;&gt;&lt;a href=&#34;#acceptEitherAsync&#34; class=&#34;headerlink&#34; title=&#34;acceptEitherAsync&#34;&gt;&lt;/a&gt;acceptEitherAsync&lt;/h2&gt;&lt;h3 id=&#34;代码示例-11&#34;&gt;&lt;a href=&#34;#代码示例-11&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest10&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;            &amp;#125;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        f1.acceptEitherAsync(f2,(res)-&amp;gt;&amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ... res: &amp;quot;&lt;/span&gt;+res);  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;main end ...&lt;br&gt;开启异步任务3 ... res: 5&lt;br&gt;开启异步任务2 ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到，可以获取任务1的执行结果，但不返回执行结果。&lt;/p&gt;
&lt;h2 id=&#34;applyToEither&#34;&gt;&lt;a href=&#34;#applyToEither&#34; class=&#34;headerlink&#34; title=&#34;applyToEither&#34;&gt;&lt;/a&gt;applyToEither&lt;/h2&gt;&lt;p&gt;可以感知结果，并返回执行结果。&lt;/p&gt;
&lt;h3 id=&#34;代码示例-12&#34;&gt;&lt;a href=&#34;#代码示例-12&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest11&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务1 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt; / &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;Integer&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;            &amp;#125;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务2 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f3 = f1.applyToEitherAsync(f2, (res) -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开启异步任务3 ... res: &amp;quot;&lt;/span&gt; + res);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f3.get() = &amp;quot;&lt;/span&gt; + f3.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;开启异步任务1 ...&lt;br&gt;开启异步任务3 ... res: 5&lt;br&gt;f3.get() = will&lt;br&gt;main end ...&lt;br&gt;开启异步任务2 ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;多任务组合&#34;&gt;&lt;a href=&#34;#多任务组合&#34; class=&#34;headerlink&#34; title=&#34;多任务组合&#34;&gt;&lt;/a&gt;多任务组合&lt;/h1&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Void&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;allOf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletableFuture&amp;lt;?&amp;gt;... cfs)&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; CompletableFuture&amp;lt;Object&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;anyOf&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(CompletableFuture&amp;lt;?&amp;gt;... cfs)&lt;/span&gt;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;allOf：等待所有任务完成&lt;/li&gt;
&lt;li&gt;anyOf: 只要有一个任务完成&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;allOf&#34;&gt;&lt;a href=&#34;#allOf&#34; class=&#34;headerlink&#34; title=&#34;allOf&#34;&gt;&lt;/a&gt;allOf&lt;/h2&gt;&lt;h3 id=&#34;代码示例-13&#34;&gt;&lt;a href=&#34;#代码示例-13&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest12&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品图片 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片地址&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品属性...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;黑色 256G&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f3 = f1.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品品牌...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;苹果手机&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;Void&amp;gt; future = CompletableFuture.allOf(f1, f2, f3);  &lt;br&gt;        future.get();&lt;span class=&#34;hljs-comment&#34;&gt;//等待索引结果完成  &lt;/span&gt;&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;查询商品图片 ...&lt;br&gt;查询商品属性...&lt;br&gt;查询商品品牌...&lt;br&gt;main end ...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;注：如果不使用future.get()阻塞，若其中一个任务执行时间较长，则可能会丢失任务信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;anyOf&#34;&gt;&lt;a href=&#34;#anyOf&#34; class=&#34;headerlink&#34; title=&#34;anyOf&#34;&gt;&lt;/a&gt;anyOf&lt;/h2&gt;&lt;h3 id=&#34;代码示例-14&#34;&gt;&lt;a href=&#34;#代码示例-14&#34; class=&#34;headerlink&#34; title=&#34;代码示例&#34;&gt;&lt;/a&gt;代码示例&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompletableFutureTest13&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 自定义线程池  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newFixedThreadPool(&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main start ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品图片 ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;图片地址&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品属性...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;黑色 256G&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;String&amp;gt; f3 = f1.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;查询商品品牌...&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;苹果手机&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;, service);  &lt;br&gt;        CompletableFuture&amp;lt;Object&amp;gt; future = CompletableFuture.anyOf(f1, f2, f3);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;future.get() = &amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main end ...&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;&amp;#125;	&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果为： &lt;/p&gt;
&lt;figure class=&#34;highlight txt&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs txt&#34;&gt;main start ...&lt;br&gt;查询商品图片 ...&lt;br&gt;查询商品属性...&lt;br&gt;future.get() = 图片地址&lt;br&gt;main end ...&lt;br&gt;查询商品品牌...&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/</guid>
            <title>异步编程(1)-初识异步</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/</link>
            <category>思考</category>
            <category>JAVA</category>
            <category>异步编程</category>
            <category>线程</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;近期博猪在负责一个风险测算的模块，其中的具体过程博猪就不细说了，但是总体的感觉就是心中有无数个草泥马在奔腾，但是现在仔细感觉还是值得写个博客来记录一下的。&lt;br&gt;具体场景为有些业务导入牵扯到一些计算，业务那边说是导入数据量比较庞大，所以博猪就用异步+多线程的方式处理了这个业务，本地和Linux环境跑了几遍，20个字段，2w数据，5个线程，总体耗时也就三秒左右，还是挺可观的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;什么异步编程&#34;&gt;&lt;a href=&#34;#什么异步编程&#34; class=&#34;headerlink&#34; title=&#34;什么异步编程&#34;&gt;&lt;/a&gt;什么异步编程&lt;/h1&gt;&lt;p&gt;Java 异步编程是一种让程序并行运行的方式，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且等工作单元运行结束后通知主应用程序线程它的运行结果或者失败原因。使用异步编程有许多好处，例如可以提高应用程序的性能和响应能力，提高线程的利用率，减少线程间的通信开销等。&lt;br&gt;Java 异步编程的核心是线程池，程序员可以通过提交任务到线程池来实现异步编程。&lt;br&gt;Java 异步编程在现实生活中有很多应用，例如网络 IO 请求、日志打印、异步打日志、异步消息处理等。&lt;br&gt;具体来说,Java异步编程包括以下几个要点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;启动异步任务:通过某种机制启动一个与主程序分离的异步任务,比如线程、Future、CompletableFuture等。&lt;/li&gt;
&lt;li&gt;异步任务独立执行:一旦异步任务启动,主程序可以继续执行,而异步任务将在后台独立运行。&lt;/li&gt;
&lt;li&gt;获取异步执行的结果(可选):主程序如果需要异步任务的结果,可以通过某种方式获取其结果,比如调用Future的get方法或给CompletionHandler传递结果。但这不是异步执行的必要条件,有的异步任务不需要返回结果。&lt;/li&gt;
&lt;li&gt;异常处理(可选):通过 completion handlers 或其他异常处理机制对异步任务可能抛出的异常进行处理。&lt;/li&gt;
&lt;li&gt;线程管理(可选):有的异步方式需要手动管理执行线程,有的则通过线程池等机制自动管理。&lt;br&gt;所以,总体来说,Java异步编程的关键就是启动一个与主程序分离的异步任务,并让其在后台运行,而主程序可以继续流程,不等待其完成。在需要结果或异常时,再通过相应机制获取或处理。&lt;br&gt;这一模式允许程序同时处理多个任务,提高了程序的并发能力和响应性。线程的自动管理也简化了手动管理线程的难度。Java提供了多种实现异步编程的方式,比如线程、Future、CompletableFuture、响应式框架等。随着Java的发展,这些方式越来越简便高效。&lt;br&gt;但其核心思想仍然是让异步任务独立于主程序执行,以实现并发和提高响应性。&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(2)-Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8C%97/</guid>
            <title>异步编程(2)-Java异步编程指北</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(2)-Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8C%97/</link>
            <category>JAVA</category>
            <category>异步编程</category>
            <category>线程</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;前言&#34;&gt;&lt;a href=&#34;#前言&#34; class=&#34;headerlink&#34; title=&#34;前言&#34;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文简要介绍一下Java中可支持异步编程的类和使用方法，方便后期回顾和汇总。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;同步异步优缺点&#34;&gt;&lt;a href=&#34;#同步异步优缺点&#34; class=&#34;headerlink&#34; title=&#34;同步异步优缺点&#34;&gt;&lt;/a&gt;同步异步优缺点&lt;/h1&gt;&lt;p&gt;在我们平时开发中或多或少都会遇到需要调用接口来完成一个功能的需求，这个接口可以是内部系统也可以是外部的，然后等到接口返回数据了才能继续其他的业务流程，这就是传统的 &lt;code&gt;同步&lt;/code&gt;模式。&lt;/p&gt;
&lt;p&gt;同步模式虽然简单但缺点也很明显，如果对方服务处理缓慢迟迟未能返回数据，或网络问题导致响应变长，就会阻塞我们调用方的线程，导致我们主流程的耗时的延迟，传统的解决方式是增加接口、网关的超时(timeout)设置，防止无限期等待。但即使这样还是会占用CPU资源。&lt;/p&gt;
&lt;p&gt;在我们做rpc远程调用，redis，数据库访问等比较耗时的网络请求时经常要面对这样的问题，这种业务场景我们可以引入&lt;code&gt;异步&lt;/code&gt;的编程思想，即主流程不需要阻塞等待接口返回数据，而是继续往下执行，当真正需要这个接口返回结果时再通过回调或阻塞的方式获取，此时我们的主流程和异步任务是并行执行的。&lt;/p&gt;
&lt;p&gt;Java中实现异步主要是通过Future，CompletableFuture，Guava ListenableFuture以及一些异步响应式框架如RxJava实现。&lt;/p&gt;
&lt;p&gt;下面我们主要看下这几种组件适用的业务场景和需要注意的地方，避免踩坑。&lt;/p&gt;
&lt;h1 id=&#34;Future&#34;&gt;&lt;a href=&#34;#Future&#34; class=&#34;headerlink&#34; title=&#34;Future&#34;&gt;&lt;/a&gt;Future&lt;/h1&gt;&lt;p&gt;Future 表示异步计算的结果。提供了检查计算是否完成、等待计算完成以及检索计算结果的方法。只有在计算完成后才能使用方法 get 检索结果，必要时阻止，直到准备就绪。取消是通过该方法 cancel 执行的。提供了其他方法来确定任务是正常完成还是已取消。计算完成后，无法取消计算。如果您想为了可取消性而使用Future ，但不提供可用的结果，则可以声明&lt;code&gt; Future&amp;lt;?&amp;gt;&lt;/code&gt; 的类型并作为基础任务的结果返回 null。&lt;br&gt;接口信息如下图所示：&lt;br&gt;&lt;img src=&#34;https://s3.bmp.ovh/imgs/2023/05/31/b2baebe6d50661a8.png&#34;&gt;&lt;br&gt;实际开发中我们一般会结合线程池的submit配合使用，代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.concurrent.ExecutorService;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.concurrent.Executors;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.concurrent.Future;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * AsyncTest 异步  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@author&lt;/span&gt; will  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FutureTest&lt;/span&gt; &amp;#123;  &lt;br&gt; &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; Exception&amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//创建线程池  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;ExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Executors.newCachedThreadPool();  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用  &lt;/span&gt;&lt;br&gt;        Future&amp;lt;String&amp;gt; submit = executor.submit(() -&amp;gt; &amp;#123;  &lt;br&gt;            Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步执行结果 = &amp;quot;&lt;/span&gt; + submit.get());  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;submit.isDone() = &amp;quot;&lt;/span&gt; + submit.isDone());  &lt;br&gt;  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;简单的说我有一个任务，提交给了Future，Future替我完成这个任务，这期间我可以去做别的事情。一段时间之后，我再从Future取出结果。&lt;/p&gt;
&lt;p&gt;上面的代码有2个地方需要注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不建议使用future.get()方式，而应该使用future.get(long timeout, TimeUnit unit)&lt;br&gt;  尤其是在生产环境一定要设置合理的超时时间，防止程序无限期等待下去&lt;/li&gt;
&lt;li&gt;另外就是要考虑异步任务执行过程中报错抛出异常的情况，需要捕获future的异常信息。&lt;br&gt;通过代码可以看出一些简单的异步场景可以使用Future解决，但是对于结果的获取却不是很方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式相当于把异步变成了同步，显然和异步编程的初衷相违背，轮询的方式又会浪费CPU资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Future没有提供通知的机制，就是回调，我们无法知道它什么时间完成任务。&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而且在复杂一点的情况下，比如多个异步任务的场景，一个异步任务依赖上一个异步任务的执行结果，异步任务合并等，Future无法满足需求。&lt;/p&gt;
&lt;h1 id=&#34;ListenableFuture&#34;&gt;&lt;a href=&#34;#ListenableFuture&#34; class=&#34;headerlink&#34; title=&#34;ListenableFuture&#34;&gt;&lt;/a&gt;ListenableFuture&lt;/h1&gt;&lt;p&gt;Google并发包下的listenableFuture对Java原生的future做了扩展，顾名思义就是使用监听器模式实现的回调，所以叫可监听的future。&lt;/p&gt;
&lt;p&gt;要使用listenableFuture还要结合MoreExecutor线程池，MoreExecutor是对Java原生线程池的封装，比如常用的MoreExecutors.listeningDecorator(threadPool); 修改Java原生线程池的submit方法，封装了future返回listenableFuture。&lt;br&gt;接口信息如下图所示：&lt;br&gt;&lt;img src=&#34;https://s3.bmp.ovh/imgs/2023/05/31/38d7ecdc6230f9e8.png&#34;&gt;&lt;br&gt;代码示例如下：&lt;br&gt;首先还是创建线程池,模拟业务调用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//创建线程池  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ListeningExecutorService&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;executor&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用  &lt;/span&gt;&lt;br&gt;ListenableFuture&amp;lt;String&amp;gt; future = executor.submit(() -&amp;gt; &amp;#123;  &lt;br&gt;    Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;*&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// int i = 1 / 0;  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;;  &lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面的代码是构造了一个ListenableFuture的异步任务，调用它的结果一般有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基于监听器(addListener)&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 基于监听机制  &lt;/span&gt;&lt;br&gt;future.addListener(() -&amp;gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果:&amp;quot;&lt;/span&gt; + future.get());  &lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Exception e) &amp;#123;  &lt;br&gt;        e.printStackTrace();  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;, executor);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;基于回调（addCallback）&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 基于回调机制  &lt;/span&gt;&lt;br&gt;Futures.addCallback(future, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FutureCallback&lt;/span&gt;&amp;lt;String&amp;gt;() &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;onSuccess&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(&lt;span class=&#34;hljs-meta&#34;&gt;@Nullable&lt;/span&gt; String result)&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果:&amp;quot;&lt;/span&gt; + result);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;onFailure&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Throwable t)&lt;/span&gt; &amp;#123;  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果错误:&amp;quot;&lt;/span&gt; + t.getMessage());  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
上述代码用例可以发现我注释掉了一个&lt;code&gt;int i = 1 / 0&lt;/code&gt;,在学习过程中可以放开来看看结果，对比验证一下。&lt;br&gt;OK，上述如果验证完毕后，可以比对看下面的汇总，加深一下使用区别。&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;使用说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;addListener&lt;/td&gt;
&lt;td&gt;需要自己代码里捕获处理异常情况，最好设置超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;addCallback&lt;/td&gt;
&lt;td&gt;把正常返回和异常情况做了分离，方便我们针对不同情况做处理&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;另外Futures里还有很多其他的api，可以满足我们负责场景，比如transform()可以处理异步任务之间的依赖情况，allAsList()将多个ListenableFuture合并成一个。&lt;/p&gt;
&lt;h1 id=&#34;CompletableFuture&#34;&gt;&lt;a href=&#34;#CompletableFuture&#34; class=&#34;headerlink&#34; title=&#34;CompletableFuture&#34;&gt;&lt;/a&gt;CompletableFuture&lt;/h1&gt;&lt;p&gt;如果你们公司的jdk是8或以上的版本，那可以直接使用CompletableFuture类来实现异步编程。&lt;/p&gt;
&lt;p&gt;Java8新增的CompletableFuture类借鉴了Google Guava的ListenableFuture，它包含50多个方法，默认使用forkJoinPool线程池，提供了非常强大的Future扩展功能，可以帮助我们简化异步编程的复杂性，结合函数式编程，通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的多种方法，可以满足大部分异步回调场景。&lt;br&gt;接口信息如下图所示：&lt;br&gt;&lt;img src=&#34;https://s3.bmp.ovh/imgs/2023/06/01/6aac59f5cb214601.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;虽然方法很多但有个特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;以Async结尾的方法签名表示是在异步线程里执行，没有以Async结尾的方法则是由主线程调用&lt;/li&gt;
&lt;li&gt;如果参数里有Runnable类型，则没有返回结果，即纯消费的方法  &lt;/li&gt;
&lt;li&gt;如果参数里没有指定executor则默认使用forkJoinPool线程池，指定了则以指定的线程池来执行任务&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;thenApplyAsync&#34;&gt;&lt;a href=&#34;#thenApplyAsync&#34; class=&#34;headerlink&#34; title=&#34;thenApplyAsync&#34;&gt;&lt;/a&gt;thenApplyAsync&lt;/h2&gt;&lt;h3 id=&#34;示例代码&#34;&gt;&lt;a href=&#34;#示例代码&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;这里先说明一下，示例代码只关注核心功能，如果要实际使用需要考虑超时和异常情况，大家需要注意。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture  &lt;br&gt;        .supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...开始执行 hello&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello! &amp;quot;&lt;/span&gt;;  &lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...执行hello完毕，执行结果：&amp;quot;&lt;/span&gt; + hello);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; hello;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f2 = f1.thenApplyAsync(s -&amp;gt; &amp;#123;  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...开始执行 world&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world!&amp;quot;&lt;/span&gt;;  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...获取上一步结果,结果为：&amp;quot;&lt;/span&gt; + s);  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开始输出 &amp;quot;&lt;/span&gt; + world);  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; s + world;  &lt;br&gt;&amp;#125;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f2.get() = &amp;quot;&lt;/span&gt; + f2.get());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在上面的代码中异步任务f2需要异步任务f1的结果才能执行，但对于我们的主线程来说，无须等到f1返回结果后再调用函数f2，即不会阻塞主流程，而是告诉CompletableFuture当执行完了f1的方法再去执行f2，只有当需要最后的结果时再获取。&lt;/p&gt;
&lt;h2 id=&#34;thenComposeAsync&#34;&gt;&lt;a href=&#34;#thenComposeAsync&#34; class=&#34;headerlink&#34; title=&#34;thenComposeAsync&#34;&gt;&lt;/a&gt;thenComposeAsync&lt;/h2&gt;&lt;h3 id=&#34;示例代码-1&#34;&gt;&lt;a href=&#34;#示例代码-1&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture  &lt;br&gt;        .supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...开始执行 hello&amp;quot;&lt;/span&gt;);  &lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello! &amp;quot;&lt;/span&gt;;  &lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;/&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...执行hello完毕，执行结果：&amp;quot;&lt;/span&gt; + hello);  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; hello;  &lt;br&gt;        &amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f2 = f1.thenComposeAsync(t -&amp;gt; CompletableFuture.supplyAsync(()-&amp;gt;&amp;#123;  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...开始执行 world&amp;quot;&lt;/span&gt;);  &lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world!&amp;quot;&lt;/span&gt;;  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;...获取上一步结果,结果为：&amp;quot;&lt;/span&gt; + t);  &lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;开始输出 &amp;quot;&lt;/span&gt; + world);  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; t + world;  &lt;br&gt;&amp;#125;));  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f2.get() = &amp;quot;&lt;/span&gt; + f2.get());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面两个案例的输出结果相同，但是两者还是有细微的差异的，差异信息如下方所示：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名称&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;thenComposeAsync&lt;/td&gt;
&lt;td&gt;将异步操作的结果保存到 CompletableFuture 中，并返回一个新的 CompletableFuture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;thenApplyAsync&lt;/td&gt;
&lt;td&gt;将异步操作的结果应用于输入参数，并返回一个新的 CompletableFuture&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过代码注释能看出thenCompose相当于flatMap,避免&lt;code&gt;CompletableFuture&amp;lt;CompletableFuture&amp;gt;&lt;/code&gt;这种写法。&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;这也是&lt;code&gt;thenCompose&lt;/code&gt;和&lt;code&gt;thenApply&lt;/code&gt;的区别，通过查看api也能看出：&lt;br&gt;thenApply：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenApply&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T,? extends U&amp;gt; fn)&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; uniApplyStage(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;, fn);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;thenCompose：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &amp;lt;U&amp;gt; CompletableFuture&amp;lt;U&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;thenCompose&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(Function&amp;lt;? &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt; T, ? extends CompletionStage&amp;lt;U&amp;gt;&amp;gt; fn)&lt;/span&gt; &amp;#123;&lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; uniComposeStage(screenExecutor(executor), fn);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;thenCombineAsync&#34;&gt;&lt;a href=&#34;#thenCombineAsync&#34; class=&#34;headerlink&#34; title=&#34;thenCombineAsync&#34;&gt;&lt;/a&gt;thenCombineAsync&lt;/h2&gt;&lt;h3 id=&#34;示例代码-2&#34;&gt;&lt;a href=&#34;#示例代码-2&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;time&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; System.currentTimeMillis();  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口耗时，1s  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;        Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello! &amp;quot;&lt;/span&gt;;  &lt;br&gt;&amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口耗时，1s  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;        Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world! &amp;quot;&lt;/span&gt;;  &lt;br&gt;&amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f3 = f1.thenCombineAsync(f2, (s1, s2) -&amp;gt; s1 + s2);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果:&amp;quot;&lt;/span&gt; + f3.get());  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;耗时:&amp;quot;&lt;/span&gt; + (System.currentTimeMillis() - time));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;从代码输出结果可以看到两个异步任务f1、f2是并行执行，彼此无先后依赖顺序，&lt;code&gt;thenCombineAsync&lt;/code&gt;适合将两个并行执行的异步任务的结果合并返回成一个新的future。&lt;/p&gt;
&lt;p&gt;还有一个类似的方法&lt;code&gt;thenAcceptBoth&lt;/code&gt;也是合并两个future的结果，但是不会返回新的值，内部消费掉了。&lt;/p&gt;
&lt;h2 id=&#34;applyToEitherAsync&#34;&gt;&lt;a href=&#34;#applyToEitherAsync&#34; class=&#34;headerlink&#34; title=&#34;applyToEitherAsync&#34;&gt;&lt;/a&gt;applyToEitherAsync&lt;/h2&gt;&lt;h3 id=&#34;示例代码-3&#34;&gt;&lt;a href=&#34;#示例代码-3&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;CompletableFuture&amp;lt;String&amp;gt; f1 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口耗时，1s  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;        Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);  &lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello! &amp;quot;&lt;/span&gt;;  &lt;br&gt;&amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f2 = CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口耗时，1s  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;        Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt;(e);  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world! &amp;quot;&lt;/span&gt;;  &lt;br&gt;&amp;#125;);  &lt;br&gt;CompletableFuture&amp;lt;String&amp;gt; f3 = f1.applyToEitherAsync(f2, t -&amp;gt; t);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;异步结果:&amp;quot;&lt;/span&gt; + f3.get());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;输出的结果:world，哪个future先执行完就根据它的结果计算，取两个future最先返回的。&lt;/p&gt;
&lt;p&gt;这里要说明一点，&lt;code&gt;如果两个future是同时返回结果，那么applyToEitherAsync永远以第一个future的结果为准&lt;/code&gt;，大家可以把上面代码的Thread.sleep注释掉测试下。&lt;/p&gt;
&lt;p&gt;另外acceptEither方法和这个类似，但是没有返回值。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;allOf / anyOf&lt;/code&gt;&lt;br&gt;前面讲的compose,combine,either都是处理两个future的方法，如果是超过2个的可以使用allOf或anyOf&lt;/p&gt;
&lt;h2 id=&#34;allOf&#34;&gt;&lt;a href=&#34;#allOf&#34; class=&#34;headerlink&#34; title=&#34;allOf&#34;&gt;&lt;/a&gt;allOf&lt;/h2&gt;&lt;h3 id=&#34;示例代码-4&#34;&gt;&lt;a href=&#34;#示例代码-4&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;CompletableFuture&amp;lt;Void&amp;gt; f1 = CompletableFuture.allOf(  &lt;br&gt;        CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;), CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;), CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;!!!!!!&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;)  &lt;br&gt;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f1.get() = &amp;quot;&lt;/span&gt; + f1.get());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;allOf&lt;/code&gt;方法是当所有的CompletableFuture都执行完后执行计算，&lt;strong&gt;无返回值&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;anyOf&#34;&gt;&lt;a href=&#34;#anyOf&#34; class=&#34;headerlink&#34; title=&#34;anyOf&#34;&gt;&lt;/a&gt;anyOf&lt;/h2&gt;&lt;h3 id=&#34;示例代码-5&#34;&gt;&lt;a href=&#34;#示例代码-5&#34; class=&#34;headerlink&#34; title=&#34;示例代码&#34;&gt;&lt;/a&gt;示例代码&lt;/h3&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;CompletableFuture&amp;lt;Object&amp;gt; f1 = CompletableFuture.anyOf(  &lt;br&gt;        CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;3000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;), CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;2000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;world&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;), CompletableFuture.supplyAsync(() -&amp;gt; &amp;#123;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;  &lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;// 模拟接口调用耗时1秒  &lt;/span&gt;&lt;br&gt;                Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);  &lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (InterruptedException e) &amp;#123;  &lt;br&gt;                e.printStackTrace();  &lt;br&gt;            &amp;#125;  &lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;!!!!!!&amp;quot;&lt;/span&gt;;  &lt;br&gt;        &amp;#125;)  &lt;br&gt;);  &lt;br&gt;System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;f1.get() = &amp;quot;&lt;/span&gt; + f1.get());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;多次执行,执行结果为”!!!!!!”，anyOf方法当任意一个CompletableFuture执行完后就会执行计算。&lt;/p&gt;
&lt;p&gt;虽然说CompletableFuture更适合I&amp;#x2F;O场景，但使用时一定要结合具体业务，比如说有些公共方法处理异步任务时需要考虑异常情况，这时候使用&lt;code&gt;CompletableFuture.handle(BiFunction&amp;lt;? super T, Throwable, ? extends U&amp;gt; fn)&lt;/code&gt;更合适，handle方法会处理正常计算值和异常，因此它可以屏蔽异常，避免异常继续抛出。&lt;/p&gt;
&lt;p&gt;CompletableFuture还有一个坑需要注意：如果线上流量比较大的情况下会出现响应缓慢的问题。&lt;/p&gt;
&lt;p&gt;因为CompletableFuture默认使用的线程池是forkJoinPool，当时对一台使用了CompletableFuture实现异步回调功能的接口做压测，通过监控系统发现有大量的ForkJoinPool.commonPool-worker-* 线程处于等待状态，进一步分析dump信息发现是forkJoinPool的makeCommonPool问题。&lt;br&gt;具体原因为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;java.util.concurrent.ForkJoinPool.common.parallelism的值，那么forkJoinPool线程池的线程数就是(cpu-1)，如果我们机器是2核，这样实际执行任务的线程数只有1个，当有大量请求过来时，如果有耗时高的io操作，势必会造成更多的线程等待，进而拖累服务响应时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方案一个是设置java.util.concurrent.ForkJoinPool.common.parallelism这个值(要在项目启动时指定)，或者指定线程池不使用默认的forkJoinPool。根据阿里巴巴规范建议使用自定义的线程池。&lt;/p&gt;
&lt;p&gt;那么如何比较好的设置线程数量，以下参考《Java并发编程实战》中的公式：&lt;br&gt;$$threads &amp;#x3D; N CPU * U CPU * (1 + W&amp;#x2F;C)$$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;N CPU 是处理器的核数&lt;/li&gt;
&lt;li&gt;U CPU 是期望的CPU利用率（介于0和1之间）&lt;/li&gt;
&lt;li&gt;W&amp;#x2F;C是等待时间与计算时间的比率&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;网上也有这么区分的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果服务是cpu密集型的，设置为电脑的核数&lt;/li&gt;
&lt;li&gt;如果服务是io密集型的，设置为电脑的核数*2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其实并不严谨，尤其是io密集型的还要参考QPS和web服务器的配置。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
