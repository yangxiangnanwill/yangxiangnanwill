<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Will • Posts by &#34;java8&#34; tag</title>
        <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</link>
        <description>愿你一生努力，一生被爱</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 21:13:21 +0800</lastBuildDate>
        <category>开发习惯</category>
        <category>思考</category>
        <category>思维习惯</category>
        <category>感言</category>
        <category>Docker</category>
        <category>LINUX</category>
        <category>Node</category>
        <category>前端</category>
        <category>Nvm</category>
        <category>CentOS</category>
        <category>Linux</category>
        <category>Crontab</category>
        <category>Jenkins</category>
        <category>IDEA</category>
        <category>Alibaba Cloud Toolkit</category>
        <category>Archery</category>
        <category>MySql</category>
        <category>工具</category>
        <category>Maven</category>
        <category>Git</category>
        <category>JAVA</category>
        <category>shell</category>
        <category>信息安全等级保护认证</category>
        <category>系统认证</category>
        <category>读书笔记</category>
        <category>BeetlSql</category>
        <category>Beetl</category>
        <category>异常</category>
        <category>Java IO-初识IO</category>
        <category>Spring</category>
        <category>SpringCloud</category>
        <category>SpringCloud Alibaba</category>
        <category>枚举</category>
        <category>POI</category>
        <category>Spring Boot</category>
        <category>VinUtil</category>
        <category>VerificationCode</category>
        <category>SOAR</category>
        <category>其他</category>
        <category>ProtoBuffer</category>
        <category>博客园</category>
        <category>博客</category>
        <category>MongoDb</category>
        <category>Lombok工具库详解</category>
        <category>常用开发库</category>
        <category>JSON类库详解</category>
        <category>Hutool</category>
        <category>工具类</category>
        <category>Spring常用工具类</category>
        <category>异步编程</category>
        <category>线程</category>
        <category>方法论</category>
        <category>开源协议</category>
        <category>CentOS7</category>
        <category>MongoDB</category>
        <category>Redis</category>
        <category>VMware</category>
        <category>Typora</category>
        <category>PostMan</category>
        <category>Java8</category>
        <category>特性</category>
        <category>JDBC</category>
        <category>Mysql</category>
        <category>EasyExcel</category>
        <category>日志类库详解</category>
        <category>Script</category>
        <category>设计模式</category>
        <category>MyBatis</category>
        <category>Apache Common</category>
        <category>Google Guava</category>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</guid>
            <title>JAVA8特性整理</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/JAVA8%E7%89%B9%E6%80%A7%E6%95%B4%E7%90%86/</link>
            <category>思考</category>
            <category>JAVA</category>
            <category>Java8</category>
            <category>特性</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;新特性简介&#34;&gt;&lt;a href=&#34;#新特性简介&#34; class=&#34;headerlink&#34; title=&#34;新特性简介&#34;&gt;&lt;/a&gt;新特性简介&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;速度更快&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;代码更少,更简洁(增加了新的语法支持:lambda表达式)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;强大的Stream API&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;便于并行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;最大化减少空指针异常(增加Optional类)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;其中最为核心的为 Lambda 表达式与Stream API&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h1 id=&#34;Lambda-表达式&#34;&gt;&lt;a href=&#34;#Lambda-表达式&#34; class=&#34;headerlink&#34; title=&#34;Lambda 表达式&#34;&gt;&lt;/a&gt;Lambda 表达式&lt;/h1&gt;&lt;h2 id=&#34;为啥使用lambda表达式&#34;&gt;&lt;a href=&#34;#为啥使用lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;为啥使用lambda表达式?&#34;&gt;&lt;/a&gt;为啥使用lambda表达式?&lt;/h2&gt;&lt;p&gt;Lambda 是一个 匿名函数，我们可以把 Lambda表达式理解为是 一段可以传递的代码（将代码像数据一样进行传递）。可以写出更简洁、更灵活的代码。作为一种更紧凑的代码风格，使Java的语言表达能力得到了提升。&lt;/p&gt;
&lt;h2 id=&#34;重要体现——匿名内部类&#34;&gt;&lt;a href=&#34;#重要体现——匿名内部类&#34; class=&#34;headerlink&#34; title=&#34;重要体现——匿名内部类&#34;&gt;&lt;/a&gt;重要体现——匿名内部类&lt;/h2&gt;&lt;h3 id=&#34;从匿名内部类到lambda的转换&#34;&gt;&lt;a href=&#34;#从匿名内部类到lambda的转换&#34; class=&#34;headerlink&#34; title=&#34;从匿名内部类到lambda的转换&#34;&gt;&lt;/a&gt;从匿名内部类到lambda的转换&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;匿名内部类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;runnable&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Runnable&lt;/span&gt;() &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;       System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;haha&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;用lambda表达式表示匿名内部类&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;Runnable&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;runnable1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ()-&amp;gt;&amp;#123;&lt;br&gt;    System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;匿名内部类参数传递&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;TreeSet&amp;lt;String&amp;gt; treeSet = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Comparator&lt;/span&gt;&amp;lt;String&amp;gt;() &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Override&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;compare&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String o1, String o2)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; Integer.compare(o1.length(),o2.length());&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;lambda表达式表示匿名内部类参数传递&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;TreeSet&amp;lt;String&amp;gt; treeSet1 = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeSet&lt;/span&gt;&amp;lt;&amp;gt;(&lt;br&gt;        (o1,o2)-&amp;gt;&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt;  Integer.compare(o1.length(), o2.length());&lt;br&gt;        &amp;#125;&lt;br&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;lambda表达式语法&#34;&gt;&lt;a href=&#34;#lambda表达式语法&#34; class=&#34;headerlink&#34; title=&#34;lambda表达式语法&#34;&gt;&lt;/a&gt;lambda表达式语法&lt;/h2&gt;&lt;p&gt;Lambda 表达式在Java 语言中引入了一个新的语法元素和操作符。这个操作符为 “- -&amp;gt; &amp;gt;” ， 该操作符被称为Lambda 操作符或剪头操作符。它将 Lambda 分为两个部分：&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;左侧&lt;/strong&gt;：指定了 Lambda 表达式需要的所有参数&lt;/p&gt;
&lt;p&gt;​		&lt;strong&gt;右侧&lt;/strong&gt;：指定了 Lambda 体，即 Lambda 表达式要执行的功能。&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;&lt;strong&gt;语法格式:&lt;/strong&gt;&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709144314.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;类型推断&#34;&gt;&lt;a href=&#34;#类型推断&#34; class=&#34;headerlink&#34; title=&#34;类型推断&#34;&gt;&lt;/a&gt;类型推断&lt;/h2&gt;&lt;p&gt;上述 Lambda 表达式中的参数类型都是由编译器推断得出的。Lambda 表达式中无需指定类型，程序依然可以编译，这是因为 javac 根据程序的上下文，在后台推断出了参数的类型。Lambda 表达式的类型依赖于上下文环境，是由编译器推断出来的。这就是所谓的“类型推断”.&lt;/p&gt;
&lt;h1 id=&#34;函数式接口&#34;&gt;&lt;a href=&#34;#函数式接口&#34; class=&#34;headerlink&#34; title=&#34;函数式接口&#34;&gt;&lt;/a&gt;函数式接口&lt;/h1&gt;&lt;h2 id=&#34;啥是函数式接口&#34;&gt;&lt;a href=&#34;#啥是函数式接口&#34; class=&#34;headerlink&#34; title=&#34;啥是函数式接口&#34;&gt;&lt;/a&gt;啥是函数式接口&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;只包含一个抽象方法的接口，称为 函数式接口。&lt;/li&gt;
&lt;li&gt;你可以通过 Lambda 表达式来创建该接口的对象。（若 Lambda表达式抛出一个受检异常，那么该异常需要在目标接口的抽象方法上进行声明）。&lt;/li&gt;
&lt;li&gt;我们可以在任意函数式接口上使用 &amp;#x3D;&amp;#x3D;@FunctionalInterface 注解&amp;#x3D;&amp;#x3D;，这样做可以检查它是否是一个函数式接口，同时 javadoc 也会包含一条声明，说明这个接口是一个函数式接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;自定义函数式接口&#34;&gt;&lt;a href=&#34;#自定义函数式接口&#34; class=&#34;headerlink&#34; title=&#34;自定义函数式接口&#34;&gt;&lt;/a&gt;自定义函数式接口&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/20190709145338.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;作为参数传递lambda表达式&#34;&gt;&lt;a href=&#34;#作为参数传递lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;作为参数传递lambda表达式&#34;&gt;&lt;/a&gt;作为参数传递lambda表达式&lt;/h2&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709145553.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;Java-内置四大核心函数式接口&#34;&gt;&lt;a href=&#34;#Java-内置四大核心函数式接口&#34; class=&#34;headerlink&#34; title=&#34;Java  内置四大核心函数式接口&#34;&gt;&lt;/a&gt;Java  内置四大核心函数式接口&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;center&#34;&gt;函数式接口&lt;/th&gt;
&lt;th&gt;参数类型&lt;/th&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;用途&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Consumer&lt;T&gt;&lt;br/&gt;消费型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;void&lt;/td&gt;
&lt;td&gt;对类型为T的对象应用操作，包含方法：void accept(T t)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Supplier&lt;T&gt;&lt;br/&gt;供给型接口&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;返回类型为T的对象，包含方法：T get();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Function&amp;lt;T, R&amp;gt;&lt;br/&gt;函数型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;R&lt;/td&gt;
&lt;td&gt;对类型为T的对象应用操作，并返回结果。结果是R类型的对象。包含方法：R apply(T t);&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;center&#34;&gt;Predicate&lt;T&gt;&lt;br/&gt;断定型接口&lt;/td&gt;
&lt;td&gt;T&lt;/td&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;确定类型为T的对象是否满足某约束，并返回boolean 值。包含方法boolean test(T t);&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;3方法引用与构造器引用&#34;&gt;&lt;a href=&#34;#3方法引用与构造器引用&#34; class=&#34;headerlink&#34; title=&#34;3方法引用与构造器引用&#34;&gt;&lt;/a&gt;3方法引用与构造器引用&lt;/h1&gt;&lt;h2 id=&#34;方法引用&#34;&gt;&lt;a href=&#34;#方法引用&#34; class=&#34;headerlink&#34; title=&#34;方法引用&#34;&gt;&lt;/a&gt;方法引用&lt;/h2&gt;&lt;p&gt;当要传递给Lambda体的操作，已经有实现的方法了，可以使用方法引用！（实现抽象方法的参数列表，必须与方法引用方法的参数列表保持一致！）方法引用：使用操作符 “ ::” 将方法名和对象或类的名字分隔开来。&lt;br&gt;如下三种主要使用情况 ：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;对象 :: 实例方法&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;类 :: 静态方法&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;li&gt;&amp;#x3D;&amp;#x3D;类 ::&amp;#x3D;&amp;#x3D;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150818.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E5%9B%BE%E7%89%8720190709150911.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;构造器引用&#34;&gt;&lt;a href=&#34;#构造器引用&#34; class=&#34;headerlink&#34; title=&#34;构造器引用&#34;&gt;&lt;/a&gt;构造器引用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;&lt;strong&gt;ClassName :: new&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;与函数式接口相结合，自动与函数式接口中方法兼容。可以把构造器引用赋值给定义的方法，与构造器参数&lt;br&gt;列表要与接口中抽象方法的参数列表一致！&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151215.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;数组引用&#34;&gt;&lt;a href=&#34;#数组引用&#34; class=&#34;headerlink&#34; title=&#34;数组引用&#34;&gt;&lt;/a&gt;数组引用&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;格式：&lt;/strong&gt; &lt;font color=&#34;red&#34;&gt;&lt;strong&gt;type[] :: new&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;h1 id=&#34;强大的-Stream-API&#34;&gt;&lt;a href=&#34;#强大的-Stream-API&#34; class=&#34;headerlink&#34; title=&#34;强大的 Stream API&#34;&gt;&lt;/a&gt;强大的 Stream API&lt;/h1&gt;&lt;h2 id=&#34;了解-Stream&#34;&gt;&lt;a href=&#34;#了解-Stream&#34; class=&#34;headerlink&#34; title=&#34;了解 Stream&#34;&gt;&lt;/a&gt;了解 Stream&lt;/h2&gt;&lt;p&gt;Java8中有两大最为重要的改变。第一个是 Lambda 表达式；另外一个则是 Stream API( java.util.stream .*) 。&lt;br&gt;&amp;#x3D;&amp;#x3D;Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数据库查询。也可以使用 Stream API 来并行执行操作。简而言之，Stream API 提供了一种高效且易于使用的处理数据的方式。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;h2 id=&#34;4-2什么是-Stream&#34;&gt;&lt;a href=&#34;#4-2什么是-Stream&#34; class=&#34;headerlink&#34; title=&#34;4.2什么是 Stream&#34;&gt;&lt;/a&gt;4.2什么是 Stream&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;流 (Stream)  到底是什么呢 ？&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;是数据渠道，用于操作数据源（集合、数组等）所生成的元素序列。&lt;/strong&gt;&lt;br&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;“集合讲的是数据，流讲的是计算！ ”&lt;/strong&gt;&lt;/font&gt;&lt;br&gt;注意：&lt;br&gt;①Stream 自己不会存储元素。&lt;br&gt;②Stream 不会改变源对象。相反，他们会返回一个持有结果的新Stream。&lt;br&gt;③Stream 操作是延迟执行的。这意味着他们会等到需要结果的时候才执行。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709151831.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-3创建Stream&#34;&gt;&lt;a href=&#34;#4-3创建Stream&#34; class=&#34;headerlink&#34; title=&#34;4.3创建Stream&#34;&gt;&lt;/a&gt;4.3创建Stream&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Java8 中的 Collection 接口被扩展，提供了两个获取流的方法 ：&lt;ul&gt;
&lt;li&gt;default Stream&lt;E&gt; stream() : 返回一个顺序流&lt;/li&gt;
&lt;li&gt;default Stream&lt;E&gt; parallelStream() : 返回一个并行流&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由数组创建流Java8 中的 Arrays 的静态方法 stream() 可以获取数组流：&lt;br&gt; static &lt;T&gt; Stream&lt;T&gt; stream(T[] array): 返回一个流&lt;br&gt;重载形式，能够处理对应基本类型的数组：&lt;br&gt; public static IntStream stream(int[] array)&lt;br&gt; public static LongStream stream(long[] array)&lt;br&gt; public static DoubleStream stream(double[] array)&lt;/p&gt;
&lt;h2 id=&#34;4-4由值创建流&#34;&gt;&lt;a href=&#34;#4-4由值创建流&#34; class=&#34;headerlink&#34; title=&#34;4.4由值创建流&#34;&gt;&lt;/a&gt;4.4由值创建流&lt;/h2&gt;&lt;p&gt;可以使用静态方法 Stream.of(), 通过显示值创建一个流。它可以接收任意数量的参数。&lt;br&gt; public static&lt;T&gt; Stream&lt;T&gt; of(T… values) : 返回一个流&lt;/p&gt;
&lt;h2 id=&#34;4-5由函数创建流：创建无限流&#34;&gt;&lt;a href=&#34;#4-5由函数创建流：创建无限流&#34; class=&#34;headerlink&#34; title=&#34;4.5由函数创建流：创建无限流&#34;&gt;&lt;/a&gt;4.5由函数创建流：创建无限流&lt;/h2&gt;&lt;p&gt;可以使用静态方法 Stream.iterate() 和Stream.generate(), 创建无限流。&lt;br&gt; 迭代&lt;br&gt;public static&lt;T&gt; Stream&lt;T&gt; iterate(final T seed, finalUnaryOperator&lt;T&gt; f)&lt;br&gt; 生成&lt;br&gt;public static&lt;T&gt; Stream&lt;T&gt; generate(Supplier&lt;T&gt; s) ;&lt;/p&gt;
&lt;h2 id=&#34;4-6Stream-的中间操作&#34;&gt;&lt;a href=&#34;#4-6Stream-的中间操作&#34; class=&#34;headerlink&#34; title=&#34;4.6Stream  的中间操作&#34;&gt;&lt;/a&gt;4.6Stream  的中间操作&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;多个 中间操作可以连接起来形成一个 流水线，除非流水线上触发终止操作，否则 中间操作不会执行任何的 处理！而在 终止操作时一次性全部 处理，称为“惰性求值”。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709174819.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/QQ%E6%88%AA%E5%9B%BE20190709175115.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175205.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-7Stream的终止操作&#34;&gt;&lt;a href=&#34;#4-7Stream的终止操作&#34; class=&#34;headerlink&#34; title=&#34;4.7Stream的终止操作&#34;&gt;&lt;/a&gt;4.7Stream的终止操作&lt;/h2&gt;&lt;p&gt;终端操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如：List、Integer，甚至是 void.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175351.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175450.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175603.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;Collector 接口中方法的实现决定了如何对流执行收集操作(如收集到 List、Set、Map)。但是 Collectors 实用类提供了很多静态方法，可以方便地创建常见收集器实例，具体方法与实例如下表：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175747.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709175855.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-8并行-流与-串行-流&#34;&gt;&lt;a href=&#34;#4-8并行-流与-串行-流&#34; class=&#34;headerlink&#34; title=&#34;4.8并行 流与 串行 流&#34;&gt;&lt;/a&gt;4.8并行 流与 串行 流&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;并行流 就是把一个内容分成多个数据块，并用不同的线程分别处理每个数据块的流&amp;#x3D;&amp;#x3D;。Java 8 中将并行进行了优化，我们可以很容易的对数据进行并行操作。Stream API 可以声明性地通过 parallel() 与sequential() 在并行流与顺序流之间进行切换。&lt;/p&gt;
&lt;h2 id=&#34;4-9练习Demo&#34;&gt;&lt;a href=&#34;#4-9练习Demo&#34; class=&#34;headerlink&#34; title=&#34;4.9练习Demo&#34;&gt;&lt;/a&gt;4.9练习Demo&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;创建Stream 的四种方式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;　　1）. 通过Collection得Stream（）方法（串行流）或者 parallelStream（）方法（并行流）创建Stream。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 1.通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;            或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test1&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//1. 通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream1 = list.stream();&lt;br&gt;        &lt;br&gt;        Stream&amp;lt;String&amp;gt; stream2 = list.parallelStream();&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2）.通过Arrays中得静态方法stream（）获取数组流&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test2&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;IntStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.stream(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&amp;#125;);&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3). 通过Stream类中得 of（）静态方法获取流&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test3&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream = Stream.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4645&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;huinnj&amp;quot;&lt;/span&gt;);&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;4）. 创建无限流(迭代、生成)&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 4. 创建无限流(迭代、生成)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test4&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//4. 创建无限流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Integer&amp;gt; stream1 = Stream.iterate(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, (x) -&amp;gt; x * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;        &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//生成(无限产生对象)&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Double&amp;gt; stream2 = Stream.generate(() -&amp;gt; Math.random());&lt;br&gt;        &lt;br&gt;    &amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;相关操作&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;313&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;package&lt;/span&gt; com._521it.StreamAPI;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; com._521it.StreamAPI.Person;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.*;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.Collectors;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.IntStream;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.stream.Stream;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Auther&lt;/span&gt;: yangxiangnan&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Date&lt;/span&gt;: 2019/7/2 17:47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * &lt;span class=&#34;hljs-doctag&#34;&gt;@Description&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StreamAPIDemo&lt;/span&gt; &amp;#123;&lt;br&gt;    List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;    &amp;#125;);&lt;br&gt;    List&amp;lt;Person&amp;gt; persons = Arrays.asList(&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;76&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;12&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;赵六&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;钱七&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;56&lt;/span&gt;, Status.BUSY),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.VOCATION),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.FREE),&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;翠花&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;女&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;34&lt;/span&gt;, Status.VOCATION)&lt;br&gt;    );&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 1.通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test1&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//1. 通过Collection得Stream（）方法（串行流）&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者 parallelStream（）方法（并行流）创建Stream&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream1 = list.stream();&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream2 = list.parallelStream();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test2&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//2. 通过Arrays中得静态方法stream（）获取数组流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;IntStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.stream(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;int&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;,&lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;&amp;#125;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test3&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//3. 通过Stream类中得 of（）静态方法获取流&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;String&amp;gt; stream = Stream.of(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4645&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;huinnj&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 创建 Stream的四种方式&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 4. 创建无限流(迭代、生成)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test4&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//4. 创建无限流&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//迭代（需要传入一个种子，也就是起始值，然后传入一个一元操作）&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Integer&amp;gt; stream1 = Stream.iterate(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, (x) -&amp;gt; x * &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//生成(无限产生对象)&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Double&amp;gt; stream2 = Stream.generate(() -&amp;gt; Math.random());&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 筛选与切片&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  filter —— 接收Lambda ，从流中排除某些元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test5&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//内部迭代：在此过程中没有进行过迭代，由Stream api进行迭代&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//中间操作：不会执行任何操作&lt;/span&gt;&lt;br&gt;        Stream&amp;lt;Person&amp;gt; stream = list.stream().filter((e) -&amp;gt; &amp;#123;&lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Stream API 中间操作&amp;quot;&lt;/span&gt;);&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; e.getAge() &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;;&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//终止操作：只有执行终止操作才会执行全部。即：延迟加载&lt;/span&gt;&lt;br&gt;        stream.forEach(System.out :: println);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test6&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Person&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;[]&amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;40&lt;/span&gt;),&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;50&lt;/span&gt;),&lt;br&gt;        &amp;#125;);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//外部迭代&lt;/span&gt;&lt;br&gt;        Iterator&amp;lt;Person&amp;gt; it = list.iterator();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; (it.hasNext()) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;person&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; it.next();&lt;br&gt;           &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(person.getAge()&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;)&amp;#123;&lt;br&gt;               System.out.println(person);&lt;br&gt;           &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * limit —— 截断流，使其元素不超过给定数量。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test7&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//过滤之后取2个值&lt;/span&gt;&lt;br&gt;        list.stream()&lt;br&gt;                .filter((e)-&amp;gt;e.getAge()&amp;gt;&lt;span class=&#34;hljs-number&#34;&gt;30&lt;/span&gt;)&lt;br&gt;                .limit(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).forEach(System.out::println);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * skip（n）—— 跳过元素，返回一个扔掉了前n个元素的流。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 若流中元素不足n个，则返回一个空，与limit（n）互补。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test8&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//跳过前2个值&lt;/span&gt;&lt;br&gt;        list.stream().skip(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;).forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * distinct —— 筛选，通过流所生成元素的hashCode（）和equals（）去除重复元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *注意：distinct 需要实体中重写hashCode（）和 equals（）方法才可以使用&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test9&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        list.stream().distinct().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *	. map ，将元素转换成其他形式或者提取信息。接收一个函数作为参数，该函数会被应用到每个元素		 *	上，并将其映射成一个新的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * map —— 映射 ，将元素转换成其他形式或者提取信息。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test10&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//将流中每一个元素都映射到map的函数中，每个元素执行这个函数，再返回&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;);&lt;br&gt;        list.stream().map((e)-&amp;gt;e.toUpperCase()).forEach(System.out::println);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//获取Person中的每一个人得名字name，再返回一个集合&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; stringList = &lt;span class=&#34;hljs-built_in&#34;&gt;this&lt;/span&gt;.list.stream().map(Person::getName).collect(Collectors.toList());&lt;br&gt;        stringList.stream().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * flatMap —— 接收一个函数作为参数，将流中的每个值都换成一个流，然后把所有流连接成一个流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test11&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;StreamAPIDemo&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;StreamAPIDemo&lt;/span&gt;();&lt;br&gt;        List&amp;lt;String&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aaa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bbb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ccc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ddd&amp;quot;&lt;/span&gt;);&lt;br&gt;        list.stream().flatMap((e) -&amp;gt; 			             s.filterCharacter(e)).forEach(System.out::println);&lt;br&gt;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//如果使用map则需要这样写&lt;/span&gt;&lt;br&gt;        list.stream().map((e) -&amp;gt; s.filterCharacter(e)).forEach((e) -&amp;gt; &amp;#123;&lt;br&gt;            e.forEach(System.out::println);&lt;br&gt;        &amp;#125;);&lt;br&gt;    &amp;#125;&lt;br&gt;	&lt;span class=&#34;hljs-comment&#34;&gt;/*&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	其实map方法就相当于Collaction的add方法，如果add的是个集合得话就会变成二维数组，而flatMap 的话就相当于Collaction的addAll方法，参数如果是集合得话，只是将2个集合合并，而不是变成二维数组。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;	*/&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * sorted有两种方法，一种是不传任何参数，叫自然排序，还有一种需要传Comparator 接口参数，叫做定制排序。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test12&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 自然排序&lt;/span&gt;&lt;br&gt;        List&amp;lt;Person&amp;gt; persons1 = list.stream().sorted().collect(Collectors.toList());&lt;br&gt;        System.out.println(persons1);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//定制排序&lt;/span&gt;&lt;br&gt;        List&amp;lt;Person&amp;gt; persons2 = list.stream().sorted((e1, e2) -&amp;gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (e1.getAge() == e2.getAge()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (e1.getAge() &amp;gt; e2.getAge()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; -&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;;&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;).collect(Collectors.toList());&lt;br&gt;        persons2.stream().forEach(System.out::println);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * allMatch —— 检查是否匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断所有状态是否都是FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test13&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;isAllBusy&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().allMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(isAllBusy);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * anyMatch —— 检查是否至少匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断是否有一个是FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test14&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().anyMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(b);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * noneMatch —— 检查是否没有匹配所有元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 判断是否没有FREE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test15&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().noneMatch((e) -&amp;gt; Status.FREE.equals(e.getStatus()));&lt;br&gt;        System.out.println(b);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * findFirst —— 返回第一个元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test16&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().findFirst();&lt;br&gt;        person.orElse(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * findAny —— 返回当前流中任意元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test17&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().findAny();&lt;br&gt;        person.orElse(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;王五&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;男&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;35&lt;/span&gt;, Status.BUSY));&lt;br&gt;        System.out.println(person);&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * count —— 返回流中元素总个数。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test18&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; persons.stream().count();&lt;br&gt;        System.out.println(count);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * max —— 返回流中最大值。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test19&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().max((e1, e2) -&amp;gt; Integer.compare(e1.getAge(), e2.getAge()));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * min —— 返回流中最小值。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test20&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        Optional&amp;lt;Person&amp;gt; person = persons.stream().min((e1, e2) -&amp;gt; Double.compare(e1.getAge(), e2.getAge()));&lt;br&gt;        System.out.println(person);&lt;br&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * reduce（T identitty，BinaryOperator）首先，需要传一个起始值，然后，传入的是一个二元运算。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test21&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Integer&amp;gt; list = Arrays.asList(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;5&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;6&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;7&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;9&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;10&lt;/span&gt;);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; list.stream().reduce(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,Integer::sum);&lt;br&gt;        System.out.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  reduce（BinaryOperator）此方法相对于上面方法来说，没有起始值，则有可能结果为空，&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     *  所以返回的值会被封装到Optional中&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;test22&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        List&amp;lt;Integer&amp;gt; list = Arrays.asList();&lt;br&gt;        Optional&amp;lt;Integer&amp;gt; sum = list.stream().reduce(Integer :: sum);&lt;br&gt;        sum.orElse(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;);&lt;br&gt;        System.out.println(sum);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 将一个字符串转换为流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; str&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; Stream&amp;lt;Character&amp;gt; &lt;span class=&#34;hljs-title function_&#34;&gt;filterCharacter&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String str)&lt;/span&gt;&amp;#123;&lt;br&gt;        List&amp;lt;Character&amp;gt; list = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (Character ch : str.toCharArray()) &amp;#123;&lt;br&gt;            list.add(ch);&lt;br&gt;        &amp;#125;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; list.stream();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;5-接口中的默认方法与静态方法&#34;&gt;&lt;a href=&#34;#5-接口中的默认方法与静态方法&#34; class=&#34;headerlink&#34; title=&#34;5.接口中的默认方法与静态方法&#34;&gt;&lt;/a&gt;5.接口中的默认方法与静态方法&lt;/h1&gt;&lt;h2 id=&#34;5-1接口中的默认方法&#34;&gt;&lt;a href=&#34;#5-1接口中的默认方法&#34; class=&#34;headerlink&#34; title=&#34;5.1接口中的默认方法&#34;&gt;&lt;/a&gt;5.1接口中的默认方法&lt;/h2&gt;&lt;p&gt;&amp;#x3D;&amp;#x3D;Java 8中允许接口中包含具有具体实现的方法，该方法称为“默认方法”，默认方法使用 &lt;font color=&#34;red&#34;&gt;default&lt;/font&gt; 关键字修饰。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709180636.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&amp;#x3D;&amp;#x3D;接口默认方法的 ” 类优先 ” 原则&amp;#x3D;&amp;#x3D;&lt;br&gt;若一个接口中定义了一个默认方法，而另外一个父类或接口中又定义了一个同名的方法时&lt;br&gt; 选择父类中的方法。如果一个父类提供了具体的实现，那么接口中具有相同名称和参数的默认方法会被忽略。&lt;br&gt; 接口冲突。如果一个父接口提供一个默认方法，而另一个接口也提供了一个具有相同名称和参数列表的方法（不管方法是否是默认方法），那么必须覆盖该方法来解决冲突&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181013.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-2接口中的静态方法&#34;&gt;&lt;a href=&#34;#5-2接口中的静态方法&#34; class=&#34;headerlink&#34; title=&#34;5.2接口中的静态方法&#34;&gt;&lt;/a&gt;5.2接口中的静态方法&lt;/h2&gt;&lt;p&gt;Java8 中，接口中允许添加静态方法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181225.png&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;6-Optional-类&#34;&gt;&lt;a href=&#34;#6-Optional-类&#34; class=&#34;headerlink&#34; title=&#34;6.Optional 类&#34;&gt;&lt;/a&gt;6.Optional 类&lt;/h1&gt;&lt;p&gt;Optional&lt;T&gt; 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。&lt;br&gt;常用方法：&lt;br&gt;Optional.of(T t) : 创建一个 Optional 实例&lt;br&gt;Optional.empty() : 创建一个空的 Optional 实例&lt;br&gt;Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例&lt;br&gt;isPresent() : 判断是否包含值&lt;br&gt;orElse(T t) : 如果调用对象包含值，返回该值，否则返回t&lt;br&gt;orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值&lt;br&gt;map(Function f): 如果有值对其处理，并返回处理后的Optional，否则返回 Optional.empty()&lt;br&gt;flatMap(Function mapper):与 map 类似，要求返回值必须是Optional&lt;/p&gt;
&lt;h2 id=&#34;一、Optional的构造方式：&#34;&gt;&lt;a href=&#34;#一、Optional的构造方式：&#34; class=&#34;headerlink&#34; title=&#34;一、Optional的构造方式：&#34;&gt;&lt;/a&gt;一、Optional的构造方式：&lt;/h2&gt;&lt;p&gt;1、Optional.of(T)&lt;/p&gt;
&lt;p&gt;该方式的入参不能为null，否则会有NPE，在确定入参不为空时使用该方式。&lt;/p&gt;
&lt;p&gt;2、Optional.ofNullable(T)&lt;/p&gt;
&lt;p&gt;该方式的入参可以为null，当入参不确定为非null时使用。&lt;/p&gt;
&lt;p&gt;3、Optional.empty()&lt;/p&gt;
&lt;p&gt;这种方式是返回一个空Optional，等效Optional.ofNullable(null)&lt;/p&gt;
&lt;h2 id=&#34;二、-如何正确使用Optional&#34;&gt;&lt;a href=&#34;#二、-如何正确使用Optional&#34; class=&#34;headerlink&#34; title=&#34;二、 如何正确使用Optional&#34;&gt;&lt;/a&gt;二、 如何正确使用Optional&lt;/h2&gt;&lt;h3 id=&#34;尽量避免使用的地方：&#34;&gt;&lt;a href=&#34;#尽量避免使用的地方：&#34; class=&#34;headerlink&#34; title=&#34;尽量避免使用的地方：&#34;&gt;&lt;/a&gt;尽量避免使用的地方：&lt;/h3&gt;&lt;p&gt;1、避免使用Optional.isPresent()来检查实例是否存在，因为这种方式和null !&amp;#x3D; obj没有区别，这样用就没什么意义了。&lt;/p&gt;
&lt;p&gt;2、避免使用Optional.get()方式来获取实例对象，因为使用前需要使用Optional.isPresent()来检查实例是否存在，否则会出现NPE问题。&lt;/p&gt;
&lt;p&gt;3、避免使用Optional作为类或者实例的属性，而应该在返回值中用来包装返回实例对象。&lt;/p&gt;
&lt;p&gt;4、避免使用Optional作为方法的参数，原因同3。&lt;/p&gt;
&lt;h3 id=&#34;正确使用方式：&#34;&gt;&lt;a href=&#34;#正确使用方式：&#34; class=&#34;headerlink&#34; title=&#34;正确使用方式：&#34;&gt;&lt;/a&gt;正确使用方式：&lt;/h3&gt;&lt;p&gt;1、实例对象存在则返回，否则提供默认值或者通过方法来设置返回值，即使用orElse&amp;#x2F;orElseGet方式：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//存在则返回&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;king&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;User&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;king&amp;quot;&lt;/span&gt;);&lt;br&gt;Optional&amp;lt;User&amp;gt; userOpt = Optional.of(king);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt;  userOpt.orElse(&lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;);&lt;br&gt;System.out.println(user.getName());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//不存在提供默认值&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;Optional&amp;lt;User&amp;gt; userOpt2 = Optional.ofNullable(user2);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;User&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;user3&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; userOpt2.orElse(unknown);&lt;br&gt;System.out.println(user3.getName());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;figure class=&#34;highlight reasonml&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs reasonml&#34;&gt; &lt;span class=&#34;hljs-comment&#34;&gt;//通过方法提供值&lt;/span&gt;&lt;br&gt;User user4 = userOpt2.&lt;span class=&#34;hljs-keyword&#34;&gt;or&lt;/span&gt;&lt;span class=&#34;hljs-constructor&#34;&gt;ElseGet(()&lt;/span&gt; -&amp;gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-constructor&#34;&gt;User(0, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;DEFAULT&amp;quot;&lt;/span&gt;)&lt;/span&gt;); &lt;br&gt;&lt;span class=&#34;hljs-module-access&#34;&gt;&lt;span class=&#34;hljs-module&#34;&gt;&lt;span class=&#34;hljs-identifier&#34;&gt;System&lt;/span&gt;.&lt;/span&gt;&lt;/span&gt;out.println(user4.get&lt;span class=&#34;hljs-constructor&#34;&gt;Name()&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不建议这样使用：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt;(userOpt.isPresent()) &amp;#123;&lt;br&gt;    System.out.println(userOpt.get().getName());&lt;br&gt;&amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//。。。&lt;/span&gt;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;2、使用ifPresent()来进行对象操作，存在则操作，否则不操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//实例存在则操作，否则不操作&lt;/span&gt;&lt;br&gt;userOpt.ifPresent(u -&amp;gt; System.out.println(u.getName()));&lt;br&gt;userOpt2.ifPresent(u -&amp;gt; System.out.println(u.getName()));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;3、使用map&amp;#x2F;flatMap来获取关联数据&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//使用map方法获取关联数据&lt;/span&gt;&lt;br&gt;        System.out.println(userOpt.map(u -&amp;gt; u.getName()).orElse(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Unknown&amp;quot;&lt;/span&gt;));&lt;br&gt;        System.out.println(userOpt2.map(u -&amp;gt; u.getName()).orElse(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Default&amp;quot;&lt;/span&gt;));&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//使用flatMap方法获取关联数据&lt;/span&gt;&lt;br&gt;        List&amp;lt;String&amp;gt; interests = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;String&amp;gt;();&lt;br&gt;        interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);interests.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;        user.setInterests(interests);&lt;br&gt;        List&amp;lt;String&amp;gt; interests2 = Optional.of(user)&lt;br&gt;                .flatMap(u -&amp;gt; Optional.ofNullable(u.getInterests()))&lt;br&gt;                .orElse(Collections.emptyList());&lt;br&gt;        System.out.println(interests2.isEmpty());&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;7-重复注解与类型注解&#34;&gt;&lt;a href=&#34;#7-重复注解与类型注解&#34; class=&#34;headerlink&#34; title=&#34;7.重复注解与类型注解&#34;&gt;&lt;/a&gt;7.重复注解与类型注解&lt;/h1&gt;&lt;p&gt;Java 8对注解处理提供了两点改进：&amp;#x3D;&amp;#x3D;可重复的注解及可用于类型的注解。&amp;#x3D;&amp;#x3D;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yangxiangnanwill/uploadImages/master/img/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20190709181750.png&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
