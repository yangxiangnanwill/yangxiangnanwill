{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"异常\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/",
            "title": "异常处理及思考",
            "date_published": "2024-01-03T13:13:21.642Z",
            "content_html": "<blockquote>\n<p>Java中应该如何处理异常，这个话题看似简单，不就是<code>try...catch</code>嘛，但是往往BUG更容易出现在一些简单地、我们更容易忽略的地方。</p>\n<p>一个好的异常处理能让开发人员快速定位异常信息和修复问题，同时也能更好的让使用人员进进行捕获和处理异常信息。</p>\n</blockquote>\n<h1 id=\"使用finally或try…with…resource关闭资源\"><a href=\"#使用finally或try…with…resource关闭资源\" class=\"headerlink\" title=\"使用finally或try…with…resource关闭资源\"></a>使用finally或try…with…resource关闭资源</h1><p>如果我们在try代码块中需要使用到一些资源，比如<code>InputStream</code>，在使用完之后我们需要将资源关闭。</p>\n<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">incorrectRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;d:\\\\a.txt&quot;</span>);<br>        inputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file);<br>        <span class=\"hljs-comment\">// read something</span><br>        inputStream.close();<br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>在上面这段代码中，只要在文件读取时没有出现异常，这段代码是可以正常工作的，但是只要在try块中的close()方法中抛出异常，资源就不会被关闭。</p>\n<p>所以这种情况我们应该将资源关闭的代码放在finally中或者使用try…with…resource语句。</p>\n<p>应该使用finally，在finally块中的代码不管是否出现异常，都会被执行，因此可以确保资源对象被关闭。</p>\n<p>正确示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">correctRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">inputStream</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;d:\\\\a.txt&quot;</span>);<br>        inputStream = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file);<br>        <span class=\"hljs-comment\">// read something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (FileNotFoundException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件未找到&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;文件读取异常&quot;</span>, e);<br>    &#125;<span class=\"hljs-keyword\">finally</span>&#123;<br>        inputStream.close();<br>        <span class=\"hljs-comment\">//或者使用IoUtil工具等关闭流，eg:IoUtil.close(inputStream);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用try…with…resource\"><a href=\"#使用try…with…resource\" class=\"headerlink\" title=\"使用try…with…resource\"></a>使用try…with…resource</h1><blockquote>\n<p>随着资源使用的增多，当打开多个资源是对应的资源关闭也是一个问题。因为资源打开的越多，finally中嵌套的次数越多，这将导致大量的无用代码，从而导致代码的臃肿。</p>\n<p>try…with…resource正是java 1.7中新增的语法糖功能，而通过这个语法糖功能，无需我们手动的关闭资源，程序会自动关闭我们打开的资源。</p>\n<p>对应的条件：</p>\n<ul>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭</strong>​**&lt;&#x2F;font&gt;**</li>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源</strong>​**&lt;&#x2F;font&gt;**</li>\n<li><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>越晚声明的对象，会越早被close掉,即先开后闭原则</strong>​**&lt;&#x2F;font&gt;**</li>\n</ul>\n</blockquote>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">correctRead</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(javaFile);<br>    <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">fileLen</span> <span class=\"hljs-operator\">=</span> (<span class=\"hljs-type\">int</span>) file.length();<br>    <span class=\"hljs-type\">byte</span>[] bytes = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span>[fileLen];<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file)) &#123;<br>        is.read(bytes);<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">content</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(bytes, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br>        System.out.println(<span class=\"hljs-string\">&quot;content = \\n&quot;</span> + content);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IOException ioException) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;流关闭异常&quot;</span>, ioException);<br>        ioException.printStackTrace();<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"使用更明确的异常\"><a href=\"#使用更明确的异常\" class=\"headerlink\" title=\"使用更明确的异常\"></a>使用更明确的异常</h1><p>如果我们的方法需要向外抛出异常，那么异常类型越具体越好。因为在外部调用你代码的其他人对你内部的实现逻辑可能并不清楚，所以要确保能提供给他尽可能多的信息，可以让别人在使用你的方法时更容易理解，这样调用方可以更好地处理抛出的异常。</p>\n<p>比如，在你的方法内容抛出<code>NumberFormatException</code>比抛出<code>IllegalArgumentException</code>或者直接抛出<code>Exception</code>，所代表的含义就会更明确。</p>\n<h1 id=\"方法注释中对异常进行说明\"><a href=\"#方法注释中对异常进行说明\" class=\"headerlink\" title=\"方法注释中对异常进行说明\"></a>方法注释中对异常进行说明</h1><p>如果你的方法声明了可能会抛出异常，那么在方法的文档注释中，应该对异常进行说明。这和上一条的目的一样，都是为了让方法的调用者能提前获得更多的信息，方便他避免在调用你方法时出现异常，或者更明确如果进行异常处理。</p>\n<p>所以，我们应该在方法的文档注释中添加@throws声明，并说明什么情况下会抛出对应的异常。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">     * 获取数据库连接</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@param</span> cfg                     数据库信息</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@return</span>                        数据库连接信息</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@throws</span> ClassNotFoundException 数据库驱动获取异常</span><br><span class=\"hljs-comment\">     * <span class=\"hljs-doctag\">@throws</span> SQLException           数据库连接异常</span><br><span class=\"hljs-comment\">     */</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> Connection <span class=\"hljs-title function_\">getConnect</span><span class=\"hljs-params\">(DataSourceConfig cfg)</span> <span class=\"hljs-keyword\">throws</span> ClassNotFoundException, SQLException &#123;<br>    Class.forName(cfg.getDriverClass());<br>    <span class=\"hljs-keyword\">return</span> DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUserName(), cfg.getPassword());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"在异常中携带足够的描述信息\"><a href=\"#在异常中携带足够的描述信息\" class=\"headerlink\" title=\"在异常中携带足够的描述信息\"></a>在异常中携带足够的描述信息</h1><p>这一点和前两条做法的目的类似。在异常中携带足够的描述信息，是为了在出现该异常时，能够在日志文件中查看异常信息时，能看到更有用的信息。</p>\n<p>所以我们应该尽可能准确地描述出为什么抛出了这个异常，并提供最相关的数据信息让别人定位。</p>\n<p>当然这里也不能太极端，你洋洋洒洒写一篇小作文，应该使用简短的一段信息描述，让运维同事能了解到这个问题的严重性，更轻松地分析问题所在。</p>\n<p>也不用提供一堆额外的冗余信息，尽量做到足够精准。比如当你再创建一个Long对象时如果传入一个字符串，就会抛出<code>NumberFormatException</code>。</p>\n<p><code>NumberFormatException</code>的类名已经告诉我们出现的是数字格式化异常，所以在<code>message</code>中只需要提供输入的字符串。如果你定义的异常类名不能很明确的表达出是什么异常，比如<code>BusinessException</code>，你就应该在<code>message</code>中表达出更多的信息。</p>\n<p>示例如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-type\">Long</span> <span class=\"hljs-variable\">sss</span> <span class=\"hljs-operator\">=</span> Long.valueOf(<span class=\"hljs-string\">&quot;sss&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式化异常&quot;</span>, e);<br>    &#125;<br>&#125;<br><br><span class=\"hljs-comment\">/**</span><br><span class=\"hljs-comment\">  * 自定义异常</span><br><span class=\"hljs-comment\">  */</span><br><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CustomException</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_\">RuntimeException</span> &#123;<br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">()</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>();<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">(String message)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(message);<br>    &#125;<br><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-title function_\">CustomException</span><span class=\"hljs-params\">(String message, Throwable cause)</span> &#123;<br>        <span class=\"hljs-built_in\">super</span>(message, cause);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>控制台打印信息如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">Exception in thread <span class=\"hljs-string\">&quot;main&quot;</span> ExceptionTest$CustomException: 数字格式化异常<br>\tat ExceptionTest.main(ExceptionTest.java:<span class=\"hljs-number\">77</span>)<br>Caused by: java.lang.NumberFormatException: For input string: <span class=\"hljs-string\">&quot;sss&quot;</span><br>\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:<span class=\"hljs-number\">65</span>)<br>\tat java.lang.Long.parseLong(Long.java:<span class=\"hljs-number\">589</span>)<br>\tat java.lang.Long.valueOf(Long.java:<span class=\"hljs-number\">803</span>)<br>\tat ExceptionTest.main(ExceptionTest.java:<span class=\"hljs-number\">75</span>)<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"先捕获更明确的异常\"><a href=\"#先捕获更明确的异常\" class=\"headerlink\" title=\"先捕获更明确的异常\"></a>先捕获更明确的异常</h1><p>一般在我们使用的IDE中，如果当你在做异常捕获时，先捕获了不太具体的异常比如<code>Exception</code>，然后再捕获更具体的异常如<code>IOException</code>，都会提示我们后面的catch块无法到达。所以我们应该先捕获最具体的异常类，将不太具体的异常类的捕获放在最后。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">catchException</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        doSomthing(...)<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;格式异常&quot;</span>, e);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (IllegalArgumentException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;非法参数&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要捕获Throwable\"><a href=\"#不要捕获Throwable\" class=\"headerlink\" title=\"不要捕获Throwable\"></a>不要捕获<code>Throwable</code></h1><blockquote>\n<p><code>Throwable</code>是所有<code>Exception</code>和<code>Error</code>的父类。</p>\n</blockquote>\n<p>虽然可以在<code>catch</code>块中捕获它，但是我们不应该这样去做。因为如果使用了<code>Throwable</code>，那么不仅会对所有抛出的<code>Exception</code>进行捕获，还会捕获所有的<code>Error</code>。</p>\n<p>而当我们的程序抛出<code>Error</code>时表示是一个无法处理的严重问题，例如典型的<code>OutofMemoryError</code>，<code>StackOverflowError</code>等，这两个<code>Error</code>都是由程序无法控制并且不能处理的情况引起的。所以说，最好不要在你的<code>catch</code>中捕获<code>Throwable</code>，除非你非常确定<code>try</code>块中的代码抛出的是可以处理的异常情况。</p>\n<p><strong>&lt;font color&#x3D;&quot;red&quot;&gt;<strong>​</strong>错误示例如下：</strong>​**&lt;&#x2F;font&gt;**</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">catchThrowable</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (Throwable t) &#123;<br>        <span class=\"hljs-comment\">// 不要这样做</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要将异常忽略\"><a href=\"#不要将异常忽略\" class=\"headerlink\" title=\"不要将异常忽略\"></a>不要将异常忽略</h1><p>在你开发的时候可能非常确定不会抛出异常，并且在你开发时确实没有发生过抛出异常的情况，所以你在<code>catch</code>块中没有对异常做任何处理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doNotIgnoreExceptions</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>\t\t<span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-comment\">// 认为永远不会执行到这里</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>但是，你其实不确定在将来会不会有人在你的try块中添加新的代码，并且他可能也不会意识到他添加的代码会导致有异常抛出，这将会导致在线上真的有异常产生，但是没有一个人知道。</p>\n<p>所以，你至少应该在catch中打印一行日志，告诉同事，“警报，这里出现了一个不可能会出现的异常”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">doNotIgnoreExceptions</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>\t\t<span class=\"hljs-comment\">// 一些业务代码</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>\t\tlog.error(<span class=\"hljs-string\">&quot;警报，这里出现了一个不可能会出现的异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"不要打印日志后又将异常抛出\"><a href=\"#不要打印日志后又将异常抛出\" class=\"headerlink\" title=\"不要打印日志后又将异常抛出\"></a>不要打印日志后又将异常抛出</h1><p>这一条可能绝大多数人都会犯过，我见过非常多别人的代码在异常处理时，先打印了一行异常日志，然后将异常抛出，或者转成一个<code>RuntimeException</code>抛出。</p>\n<p>甚至在一些开源框架中都有出现过。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCatchEx</span><span class=\"hljs-params\">()</span> &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Long</span>(<span class=\"hljs-string\">&quot;will&quot;</span>);<br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        log.error(<span class=\"hljs-string\">&quot;数字格式异常&quot;</span>, e);<br>        <span class=\"hljs-keyword\">throw</span> e;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>你可能会认为这样做很直观，也没什么错，让调用你方法的人去处理就好了。但是这样一来，在日志中会对抛出的一个异常打印多条错误信息。</p>\n<p>重复的日志并没有带来任何有价值的信息，参考上面第4条中描述，在异常信息中应该携带足够的信息，并且要做到精准。如果需要在添加其他信息，你应该将捕获到的异常封装在你的自定义异常中再进行抛出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wrapException</span><span class=\"hljs-params\">(String input)</span> <span class=\"hljs-keyword\">throws</span> CustomException &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// do something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>所以，我们应该只有在想对异常进行处理时捕获，否则就应该在抛出去，并且在方法前面上加以说明，让调用方去处理。</p>\n<h1 id=\"在包装异常时使用原始异常\"><a href=\"#在包装异常时使用原始异常\" class=\"headerlink\" title=\"在包装异常时使用原始异常\"></a>在包装异常时使用原始异常</h1><p>通常在项目开发时，都会有一套自定义的异常，用于将API中的标准异常封装到自定义异常中，可以用于在外层做一些统一的异常处理。</p>\n<p>但是我们在使用自定义异常对原始异常进行封装时，需要确保将原始异常作为cause保存在自定义异常中，否则你在外层将会丢失原始异常的堆栈跟踪信息，到你你无法通过异常信息分析抛出异常的具体原因。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">wrapException</span><span class=\"hljs-params\">(String input)</span> <span class=\"hljs-keyword\">throws</span> CustomException &#123;<br>    <span class=\"hljs-keyword\">try</span> &#123;<br>        <span class=\"hljs-comment\">// do something</span><br>    &#125; <span class=\"hljs-keyword\">catch</span> (NumberFormatException e) &#123;<br>        <span class=\"hljs-comment\">// 将e作为构造参数中的cause</span><br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomException</span>(<span class=\"hljs-string\">&quot;数字格式转换异常&quot;</span>, e);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>在抛出或者捕获异常时，我们应该考虑很多不同的事情，上面所说的大多数都是为了提高代码的可读性和提供给别人的API更易用。</p>\n<p>通常异常不光是一种错误处理机制，同时还具备一定的信息媒介作用。我们应该遵循这些异常处理的规则和最佳实践，写出更规范，不让别人吐槽的好代码。</p>\n",
            "tags": [
                "思考",
                "异常"
            ]
        }
    ]
}