<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Will • Posts by &#34;异常&#34; tag</title>
        <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</link>
        <description>愿你一生努力，一生被爱</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 21:13:21 +0800</lastBuildDate>
        <category>开发习惯</category>
        <category>思考</category>
        <category>思维习惯</category>
        <category>感言</category>
        <category>Docker</category>
        <category>LINUX</category>
        <category>Node</category>
        <category>前端</category>
        <category>Nvm</category>
        <category>CentOS</category>
        <category>Linux</category>
        <category>Crontab</category>
        <category>Jenkins</category>
        <category>IDEA</category>
        <category>Alibaba Cloud Toolkit</category>
        <category>Archery</category>
        <category>MySql</category>
        <category>工具</category>
        <category>Maven</category>
        <category>Git</category>
        <category>JAVA</category>
        <category>shell</category>
        <category>信息安全等级保护认证</category>
        <category>系统认证</category>
        <category>读书笔记</category>
        <category>BeetlSql</category>
        <category>Beetl</category>
        <category>异常</category>
        <category>Java IO-初识IO</category>
        <category>Spring</category>
        <category>SpringCloud</category>
        <category>SpringCloud Alibaba</category>
        <category>枚举</category>
        <category>POI</category>
        <category>Spring Boot</category>
        <category>VinUtil</category>
        <category>VerificationCode</category>
        <category>SOAR</category>
        <category>其他</category>
        <category>ProtoBuffer</category>
        <category>博客园</category>
        <category>博客</category>
        <category>MongoDb</category>
        <category>Lombok工具库详解</category>
        <category>常用开发库</category>
        <category>JSON类库详解</category>
        <category>Hutool</category>
        <category>工具类</category>
        <category>Spring常用工具类</category>
        <category>异步编程</category>
        <category>线程</category>
        <category>方法论</category>
        <category>开源协议</category>
        <category>CentOS7</category>
        <category>MongoDB</category>
        <category>Redis</category>
        <category>VMware</category>
        <category>Typora</category>
        <category>PostMan</category>
        <category>Java8</category>
        <category>特性</category>
        <category>JDBC</category>
        <category>Mysql</category>
        <category>EasyExcel</category>
        <category>日志类库详解</category>
        <category>Script</category>
        <category>设计模式</category>
        <category>MyBatis</category>
        <category>Apache Common</category>
        <category>Google Guava</category>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/</guid>
            <title>异常处理及思考</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/JAVA%E7%89%B9%E6%80%A7/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E5%8F%8A%E6%80%9D%E8%80%83/</link>
            <category>思考</category>
            <category>异常</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;Java中应该如何处理异常，这个话题看似简单，不就是&lt;code&gt;try...catch&lt;/code&gt;嘛，但是往往BUG更容易出现在一些简单地、我们更容易忽略的地方。&lt;/p&gt;
&lt;p&gt;一个好的异常处理能让开发人员快速定位异常信息和修复问题，同时也能更好的让使用人员进进行捕获和处理异常信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;使用finally或try…with…resource关闭资源&#34;&gt;&lt;a href=&#34;#使用finally或try…with…resource关闭资源&#34; class=&#34;headerlink&#34; title=&#34;使用finally或try…with…resource关闭资源&#34;&gt;&lt;/a&gt;使用finally或try…with…resource关闭资源&lt;/h1&gt;&lt;p&gt;如果我们在try代码块中需要使用到一些资源，比如&lt;code&gt;InputStream&lt;/code&gt;，在使用完之后我们需要将资源关闭。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;错误示例如下：&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;incorrectRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:\\a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;        inputStream = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// read something&lt;/span&gt;&lt;br&gt;        inputStream.close();&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件未找到&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件读取异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在上面这段代码中，只要在文件读取时没有出现异常，这段代码是可以正常工作的，但是只要在try块中的close()方法中抛出异常，资源就不会被关闭。&lt;/p&gt;
&lt;p&gt;所以这种情况我们应该将资源关闭的代码放在finally中或者使用try…with…resource语句。&lt;/p&gt;
&lt;p&gt;应该使用finally，在finally块中的代码不管是否出现异常，都会被执行，因此可以确保资源对象被关闭。&lt;/p&gt;
&lt;p&gt;正确示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;correctRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;inputStream&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;d:\\a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;        inputStream = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// read something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (FileNotFoundException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件未找到&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;文件读取异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;span class=&#34;hljs-keyword&#34;&gt;finally&lt;/span&gt;&amp;#123;&lt;br&gt;        inputStream.close();&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//或者使用IoUtil工具等关闭流，eg:IoUtil.close(inputStream);&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;使用try…with…resource&#34;&gt;&lt;a href=&#34;#使用try…with…resource&#34; class=&#34;headerlink&#34; title=&#34;使用try…with…resource&#34;&gt;&lt;/a&gt;使用try…with…resource&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;随着资源使用的增多，当打开多个资源是对应的资源关闭也是一个问题。因为资源打开的越多，finally中嵌套的次数越多，这将导致大量的无用代码，从而导致代码的臃肿。&lt;/p&gt;
&lt;p&gt;try…with…resource正是java 1.7中新增的语法糖功能，而通过这个语法糖功能，无需我们手动的关闭资源，程序会自动关闭我们打开的资源。&lt;/p&gt;
&lt;p&gt;对应的条件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;资源（resource）是指在程序完成后，必须关闭的对象。try-with-resources 语句确保了每个资源在语句结束时关闭&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;所有实现了 java.lang.AutoCloseable 接口（其中，它包括实现了 java.io.Closeable 的所有对象），可以使用作为资源&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;越晚声明的对象，会越早被close掉,即先开后闭原则&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;correctRead&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(javaFile);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;fileLen&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt;) file.length();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] bytes = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;byte&lt;/span&gt;[fileLen];&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file)) &amp;#123;&lt;br&gt;        is.read(bytes);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;content&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(bytes, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;content = \n&amp;quot;&lt;/span&gt; + content);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IOException ioException) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;流关闭异常&amp;quot;&lt;/span&gt;, ioException);&lt;br&gt;        ioException.printStackTrace();&lt;br&gt;    &amp;#125;;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;使用更明确的异常&#34;&gt;&lt;a href=&#34;#使用更明确的异常&#34; class=&#34;headerlink&#34; title=&#34;使用更明确的异常&#34;&gt;&lt;/a&gt;使用更明确的异常&lt;/h1&gt;&lt;p&gt;如果我们的方法需要向外抛出异常，那么异常类型越具体越好。因为在外部调用你代码的其他人对你内部的实现逻辑可能并不清楚，所以要确保能提供给他尽可能多的信息，可以让别人在使用你的方法时更容易理解，这样调用方可以更好地处理抛出的异常。&lt;/p&gt;
&lt;p&gt;比如，在你的方法内容抛出&lt;code&gt;NumberFormatException&lt;/code&gt;比抛出&lt;code&gt;IllegalArgumentException&lt;/code&gt;或者直接抛出&lt;code&gt;Exception&lt;/code&gt;，所代表的含义就会更明确。&lt;/p&gt;
&lt;h1 id=&#34;方法注释中对异常进行说明&#34;&gt;&lt;a href=&#34;#方法注释中对异常进行说明&#34; class=&#34;headerlink&#34; title=&#34;方法注释中对异常进行说明&#34;&gt;&lt;/a&gt;方法注释中对异常进行说明&lt;/h1&gt;&lt;p&gt;如果你的方法声明了可能会抛出异常，那么在方法的文档注释中，应该对异常进行说明。这和上一条的目的一样，都是为了让方法的调用者能提前获得更多的信息，方便他避免在调用你方法时出现异常，或者更明确如果进行异常处理。&lt;/p&gt;
&lt;p&gt;所以，我们应该在方法的文档注释中添加@throws声明，并说明什么情况下会抛出对应的异常。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * 获取数据库连接&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@param&lt;/span&gt; cfg                     数据库信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@return&lt;/span&gt;                        数据库连接信息&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@throws&lt;/span&gt; ClassNotFoundException 数据库驱动获取异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     * &lt;span class=&#34;hljs-doctag&#34;&gt;@throws&lt;/span&gt; SQLException           数据库连接异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;     */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; Connection &lt;span class=&#34;hljs-title function_&#34;&gt;getConnect&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(DataSourceConfig cfg)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; ClassNotFoundException, SQLException &amp;#123;&lt;br&gt;    Class.forName(cfg.getDriverClass());&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;return&lt;/span&gt; DriverManager.getConnection(cfg.getJdbcUrl(), cfg.getUserName(), cfg.getPassword());&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;在异常中携带足够的描述信息&#34;&gt;&lt;a href=&#34;#在异常中携带足够的描述信息&#34; class=&#34;headerlink&#34; title=&#34;在异常中携带足够的描述信息&#34;&gt;&lt;/a&gt;在异常中携带足够的描述信息&lt;/h1&gt;&lt;p&gt;这一点和前两条做法的目的类似。在异常中携带足够的描述信息，是为了在出现该异常时，能够在日志文件中查看异常信息时，能看到更有用的信息。&lt;/p&gt;
&lt;p&gt;所以我们应该尽可能准确地描述出为什么抛出了这个异常，并提供最相关的数据信息让别人定位。&lt;/p&gt;
&lt;p&gt;当然这里也不能太极端，你洋洋洒洒写一篇小作文，应该使用简短的一段信息描述，让运维同事能了解到这个问题的严重性，更轻松地分析问题所在。&lt;/p&gt;
&lt;p&gt;也不用提供一堆额外的冗余信息，尽量做到足够精准。比如当你再创建一个Long对象时如果传入一个字符串，就会抛出&lt;code&gt;NumberFormatException&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;NumberFormatException&lt;/code&gt;的类名已经告诉我们出现的是数字格式化异常，所以在&lt;code&gt;message&lt;/code&gt;中只需要提供输入的字符串。如果你定义的异常类名不能很明确的表达出是什么异常，比如&lt;code&gt;BusinessException&lt;/code&gt;，你就应该在&lt;code&gt;message&lt;/code&gt;中表达出更多的信息。&lt;/p&gt;
&lt;p&gt;示例如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String[] args)&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Long&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sss&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Long.valueOf(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sss&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式化异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  * 自定义异常&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;  */&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;RuntimeException&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;();&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String message)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(message);&lt;br&gt;    &amp;#125;&lt;br&gt;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;CustomException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String message, Throwable cause)&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-built_in&#34;&gt;super&lt;/span&gt;(message, cause);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;控制台打印信息如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;Exception in thread &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; ExceptionTest$CustomException: 数字格式化异常&lt;br&gt;	at ExceptionTest.main(ExceptionTest.java:&lt;span class=&#34;hljs-number&#34;&gt;77&lt;/span&gt;)&lt;br&gt;Caused by: java.lang.NumberFormatException: For input string: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;sss&amp;quot;&lt;/span&gt;&lt;br&gt;	at java.lang.NumberFormatException.forInputString(NumberFormatException.java:&lt;span class=&#34;hljs-number&#34;&gt;65&lt;/span&gt;)&lt;br&gt;	at java.lang.Long.parseLong(Long.java:&lt;span class=&#34;hljs-number&#34;&gt;589&lt;/span&gt;)&lt;br&gt;	at java.lang.Long.valueOf(Long.java:&lt;span class=&#34;hljs-number&#34;&gt;803&lt;/span&gt;)&lt;br&gt;	at ExceptionTest.main(ExceptionTest.java:&lt;span class=&#34;hljs-number&#34;&gt;75&lt;/span&gt;)&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;先捕获更明确的异常&#34;&gt;&lt;a href=&#34;#先捕获更明确的异常&#34; class=&#34;headerlink&#34; title=&#34;先捕获更明确的异常&#34;&gt;&lt;/a&gt;先捕获更明确的异常&lt;/h1&gt;&lt;p&gt;一般在我们使用的IDE中，如果当你在做异常捕获时，先捕获了不太具体的异常比如&lt;code&gt;Exception&lt;/code&gt;，然后再捕获更具体的异常如&lt;code&gt;IOException&lt;/code&gt;，都会提示我们后面的catch块无法到达。所以我们应该先捕获最具体的异常类，将不太具体的异常类的捕获放在最后。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;catchException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        doSomthing(...)&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;格式异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (IllegalArgumentException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;非法参数&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要捕获Throwable&#34;&gt;&lt;a href=&#34;#不要捕获Throwable&#34; class=&#34;headerlink&#34; title=&#34;不要捕获Throwable&#34;&gt;&lt;/a&gt;不要捕获&lt;code&gt;Throwable&lt;/code&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Throwable&lt;/code&gt;是所有&lt;code&gt;Exception&lt;/code&gt;和&lt;code&gt;Error&lt;/code&gt;的父类。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;虽然可以在&lt;code&gt;catch&lt;/code&gt;块中捕获它，但是我们不应该这样去做。因为如果使用了&lt;code&gt;Throwable&lt;/code&gt;，那么不仅会对所有抛出的&lt;code&gt;Exception&lt;/code&gt;进行捕获，还会捕获所有的&lt;code&gt;Error&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;而当我们的程序抛出&lt;code&gt;Error&lt;/code&gt;时表示是一个无法处理的严重问题，例如典型的&lt;code&gt;OutofMemoryError&lt;/code&gt;，&lt;code&gt;StackOverflowError&lt;/code&gt;等，这两个&lt;code&gt;Error&lt;/code&gt;都是由程序无法控制并且不能处理的情况引起的。所以说，最好不要在你的&lt;code&gt;catch&lt;/code&gt;中捕获&lt;code&gt;Throwable&lt;/code&gt;，除非你非常确定&lt;code&gt;try&lt;/code&gt;块中的代码抛出的是可以处理的异常情况。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&amp;lt;font color&amp;#x3D;&amp;quot;red&amp;quot;&amp;gt;&lt;strong&gt;​&lt;/strong&gt;错误示例如下：&lt;/strong&gt;​**&amp;lt;&amp;#x2F;font&amp;gt;**&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;catchThrowable&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (Throwable t) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 不要这样做&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要将异常忽略&#34;&gt;&lt;a href=&#34;#不要将异常忽略&#34; class=&#34;headerlink&#34; title=&#34;不要将异常忽略&#34;&gt;&lt;/a&gt;不要将异常忽略&lt;/h1&gt;&lt;p&gt;在你开发的时候可能非常确定不会抛出异常，并且在你开发时确实没有发生过抛出异常的情况，所以你在&lt;code&gt;catch&lt;/code&gt;块中没有对异常做任何处理。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doNotIgnoreExceptions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 认为永远不会执行到这里&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;但是，你其实不确定在将来会不会有人在你的try块中添加新的代码，并且他可能也不会意识到他添加的代码会导致有异常抛出，这将会导致在线上真的有异常产生，但是没有一个人知道。&lt;/p&gt;
&lt;p&gt;所以，你至少应该在catch中打印一行日志，告诉同事，“警报，这里出现了一个不可能会出现的异常”。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;doNotIgnoreExceptions&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;		&lt;span class=&#34;hljs-comment&#34;&gt;// 一些业务代码&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;		log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;警报，这里出现了一个不可能会出现的异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;不要打印日志后又将异常抛出&#34;&gt;&lt;a href=&#34;#不要打印日志后又将异常抛出&#34; class=&#34;headerlink&#34; title=&#34;不要打印日志后又将异常抛出&#34;&gt;&lt;/a&gt;不要打印日志后又将异常抛出&lt;/h1&gt;&lt;p&gt;这一条可能绝大多数人都会犯过，我见过非常多别人的代码在异常处理时，先打印了一行异常日志，然后将异常抛出，或者转成一个&lt;code&gt;RuntimeException&lt;/code&gt;抛出。&lt;/p&gt;
&lt;p&gt;甚至在一些开源框架中都有出现过。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCatchEx&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Long&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        log.error(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; e;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;你可能会认为这样做很直观，也没什么错，让调用你方法的人去处理就好了。但是这样一来，在日志中会对抛出的一个异常打印多条错误信息。&lt;/p&gt;
&lt;p&gt;重复的日志并没有带来任何有价值的信息，参考上面第4条中描述，在异常信息中应该携带足够的信息，并且要做到精准。如果需要在添加其他信息，你应该将捕获到的异常封装在你的自定义异常中再进行抛出。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wrapException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String input)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; CustomException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// do something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式转换异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;所以，我们应该只有在想对异常进行处理时捕获，否则就应该在抛出去，并且在方法前面上加以说明，让调用方去处理。&lt;/p&gt;
&lt;h1 id=&#34;在包装异常时使用原始异常&#34;&gt;&lt;a href=&#34;#在包装异常时使用原始异常&#34; class=&#34;headerlink&#34; title=&#34;在包装异常时使用原始异常&#34;&gt;&lt;/a&gt;在包装异常时使用原始异常&lt;/h1&gt;&lt;p&gt;通常在项目开发时，都会有一套自定义的异常，用于将API中的标准异常封装到自定义异常中，可以用于在外层做一些统一的异常处理。&lt;/p&gt;
&lt;p&gt;但是我们在使用自定义异常对原始异常进行封装时，需要确保将原始异常作为cause保存在自定义异常中，否则你在外层将会丢失原始异常的堆栈跟踪信息，到你你无法通过异常信息分析抛出异常的具体原因。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;wrapException&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(String input)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; CustomException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// do something&lt;/span&gt;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;catch&lt;/span&gt; (NumberFormatException e) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 将e作为构造参数中的cause&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CustomException&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;数字格式转换异常&amp;quot;&lt;/span&gt;, e);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h1&gt;&lt;p&gt;在抛出或者捕获异常时，我们应该考虑很多不同的事情，上面所说的大多数都是为了提高代码的可读性和提供给别人的API更易用。&lt;/p&gt;
&lt;p&gt;通常异常不光是一种错误处理机制，同时还具备一定的信息媒介作用。我们应该遵循这些异常处理的规则和最佳实践，写出更规范，不让别人吐槽的好代码。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
