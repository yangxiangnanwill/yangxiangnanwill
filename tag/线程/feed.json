{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"线程\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(3)-CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92%E8%AF%A6%E8%A7%A3/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(3)-CompletableFuture%20%E5%BC%82%E6%AD%A5%E7%BC%96%E6%8E%92%E8%AF%A6%E8%A7%A3/",
            "title": "CompletableFuture 异步编排详解",
            "date_published": "2024-01-03T13:13:21.656Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>查询商品详情页面逻辑比较复杂，有些数据需要远程调用，必然需要花费更多的时间。<br>假如商品详情每个页面查询，需要的如下的标准时间完成，那么用户需要10s才能完成。这里我们需采用异步查询，但是比如接口A查询商品信息，而接口B需要查询商品的SKU,接口C需要查询商品供应商等信息，如接口C必须依赖接口A或接口B的返回值。那么我们就需要使用CompletableFuture接口来实现。</p>\n</blockquote>\n<h1 id=\"一、开启异步编程\"><a href=\"#一、开启异步编程\" class=\"headerlink\" title=\"一、开启异步编程\"></a>一、开启异步编程</h1><h2 id=\"runAsync-无入参、无返回值\"><a href=\"#runAsync-无入参、无返回值\" class=\"headerlink\" title=\"runAsync:无入参、无返回值\"></a>runAsync:无入参、无返回值</h2><h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>main end ...<br>开启异步任务...<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"supplyAsync-：无入参，可以获取返回值\"><a href=\"#supplyAsync-：无入参，可以获取返回值\" class=\"headerlink\" title=\"supplyAsync ：无入参，可以获取返回值\"></a>supplyAsync ：无入参，可以获取返回值</h2><h3 id=\"代码示例-1\"><a href=\"#代码示例-1\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; cf = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;开启异步任务，我是返回值&quot;</span>;  <br>  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;获取异步任务返回值:&quot;</span> + cf.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>获取异步任务返回值:开启异步任务，我是返回值<br>main end ...<br></code></pre></td></tr></table></figure>\n<h1 id=\"二、计算完成回调\"><a href=\"#二、计算完成回调\" class=\"headerlink\" title=\"二、计算完成回调\"></a>二、计算完成回调</h1><p>当我们想第一个异步任务执行完成后，还需要做其他的事情。我们的<code>CompletableFuture</code>提供了计算完成时回调方法，<code>whenComplete</code>、<code>whenCompleteAsync</code>、<code>exceptionally</code>等接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"hljs-title function_\">whenComplete</span><span class=\"hljs-params\">(BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> Throwable&gt; action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"hljs-title function_\">whenCompleteAsync</span><span class=\"hljs-params\">(BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> Throwable&gt; action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"hljs-title function_\">whenCompleteAsync</span><span class=\"hljs-params\">(BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> Throwable&gt; action, Executor executor)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;T&gt; <span class=\"hljs-title function_\">exceptionally</span><span class=\"hljs-params\">(Function&lt;Throwable, ? extends T&gt; fn)</span><br></code></pre></td></tr></table></figure>\n\n<p><code>whenComplete</code> 可以处理正常和异常的计算结果，<code>exceptionally</code>: 处理异常情况。</p>\n<p><code>whenComplete</code>和<code>whenCompleteAsync</code> 的区别是whenComplete 是执行当前任务的线程继续执行whenComplete的任务。</p>\n<p>whenCompleteAsync： 是把whenCompleteAsync的任务继续提交给线程池来进行执行。</p>\n<h2 id=\"whenCompleteAsync\"><a href=\"#whenCompleteAsync\" class=\"headerlink\" title=\"whenCompleteAsync\"></a>whenCompleteAsync</h2><h3 id=\"代码示例-2\"><a href=\"#代码示例-2\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service).whenCompleteAsync((res,exp)-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;异步结果已经执行完成 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">if</span> (exp == <span class=\"hljs-literal\">null</span>) &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;异步执行结果为:&quot;</span> + res);  <br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;异步执行出错啦，出错信息为：&quot;</span> + exp.getMessage());  <br>            &#125;  <br>        &#125;);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<ul>\n<li>正常<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>main end ...<br>异步结果已经执行完成 ...<br>异步执行结果为:5<br></code></pre></td></tr></table></figure></li>\n<li>异常<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>main end ...<br>异步结果已经执行完成 ...<br>异步执行出错啦，出错信息为：java.lang.ArithmeticException: / by zero<br></code></pre></td></tr></table></figure>\n对于异常的捕获也可以这样写：<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>;  <br>        &#125;, service).whenCompleteAsync((res,exp)-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;异步结果已经执行完成 ...&quot;</span>);  <br>            System.out.println(<span class=\"hljs-string\">&quot;异步执行结果为:&quot;</span> + res);  <br>        &#125;).exceptionally(throwable-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;捕获到异步执行的异常信息，出错信息为：&quot;</span> + throwable.getMessage());  <br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">res</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">5</span>;  <br>            System.out.println(<span class=\"hljs-string\">&quot;返回默认异常结果：&quot;</span> + <span class=\"hljs-number\">5</span>);  <br>            <span class=\"hljs-keyword\">return</span> res;  <br>        &#125;);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n执行结果：<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>异步结果已经执行完成 ...<br>异步执行结果为:null<br>捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero<br>返回默认异常结果：5<br>main end ...<br></code></pre></td></tr></table></figure>\n我们可以看到，通过exceptionally可以捕获异步任务抛出来的异常信息，并对异常进行处理，并可以将处理结果返回。</li>\n</ul>\n<p><strong>whenComplete虽然可以得到异常信息，但是无法修改结果，exceptionally可以感知异常，同时可以返回默认值。</strong></p>\n<h1 id=\"三、handle最终处理\"><a href=\"#三、handle最终处理\" class=\"headerlink\" title=\"三、handle最终处理\"></a>三、handle最终处理</h1><p>handle和whenComplete方法类似，但是whenComplete能感知异常但是不能返回结果。只能通过exceptionally进行处理。</p>\n<p>而handle即可以获取执行结果，也可以感知异常信息，并能处理执行结果并返回。</p>\n<h2 id=\"代码示例-3\"><a href=\"#代码示例-3\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">0</span>;  <br>        &#125;, service).handleAsync((res, exp) -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;进入handleAsync方法 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">if</span> (res != <span class=\"hljs-literal\">null</span>) &#123;  <br>                <span class=\"hljs-keyword\">return</span> res * <span class=\"hljs-number\">2</span>;  <br>            &#125;  <br>            <span class=\"hljs-keyword\">if</span> (exp != <span class=\"hljs-literal\">null</span>) &#123;  <br>                System.out.println(<span class=\"hljs-string\">&quot;捕获到异步执行的异常信息，出错信息为：&quot;</span> + exp.getMessage());  <br>                <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">0</span>;  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>进入handleAsync方法 ...<br>捕获到异步执行的异常信息，出错信息为：java.lang.ArithmeticException: / by zero<br>获取异步任务返回值：0<br>main end ...<br></code></pre></td></tr></table></figure>\n<p>如果我们去掉异常信息，可以看到如下返回值，最终异步执行结果为10；最终执行结果如下：</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>进入handleAsync方法 ...<br>获取异步任务返回值：10<br>main end ...<br></code></pre></td></tr></table></figure>\n<h1 id=\"四、线程串行化\"><a href=\"#四、线程串行化\" class=\"headerlink\" title=\"四、线程串行化\"></a>四、线程串行化</h1><p>在CompletableFuture中有以下方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">thenApply</span><span class=\"hljs-params\">(Function&lt;? <span class=\"hljs-built_in\">super</span> T,? extends U&gt; fn)</span><br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">thenApplyAsync</span><span class=\"hljs-params\">(Function&lt;? <span class=\"hljs-built_in\">super</span> T,? extends U&gt; fn)</span><br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">thenApplyAsync</span><span class=\"hljs-params\">(Function&lt;? <span class=\"hljs-built_in\">super</span> T,? extends U&gt; fn, Executor executor)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAccept</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAcceptAsync</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAcceptAsync</span><span class=\"hljs-params\">(Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action,Executor executor)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenRun</span><span class=\"hljs-params\">(Runnable action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenRunAsync</span><span class=\"hljs-params\">(Runnable action)</span><br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenRunAsync</span><span class=\"hljs-params\">(Runnable action,Executor executor)</span><br></code></pre></td></tr></table></figure>\n<ul>\n<li>thenApply 方法：当一个线程依赖另一个线程时，获取上一个任务返回结果，并<strong>返回当前任务的返回值</strong>。</li>\n<li>thenAccept方法：消费处理结果，接收任务的处理结果，并消费处理，<strong>无返回结果</strong>。</li>\n<li>thenRun方法：只要上面的任务执行完成，就开始执行thenRun，只是处理完任务后，执行thenRun的后续操作。<br> thenRun 获取不到上个任务的执行结果，无返回值。</li>\n</ul>\n<h2 id=\"thenRun\"><a href=\"#thenRun\" class=\"headerlink\" title=\"thenRun\"></a>thenRun</h2><p>thenRun 不能获取上一步的执行结果，并无返回值。</p>\n<h3 id=\"代码示例-4\"><a href=\"#代码示例-4\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest3</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service).thenRun(()-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;任务2启动了...&quot;</span>);  <br>        &#125;);  <br>        System.out.println(<span class=\"hljs-string\">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>任务2启动了...<br>获取异步任务返回值：null<br>main end ...<br></code></pre></td></tr></table></figure>\n<p>如果我们需要获取上一步的执行结果，我们使用thenAccept；</p>\n<h2 id=\"thenAccept\"><a href=\"#thenAccept\" class=\"headerlink\" title=\"thenAccept\"></a>thenAccept</h2><p>消费处理结果，接收任务的处理结果，并消费处理，<strong>无返回结果</strong>。</p>\n<h3 id=\"代码示例-5\"><a href=\"#代码示例-5\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest4</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);<br>      <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service).thenAcceptAsync((res)-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;任务2启动了... res:&quot;</span> + res);  <br>        &#125;);  <br>        System.out.println(<span class=\"hljs-string\">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;   <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>任务2启动了... res:5<br>获取异步任务返回值：null<br>main end ...<br></code></pre></td></tr></table></figure>\n<p>如果我们即需要上一步执行结果，并需要返回值供别人使用，那么我们使用thenApply方法;</p>\n<h2 id=\"thenApply\"><a href=\"#thenApply\" class=\"headerlink\" title=\"thenApply\"></a>thenApply</h2><p>当一个线程依赖另一个线程时，获取上一个任务返回结果，并<strong>返回当前任务的返回值</strong>。</p>\n<h3 id=\"代码示例-6\"><a href=\"#代码示例-6\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest5</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service).thenApplyAsync((res)-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;任务2启动了... res:&quot;</span> + res);  <br>            <span class=\"hljs-keyword\">return</span> res;  <br>        &#125;);  <br>        System.out.println(<span class=\"hljs-string\">&quot;获取异步任务返回值：&quot;</span> + future.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果:</p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务 ...<br>任务2启动了... res:5<br>获取异步任务返回值：5<br>main end ...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"双任务-都执行（并）\"><a href=\"#双任务-都执行（并）\" class=\"headerlink\" title=\"双任务-都执行（并）\"></a>双任务-都执行（并）</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class=\"hljs-title function_\">thenCombine</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class=\"hljs-built_in\">super</span> T,? <span class=\"hljs-built_in\">super</span> U,? extends V&gt; fn)</span>;<br><span class=\"hljs-keyword\">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class=\"hljs-title function_\">thenCombineAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class=\"hljs-built_in\">super</span> T,? <span class=\"hljs-built_in\">super</span> U,? extends V&gt; fn)</span>;<br><span class=\"hljs-keyword\">public</span> &lt;U,V&gt; CompletionStage&lt;V&gt; <span class=\"hljs-title function_\">thenCombineAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,         BiFunction&lt;? <span class=\"hljs-built_in\">super</span> T,? <span class=\"hljs-built_in\">super</span> U,? extends V&gt; fn,Executor executor)</span>;<br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAcceptBoth</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> U&gt; action)</span>;<br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAcceptBothAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> U&gt; action)</span>;<br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">thenAcceptBothAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends U&gt; other,        BiConsumer&lt;? <span class=\"hljs-built_in\">super</span> T, ? <span class=\"hljs-built_in\">super</span> U&gt; action, Executor executor)</span>;<br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterBoth</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other,Runnable action)</span>&#125;;<br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterBothAsync</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other,Runnable action)</span> &#125;<br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterBothAsync</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other,Runnable action,        Executor executor)</span>&#125;<br></code></pre></td></tr></table></figure>\n<p><strong>两个任务必须都完成，触发该任务。</strong></p>\n<ul>\n<li>runAfterBoth 没有返回值，入参CompletionStage、action；第一个异步任务.runAfterBoth(第二个异步任务,第三个异步任务）</li>\n<li>thenAcceptBoth 可以获取两个任务的返回值。</li>\n<li>thenCombine 可以获取两个任务的返回值，并可以将任务三结果返回。</li>\n</ul>\n<h2 id=\"runAfterBoth\"><a href=\"#runAfterBoth\" class=\"headerlink\" title=\"runAfterBoth\"></a>runAfterBoth</h2><h3 id=\"代码示例-7\"><a href=\"#代码示例-7\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest6</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        f1.runAfterBothAsync(f2, () -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>main end ...<br>开启异步任务3 ...<br></code></pre></td></tr></table></figure>\n<p>可以看到，任务3是在任务1和任务2执行完成后，才执行的。</p>\n<h2 id=\"thenAcceptBoth\"><a href=\"#thenAcceptBoth\" class=\"headerlink\" title=\"thenAcceptBoth\"></a>thenAcceptBoth</h2><p>我们使用thenAcceptBoth可以感知任务1和任务2的返回值，但是thenAcceptBoth没有返回值。我们看下案例。</p>\n<h3 id=\"代码示例-8\"><a href=\"#代码示例-8\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest7</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        f1.thenAcceptBothAsync(f2, (f1Res,f2Res) -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ...,f1Res: &quot;</span> + f1Res + <span class=\"hljs-string\">&quot; f2Res: &quot;</span> + f2Res);  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>main end ...<br>开启异步任务3 ...,f1Res: 5 f2Res: will<br></code></pre></td></tr></table></figure>\n<p>我们可以看到，任务3在任务1和任务2执行后执行了，并获取了任务1和任务2的返回值。</p>\n<h2 id=\"thenCombineAsync\"><a href=\"#thenCombineAsync\" class=\"headerlink\" title=\"thenCombineAsync\"></a>thenCombineAsync</h2><p>可以获取两个任务的返回值，并可以将任务三结果返回</p>\n<h3 id=\"代码示例-9\"><a href=\"#代码示例-9\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest8</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.thenCombineAsync(f2, (f1Res, f2Res) -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ...,f1Res: &quot;</span> + f1Res + <span class=\"hljs-string\">&quot; f2Res: &quot;</span> + f2Res);  <br>            <span class=\"hljs-keyword\">return</span> f1Res + <span class=\"hljs-string\">&quot;---&gt;&quot;</span> + f2Res;  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>开启异步任务2 ...<br>开启异步任务3 ...,f1Res: 5 f2Res: will<br>f3.get() = 5---&gt;will<br>main end ...<br></code></pre></td></tr></table></figure>\n<h1 id=\"双任务-任意（或）\"><a href=\"#双任务-任意（或）\" class=\"headerlink\" title=\"双任务-任意（或）\"></a>双任务-任意（或）</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterEither</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterEitherAsync</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other, Runnable action)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">runAfterEitherAsync</span><span class=\"hljs-params\">(CompletionStage&lt;?&gt; other, Runnable action, Executor executor)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">acceptEither</span><span class=\"hljs-params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">acceptEitherAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">acceptEitherAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends T&gt; other, Consumer&lt;? <span class=\"hljs-built_in\">super</span> T&gt; action, Executor executor)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">applyToEither</span><span class=\"hljs-params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"hljs-built_in\">super</span> T, U&gt; fn)</span>;  <br>  <br><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">applyToEitherAsync</span><span class=\"hljs-params\">(CompletionStage&lt;? extends T&gt; other, Function&lt;? <span class=\"hljs-built_in\">super</span> T, U&gt; fn)</span>;<br></code></pre></td></tr></table></figure>\n<p>当两个任务中，任意一个future任务完成的时候，执行任务。</p>\n<ul>\n<li>applyToEither 两个任务有一个任务执行完成，获取它的返回值，处理任务并有新的返回值。</li>\n<li>acceptEither 两个任务有一个执行完成，获取它的返回值，处理任务，没有新的返回值。</li>\n<li>runAfterEither 两个任务有一个执行完成，不需要获取future的结果，处理任务，也没有返回值。</li>\n</ul>\n<h2 id=\"runAfterEitherAsync\"><a href=\"#runAfterEitherAsync\" class=\"headerlink\" title=\"runAfterEitherAsync\"></a>runAfterEitherAsync</h2><p>不感知结果，自己没有返回值。</p>\n<h3 id=\"代码示例-10\"><a href=\"#代码示例-10\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest9</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Void&gt; f3 = f1.runAfterEitherAsync(f2,()-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ...&quot;</span>);  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>开启异步任务3 ...<br>f3.get() = null<br>main end ...<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>\n<p>我们可以看到，任务1执行完成后，任务3不需要等待任务2执行完成，即可启动任务3。但是使用runAfterEitherAsync不能感知任务的返回值，自身也无返回值。</p>\n<h2 id=\"acceptEitherAsync\"><a href=\"#acceptEitherAsync\" class=\"headerlink\" title=\"acceptEitherAsync\"></a>acceptEitherAsync</h2><h3 id=\"代码示例-11\"><a href=\"#代码示例-11\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest10</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span>;  <br>        &#125;, service);  <br>        f1.acceptEitherAsync(f2,(res)-&gt;&#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ... res: &quot;</span>+res);  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>main end ...<br>开启异步任务3 ... res: 5<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>\n<p>可以看到，可以获取任务1的执行结果，但不返回执行结果。</p>\n<h2 id=\"applyToEither\"><a href=\"#applyToEither\" class=\"headerlink\" title=\"applyToEither\"></a>applyToEither</h2><p>可以感知结果，并返回执行结果。</p>\n<h3 id=\"代码示例-12\"><a href=\"#代码示例-12\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest11</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;Integer&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务1 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">10</span> / <span class=\"hljs-number\">2</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Integer&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>            &#125;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务2 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">6</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.applyToEitherAsync(f2, (res) -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;开启异步任务3 ... res: &quot;</span> + res);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;will&quot;</span>;  <br>        &#125;, service);  <br>        System.out.println(<span class=\"hljs-string\">&quot;f3.get() = &quot;</span> + f3.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>开启异步任务1 ...<br>开启异步任务3 ... res: 5<br>f3.get() = will<br>main end ...<br>开启异步任务2 ...<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"多任务组合\"><a href=\"#多任务组合\" class=\"headerlink\" title=\"多任务组合\"></a>多任务组合</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> CompletableFuture&lt;Void&gt; <span class=\"hljs-title function_\">allOf</span><span class=\"hljs-params\">(CompletableFuture&lt;?&gt;... cfs)</span>;<br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> CompletableFuture&lt;Object&gt; <span class=\"hljs-title function_\">anyOf</span><span class=\"hljs-params\">(CompletableFuture&lt;?&gt;... cfs)</span>;<br></code></pre></td></tr></table></figure>\n<ul>\n<li>allOf：等待所有任务完成</li>\n<li>anyOf: 只要有一个任务完成</li>\n</ul>\n<h2 id=\"allOf\"><a href=\"#allOf\" class=\"headerlink\" title=\"allOf\"></a>allOf</h2><h3 id=\"代码示例-13\"><a href=\"#代码示例-13\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest12</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品图片 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;图片地址&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品属性...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;黑色 256G&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品品牌...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;苹果手机&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Void&gt; future = CompletableFuture.allOf(f1, f2, f3);  <br>        future.get();<span class=\"hljs-comment\">//等待索引结果完成  </span><br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>查询商品图片 ...<br>查询商品属性...<br>查询商品品牌...<br>main end ...<br></code></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注：如果不使用future.get()阻塞，若其中一个任务执行时间较长，则可能会丢失任务信息。</p>\n</blockquote>\n<h2 id=\"anyOf\"><a href=\"#anyOf\" class=\"headerlink\" title=\"anyOf\"></a>anyOf</h2><h3 id=\"代码示例-14\"><a href=\"#代码示例-14\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">CompletableFutureTest13</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">// 自定义线程池  </span><br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">service</span> <span class=\"hljs-operator\">=</span> Executors.newFixedThreadPool(<span class=\"hljs-number\">5</span>);  <br>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;main start ...&quot;</span>);  <br>        CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品图片 ...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;图片地址&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品属性...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;黑色 256G&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;String&gt; f3 = f1.supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;查询商品品牌...&quot;</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;苹果手机&quot;</span>;  <br>        &#125;, service);  <br>        CompletableFuture&lt;Object&gt; future = CompletableFuture.anyOf(f1, f2, f3);  <br>        System.out.println(<span class=\"hljs-string\">&quot;future.get() = &quot;</span> + future.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;main end ...&quot;</span>);  <br>    &#125;  <br>  <br>&#125;\t<br></code></pre></td></tr></table></figure>\n<p>执行结果为： </p>\n<figure class=\"highlight txt\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs txt\">main start ...<br>查询商品图片 ...<br>查询商品属性...<br>future.get() = 图片地址<br>main end ...<br>查询商品品牌...<br></code></pre></td></tr></table></figure>",
            "tags": [
                "JAVA",
                "异步编程",
                "线程"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(1)-%E5%88%9D%E8%AF%86%E5%BC%82%E6%AD%A5/",
            "title": "异步编程(1)-初识异步",
            "date_published": "2024-01-03T13:13:21.655Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>近期博猪在负责一个风险测算的模块，其中的具体过程博猪就不细说了，但是总体的感觉就是心中有无数个草泥马在奔腾，但是现在仔细感觉还是值得写个博客来记录一下的。<br>具体场景为有些业务导入牵扯到一些计算，业务那边说是导入数据量比较庞大，所以博猪就用异步+多线程的方式处理了这个业务，本地和Linux环境跑了几遍，20个字段，2w数据，5个线程，总体耗时也就三秒左右，还是挺可观的。</p>\n</blockquote>\n<h1 id=\"什么异步编程\"><a href=\"#什么异步编程\" class=\"headerlink\" title=\"什么异步编程\"></a>什么异步编程</h1><p>Java 异步编程是一种让程序并行运行的方式，它可以让程序中的一个工作单元与主应用程序线程分开独立运行，并且等工作单元运行结束后通知主应用程序线程它的运行结果或者失败原因。使用异步编程有许多好处，例如可以提高应用程序的性能和响应能力，提高线程的利用率，减少线程间的通信开销等。<br>Java 异步编程的核心是线程池，程序员可以通过提交任务到线程池来实现异步编程。<br>Java 异步编程在现实生活中有很多应用，例如网络 IO 请求、日志打印、异步打日志、异步消息处理等。<br>具体来说,Java异步编程包括以下几个要点:</p>\n<ul>\n<li>启动异步任务:通过某种机制启动一个与主程序分离的异步任务,比如线程、Future、CompletableFuture等。</li>\n<li>异步任务独立执行:一旦异步任务启动,主程序可以继续执行,而异步任务将在后台独立运行。</li>\n<li>获取异步执行的结果(可选):主程序如果需要异步任务的结果,可以通过某种方式获取其结果,比如调用Future的get方法或给CompletionHandler传递结果。但这不是异步执行的必要条件,有的异步任务不需要返回结果。</li>\n<li>异常处理(可选):通过 completion handlers 或其他异常处理机制对异步任务可能抛出的异常进行处理。</li>\n<li>线程管理(可选):有的异步方式需要手动管理执行线程,有的则通过线程池等机制自动管理。<br>所以,总体来说,Java异步编程的关键就是启动一个与主程序分离的异步任务,并让其在后台运行,而主程序可以继续流程,不等待其完成。在需要结果或异常时,再通过相应机制获取或处理。<br>这一模式允许程序同时处理多个任务,提高了程序的并发能力和响应性。线程的自动管理也简化了手动管理线程的难度。Java提供了多种实现异步编程的方式,比如线程、Future、CompletableFuture、响应式框架等。随着Java的发展,这些方式越来越简便高效。<br>但其核心思想仍然是让异步任务独立于主程序执行,以实现并发和提高响应性。</li>\n</ul>\n",
            "tags": [
                "思考",
                "JAVA",
                "异步编程",
                "线程"
            ]
        },
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(2)-Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8C%97/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B(2)-Java%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8C%97/",
            "title": "异步编程(2)-Java异步编程指北",
            "date_published": "2024-01-03T13:13:21.655Z",
            "content_html": "<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><blockquote>\n<p>本文简要介绍一下Java中可支持异步编程的类和使用方法，方便后期回顾和汇总。</p>\n</blockquote>\n<h1 id=\"同步异步优缺点\"><a href=\"#同步异步优缺点\" class=\"headerlink\" title=\"同步异步优缺点\"></a>同步异步优缺点</h1><p>在我们平时开发中或多或少都会遇到需要调用接口来完成一个功能的需求，这个接口可以是内部系统也可以是外部的，然后等到接口返回数据了才能继续其他的业务流程，这就是传统的 <code>同步</code>模式。</p>\n<p>同步模式虽然简单但缺点也很明显，如果对方服务处理缓慢迟迟未能返回数据，或网络问题导致响应变长，就会阻塞我们调用方的线程，导致我们主流程的耗时的延迟，传统的解决方式是增加接口、网关的超时(timeout)设置，防止无限期等待。但即使这样还是会占用CPU资源。</p>\n<p>在我们做rpc远程调用，redis，数据库访问等比较耗时的网络请求时经常要面对这样的问题，这种业务场景我们可以引入<code>异步</code>的编程思想，即主流程不需要阻塞等待接口返回数据，而是继续往下执行，当真正需要这个接口返回结果时再通过回调或阻塞的方式获取，此时我们的主流程和异步任务是并行执行的。</p>\n<p>Java中实现异步主要是通过Future，CompletableFuture，Guava ListenableFuture以及一些异步响应式框架如RxJava实现。</p>\n<p>下面我们主要看下这几种组件适用的业务场景和需要注意的地方，避免踩坑。</p>\n<h1 id=\"Future\"><a href=\"#Future\" class=\"headerlink\" title=\"Future\"></a>Future</h1><p>Future 表示异步计算的结果。提供了检查计算是否完成、等待计算完成以及检索计算结果的方法。只有在计算完成后才能使用方法 get 检索结果，必要时阻止，直到准备就绪。取消是通过该方法 cancel 执行的。提供了其他方法来确定任务是正常完成还是已取消。计算完成后，无法取消计算。如果您想为了可取消性而使用Future ，但不提供可用的结果，则可以声明<code> Future&lt;?&gt;</code> 的类型并作为基础任务的结果返回 null。<br>接口信息如下图所示：<br><img src=\"https://s3.bmp.ovh/imgs/2023/05/31/b2baebe6d50661a8.png\"><br>实际开发中我们一般会结合线程池的submit配合使用，代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> java.util.concurrent.ExecutorService;  <br><span class=\"hljs-keyword\">import</span> java.util.concurrent.Executors;  <br><span class=\"hljs-keyword\">import</span> java.util.concurrent.Future;  <br>  <br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * AsyncTest 异步  </span><br><span class=\"hljs-comment\"> * <span class=\"hljs-doctag\">@author</span> will  </span><br><span class=\"hljs-comment\"> */</span><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">FutureTest</span> &#123;  <br> <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">main</span><span class=\"hljs-params\">(String[] args)</span> <span class=\"hljs-keyword\">throws</span> Exception&#123;  <br>        <span class=\"hljs-comment\">//创建线程池  </span><br>        <span class=\"hljs-type\">ExecutorService</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> Executors.newCachedThreadPool();  <br>        <span class=\"hljs-comment\">// 模拟接口调用  </span><br>        Future&lt;String&gt; submit = executor.submit(() -&gt; &#123;  <br>            Thread.sleep(<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1000</span>);  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello world&quot;</span>;  <br>        &#125;);  <br>  <br>        System.out.println(<span class=\"hljs-string\">&quot;异步执行结果 = &quot;</span> + submit.get());  <br>        System.out.println(<span class=\"hljs-string\">&quot;submit.isDone() = &quot;</span> + submit.isDone());  <br>  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n<p>简单的说我有一个任务，提交给了Future，Future替我完成这个任务，这期间我可以去做别的事情。一段时间之后，我再从Future取出结果。</p>\n<p>上面的代码有2个地方需要注意:</p>\n<ul>\n<li>不建议使用future.get()方式，而应该使用future.get(long timeout, TimeUnit unit)<br>  尤其是在生产环境一定要设置合理的超时时间，防止程序无限期等待下去</li>\n<li>另外就是要考虑异步任务执行过程中报错抛出异常的情况，需要捕获future的异常信息。<br>通过代码可以看出一些简单的异步场景可以使用Future解决，但是对于结果的获取却不是很方便，只能通过阻塞或者轮询的方式得到任务的结果。阻塞的方式相当于把异步变成了同步，显然和异步编程的初衷相违背，轮询的方式又会浪费CPU资源。</li>\n</ul>\n<p><code>Future没有提供通知的机制，就是回调，我们无法知道它什么时间完成任务。</code></p>\n<p>而且在复杂一点的情况下，比如多个异步任务的场景，一个异步任务依赖上一个异步任务的执行结果，异步任务合并等，Future无法满足需求。</p>\n<h1 id=\"ListenableFuture\"><a href=\"#ListenableFuture\" class=\"headerlink\" title=\"ListenableFuture\"></a>ListenableFuture</h1><p>Google并发包下的listenableFuture对Java原生的future做了扩展，顾名思义就是使用监听器模式实现的回调，所以叫可监听的future。</p>\n<p>要使用listenableFuture还要结合MoreExecutor线程池，MoreExecutor是对Java原生线程池的封装，比如常用的MoreExecutors.listeningDecorator(threadPool); 修改Java原生线程池的submit方法，封装了future返回listenableFuture。<br>接口信息如下图所示：<br><img src=\"https://s3.bmp.ovh/imgs/2023/05/31/38d7ecdc6230f9e8.png\"><br>代码示例如下：<br>首先还是创建线程池,模拟业务调用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">//创建线程池  </span><br><span class=\"hljs-type\">ListeningExecutorService</span> <span class=\"hljs-variable\">executor</span> <span class=\"hljs-operator\">=</span> MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());  <br><span class=\"hljs-comment\">// 模拟接口调用  </span><br>ListenableFuture&lt;String&gt; future = executor.submit(() -&gt; &#123;  <br>    Thread.sleep(<span class=\"hljs-number\">2</span>*<span class=\"hljs-number\">1000</span>);  <br>    <span class=\"hljs-comment\">// int i = 1 / 0;  </span><br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello world&quot;</span>;  <br>&#125;);<br></code></pre></td></tr></table></figure>\n<p>上面的代码是构造了一个ListenableFuture的异步任务，调用它的结果一般有两种方式：</p>\n<ul>\n<li>基于监听器(addListener)<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基于监听机制  </span><br>future.addListener(() -&gt; &#123;  <br>    <span class=\"hljs-keyword\">try</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;异步结果:&quot;</span> + future.get());  <br>    &#125; <span class=\"hljs-keyword\">catch</span> (Exception e) &#123;  <br>        e.printStackTrace();  <br>    &#125;  <br>&#125;, executor);<br></code></pre></td></tr></table></figure></li>\n<li>基于回调（addCallback）<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 基于回调机制  </span><br>Futures.addCallback(future, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FutureCallback</span>&lt;String&gt;() &#123;  <br>    <span class=\"hljs-meta\">@Override</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onSuccess</span><span class=\"hljs-params\">(<span class=\"hljs-meta\">@Nullable</span> String result)</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;异步结果:&quot;</span> + result);  <br>    &#125;  <br>    <span class=\"hljs-meta\">@Override</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">onFailure</span><span class=\"hljs-params\">(Throwable t)</span> &#123;  <br>        System.out.println(<span class=\"hljs-string\">&quot;异步结果错误:&quot;</span> + t.getMessage());  <br>    &#125;  <br>&#125;);<br></code></pre></td></tr></table></figure>\n上述代码用例可以发现我注释掉了一个<code>int i = 1 / 0</code>,在学习过程中可以放开来看看结果，对比验证一下。<br>OK，上述如果验证完毕后，可以比对看下面的汇总，加深一下使用区别。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>使用说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>addListener</td>\n<td>需要自己代码里捕获处理异常情况，最好设置超时时间</td>\n</tr>\n<tr>\n<td>addCallback</td>\n<td>把正常返回和异常情况做了分离，方便我们针对不同情况做处理</td>\n</tr>\n</tbody></table>\n<p>另外Futures里还有很多其他的api，可以满足我们负责场景，比如transform()可以处理异步任务之间的依赖情况，allAsList()将多个ListenableFuture合并成一个。</p>\n<h1 id=\"CompletableFuture\"><a href=\"#CompletableFuture\" class=\"headerlink\" title=\"CompletableFuture\"></a>CompletableFuture</h1><p>如果你们公司的jdk是8或以上的版本，那可以直接使用CompletableFuture类来实现异步编程。</p>\n<p>Java8新增的CompletableFuture类借鉴了Google Guava的ListenableFuture，它包含50多个方法，默认使用forkJoinPool线程池，提供了非常强大的Future扩展功能，可以帮助我们简化异步编程的复杂性，结合函数式编程，通过回调的方式处理计算结果，并且提供了转换和组合CompletableFuture的多种方法，可以满足大部分异步回调场景。<br>接口信息如下图所示：<br><img src=\"https://s3.bmp.ovh/imgs/2023/06/01/6aac59f5cb214601.png\"></p>\n<p>虽然方法很多但有个特征：</p>\n<ul>\n<li>以Async结尾的方法签名表示是在异步线程里执行，没有以Async结尾的方法则是由主线程调用</li>\n<li>如果参数里有Runnable类型，则没有返回结果，即纯消费的方法  </li>\n<li>如果参数里没有指定executor则默认使用forkJoinPool线程池，指定了则以指定的线程池来执行任务</li>\n</ul>\n<h2 id=\"thenApplyAsync\"><a href=\"#thenApplyAsync\" class=\"headerlink\" title=\"thenApplyAsync\"></a>thenApplyAsync</h2><h3 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><blockquote>\n<p>&#x3D;&#x3D;这里先说明一下，示例代码只关注核心功能，如果要实际使用需要考虑超时和异常情况，大家需要注意。&#x3D;&#x3D;</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CompletableFuture&lt;String&gt; f1 = CompletableFuture  <br>        .supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;...开始执行 hello&quot;</span>);  <br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hello</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;hello! &quot;</span>;  <br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">0</span>;  <br>            System.out.println(<span class=\"hljs-string\">&quot;...执行hello完毕，执行结果：&quot;</span> + hello);  <br>            <span class=\"hljs-keyword\">return</span> hello;  <br>        &#125;);  <br>CompletableFuture&lt;String&gt; f2 = f1.thenApplyAsync(s -&gt; &#123;  <br>    System.out.println(<span class=\"hljs-string\">&quot;...开始执行 world&quot;</span>);  <br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">world</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;world!&quot;</span>;  <br>    System.out.println(<span class=\"hljs-string\">&quot;...获取上一步结果,结果为：&quot;</span> + s);  <br>    System.out.println(<span class=\"hljs-string\">&quot;开始输出 &quot;</span> + world);  <br>    <span class=\"hljs-keyword\">return</span> s + world;  <br>&#125;);  <br>System.out.println(<span class=\"hljs-string\">&quot;f2.get() = &quot;</span> + f2.get());<br></code></pre></td></tr></table></figure>\n<p>在上面的代码中异步任务f2需要异步任务f1的结果才能执行，但对于我们的主线程来说，无须等到f1返回结果后再调用函数f2，即不会阻塞主流程，而是告诉CompletableFuture当执行完了f1的方法再去执行f2，只有当需要最后的结果时再获取。</p>\n<h2 id=\"thenComposeAsync\"><a href=\"#thenComposeAsync\" class=\"headerlink\" title=\"thenComposeAsync\"></a>thenComposeAsync</h2><h3 id=\"示例代码-1\"><a href=\"#示例代码-1\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CompletableFuture&lt;String&gt; f1 = CompletableFuture  <br>        .supplyAsync(() -&gt; &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;...开始执行 hello&quot;</span>);  <br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hello</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;hello! &quot;</span>;  <br>            <span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>/<span class=\"hljs-number\">0</span>;  <br>            System.out.println(<span class=\"hljs-string\">&quot;...执行hello完毕，执行结果：&quot;</span> + hello);  <br>            <span class=\"hljs-keyword\">return</span> hello;  <br>        &#125;);  <br>CompletableFuture&lt;String&gt; f2 = f1.thenComposeAsync(t -&gt; CompletableFuture.supplyAsync(()-&gt;&#123;  <br>    System.out.println(<span class=\"hljs-string\">&quot;...开始执行 world&quot;</span>);  <br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">world</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;world!&quot;</span>;  <br>    System.out.println(<span class=\"hljs-string\">&quot;...获取上一步结果,结果为：&quot;</span> + t);  <br>    System.out.println(<span class=\"hljs-string\">&quot;开始输出 &quot;</span> + world);  <br>    <span class=\"hljs-keyword\">return</span> t + world;  <br>&#125;));  <br>System.out.println(<span class=\"hljs-string\">&quot;f2.get() = &quot;</span> + f2.get());<br></code></pre></td></tr></table></figure>\n<p>上面两个案例的输出结果相同，但是两者还是有细微的差异的，差异信息如下方所示：</p>\n<table>\n<thead>\n<tr>\n<th>方法名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>thenComposeAsync</td>\n<td>将异步操作的结果保存到 CompletableFuture 中，并返回一个新的 CompletableFuture</td>\n</tr>\n<tr>\n<td>thenApplyAsync</td>\n<td>将异步操作的结果应用于输入参数，并返回一个新的 CompletableFuture</td>\n</tr>\n<tr>\n<td>通过代码注释能看出thenCompose相当于flatMap,避免<code>CompletableFuture&lt;CompletableFuture&gt;</code>这种写法。</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>这也是<code>thenCompose</code>和<code>thenApply</code>的区别，通过查看api也能看出：<br>thenApply：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">thenApply</span><span class=\"hljs-params\">(Function&lt;? <span class=\"hljs-built_in\">super</span> T,? extends U&gt; fn)</span> &#123;<span class=\"hljs-keyword\">return</span> uniApplyStage(<span class=\"hljs-literal\">null</span>, fn);<br>&#125;<br></code></pre></td></tr></table></figure>\n<p>thenCompose：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">public</span> &lt;U&gt; CompletableFuture&lt;U&gt; <span class=\"hljs-title function_\">thenCompose</span><span class=\"hljs-params\">(Function&lt;? <span class=\"hljs-built_in\">super</span> T, ? extends CompletionStage&lt;U&gt;&gt; fn)</span> &#123;<span class=\"hljs-keyword\">return</span> uniComposeStage(screenExecutor(executor), fn);<br>&#125;<br></code></pre></td></tr></table></figure>\n<h2 id=\"thenCombineAsync\"><a href=\"#thenCombineAsync\" class=\"headerlink\" title=\"thenCombineAsync\"></a>thenCombineAsync</h2><h3 id=\"示例代码-2\"><a href=\"#示例代码-2\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">long</span> <span class=\"hljs-variable\">time</span> <span class=\"hljs-operator\">=</span> System.currentTimeMillis();  <br>CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class=\"hljs-comment\">// 模拟接口耗时，1s  </span><br>    <span class=\"hljs-keyword\">try</span> &#123;  <br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class=\"hljs-comment\">// 模拟接口耗时，1s  </span><br>    <span class=\"hljs-keyword\">try</span> &#123;  <br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;world! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f3 = f1.thenCombineAsync(f2, (s1, s2) -&gt; s1 + s2);  <br>System.out.println(<span class=\"hljs-string\">&quot;异步结果:&quot;</span> + f3.get());  <br>System.out.println(<span class=\"hljs-string\">&quot;耗时:&quot;</span> + (System.currentTimeMillis() - time));<br></code></pre></td></tr></table></figure>\n<p>从代码输出结果可以看到两个异步任务f1、f2是并行执行，彼此无先后依赖顺序，<code>thenCombineAsync</code>适合将两个并行执行的异步任务的结果合并返回成一个新的future。</p>\n<p>还有一个类似的方法<code>thenAcceptBoth</code>也是合并两个future的结果，但是不会返回新的值，内部消费掉了。</p>\n<h2 id=\"applyToEitherAsync\"><a href=\"#applyToEitherAsync\" class=\"headerlink\" title=\"applyToEitherAsync\"></a>applyToEitherAsync</h2><h3 id=\"示例代码-3\"><a href=\"#示例代码-3\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CompletableFuture&lt;String&gt; f1 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class=\"hljs-comment\">// 模拟接口耗时，1s  </span><br>    <span class=\"hljs-keyword\">try</span> &#123;  <br>        Thread.sleep(<span class=\"hljs-number\">2000</span>);  <br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f2 = CompletableFuture.supplyAsync(() -&gt; &#123;  <br>    <span class=\"hljs-comment\">// 模拟接口耗时，1s  </span><br>    <span class=\"hljs-keyword\">try</span> &#123;  <br>        Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>    &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>        <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">RuntimeException</span>(e);  <br>    &#125;  <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;world! &quot;</span>;  <br>&#125;);  <br>CompletableFuture&lt;String&gt; f3 = f1.applyToEitherAsync(f2, t -&gt; t);  <br>System.out.println(<span class=\"hljs-string\">&quot;异步结果:&quot;</span> + f3.get());<br></code></pre></td></tr></table></figure>\n<p>输出的结果:world，哪个future先执行完就根据它的结果计算，取两个future最先返回的。</p>\n<p>这里要说明一点，<code>如果两个future是同时返回结果，那么applyToEitherAsync永远以第一个future的结果为准</code>，大家可以把上面代码的Thread.sleep注释掉测试下。</p>\n<p>另外acceptEither方法和这个类似，但是没有返回值。</p>\n<p><code>allOf / anyOf</code><br>前面讲的compose,combine,either都是处理两个future的方法，如果是超过2个的可以使用allOf或anyOf</p>\n<h2 id=\"allOf\"><a href=\"#allOf\" class=\"headerlink\" title=\"allOf\"></a>allOf</h2><h3 id=\"示例代码-4\"><a href=\"#示例代码-4\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CompletableFuture&lt;Void&gt; f1 = CompletableFuture.allOf(  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;world&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;!!!!!!&quot;</span>;  <br>        &#125;)  <br>);  <br>System.out.println(<span class=\"hljs-string\">&quot;f1.get() = &quot;</span> + f1.get());<br></code></pre></td></tr></table></figure>\n<p><code>allOf</code>方法是当所有的CompletableFuture都执行完后执行计算，<strong>无返回值</strong>。</p>\n<h2 id=\"anyOf\"><a href=\"#anyOf\" class=\"headerlink\" title=\"anyOf\"></a>anyOf</h2><h3 id=\"示例代码-5\"><a href=\"#示例代码-5\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">CompletableFuture&lt;Object&gt; f1 = CompletableFuture.anyOf(  <br>        CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">3000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;hello&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">2000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;world&quot;</span>;  <br>        &#125;), CompletableFuture.supplyAsync(() -&gt; &#123;  <br>            <span class=\"hljs-keyword\">try</span> &#123;  <br>                <span class=\"hljs-comment\">// 模拟接口调用耗时1秒  </span><br>                Thread.sleep(<span class=\"hljs-number\">1000</span>);  <br>            &#125; <span class=\"hljs-keyword\">catch</span> (InterruptedException e) &#123;  <br>                e.printStackTrace();  <br>            &#125;  <br>            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;!!!!!!&quot;</span>;  <br>        &#125;)  <br>);  <br>System.out.println(<span class=\"hljs-string\">&quot;f1.get() = &quot;</span> + f1.get());<br></code></pre></td></tr></table></figure>\n<p>多次执行,执行结果为”!!!!!!”，anyOf方法当任意一个CompletableFuture执行完后就会执行计算。</p>\n<p>虽然说CompletableFuture更适合I&#x2F;O场景，但使用时一定要结合具体业务，比如说有些公共方法处理异步任务时需要考虑异常情况，这时候使用<code>CompletableFuture.handle(BiFunction&lt;? super T, Throwable, ? extends U&gt; fn)</code>更合适，handle方法会处理正常计算值和异常，因此它可以屏蔽异常，避免异常继续抛出。</p>\n<p>CompletableFuture还有一个坑需要注意：如果线上流量比较大的情况下会出现响应缓慢的问题。</p>\n<p>因为CompletableFuture默认使用的线程池是forkJoinPool，当时对一台使用了CompletableFuture实现异步回调功能的接口做压测，通过监控系统发现有大量的ForkJoinPool.commonPool-worker-* 线程处于等待状态，进一步分析dump信息发现是forkJoinPool的makeCommonPool问题。<br>具体原因为：</p>\n<blockquote>\n<p>java.util.concurrent.ForkJoinPool.common.parallelism的值，那么forkJoinPool线程池的线程数就是(cpu-1)，如果我们机器是2核，这样实际执行任务的线程数只有1个，当有大量请求过来时，如果有耗时高的io操作，势必会造成更多的线程等待，进而拖累服务响应时间。</p>\n</blockquote>\n<p>解决方案一个是设置java.util.concurrent.ForkJoinPool.common.parallelism这个值(要在项目启动时指定)，或者指定线程池不使用默认的forkJoinPool。根据阿里巴巴规范建议使用自定义的线程池。</p>\n<p>那么如何比较好的设置线程数量，以下参考《Java并发编程实战》中的公式：<br>$$threads &#x3D; N CPU * U CPU * (1 + W&#x2F;C)$$</p>\n<ul>\n<li>N CPU 是处理器的核数</li>\n<li>U CPU 是期望的CPU利用率（介于0和1之间）</li>\n<li>W&#x2F;C是等待时间与计算时间的比率</li>\n</ul>\n<p>网上也有这么区分的：</p>\n<ul>\n<li>如果服务是cpu密集型的，设置为电脑的核数</li>\n<li>如果服务是io密集型的，设置为电脑的核数*2</li>\n</ul>\n<p>其实并不严谨，尤其是io密集型的还要参考QPS和web服务器的配置。</p>\n",
            "tags": [
                "JAVA",
                "异步编程",
                "线程"
            ]
        }
    ]
}