{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"apache common\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/",
            "title": "Apache Common",
            "date_published": "2024-01-03T13:13:21.652Z",
            "content_html": "<h1 id=\"Apache-Common包简介\"><a href=\"#Apache-Common包简介\" class=\"headerlink\" title=\"Apache Common包简介\"></a>Apache Common包简介</h1><p>Apache Commons是对JDK的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题，减少重复劳动。官网网址:<a href=\"http://commons.apache.org/\">http://commons.apache.org</a></p>\n<h1 id=\"Common包包含哪些类？\"><a href=\"#Common包包含哪些类？\" class=\"headerlink\" title=\"Common包包含哪些类？\"></a>Common包包含哪些类？</h1><blockquote>\n<p>请参考：<a href=\"http://commons.apache.org/\">Apache Common官方网站</a></p>\n</blockquote>\n<h2 id=\"常用包梳理\"><a href=\"#常用包梳理\" class=\"headerlink\" title=\"常用包梳理\"></a>常用包梳理</h2><p>| 包名         | 介绍     |<br>| ————- |:————-:| <br>| commons-lang      | 提供字符串处理、数值处理、对象等工具方法 |<br>| commons-collections | 集合工具类,用来操作各种集合     |<br>| commons-io         | IO流操作的工具类     |<br>| commons-beanutils  | Java Bean 操作和封装工具     |  <br>| commons-dbcp2     | 数据库连接池实现  |<br>| commons-pool2      | 对象池实现,用于数据库连接池等 |<br>| commons-fileupload | HTML文件上传工具     | <br>| commons-codec      | 编码&#x2F;解码算法,如Base64、Hex、MD5等 |  <br>| commons-net        | 网络工具,如FTP、Telnet、DNS等 |<br>| commons-configuration | 配置文件解析器   |<br>| commons-vfs        | 虚拟文件系统,对各种文件系统的包装| <br>| commons-digester   | XML解析器    | <br>| commons-logging    | 日志记录器抽象层|<br>| commons-validator  | 数据校验器|</p>\n<h3 id=\"Commons-BeanUtils\"><a href=\"#Commons-BeanUtils\" class=\"headerlink\" title=\"Commons BeanUtils\"></a>Commons BeanUtils</h3><p>针对Bean的一个工具集。由于Bean往往是有一堆get和set组成，所以BeanUtils也是在此基础上进行一些包装。它利用Java的反射机制，从动态的生成对bean的getter和setter的调用代码，到模拟创建一个动态的bean，等等。<br>这个包看似简单，却是很多开源项目的基石：如在著名的Struts和Spring Framework中，我们都能找到BeanUtils的影子。大家猜猜看，有哪位名人是BeanUtils的作者之一？没错，就是Struts的创始人Craig McClanahan。<br>一个比较常用的功能是Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。</p>\n<h4 id=\"模块介绍\"><a href=\"#模块介绍\" class=\"headerlink\" title=\"模块介绍\"></a>模块介绍</h4><table>\n<thead>\n<tr>\n<th>包名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>beanutils</td>\n<td>核心包，主要是一些常用的工具类及接口定义</td>\n</tr>\n<tr>\n<td>converters</td>\n<td>转换String到需要类型的类，实现Converter接口</td>\n</tr>\n<tr>\n<td></td>\n<td>这些转换器实现了 LocaleConverter 接口,并提供了根据本地语言环境格式化对象到字符串以及解析字符串到对象的功能。<br/>主要用途是:<br/>国际化:    根据不同语言环境解析和格式化数值<br/>本地化的 Bean 操作:    解析不同本地语言环境的请求参数到 Bean</td>\n</tr>\n<tr>\n<td>expression</td>\n<td>统一的表达式语言接口,定义表达式解析、求值和设置属性值等方法。</td>\n</tr>\n</tbody></table>\n<h4 id=\"代码案例\"><a href=\"#代码案例\" class=\"headerlink\" title=\"代码案例\"></a>代码案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-keyword\">import</span> lombok.Data;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.BeanUtils;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.ConvertUtils;  <br><span class=\"hljs-keyword\">import</span> org.apache.commons.beanutils.converters.DateConverter;  <br><span class=\"hljs-keyword\">import</span> org.junit.Test;  <br>  <br><span class=\"hljs-keyword\">import</span> java.lang.reflect.InvocationTargetException;  <br><span class=\"hljs-keyword\">import</span> java.util.Arrays;  <br><span class=\"hljs-keyword\">import</span> java.util.Date;  <br><span class=\"hljs-keyword\">import</span> java.util.HashMap;  <br><span class=\"hljs-keyword\">import</span> java.util.Map;  <br>  <br><span class=\"hljs-comment\">/**  </span><br><span class=\"hljs-comment\"> * CovertTest * <span class=\"hljs-doctag\">@author</span> will */</span><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">BeanUtilTest</span> &#123;  <br>  <br>    <span class=\"hljs-comment\">//将字符串转换为指定类型  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCovertToInteger</span><span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">i</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-string\">&quot;123&quot;</span>, Integer.class);  <br>        <span class=\"hljs-keyword\">if</span> (i <span class=\"hljs-keyword\">instanceof</span> Integer) &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;it can cast to integer&quot;</span>);  <br>            System.out.println(<span class=\"hljs-string\">&quot;the number result is &quot;</span> + (Integer) i);  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <br>            System.err.print(<span class=\"hljs-string\">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class=\"hljs-comment\">//将字符串数组转换为指定类型数组  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testConvertArrToIntegerArr</span><span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">convert</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;, Integer.class);  <br>        <span class=\"hljs-keyword\">if</span> (convert <span class=\"hljs-keyword\">instanceof</span> Integer[]) &#123;  <br>            System.out.println(<span class=\"hljs-string\">&quot;it can cast to Integer Array&quot;</span>);  <br>            Integer[] integers = (Integer[]) convert;  <br>            Arrays.stream(integers).forEach(System.out::println);  <br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;  <br>            System.err.print(<span class=\"hljs-string\">&quot;it can not cast to target Instance!&quot;</span>);  <br>        &#125;  <br>    &#125;  <br>    <span class=\"hljs-comment\">//将字符串转换为日期类型  </span><br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testCovertToDate</span> <span class=\"hljs-params\">()</span> &#123;  <br>        <span class=\"hljs-comment\">// 日期格式转换  </span><br>        <span class=\"hljs-type\">DateConverter</span> <span class=\"hljs-variable\">dateConverter</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DateConverter</span>();  <br>        dateConverter.setPatterns(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;yyyy-MM-dd&quot;</span>,<span class=\"hljs-string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>&#125;);  <br>        ConvertUtils.register(dateConverter, Date.class);  <br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">convert</span> <span class=\"hljs-operator\">=</span> ConvertUtils.convert(<span class=\"hljs-string\">&quot;2023-12-01&quot;</span>, Date.class);  <br>        System.out.println(convert);  <br>        <span class=\"hljs-comment\">// 常规时间类型转换  </span><br>        System.out.println(ConvertUtils.convert(<span class=\"hljs-string\">&quot;2023-06-30 09:53:55&quot;</span>, Date.class));  <br>    &#125;  <br>  <br>    <span class=\"hljs-meta\">@Test</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">testBeanUtil</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &#123;  <br>        Map&lt;String, Object&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashMap</span>&lt;String, Object&gt;();  <br>        map.put(<span class=\"hljs-string\">&quot;name&quot;</span>, <span class=\"hljs-string\">&quot;will&quot;</span>);  <br>        map.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;18&quot;</span>);  <br>  <br>        <span class=\"hljs-comment\">// 将map数据拷贝到Java Bean中  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.populate(p, map);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p is &quot;</span> + p);  <br>        <span class=\"hljs-comment\">// 对象拷贝  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p1</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.copyProperties(p1, p);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p1 is &quot;</span> + p1);  <br>        <span class=\"hljs-comment\">// 拷贝指定的属性  </span><br>        <span class=\"hljs-type\">Person</span> <span class=\"hljs-variable\">p2</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Person</span>();  <br>        BeanUtils.copyProperty(p2,<span class=\"hljs-string\">&quot;name&quot;</span>,<span class=\"hljs-string\">&quot;will_yang&quot;</span>);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p2 is &quot;</span> + p2);  <br>        <span class=\"hljs-comment\">// 设置指定的属性  </span><br>        BeanUtils.setProperty(p2, <span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-number\">20</span>);  <br>        System.out.println(<span class=\"hljs-string\">&quot;p2 is &quot;</span> + p2);  <br>        <span class=\"hljs-comment\">//对象克隆  </span><br>        <span class=\"hljs-type\">Object</span> <span class=\"hljs-variable\">bean</span> <span class=\"hljs-operator\">=</span> BeanUtils.cloneBean(p2);  <br>        System.out.println(<span class=\"hljs-string\">&quot;bean = &quot;</span> + bean);  <br>    &#125;  <br>  <br>    <span class=\"hljs-meta\">@Data</span>  <br>    <span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span>&#123;  <br>        <span class=\"hljs-keyword\">private</span> String name;  <br>        <span class=\"hljs-keyword\">private</span> String age;  <br>    &#125;  <br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Codec\"><a href=\"#Commons-Codec\" class=\"headerlink\" title=\"Commons Codec\"></a>Commons Codec</h2><p>是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。</p>\n<h3 id=\"二进制相关\"><a href=\"#二进制相关\" class=\"headerlink\" title=\"二进制相关\"></a>二进制相关</h3><p>二进制包主要提供16进制、Base64、Base32等的编解码工具类。</p>\n<h4 id=\"16进制（Hex类）\"><a href=\"#16进制（Hex类）\" class=\"headerlink\" title=\"16进制（Hex类）\"></a>16进制（Hex类）</h4><p>十六进制常用于将二进制以更简短的方式展示，比如MD5是128位，展现起来太长，而转换为16进制后只需要32个字符即可表示出来。<br>示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// byte数组转为16进制字符串</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hex</span> <span class=\"hljs-operator\">=</span> Hex.encodeHexString(<span class=\"hljs-string\">&quot;123&quot;</span>.getBytes());<br>System.out.println(hex);<br><span class=\"hljs-comment\">// 16进制字符串解码</span><br><span class=\"hljs-type\">byte</span>[] src = Hex.decodeHex(hex);<br>System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(src));<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"2-Base64，Base32，Base16\"><a href=\"#2-Base64，Base32，Base16\" class=\"headerlink\" title=\"2. Base64，Base32，Base16\"></a>2. Base64，Base32，Base16</h4><p>Base64是网络上最常见的用于传输二进制数据的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。Base32就是使用32个可打印字符，Base16就是使用16个（实际上相当于16进制）。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>名称</td>\n<td>编码表字符串</td>\n<td>位数不足是否会补全 &#x3D;</td>\n</tr>\n<tr>\n<td>base16</td>\n<td>数字0<del>9 和 字母 A</del>F</td>\n<td>不会，位数刚好是 4 的倍数</td>\n</tr>\n<tr>\n<td>base32</td>\n<td>大写字母A<del>Z 和 数字2</del>7</td>\n<td>会</td>\n</tr>\n<tr>\n<td>base64</td>\n<td>Base大写字母A-Z，小写字母a-z，数字0~9以及”+”，”&#x2F;“</td>\n<td>会</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// base64编码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">base64</span> <span class=\"hljs-operator\">=</span> Base64.encodeBase64String(<span class=\"hljs-string\">&quot;测试&quot;</span>.getBytes());<br>System.out.println(base64);<br><span class=\"hljs-comment\">// base64解码</span><br><span class=\"hljs-type\">byte</span>[] src = Base64.decodeBase64(base64);<br>System.out.println(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>(src));<br><span class=\"hljs-comment\">// 字符串是否是base64</span><br>Base64.isBase64(base64);<br><br><span class=\"hljs-comment\">// Base32 Base16 同理</span><br></code></pre></td></tr></table></figure>\n\n<p>Codec还提供了Base系列的流处理，以流的方式去处理Base编解码，示例如下</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 以流方式提供Base64编码和解码</span><br><span class=\"hljs-comment\">// 附：&quot;123&quot;的base64编码为&quot;MTIz&quot;</span><br><br><span class=\"hljs-comment\">// 对输入流做base64编码</span><br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(<span class=\"hljs-string\">&quot;123&quot;</span>.getBytes());<br><span class=\"hljs-type\">Base64InputStream</span> <span class=\"hljs-variable\">ebis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64InputStream</span>(is, <span class=\"hljs-literal\">true</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">enc</span> <span class=\"hljs-operator\">=</span> IOUtils.toString(ebis, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>); <span class=\"hljs-comment\">// MTIz</span><br><br><span class=\"hljs-comment\">// 对base64数据流做解码</span><br>is = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayInputStream</span>(enc.getBytes());<br><span class=\"hljs-type\">Base64InputStream</span> <span class=\"hljs-variable\">dbis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64InputStream</span>(is, <span class=\"hljs-literal\">false</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dec</span> <span class=\"hljs-operator\">=</span> IOUtils.toString(dbis, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>); <span class=\"hljs-comment\">// 123</span><br><br><span class=\"hljs-comment\">// -----------------------</span><br><br><span class=\"hljs-comment\">// 将数据做base64编码写入输出流</span><br><span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">data</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;123&quot;</span>;<br><span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">baos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-type\">Base64OutputStream</span> <span class=\"hljs-variable\">ebos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64OutputStream</span>(baos, <span class=\"hljs-literal\">true</span>);<br>IOUtils.write(data, ebos, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">enc2</span> <span class=\"hljs-operator\">=</span> baos.toString(); <span class=\"hljs-comment\">// MTIz</span><br><br><span class=\"hljs-comment\">// 将base64数据做解码写入输出流</span><br>baos = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br><span class=\"hljs-type\">Base64OutputStream</span> <span class=\"hljs-variable\">dbos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Base64OutputStream</span>(baos, <span class=\"hljs-literal\">false</span>);<br>IOUtils.write(data, dbos, <span class=\"hljs-string\">&quot;UTF-8&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">dec2</span> <span class=\"hljs-operator\">=</span> dbos.toString(); <span class=\"hljs-comment\">// 123</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"URL相关\"><a href=\"#URL相关\" class=\"headerlink\" title=\"URL相关\"></a>URL相关</h3><p>URL之所以要进行编码，是因为URL中有些字符会引起歧义。</p>\n<p>例如URL参数字符串中使用key&#x3D;value键值对这样的形式来传参，键值对之间以&amp;符号分隔，如&#x2F;s?q&#x3D;abc&amp;ie&#x3D;utf-8。如果你的value字符串中包含了&#x3D;或者&amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;和&#x3D;符号进行转义，也就是对其进行编码。</p>\n<p>又如URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。</p>\n<p>URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。</p>\n<p>编解码示例代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">URLCodec</span> <span class=\"hljs-variable\">urlCodec</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">URLCodec</span>();<br><span class=\"hljs-comment\">// url编码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">encUrl</span> <span class=\"hljs-operator\">=</span> urlCodec.encode(<span class=\"hljs-string\">&quot;http://x.com?f=哈&quot;</span>);<br>System.out.println(encUrl);<br><span class=\"hljs-comment\">// url解码</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">decUrl</span> <span class=\"hljs-operator\">=</span> urlCodec.decode(encUrl);<br>System.out.println(decUrl);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"摘要算法\"><a href=\"#摘要算法\" class=\"headerlink\" title=\"摘要算法\"></a>摘要算法</h3><p>摘要算法是一种单向的散列算法，它满足以下几个特点。</p>\n<ul>\n<li>输入长度是任意的</li>\n<li>输出长度是固定的</li>\n<li>对每一个给定的输入，计算输出是很容易的</li>\n<li>不可逆，无法通过输出推算出原数据</li>\n<li>输出不依赖于输入。就是输入数据变动一个字节结果会相差很多</li>\n</ul>\n<p>由于摘要算法以上特点，主要用于数据完整性校验。例如网上的资源一般会提供一个摘要值（一般用MD5算法），用户下载后可以通过工具对资源做MD5后和网上给定的值比较，如果不一致说明文件不完整了，可能是下载过程网络波动内容有丢失，也可能被人篡改过。</p>\n<p>也可以做数据的指纹，比如网盘秒传，就是利用摘要值做判断。客户端上传前先对文件做摘要值，传给服务端，服务端发现有相同摘要的文件说明两个文件内容是一致的，这样就无需上传直接将文件存储路径指向这个文件就可以了，既实现了秒传，还节约了服务器磁盘空间（不同用户相同内容的文件实际上指向的是同一份文件）。</p>\n<p>很多系统也将密码做md5后存储，其中这种方式并不安全。md5已经很很多公开结果了，并且使用彩虹表碰撞也很容易破解了。所以并不建议使用md5存储密码。密码推荐使用BCrypt算法。</p>\n<p>摘要算法主要有以下几个</p>\n<ul>\n<li>MD(Message Digest)：消息摘要</li>\n<li>SHA(Secure Hash Algorithm)：安全散列</li>\n<li>MAC(Message Authentication Code)：消息认证码</li>\n</ul>\n<p><strong>1. MD系列</strong></p>\n<p>主要有MD2、MD4、MD5，目前一般常用MD5</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 如果使用Java自带的api需要十多行才能实现md5算法</span><br><br><span class=\"hljs-comment\">// 对数据做md5，参数支持字符串，字节数据，输入流</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">md5</span> <span class=\"hljs-operator\">=</span> DigestUtils.md5Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>2. SHA系列</strong></p>\n<p>SHA系列有SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，SHA3-224、SHA3-256、SHA3-384、SHA3-512等。目前安全起见一般选择256以上，推荐384以上。当然摘要越长则计算耗时也越长，需要根据需求权衡。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 参数支持字符串，字节数据，输入流</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha1</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha1Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha256</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha256Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha384</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha384Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha512</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha512Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_256</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_256Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_384</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_384Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">sha3_512</span> <span class=\"hljs-operator\">=</span> DigestUtils.sha3_512Hex(<span class=\"hljs-string\">&quot;测试&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<p><strong>3. HMAC系列</strong></p>\n<p>HMAC(keyed-Hash Message Authentication Code)系列是包含密钥的散列算法，包含了MD和SHA两个系列的消息摘要算法。融合了MD，SHA：</p>\n<p>MD系列：HMacMD2，HMacMD4，HMacMD5</p>\n<p>SHA系列：HMacSHA1，HMacSHA224，HMacSHA256，HMacSHA38</p>\n<p>，HMacSHA512</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;asdf3234asdf3234asdf3234asdf3234&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">valueToDigest</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;测试数据&quot;</span>; <span class=\"hljs-comment\">// valueToDigest参数支持字节数据，流，文件等</span><br><span class=\"hljs-comment\">// 做HMAC-MD5摘要</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacMd5</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);<br><span class=\"hljs-comment\">// 做HMAC-sha摘要</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha256</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha384</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">hmacSha512</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HmacUtils</span>(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Collections\"><a href=\"#Commons-Collections\" class=\"headerlink\" title=\"Commons Collections\"></a>Commons Collections</h2><p>Apache Commons Collections 是对 java.util.Collection 的扩展。</p>\n<p>目前 <strong>Collections</strong> 包有两个：</p>\n<ul>\n<li>commons-collections</li>\n<li>commons-collections4<br>commons-collections 最新版本是3.2.2，不支持泛型，目前官方已不在维护。<br>collections4 目前最新版本是4.4，最低要求 Java8 以上。<br>相对于 collections 来说完全支持 Java8 的特性并且支持泛型，该版本无法兼容旧有版本，于是为了避免冲突改名为 collections4。推荐直接使用该版本。（注：两个版本可以共存，使用时需要注意）。<br>这里使用3.2.2版本的中包名做下介绍：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>包名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>collections</td>\n<td>CommonsCollections自定义的一组公用的接口和工具类</td>\n</tr>\n<tr>\n<td>bag</td>\n<td>实现Bag接口的一组类</td>\n</tr>\n<tr>\n<td>bidimap</td>\n<td>实现BidiMap系列接口的一组类</td>\n</tr>\n<tr>\n<td>buffer</td>\n<td>实现Buffer接口的一组类</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>实现java.util.Collection接口的一组类</td>\n</tr>\n<tr>\n<td>comparators</td>\n<td>实现java.util.Comparator接口的一组类</td>\n</tr>\n<tr>\n<td>functors</td>\n<td>Commons Collections自定义的一组功能类</td>\n</tr>\n<tr>\n<td>iterators</td>\n<td>实现java.util.Iterator接口的一组类</td>\n</tr>\n<tr>\n<td>keyvalue</td>\n<td>实现集合和键&#x2F;值映射相关的一组类</td>\n</tr>\n<tr>\n<td>list</td>\n<td>实现java.util.List接口的一组类</td>\n</tr>\n<tr>\n<td>map</td>\n<td>实现Map系列接口的一组类</td>\n</tr>\n<tr>\n<td>set</td>\n<td>实现Set系列接口的一组类</td>\n</tr>\n</tbody></table>\n<h3 id=\"工具类\"><a href=\"#工具类\" class=\"headerlink\" title=\"工具类\"></a>工具类</h3><h4 id=\"CollectionUtils\"><a href=\"#CollectionUtils\" class=\"headerlink\" title=\"CollectionUtils\"></a>CollectionUtils</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">str</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-literal\">null</span>;<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;);<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list2</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 判断是否为空（null或空list都为true）</span><br>CollectionUtils.isEmpty(list1);<br><span class=\"hljs-comment\">// 添加元素（忽略null元素）</span><br>CollectionUtils.addIgnoreNull(list1, str);<br><span class=\"hljs-comment\">// list是否包含subList中的所有元素</span><br>CollectionUtils.containsAll(list1, list2); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-comment\">// list是否包含subList中的任意一个元素</span><br>CollectionUtils.containsAny(list1, list2); <span class=\"hljs-comment\">// true</span><br><span class=\"hljs-comment\">// list1 减去 list2</span><br>CollectionUtils.subtract(list1, list2); <span class=\"hljs-comment\">// [&quot;3&quot;]</span><br><span class=\"hljs-comment\">// 合并两个list并去重</span><br>CollectionUtils.union(list1, list2); <span class=\"hljs-comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br><span class=\"hljs-comment\">// 取两个list同时存在的元素</span><br>CollectionUtils.intersection(list1, list2); <span class=\"hljs-comment\">// [1&quot;, &quot;2&quot;]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ListUtils\"><a href=\"#ListUtils\" class=\"headerlink\" title=\"ListUtils\"></a>ListUtils</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list1</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>&#125;);<br><span class=\"hljs-type\">List</span> <span class=\"hljs-variable\">list2</span> <span class=\"hljs-operator\">=</span> Arrays.asList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">String</span>[]&#123;<span class=\"hljs-string\">&quot;1&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>&#125;);<br><span class=\"hljs-comment\">// 同CollectionUtils, 返回结果为List</span><br>ListUtils.subtract(list1, list2); <span class=\"hljs-comment\">// [&quot;3&quot;]</span><br>ListUtils.union(list1, list2); <span class=\"hljs-comment\">//[&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;]</span><br>ListUtils.intersection(list1, list2); <span class=\"hljs-comment\">// [1&quot;, &quot;2&quot;]</span><br><span class=\"hljs-comment\">// 判断两个集合中的内容是否完全相同（顺序也一致）</span><br>ListUtils.isEqualList(list1, list2); <span class=\"hljs-comment\">// false</span><br><span class=\"hljs-comment\">// list1如果为null则转换为空List</span><br>ListUtils.emptyIfNull(list1);<br><span class=\"hljs-comment\">// list1中所有元素做Hash</span><br>ListUtils.hashCodeForList(list1);<br></code></pre></td></tr></table></figure>\n\n<p>除了以上介绍了两个还有 MapUtils，SetUtils，EnumerationUtils，IterableUtils 等不是很常用就不多做介绍了。</p>\n<h3 id=\"集合扩展\"><a href=\"#集合扩展\" class=\"headerlink\" title=\"集合扩展\"></a>集合扩展</h3><h4 id=\"FixedSizeList\"><a href=\"#FixedSizeList\" class=\"headerlink\" title=\"FixedSizeList\"></a>FixedSizeList</h4><p>FixedSizeList 用于装饰另一个 List 以阻止修改其大小。不支持添加、删除、清除等操作。set 方法是允许的（因为它不会改变列表大小），下面看代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br><span class=\"hljs-comment\">// 装饰一下原list</span><br>List&lt;String&gt; list = FixedSizeList.fixedSizeList(sourceList);<br>list.set(<span class=\"hljs-number\">0</span>, <span class=\"hljs-string\">&quot;11&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [11,2,3]</span><br><span class=\"hljs-comment\">// 以下改变容器size的操作会抛出异常</span><br>list.add(<span class=\"hljs-string\">&quot;4&quot;</span>); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.remove(<span class=\"hljs-string\">&quot;5&quot;</span>); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br>list.clear(); <span class=\"hljs-comment\">// UnsupportedOperationException(&quot;List is fixed size&quot;)</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"SetUniqueList\"><a href=\"#SetUniqueList\" class=\"headerlink\" title=\"SetUniqueList\"></a>SetUniqueList</h4><p>SetUniqueList 用来装饰另一个 List 以确保不存在重复元素，内部使用了 Set 来判断重复问题</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>sourceList.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br><span class=\"hljs-comment\">// 元素不重复的list</span><br>SetUniqueList&lt;String&gt; list = SetUniqueList.setUniqueList(sourceList);<br><span class=\"hljs-comment\">// 存在则不处理，不会影响原来顺序</span><br>list.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1,2]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"TransformedList\"><a href=\"#TransformedList\" class=\"headerlink\" title=\"TransformedList\"></a>TransformedList</h4><p>TransformedList 装饰另一个 List 以转换添加的对象。add 和 set 方法受此类影响。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br>sourceList.add(<span class=\"hljs-string\">&quot;1&quot;</span>);<br>sourceList.add(<span class=\"hljs-string\">&quot;2&quot;</span>);<br><span class=\"hljs-comment\">// 转换list,在添加元素的时候会通过第二个参数Transformer转换一下</span><br><span class=\"hljs-comment\">// （Transformer接口只有一个抽象方法可以使用lambda表达式）</span><br>       <br><span class=\"hljs-comment\">// transformingList不会对原list的已有元素做转换</span><br>TransformedList&lt;String&gt; list = TransformedList.transformingList(sourceList, e -&gt; e.concat(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1, 2, a_]</span><br><br><span class=\"hljs-comment\">// transformedList会对原list的已有元素做转换</span><br>list = TransformedList.transformedList(sourceList, e -&gt; e.concat(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [1_, 2_, a_]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PredicatedList\"><a href=\"#PredicatedList\" class=\"headerlink\" title=\"PredicatedList\"></a>PredicatedList</h4><p>PredicatedList 装饰另一个 List ，装饰后的 List 在添加元素的时候会调用 Predicate 接口来判断元素，匹配通过才会被添加到集合中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">List&lt;String&gt; sourceList = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;();<br><span class=\"hljs-comment\">// 在添加元素的时候会通过第二个参数Predicate判断一下是否符合要求，符合要求才添加进来</span><br>PredicatedList&lt;String&gt; list = PredicatedList.predicatedList(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayList</span>&lt;&gt;(), e -&gt; e.startsWith(<span class=\"hljs-string\">&quot;_&quot;</span>));<br>list.add(<span class=\"hljs-string\">&quot;_4&quot;</span>);<br>println(list); <span class=\"hljs-comment\">// [_4]</span><br><br><span class=\"hljs-comment\">// 以下会抛异常：java.lang.IllegalArgumentException: Cannot add Object &#x27;4&#x27;</span><br>list.add(<span class=\"hljs-string\">&quot;4&quot;</span>);<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"ListOrderedSet\"><a href=\"#ListOrderedSet\" class=\"headerlink\" title=\"ListOrderedSet\"></a>ListOrderedSet</h4><p>ListOrderedSet 有序的Set，顺序按照元素添加顺序排列，类似 List</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 有序的set，按照插入顺序排序</span><br>Set&lt;String&gt; set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListOrderedSet</span>&lt;&gt;();<br>set.add(<span class=\"hljs-string\">&quot;aa&quot;</span>);<br>set.add(<span class=\"hljs-string\">&quot;11&quot;</span>);<br>set.add(<span class=\"hljs-string\">&quot;哈哈&quot;</span>);<br>println(set); <span class=\"hljs-comment\">// [aa,11,哈哈]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"Bag\"><a href=\"#Bag\" class=\"headerlink\" title=\"Bag\"></a>Bag</h4><p>Bag 接口是带计数功能的集合扩展，它继承了 Collection 接口，可以当做集合来使用</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// bag 带计数功能的集合</span><br>Bag&lt;String&gt; bag = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HashBag</span>&lt;&gt;();<br>bag.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>bag.add(<span class=\"hljs-string\">&quot;b&quot;</span>);<br>bag.add(<span class=\"hljs-string\">&quot;a&quot;</span>);<br>println(bag.size()); <span class=\"hljs-comment\">// 3</span><br>println(bag.getCount(<span class=\"hljs-string\">&quot;a&quot;</span>)); <span class=\"hljs-comment\">// 2</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"Map扩展\"><a href=\"#Map扩展\" class=\"headerlink\" title=\"Map扩展\"></a>Map扩展</h3><h4 id=\"MultiValuedMap\"><a href=\"#MultiValuedMap\" class=\"headerlink\" title=\"MultiValuedMap\"></a>MultiValuedMap</h4><p>MultiValuedMap 和正常的 Map 有点区别，同一个 key 允许存放多个 value，这些 value 会放到一个 List 中。这个功能如果用 Java 的 Map 我们需要构造一个 <code>Map&lt;String, List&lt;String&gt;&gt;</code> 加个各种操作来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// list实现，允许value重复</span><br>ListValuedMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArrayListValuedHashMap</span>&lt;&gt;(); <br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;李四&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;age&quot;</span>, <span class=\"hljs-string\">&quot;12&quot;</span>);<br><span class=\"hljs-comment\">// 注意：value的泛型是String, 但是get方法返回的是List&lt;String&gt;</span><br>List&lt;String&gt; users2 = map.get(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// [张三,李四,张三]</span><br><br><span class=\"hljs-comment\">// multiMap的其他方法</span><br>map.containsKey(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// true</span><br>map.containsValue(<span class=\"hljs-string\">&quot;张三&quot;</span>); <span class=\"hljs-comment\">// true</span><br>map.containsMapping(<span class=\"hljs-string\">&quot;user&quot;</span>, <span class=\"hljs-string\">&quot;张三&quot;</span>); <span class=\"hljs-comment\">// true</span><br><br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">size</span> <span class=\"hljs-operator\">=</span> map.size(); <span class=\"hljs-comment\">// 4</span><br><br>Collection&lt;String&gt; ss = map.values();<span class=\"hljs-comment\">// [张三,李四,张三,12]</span><br>map.remove(<span class=\"hljs-string\">&quot;user&quot;</span>); <span class=\"hljs-comment\">// 清空user的所有value</span><br><span class=\"hljs-comment\">// 转换为原生map</span><br>Map&lt;String, Collection&lt;String&gt;&gt; jMap = map.asMap();<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"CaseInsensitiveMap\"><a href=\"#CaseInsensitiveMap\" class=\"headerlink\" title=\"CaseInsensitiveMap\"></a>CaseInsensitiveMap</h4><p>key大小写不敏感的Map</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// key大小写不敏感</span><br>Map&lt;String, Integer&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CaseInsensitiveMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;one&quot;</span>, <span class=\"hljs-number\">1</span>);<br>map.put(<span class=\"hljs-string\">&quot;two&quot;</span>, <span class=\"hljs-number\">2</span>);<br><span class=\"hljs-type\">Integer</span> <span class=\"hljs-variable\">o</span> <span class=\"hljs-operator\">=</span> map.get(<span class=\"hljs-string\">&quot;ONE&quot;</span>);<br>println(o); <span class=\"hljs-comment\">// 1</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"OrderedMap\"><a href=\"#OrderedMap\" class=\"headerlink\" title=\"OrderedMap\"></a>OrderedMap</h4><p>有顺序的 Map，按照插入顺序排序。如果使用 hashMap 的话 key 会按照 hash 值排序，可能和插入顺序一样，也可能不一样。key 数量和不同 JDK 版本都可能影响顺序，这是由于不同版本 jdk map 的 hash 算法有区别，hash 算法和当前 map 的容量也有关系。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// key有序：按照插入顺序</span><br>OrderedMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListOrderedMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;哈哈&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;此处&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>);<br><span class=\"hljs-comment\">// 得到的keySet有序</span><br>Set&lt;String&gt; set = map.keySet(); <span class=\"hljs-comment\">// 哈哈,此处,cc,dd</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nk</span> <span class=\"hljs-operator\">=</span> map.nextKey(<span class=\"hljs-string\">&quot;此处&quot;</span>); <span class=\"hljs-comment\">// cc</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">pk</span> <span class=\"hljs-operator\">=</span> map.previousKey(<span class=\"hljs-string\">&quot;此处&quot;</span>); <span class=\"hljs-comment\">// 哈哈</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"LRUMap\"><a href=\"#LRUMap\" class=\"headerlink\" title=\"LRUMap\"></a>LRUMap</h4><p>LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。</p>\n<p>各种缓存框架都有对 LRU 算法的支持，如 EhCache，GuavaCache，Redis 等，可以说是很常用的一种算法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\">LRUMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">LRUMap</span>&lt;&gt;(<span class=\"hljs-number\">2</span>);<br>map.put(<span class=\"hljs-string\">&quot;aa&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;bb&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cc&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br><span class=\"hljs-comment\">// 最早没有被使用的aa将被移出</span><br>println(map); <span class=\"hljs-comment\">// [bb:2, cc:3]</span><br><span class=\"hljs-comment\">// 访问一次bb，此时在put的话将会移出最早没有被访问的cc</span><br>map.get(<span class=\"hljs-string\">&quot;bb&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;dd&quot;</span>, <span class=\"hljs-string\">&quot;4&quot;</span>);<br>println(map); <span class=\"hljs-comment\">// [bb:2, dd:4]</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"PassiveExpiringMap\"><a href=\"#PassiveExpiringMap\" class=\"headerlink\" title=\"PassiveExpiringMap\"></a>PassiveExpiringMap</h4><p>装饰一个 Map 以在达到过期时间时删除过期条目。当在 Map 中放置键值对时，此装饰器使用 ExpirationPolicy 来确定条目应保持多长时间，由到期时间值定义。当对 Map 做操作的时候才会检查元素是否过期并触发删除操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 存活一秒钟</span><br><span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">ttlMillis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1000</span>;<br>PassiveExpiringMap.ExpirationPolicy&lt;String, String&gt; ep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PassiveExpiringMap</span>.ConstantTimeToLiveExpirationPolicy&lt;&gt;(ttlMillis);<br>PassiveExpiringMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">PassiveExpiringMap</span>&lt;&gt;(ep);<br>map.put(<span class=\"hljs-string\">&quot;a&quot;</span>, <span class=\"hljs-string\">&quot;1&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;b&quot;</span>, <span class=\"hljs-string\">&quot;2&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;c&quot;</span>, <span class=\"hljs-string\">&quot;3&quot;</span>);<br><span class=\"hljs-comment\">// 等待一秒后在获取</span><br>Thread.sleep(<span class=\"hljs-number\">1000</span>);<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">vc</span> <span class=\"hljs-operator\">=</span> map.get(<span class=\"hljs-string\">&quot;c&quot;</span>);<br>println(vc); <span class=\"hljs-comment\">// null</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"6-ReferenceMap\"><a href=\"#6-ReferenceMap\" class=\"headerlink\" title=\"6. ReferenceMap\"></a>6. ReferenceMap</h4><p>ReferenceMap 允许垃圾收集器删除映射。可以指定使用什么类型的引用来存储映射的键和值。如果使用的不是强引用，则垃圾收集器可以在键或值变得不可访问，或者 JVM 内存不足时删除映射。用它做一个简易的缓存不会导致存放内容过多导致内存溢出。</p>\n<h4 id=\"BidiMap\"><a href=\"#BidiMap\" class=\"headerlink\" title=\"BidiMap\"></a>BidiMap</h4><p>BidiMap 允许在 key 和 value 之间进行双向查找。其中一个键可以查找一个值，一个值可以同样轻松地查找一个键。这个接口扩展了 Map，value 不允许重复，如果重复将同时覆盖旧的键值对。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 双向map, 可通过value获取key</span><br><span class=\"hljs-comment\">// value也不允许重复，如果重复将会覆盖旧值</span><br>BidiMap&lt;String, String&gt; map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TreeBidiMap</span>&lt;&gt;();<br>map.put(<span class=\"hljs-string\">&quot;dog&quot;</span>, <span class=\"hljs-string\">&quot;狗&quot;</span>);<br>map.put(<span class=\"hljs-string\">&quot;cat&quot;</span>, <span class=\"hljs-string\">&quot;猫&quot;</span>);<br><span class=\"hljs-comment\">// value重复的话key也会被覆盖，相当于&quot;cat2:猫&quot;会覆盖掉&quot;cat:猫&quot;</span><br><span class=\"hljs-comment\">// map.put(&quot;cat2&quot;, &quot;猫&quot;);</span><br>println(map); <span class=\"hljs-comment\">// &#123;cat=猫, dog=狗&#125;</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">key</span> <span class=\"hljs-operator\">=</span> map.getKey(<span class=\"hljs-string\">&quot;狗&quot;</span>);<br>println(key); <span class=\"hljs-comment\">// dog</span><br><br><span class=\"hljs-comment\">// 反向，value变为key，key变为value</span><br>BidiMap&lt;String, String&gt; iMap = map.inverseBidiMap();<br>println(iMap); <span class=\"hljs-comment\">// &#123;狗=dog, 猫=cat&#125;</span><br>println(iMap.get(<span class=\"hljs-string\">&quot;狗&quot;</span>)); <span class=\"hljs-comment\">// dog</span><br><br><span class=\"hljs-comment\">// 对反向map操作同时影响原map</span><br>iMap.put(<span class=\"hljs-string\">&quot;鱼&quot;</span>, <span class=\"hljs-string\">&quot;fish&quot;</span>);<br>println(iMap); <span class=\"hljs-comment\">// &#123;狗=dog, 猫=cat, 鱼=fish&#125;</span><br>println(map); <span class=\"hljs-comment\">// &#123;cat=猫, dog=狗, fish=鱼&#125;</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Compress\"><a href=\"#Commons-Compress\" class=\"headerlink\" title=\"Commons Compress\"></a>Commons Compress</h2><p>压缩、解压缩文件的组件，可以操作rar、cpio、Unix dump、tar、zip、gzip、XZ、Pack200和bzip2格式的压缩文件。</p>\n<h3 id=\"压缩\"><a href=\"#压缩\" class=\"headerlink\" title=\"压缩\"></a>压缩</h3><p>压缩：按某种算法减小文件所占用空间的大小<br>解压：按对应的逆向算法恢复文件</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>GzipCompressorOutputStream</td>\n<td>压缩<code>&quot;*.gz</code>“文件</td>\n</tr>\n<tr>\n<td>GzipCompressorInputStream</td>\n<td>解压<code>&quot;*.gz</code>“文件</td>\n</tr>\n<tr>\n<td>BZip2CompressorOutputStream</td>\n<td>压缩<code>&quot;*.bz2</code>“文件</td>\n</tr>\n<tr>\n<td>BZip2CompressorInputStream</td>\n<td>解压<code>&quot;*.bz2</code>“文件</td>\n</tr>\n<tr>\n<td>XZCompressorOutputStream</td>\n<td>压缩<code>&quot;*.xz</code>“文件</td>\n</tr>\n<tr>\n<td>XZCompressorInputStream</td>\n<td>解压<code>&quot;*.xz</code>“文件</td>\n</tr>\n<tr>\n<td>FramedLZ4CompressorOutputStream</td>\n<td>压缩<code>&quot;*.lz4</code>“文件</td>\n</tr>\n<tr>\n<td>FramedLZ4CompressorInputStream</td>\n<td>解压<code>&quot;*.lz4</code>“文件</td>\n</tr>\n<tr>\n<td>BlockLZ4CompressorOutputStream</td>\n<td>压缩<code>&quot;*.block_lz4</code>“文件</td>\n</tr>\n<tr>\n<td>BlockLZ4CompressorInputStream</td>\n<td>解压<code>&quot;*.block_lz4</code>“文件</td>\n</tr>\n<tr>\n<td>Pack200CompressorOutputStream</td>\n<td>压缩<code>&quot;*.pack</code>“文件</td>\n</tr>\n<tr>\n<td>Pack200CompressorInputStream</td>\n<td>解压<code>&quot;*.pack</code>“文件</td>\n</tr>\n<tr>\n<td>DeflateCompressorOutputStream</td>\n<td>压缩<code>&quot;*.deflate</code>“文件</td>\n</tr>\n<tr>\n<td>DeflateCompressorInputStream</td>\n<td>解压<code>&quot;*.deflate</code>“文件</td>\n</tr>\n<tr>\n<td>LZMACompressorOutputStream</td>\n<td>压缩<code>&quot;*.lzma</code>“文件</td>\n</tr>\n<tr>\n<td>LZMACompressorInputStream</td>\n<td>解压<code>&quot;*.lzma</code>“文件</td>\n</tr>\n<tr>\n<td>FramedSnappyCompressorOutputStream</td>\n<td>压缩<code>&quot;*.sz</code>“文件</td>\n</tr>\n<tr>\n<td>FramedSnappyCompressorInputStream</td>\n<td>解压<code>&quot;*.sz</code>“文件</td>\n</tr>\n<tr>\n<td>ZCompressorInputStream</td>\n<td>解压<code>&quot;*.Z</code>“文件</td>\n</tr>\n</tbody></table>\n<h4 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h4><p>gzip是Unix，Linux上常用的压缩工具，也是当今的WEB站点上非常流行的压缩技术。其有压缩级别等概念，可以通过GzipParameters去设置。JDK8也自带了GZIPInputStream类，用法类似。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// gzip压缩</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.js&quot;</span>;<br><span class=\"hljs-type\">GzipParameters</span> <span class=\"hljs-variable\">parameters</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipParameters</span>();<br>parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);<br>parameters.setOperatingSystem(<span class=\"hljs-number\">3</span>);<br>parameters.setFilename(FilenameUtils.getName(file));<br>parameters.setComment(<span class=\"hljs-string\">&quot;Test file&quot;</span>);<br>parameters.setModificationTime(System.currentTimeMillis());<br><span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">fos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(file + <span class=\"hljs-string\">&quot;.gz&quot;</span>);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">GzipCompressorOutputStream</span> <span class=\"hljs-variable\">gzos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorOutputStream</span>(fos, parameters);<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(file)) &#123;<br>    IOUtils.copy(is, gzos);<br>&#125;<br><span class=\"hljs-comment\">// gzip解压</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">gzFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.js.gz&quot;</span>;<br><span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(gzFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">GzipCompressorInputStream</span> <span class=\"hljs-variable\">gis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorInputStream</span>(is)) &#123;<br>    <span class=\"hljs-type\">GzipParameters</span> <span class=\"hljs-variable\">p</span> <span class=\"hljs-operator\">=</span> gis.getMetaData();<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test.js&quot;</span>);<br>    FileUtils.copyToFile(gis, targetFile);<br>    targetFile.setLastModified(p.getModificationTime());<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"bz2\"><a href=\"#bz2\" class=\"headerlink\" title=\"bz2\"></a>bz2</h4><p>bz2是Linux下常见的压缩文件格式，是由具有高压缩率的压缩工具bzip2生成，以后缀为.bz2结尾的压缩文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 压缩bz2</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">srcFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar.bz2&quot;</span>;<br><span class=\"hljs-type\">FileOutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(targetFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">BZip2CompressorOutputStream</span> <span class=\"hljs-variable\">bzos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BZip2CompressorOutputStream</span>(os);<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(srcFile)) &#123;<br>    IOUtils.copy(is, bzos);<br>&#125;<br><span class=\"hljs-comment\">// 解压bz2</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">bzFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar.bz2&quot;</span>;<br><span class=\"hljs-type\">FileInputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(bzFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">BZip2CompressorInputStream</span> <span class=\"hljs-variable\">bzis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">BZip2CompressorInputStream</span>(is)) &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;test.tar&quot;</span>);<br>    FileUtils.copyToFile(bzis, targetFile);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<p>其他压缩算法的使用方式和bz2基本一致，这里就不做代码示例了。</p>\n<h3 id=\"归档\"><a href=\"#归档\" class=\"headerlink\" title=\"归档\"></a>归档</h3><p>归档：将许多零散的文件整理为一个文件，文件总大小基本不变<br>解包：从归档文件中释放文件</p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>TarArchiveOutputStream</td>\n<td>归档<code>*.tar</code>文件</td>\n</tr>\n<tr>\n<td>TarArchiveInputStream</td>\n<td>解包<code>*.tar</code>文件</td>\n</tr>\n<tr>\n<td>ZipArchiveOutputStream</td>\n<td>归档压缩<code>*.zip</code>文件</td>\n</tr>\n<tr>\n<td>ZipArchiveInputStream</td>\n<td>解包解压<code>*.zip</code>文件</td>\n</tr>\n<tr>\n<td>JarArchiveOutputStream</td>\n<td>归档压缩<code>*.jar</code>文件</td>\n</tr>\n<tr>\n<td>JarArchiveInputStream</td>\n<td>解包解压<code>*.jar</code>文件</td>\n</tr>\n<tr>\n<td>DumpArchiveOutputStream</td>\n<td>归档<code>*.dump</code>文件</td>\n</tr>\n<tr>\n<td>DumpArchiveInputStream</td>\n<td>解包<code>*.dump</code>文件</td>\n</tr>\n<tr>\n<td>CpioArchiveOutputStream</td>\n<td>归档压缩<code>*.cpio</code>文件</td>\n</tr>\n<tr>\n<td>CpioArchiveInputStream</td>\n<td>解包解压<code>*.cpio</code>文件</td>\n</tr>\n<tr>\n<td>ArArchiveOutputStream</td>\n<td>归档压缩<code>*.ar</code>文件</td>\n</tr>\n<tr>\n<td>ArArchiveInputStream</td>\n<td>解包解压<code>*.ar</code>文件</td>\n</tr>\n<tr>\n<td>ArjArchiveInputStream</td>\n<td>解包解压<code>*.arj</code>文件</td>\n</tr>\n<tr>\n<td>SevenZOutputFile</td>\n<td>归档压缩<code>*.7z</code>文件</td>\n</tr>\n<tr>\n<td>SevenZFile</td>\n<td>解包解压<code>*.7z</code>文件</td>\n</tr>\n</tbody></table>\n<p>其中zip，jar，cpio，ar，7z既支持归档也支持压缩，能在归档的过程中做压缩处理。</p>\n<p>由于他们会处理一个个零散的文件，所以会有ArchiveEntry的概念，即一个ArchiveEntry代表归档包内的一个目录或文件。</p>\n<h4 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h4><p>tar是Unix和Linux系统上的常用的压缩归档工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为”tar”。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// tar压缩</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tar</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">srcDir</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">targetFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveOutputStream</span> <span class=\"hljs-variable\">tos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveOutputStream</span>(<br>            <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(targetFile))) &#123;<br>        tarRecursive(tos, srcDir, <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 递归压缩目录下的文件和目录</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">tarRecursive</span><span class=\"hljs-params\">(TarArchiveOutputStream tos, File srcFile, String basePath)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nextBasePath</span> <span class=\"hljs-operator\">=</span> basePath + srcFile.getName() + <span class=\"hljs-string\">&quot;/&quot;</span>;<br>        <span class=\"hljs-keyword\">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class=\"hljs-comment\">// 空目录</span><br>            <span class=\"hljs-type\">TarArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveEntry</span>(srcFile, nextBasePath);<br>            tos.putArchiveEntry(entry);<br>            tos.closeArchiveEntry();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">for</span> (File file : files) &#123;<br>                tarRecursive(tos, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">TarArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveEntry</span>(srcFile, basePath + srcFile.getName());<br>        tos.putArchiveEntry(entry);<br>        FileUtils.copyFile(srcFile, tos);<br>        tos.closeArchiveEntry();<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// tar解压</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">untar</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/test.tar&quot;</span>);<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveInputStream</span> <span class=\"hljs-variable\">tis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(is)) &#123;<br>        TarArchiveEntry nextEntry;<br>        <span class=\"hljs-keyword\">while</span> ((nextEntry = tis.getNextTarEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> nextEntry.getName();<br>            <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, name);<br>            <span class=\"hljs-comment\">//如果是目录，创建目录</span><br>            <span class=\"hljs-keyword\">if</span> (nextEntry.isDirectory()) &#123;<br>                file.mkdir();<br>            &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>                <span class=\"hljs-comment\">//文件则写入具体的路径中</span><br>                FileUtils.copyToFile(tis, file);<br>                file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h4 id=\"7z\"><a href=\"#7z\" class=\"headerlink\" title=\"7z\"></a>7z</h4><p>7z 是一种全新的压缩格式，它拥有极高的压缩比。</p>\n<p>7z 格式的主要特征：</p>\n<ul>\n<li>开放的结构</li>\n<li>高压缩比</li>\n<li>强大的 AES-256 加密</li>\n<li>能够兼容任意压缩、转换、加密算法</li>\n<li>最高支持 16000000000 GB 的文件压缩</li>\n<li>以 Unicode 为标准的文件名</li>\n<li>支持固实压缩</li>\n<li>支持文件头压缩</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 7z压缩</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_7z</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">SevenZOutputFile</span> <span class=\"hljs-variable\">outputFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SevenZOutputFile</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test.7z&quot;</span>))) &#123;<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">srcFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/test&quot;</span>);<br>        _7zRecursive(outputFile, srcFile, <span class=\"hljs-string\">&quot;&quot;</span>);<br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">// 递归压缩目录下的文件和目录</span><br><span class=\"hljs-keyword\">private</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">_7zRecursive</span><span class=\"hljs-params\">(SevenZOutputFile _7zFile, File srcFile, String basePath)</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-keyword\">if</span> (srcFile.isDirectory()) &#123;<br>        File[] files = srcFile.listFiles();<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">nextBasePath</span> <span class=\"hljs-operator\">=</span> basePath + srcFile.getName() + <span class=\"hljs-string\">&quot;/&quot;</span>;<br>        <span class=\"hljs-comment\">// 空目录</span><br>        <span class=\"hljs-keyword\">if</span> (ArrayUtils.isEmpty(files)) &#123;<br>            <span class=\"hljs-type\">SevenZArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> _7zFile.createArchiveEntry(srcFile, nextBasePath);<br>            _7zFile.putArchiveEntry(entry);<br>            _7zFile.closeArchiveEntry();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-keyword\">for</span> (File file : files) &#123;<br>                _7zRecursive(_7zFile, file, nextBasePath);<br>            &#125;<br>        &#125;<br>    &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>        <span class=\"hljs-type\">SevenZArchiveEntry</span> <span class=\"hljs-variable\">entry</span> <span class=\"hljs-operator\">=</span> _7zFile.createArchiveEntry(srcFile, basePath + srcFile.getName());<br>        _7zFile.putArchiveEntry(entry);<br>        <span class=\"hljs-type\">byte</span>[] bs = FileUtils.readFileToByteArray(srcFile);<br>        _7zFile.write(bs);<br>        _7zFile.closeArchiveEntry();<br>    &#125;<br>&#125;<br> <span class=\"hljs-comment\">// 7z解压</span><br><span class=\"hljs-keyword\">public</span> <span class=\"hljs-keyword\">void</span> <span class=\"hljs-title function_\">un7z</span><span class=\"hljs-params\">()</span> <span class=\"hljs-keyword\">throws</span> IOException &#123;<br>    <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br>    <span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">SevenZFile</span> <span class=\"hljs-variable\">archive</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SevenZFile</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;test.7z&quot;</span>))) &#123;<br>        SevenZArchiveEntry entry;<br>        <span class=\"hljs-keyword\">while</span> ((entry = archive.getNextEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>            <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, entry.getName());<br>            <span class=\"hljs-keyword\">if</span> (entry.isDirectory()) &#123;<br>                file.mkdirs();<br>            &#125;<br>            <span class=\"hljs-keyword\">if</span> (entry.hasStream()) &#123;<br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">byte</span> [] buf = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">byte</span> [<span class=\"hljs-number\">1024</span>];<br>                <span class=\"hljs-keyword\">final</span> <span class=\"hljs-type\">ByteArrayOutputStream</span> <span class=\"hljs-variable\">baos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ByteArrayOutputStream</span>();<br>                <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-type\">int</span> <span class=\"hljs-variable\">len</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">0</span>; (len = archive.read(buf)) &gt; <span class=\"hljs-number\">0</span>;) &#123;<br>                    baos.write(buf, <span class=\"hljs-number\">0</span>, len);<br>                &#125;<br>                FileUtils.writeByteArrayToFile(file, baos.toByteArray());<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"修改归档文件\"><a href=\"#修改归档文件\" class=\"headerlink\" title=\"修改归档文件\"></a>修改归档文件</h3><p>有时候我们会有修改归档内文件的需求，比如添加、删除一个文件，修改其中的文件内容等，当然我们也可以全部解压出来改完后在压缩回去。这样除了代码量多一些外，归档文件大也会导致操作时间过长。那么有没有办法用代码去动态的修改归档文件里的内容呢？</p>\n<p>org.apache.commons.compress.changes包下正好就提供了一些类用于动态的修改归档文件里的内容。下面看一个简单的例子</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">tarFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test.tar&quot;</span>;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(tarFile);<br><span class=\"hljs-comment\">// 替换后会覆盖原test.tar，如果是windows可能会由于文件被访问而覆盖报错</span><br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(tarFile);<br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">TarArchiveInputStream</span> <span class=\"hljs-variable\">tais</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(is);<br>     <span class=\"hljs-type\">TarArchiveOutputStream</span> <span class=\"hljs-variable\">taos</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveOutputStream</span>(os)) &#123;<br>    <span class=\"hljs-type\">ChangeSet</span> <span class=\"hljs-variable\">changes</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChangeSet</span>();<br>    <span class=\"hljs-comment\">// 删除&quot;test.tar中&quot;的&quot;dir/1.txt&quot;文件</span><br>    changes.delete(<span class=\"hljs-string\">&quot;dir/1.txt&quot;</span>);<br>    <span class=\"hljs-comment\">// 删除&quot;test.tar&quot;中的&quot;t&quot;目录</span><br>    changes.delete(<span class=\"hljs-string\">&quot;t&quot;</span>);<br>    <span class=\"hljs-comment\">// 添加文件，如果已存在则替换</span><br>    <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">addFile</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(<span class=\"hljs-string\">&quot;/a.txt&quot;</span>);<br>    <span class=\"hljs-type\">ArchiveEntry</span> <span class=\"hljs-variable\">addEntry</span> <span class=\"hljs-operator\">=</span> taos.createArchiveEntry(addFile, addFile.getName());<br>    <span class=\"hljs-comment\">// add可传第三个参数：true: 已存在则替换(默认值)， false: 不替换</span><br>    changes.add(addEntry, <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(addFile));<br>    <span class=\"hljs-comment\">// 执行修改</span><br>    <span class=\"hljs-type\">ChangeSetPerformer</span> <span class=\"hljs-variable\">performer</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ChangeSetPerformer</span>(changes);<br>    <span class=\"hljs-type\">ChangeSetResults</span> <span class=\"hljs-variable\">result</span> <span class=\"hljs-operator\">=</span> performer.perform(tais, taos);<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><h4 id=\"简单工厂\"><a href=\"#简单工厂\" class=\"headerlink\" title=\"简单工厂\"></a>简单工厂</h4><p>commons-compress还提供了一些简单的工厂类用户动态的获取压缩流和归档流。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 使用factory动态获取归档流</span><br><span class=\"hljs-type\">ArchiveStreamFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ArchiveStreamFactory</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">archiveName</span> <span class=\"hljs-operator\">=</span> ArchiveStreamFactory.TAR;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/in.tar&quot;</span>);<br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;/out.tar&quot;</span>);<br><span class=\"hljs-comment\">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class=\"hljs-type\">ArchiveInputStream</span> <span class=\"hljs-variable\">ais</span> <span class=\"hljs-operator\">=</span> factory.createArchiveInputStream(archiveName, is);<br><span class=\"hljs-type\">ArchiveOutputStream</span> <span class=\"hljs-variable\">aos</span> <span class=\"hljs-operator\">=</span> factory.createArchiveOutputStream(archiveName, os);<br><span class=\"hljs-comment\">// 其他业务操作</span><br><br><span class=\"hljs-comment\">// ------------------------</span><br><br><span class=\"hljs-comment\">// 使用factory动态获取压缩流</span><br><span class=\"hljs-type\">CompressorStreamFactory</span> <span class=\"hljs-variable\">factory</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CompressorStreamFactory</span>();<br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">compressName</span> <span class=\"hljs-operator\">=</span> CompressorStreamFactory.GZIP;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/in.gz&quot;</span>);<br><span class=\"hljs-type\">OutputStream</span> <span class=\"hljs-variable\">os</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileOutputStream</span>(<span class=\"hljs-string\">&quot;/out.gz&quot;</span>);<br><span class=\"hljs-comment\">// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream</span><br><span class=\"hljs-type\">CompressorInputStream</span> <span class=\"hljs-variable\">cis</span> <span class=\"hljs-operator\">=</span> factory.createCompressorInputStream(compressName, is);<br><span class=\"hljs-type\">CompressorOutputStream</span> <span class=\"hljs-variable\">cos</span> <span class=\"hljs-operator\">=</span> factory.createCompressorOutputStream(compressName, os);<br><span class=\"hljs-comment\">// 其他业务操作</span><br></code></pre></td></tr></table></figure>\n\n<h4 id=\"同时解压解包\"><a href=\"#同时解压解包\" class=\"headerlink\" title=\"同时解压解包\"></a>同时解压解包</h4><p>上面说了很多都是单一的操作，那么如果解压”test.tar.gz”这种归档和压缩于一体的文件呢？</p>\n<p>其实很简单，我们不需要先解压在解包，可以一步同时完成解压和解包，只需要将对应的流包装一下即可（不得不感叹Java IO的装饰者模式设计真的很巧妙）。下面看代码示例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs java\"><span class=\"hljs-comment\">// 解压 解包test.tar.gz文件</span><br><span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">outPath</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-string\">&quot;/test&quot;</span>;<br><span class=\"hljs-type\">InputStream</span> <span class=\"hljs-variable\">is</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">FileInputStream</span>(<span class=\"hljs-string\">&quot;/test.tar.gz&quot;</span>);<br><span class=\"hljs-comment\">// 先解压，所以需要先用gzip流包装文件流</span><br><span class=\"hljs-type\">CompressorInputStream</span> <span class=\"hljs-variable\">gis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">GzipCompressorInputStream</span>(is);<br><span class=\"hljs-comment\">// 在解包，用tar流包装gzip流</span><br><span class=\"hljs-keyword\">try</span> (<span class=\"hljs-type\">ArchiveInputStream</span> <span class=\"hljs-variable\">tgis</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TarArchiveInputStream</span>(gis)) &#123;<br>    ArchiveEntry nextEntry;<br>    <span class=\"hljs-keyword\">while</span> ((nextEntry = tgis.getNextEntry()) != <span class=\"hljs-literal\">null</span>) &#123;<br>        <span class=\"hljs-type\">String</span> <span class=\"hljs-variable\">name</span> <span class=\"hljs-operator\">=</span> nextEntry.getName();<br>        <span class=\"hljs-type\">File</span> <span class=\"hljs-variable\">file</span> <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">File</span>(outPath, name);<br>        <span class=\"hljs-comment\">// 如果是目录，创建目录</span><br>        <span class=\"hljs-keyword\">if</span> (nextEntry.isDirectory()) &#123;<br>            file.mkdir();<br>        &#125; <span class=\"hljs-keyword\">else</span> &#123;<br>            <span class=\"hljs-comment\">// 文件则写入具体的路径中</span><br>            FileUtils.copyToFile(tgis, file);<br>            file.setLastModified(nextEntry.getLastModifiedDate().getTime());<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"Commons-Configuration\"><a href=\"#Commons-Configuration\" class=\"headerlink\" title=\"Commons Configuration\"></a>Commons Configuration</h2><p>是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载配置信息。</p>\n<h2 id=\"Commons-CSV\"><a href=\"#Commons-CSV\" class=\"headerlink\" title=\"Commons CSV\"></a>Commons CSV</h2><p>是一个用来读写各种Comma Separated Value(CSV)格式文件的Java类库。</p>\n<h2 id=\"Commons-Daemon\"><a href=\"#Commons-Daemon\" class=\"headerlink\" title=\"Commons Daemon\"></a>Commons Daemon</h2><p>实现将普通的Java应用变成系统的后台服务,例如 Tomcat 就是利用这个项目来实现作为 Linux 和 Windows 的服务启动和停止的。</p>\n<h2 id=\"Commons-DBCP\"><a href=\"#Commons-DBCP\" class=\"headerlink\" title=\"Commons DBCP\"></a>Commons DBCP</h2><p>数据库连接池。</p>\n<h2 id=\"Commons-DBUtils\"><a href=\"#Commons-DBUtils\" class=\"headerlink\" title=\"Commons DBUtils\"></a>Commons DBUtils</h2><p>是JDBC工具组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。</p>\n<h2 id=\"Commons-Digester\"><a href=\"#Commons-Digester\" class=\"headerlink\" title=\"Commons Digester\"></a>Commons Digester</h2><p>是XML到Java对象的映射工具集。</p>\n<h2 id=\"Commons-Email\"><a href=\"#Commons-Email\" class=\"headerlink\" title=\"Commons Email\"></a>Commons Email</h2><p>是邮件操作组件，对Java Mail API进行了封装，提供了常用的邮件发送和接收类，简化邮件操作。该组件依赖Java Mail API。</p>\n<h2 id=\"Commons-Exec\"><a href=\"#Commons-Exec\" class=\"headerlink\" title=\"Commons Exec\"></a>Commons Exec</h2><p>提供一些常用的方法用来执行外部进程，如执行exe文件或命令行。</p>\n<h2 id=\"Commons-FileUpload\"><a href=\"#Commons-FileUpload\" class=\"headerlink\" title=\"Commons FileUpload\"></a>Commons FileUpload</h2><p>为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。</p>\n<h2 id=\"Commons-IO\"><a href=\"#Commons-IO\" class=\"headerlink\" title=\"Commons IO\"></a>Commons IO</h2><p>是处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。</p>\n<h2 id=\"Commons-JCI\"><a href=\"#Commons-JCI\" class=\"headerlink\" title=\"Commons JCI\"></a>Commons JCI</h2><p>提供通用的Java编译器接口。</p>\n<h2 id=\"Commons-Lang3\"><a href=\"#Commons-Lang3\" class=\"headerlink\" title=\"Commons Lang3\"></a>Commons Lang3</h2><p>是处理Java基本对象方法的工具类包，该类包提供对字符、数组等基本对象的操作，弥补了java.lang api基本处理方法上的不足。</p>\n<ul>\n<li><a href=\"http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html\">API 文档</a></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>工具类</th>\n<th>简介</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayUtils</td>\n<td>用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等</td>\n</tr>\n<tr>\n<td>BitField</td>\n<td>用于操作位元，提供了一些方便而安全的方法</td>\n</tr>\n<tr>\n<td>BooleanUtils</td>\n<td>用于操作和转换boolean或者Boolean及相应的数组</td>\n</tr>\n<tr>\n<td>CharEncoding</td>\n<td>包含了Java环境支持的字符编码，提供是否支持某种编码的判断</td>\n</tr>\n<tr>\n<td>CharRange</td>\n<td>用于设定字符范围并做相应检查</td>\n</tr>\n<tr>\n<td>CharSet</td>\n<td>用于设定一组字符作为范围并做相应检查</td>\n</tr>\n<tr>\n<td>CharSetUtils</td>\n<td>用于操作CharSet</td>\n</tr>\n<tr>\n<td>CharUtils</td>\n<td>用于操作char值和Character对象</td>\n</tr>\n<tr>\n<td>ClassUtils</td>\n<td>用于对Java类的操作，不使用反射</td>\n</tr>\n<tr>\n<td>ObjectUtils</td>\n<td>用于操作Java对象，提供null安全的访问和其他一些功能</td>\n</tr>\n<tr>\n<td>RandomStringUtils</td>\n<td>用于生成随机的字符串</td>\n</tr>\n<tr>\n<td>SerializationUtils</td>\n<td>用于处理对象序列化，提供比一般Java序列化更高级的处理能力</td>\n</tr>\n<tr>\n<td>StringEscapeUtils</td>\n<td>用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码</td>\n</tr>\n<tr>\n<td>StringUtils</td>\n<td>处理String的核心类，提供了相当多的功能</td>\n</tr>\n<tr>\n<td>SystemUtils</td>\n<td>在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断</td>\n</tr>\n<tr>\n<td>Validate</td>\n<td>提供验证的操作，有点类似assert断言</td>\n</tr>\n<tr>\n<td>WordUtils</td>\n<td>用于处理单词大小写、换行等</td>\n</tr>\n</tbody></table>\n<h2 id=\"Commons-Logging\"><a href=\"#Commons-Logging\" class=\"headerlink\" title=\"Commons Logging\"></a>Commons Logging</h2><p>提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。类包给中间件&#x2F;日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。</p>\n<h2 id=\"Commons-Math\"><a href=\"#Commons-Math\" class=\"headerlink\" title=\"Commons Math\"></a>Commons Math</h2><p>轻量级自容器的数学和统计计算方法类包，包含大多数常用的数值算法。</p>\n<h2 id=\"Commons-Net\"><a href=\"#Commons-Net\" class=\"headerlink\" title=\"Commons Net\"></a>Commons Net</h2><p>封装了各种网络协议的客户端，支持FTP、NNTP、SMTP、POP3、Telnet等协议。</p>\n<h2 id=\"Commons-Pool\"><a href=\"#Commons-Pool\" class=\"headerlink\" title=\"Commons Pool\"></a>Commons Pool</h2><p>提供了一整套用于实现对象池化的框架，以及若干各具特色的对象池实现，可以有效地减少处理对象池化时的工作量。类包用于提高像文件句柄、数据库连接、socket通信这类大对象的调用效率，简单的说就是一种对象一次创建多次使用的技术。</p>\n<h2 id=\"Commons-Primitives\"><a href=\"#Commons-Primitives\" class=\"headerlink\" title=\"Commons Primitives\"></a>Commons Primitives</h2><p>提供了一个更小，更快和更易使用的对Java基本类型的支持。</p>\n<h2 id=\"Commons-Validator\"><a href=\"#Commons-Validator\" class=\"headerlink\" title=\"Commons Validator\"></a>Commons Validator</h2><p>提供了一个简单的、可扩展的框架来在一个XML文件中定义校验器(校验方法)和校验规则。支持校验规则的和错误消息的国际化。</p>\n<h2 id=\"Apache-HttpClient\"><a href=\"#Apache-HttpClient\" class=\"headerlink\" title=\"Apache HttpClient\"></a>Apache HttpClient</h2><p>曾经是Apache Commons的子项目，后来独立出来。HttpClient简化HTTP客户端与服务器的各种通讯，实现HTTP客户端程序（也就是浏览器程序）的功能。</p>\n",
            "tags": [
                "常用开发库",
                "工具类",
                "Apache Common"
            ]
        }
    ]
}