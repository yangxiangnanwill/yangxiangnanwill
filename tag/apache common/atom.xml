<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</id>
    <title>Will • Posts by &#34;apache common&#34; tag</title>
    <link href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io" />
    <updated>2024-01-03T13:13:21.652Z</updated>
    <category term="开发习惯" />
    <category term="思考" />
    <category term="思维习惯" />
    <category term="感言" />
    <category term="Docker" />
    <category term="LINUX" />
    <category term="Node" />
    <category term="前端" />
    <category term="Nvm" />
    <category term="CentOS" />
    <category term="Linux" />
    <category term="Crontab" />
    <category term="Jenkins" />
    <category term="IDEA" />
    <category term="Alibaba Cloud Toolkit" />
    <category term="Archery" />
    <category term="MySql" />
    <category term="工具" />
    <category term="Maven" />
    <category term="Git" />
    <category term="JAVA" />
    <category term="shell" />
    <category term="信息安全等级保护认证" />
    <category term="系统认证" />
    <category term="读书笔记" />
    <category term="BeetlSql" />
    <category term="Beetl" />
    <category term="异常" />
    <category term="Java IO-初识IO" />
    <category term="Spring" />
    <category term="SpringCloud" />
    <category term="SpringCloud Alibaba" />
    <category term="枚举" />
    <category term="POI" />
    <category term="Spring Boot" />
    <category term="VinUtil" />
    <category term="VerificationCode" />
    <category term="SOAR" />
    <category term="其他" />
    <category term="ProtoBuffer" />
    <category term="博客园" />
    <category term="博客" />
    <category term="MongoDb" />
    <category term="Lombok工具库详解" />
    <category term="常用开发库" />
    <category term="JSON类库详解" />
    <category term="Hutool" />
    <category term="工具类" />
    <category term="Spring常用工具类" />
    <category term="异步编程" />
    <category term="线程" />
    <category term="方法论" />
    <category term="开源协议" />
    <category term="CentOS7" />
    <category term="MongoDB" />
    <category term="Redis" />
    <category term="VMware" />
    <category term="Typora" />
    <category term="PostMan" />
    <category term="Java8" />
    <category term="特性" />
    <category term="JDBC" />
    <category term="Mysql" />
    <category term="EasyExcel" />
    <category term="日志类库详解" />
    <category term="Script" />
    <category term="设计模式" />
    <category term="MyBatis" />
    <category term="Apache Common" />
    <category term="Google Guava" />
    <entry>
        <id>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/</id>
        <title>Apache Common</title>
        <link rel="alternate" href="https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/JAVA/%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%BA%93%E8%AF%A6%E8%A7%A3/Apache%20Common/"/>
        <content type="html">&lt;h1 id=&#34;Apache-Common包简介&#34;&gt;&lt;a href=&#34;#Apache-Common包简介&#34; class=&#34;headerlink&#34; title=&#34;Apache Common包简介&#34;&gt;&lt;/a&gt;Apache Common包简介&lt;/h1&gt;&lt;p&gt;Apache Commons是对JDK的拓展，包含了很多开源的工具，用于解决平时编程经常会遇到的问题，减少重复劳动。官网网址:&lt;a href=&#34;http://commons.apache.org/&#34;&gt;http://commons.apache.org&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;Common包包含哪些类？&#34;&gt;&lt;a href=&#34;#Common包包含哪些类？&#34; class=&#34;headerlink&#34; title=&#34;Common包包含哪些类？&#34;&gt;&lt;/a&gt;Common包包含哪些类？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;请参考：&lt;a href=&#34;http://commons.apache.org/&#34;&gt;Apache Common官方网站&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;常用包梳理&#34;&gt;&lt;a href=&#34;#常用包梳理&#34; class=&#34;headerlink&#34; title=&#34;常用包梳理&#34;&gt;&lt;/a&gt;常用包梳理&lt;/h2&gt;&lt;p&gt;| 包名         | 介绍     |&lt;br&gt;| ————- |:————-:| &lt;br&gt;| commons-lang      | 提供字符串处理、数值处理、对象等工具方法 |&lt;br&gt;| commons-collections | 集合工具类,用来操作各种集合     |&lt;br&gt;| commons-io         | IO流操作的工具类     |&lt;br&gt;| commons-beanutils  | Java Bean 操作和封装工具     |  &lt;br&gt;| commons-dbcp2     | 数据库连接池实现  |&lt;br&gt;| commons-pool2      | 对象池实现,用于数据库连接池等 |&lt;br&gt;| commons-fileupload | HTML文件上传工具     | &lt;br&gt;| commons-codec      | 编码&amp;#x2F;解码算法,如Base64、Hex、MD5等 |  &lt;br&gt;| commons-net        | 网络工具,如FTP、Telnet、DNS等 |&lt;br&gt;| commons-configuration | 配置文件解析器   |&lt;br&gt;| commons-vfs        | 虚拟文件系统,对各种文件系统的包装| &lt;br&gt;| commons-digester   | XML解析器    | &lt;br&gt;| commons-logging    | 日志记录器抽象层|&lt;br&gt;| commons-validator  | 数据校验器|&lt;/p&gt;
&lt;h3 id=&#34;Commons-BeanUtils&#34;&gt;&lt;a href=&#34;#Commons-BeanUtils&#34; class=&#34;headerlink&#34; title=&#34;Commons BeanUtils&#34;&gt;&lt;/a&gt;Commons BeanUtils&lt;/h3&gt;&lt;p&gt;针对Bean的一个工具集。由于Bean往往是有一堆get和set组成，所以BeanUtils也是在此基础上进行一些包装。它利用Java的反射机制，从动态的生成对bean的getter和setter的调用代码，到模拟创建一个动态的bean，等等。&lt;br&gt;这个包看似简单，却是很多开源项目的基石：如在著名的Struts和Spring Framework中，我们都能找到BeanUtils的影子。大家猜猜看，有哪位名人是BeanUtils的作者之一？没错，就是Struts的创始人Craig McClanahan。&lt;br&gt;一个比较常用的功能是Bean Copy，也就是copy bean的属性。如果做分层架构开发的话就会用到，比如从PO（Persistent Object）拷贝数据到VO（Value Object）。&lt;/p&gt;
&lt;h4 id=&#34;模块介绍&#34;&gt;&lt;a href=&#34;#模块介绍&#34; class=&#34;headerlink&#34; title=&#34;模块介绍&#34;&gt;&lt;/a&gt;模块介绍&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包名&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;beanutils&lt;/td&gt;
&lt;td&gt;核心包，主要是一些常用的工具类及接口定义&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;converters&lt;/td&gt;
&lt;td&gt;转换String到需要类型的类，实现Converter接口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;这些转换器实现了 LocaleConverter 接口,并提供了根据本地语言环境格式化对象到字符串以及解析字符串到对象的功能。&lt;br/&gt;主要用途是:&lt;br/&gt;国际化:    根据不同语言环境解析和格式化数值&lt;br/&gt;本地化的 Bean 操作:    解析不同本地语言环境的请求参数到 Bean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;expression&lt;/td&gt;
&lt;td&gt;统一的表达式语言接口,定义表达式解析、求值和设置属性值等方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;代码案例&#34;&gt;&lt;a href=&#34;#代码案例&#34; class=&#34;headerlink&#34; title=&#34;代码案例&#34;&gt;&lt;/a&gt;代码案例&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; lombok.Data;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.BeanUtils;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.ConvertUtils;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.apache.commons.beanutils.converters.DateConverter;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; org.junit.Test;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.lang.reflect.InvocationTargetException;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Arrays;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Date;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.HashMap;  &lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;import&lt;/span&gt; java.util.Map;  &lt;br&gt;  &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;/**  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt; * CovertTest * &lt;span class=&#34;hljs-doctag&#34;&gt;@author&lt;/span&gt; will */&lt;/span&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BeanUtilTest&lt;/span&gt; &amp;#123;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串转换为指定类型  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCovertToInteger&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;, Integer.class);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (i &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Integer) &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can cast to integer&amp;quot;&lt;/span&gt;);  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;the number result is &amp;quot;&lt;/span&gt; + (Integer) i);  &lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.err.print(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can not cast to target Instance!&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串数组转换为指定类型数组  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testConvertArrToIntegerArr&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;convert&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;, Integer.class);  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (convert &lt;span class=&#34;hljs-keyword&#34;&gt;instanceof&lt;/span&gt; Integer[]) &amp;#123;  &lt;br&gt;            System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can cast to Integer Array&amp;quot;&lt;/span&gt;);  &lt;br&gt;            Integer[] integers = (Integer[]) convert;  &lt;br&gt;            Arrays.stream(integers).forEach(System.out::println);  &lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;  &lt;br&gt;            System.err.print(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;it can not cast to target Instance!&amp;quot;&lt;/span&gt;);  &lt;br&gt;        &amp;#125;  &lt;br&gt;    &amp;#125;  &lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;//将字符串转换为日期类型  &lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testCovertToDate&lt;/span&gt; &lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 日期格式转换  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;DateConverter&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dateConverter&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;DateConverter&lt;/span&gt;();  &lt;br&gt;        dateConverter.setPatterns(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yyyy-MM-dd&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;yyyy-MM-dd HH:mm:ss&amp;quot;&lt;/span&gt;&amp;#125;);  &lt;br&gt;        ConvertUtils.register(dateConverter, Date.class);  &lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;convert&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-12-01&amp;quot;&lt;/span&gt;, Date.class);  &lt;br&gt;        System.out.println(convert);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 常规时间类型转换  &lt;/span&gt;&lt;br&gt;        System.out.println(ConvertUtils.convert(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2023-06-30 09:53:55&amp;quot;&lt;/span&gt;, Date.class));  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Test&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;testBeanUtil&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchMethodException &amp;#123;  &lt;br&gt;        Map&amp;lt;String, Object&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashMap&lt;/span&gt;&amp;lt;String, Object&amp;gt;();  &lt;br&gt;        map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will&amp;quot;&lt;/span&gt;);  &lt;br&gt;        map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;18&amp;quot;&lt;/span&gt;);  &lt;br&gt;  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 将map数据拷贝到Java Bean中  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.populate(p, map);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p is &amp;quot;&lt;/span&gt; + p);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 对象拷贝  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.copyProperties(p1, p);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p1 is &amp;quot;&lt;/span&gt; + p1);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 拷贝指定的属性  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Person&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;();  &lt;br&gt;        BeanUtils.copyProperty(p2,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;,&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;will_yang&amp;quot;&lt;/span&gt;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p2 is &amp;quot;&lt;/span&gt; + p2);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 设置指定的属性  &lt;/span&gt;&lt;br&gt;        BeanUtils.setProperty(p2, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;20&lt;/span&gt;);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;p2 is &amp;quot;&lt;/span&gt; + p2);  &lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;//对象克隆  &lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;Object&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bean&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; BeanUtils.cloneBean(p2);  &lt;br&gt;        System.out.println(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bean = &amp;quot;&lt;/span&gt; + bean);  &lt;br&gt;    &amp;#125;  &lt;br&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-meta&#34;&gt;@Data&lt;/span&gt;  &lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Person&lt;/span&gt;&amp;#123;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String name;  &lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; String age;  &lt;br&gt;    &amp;#125;  &lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Codec&#34;&gt;&lt;a href=&#34;#Commons-Codec&#34; class=&#34;headerlink&#34; title=&#34;Commons Codec&#34;&gt;&lt;/a&gt;Commons Codec&lt;/h2&gt;&lt;p&gt;是编码和解码组件，提供常用的编码和解码方法，如DES、SHA1、MD5、Base64、URL和Soundx等。&lt;/p&gt;
&lt;h3 id=&#34;二进制相关&#34;&gt;&lt;a href=&#34;#二进制相关&#34; class=&#34;headerlink&#34; title=&#34;二进制相关&#34;&gt;&lt;/a&gt;二进制相关&lt;/h3&gt;&lt;p&gt;二进制包主要提供16进制、Base64、Base32等的编解码工具类。&lt;/p&gt;
&lt;h4 id=&#34;16进制（Hex类）&#34;&gt;&lt;a href=&#34;#16进制（Hex类）&#34; class=&#34;headerlink&#34; title=&#34;16进制（Hex类）&#34;&gt;&lt;/a&gt;16进制（Hex类）&lt;/h4&gt;&lt;p&gt;十六进制常用于将二进制以更简短的方式展示，比如MD5是128位，展现起来太长，而转换为16进制后只需要32个字符即可表示出来。&lt;br&gt;示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// byte数组转为16进制字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hex&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Hex.encodeHexString(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;System.out.println(hex);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 16进制字符串解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] src = Hex.decodeHex(hex);&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(src));&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;2-Base64，Base32，Base16&#34;&gt;&lt;a href=&#34;#2-Base64，Base32，Base16&#34; class=&#34;headerlink&#34; title=&#34;2. Base64，Base32，Base16&#34;&gt;&lt;/a&gt;2. Base64，Base32，Base16&lt;/h4&gt;&lt;p&gt;Base64是网络上最常见的用于传输二进制数据的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。Base32就是使用32个可打印字符，Base16就是使用16个（实际上相当于16进制）。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;名称&lt;/td&gt;
&lt;td&gt;编码表字符串&lt;/td&gt;
&lt;td&gt;位数不足是否会补全 &amp;#x3D;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base16&lt;/td&gt;
&lt;td&gt;数字0&lt;del&gt;9 和 字母 A&lt;/del&gt;F&lt;/td&gt;
&lt;td&gt;不会，位数刚好是 4 的倍数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base32&lt;/td&gt;
&lt;td&gt;大写字母A&lt;del&gt;Z 和 数字2&lt;/del&gt;7&lt;/td&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;base64&lt;/td&gt;
&lt;td&gt;Base大写字母A-Z，小写字母a-z，数字0~9以及”+”，”&amp;#x2F;“&lt;/td&gt;
&lt;td&gt;会&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// base64编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;base64&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Base64.encodeBase64String(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;System.out.println(base64);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// base64解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] src = Base64.decodeBase64(base64);&lt;br&gt;System.out.println(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;(src));&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 字符串是否是base64&lt;/span&gt;&lt;br&gt;Base64.isBase64(base64);&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// Base32 Base16 同理&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;Codec还提供了Base系列的流处理，以流的方式去处理Base编解码，示例如下&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以流方式提供Base64编码和解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 附：&amp;quot;123&amp;quot;的base64编码为&amp;quot;MTIz&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对输入流做base64编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;.getBytes());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ebis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64InputStream&lt;/span&gt;(is, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;enc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; IOUtils.toString(ebis, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// MTIz&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对base64数据流做解码&lt;/span&gt;&lt;br&gt;is = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayInputStream&lt;/span&gt;(enc.getBytes());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dbis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64InputStream&lt;/span&gt;(is, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dec&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; IOUtils.toString(dbis, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 123&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// -----------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将数据做base64编码写入输出流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;baos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ebos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64OutputStream&lt;/span&gt;(baos, &lt;span class=&#34;hljs-literal&#34;&gt;true&lt;/span&gt;);&lt;br&gt;IOUtils.write(data, ebos, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;enc2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; baos.toString(); &lt;span class=&#34;hljs-comment&#34;&gt;// MTIz&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 将base64数据做解码写入输出流&lt;/span&gt;&lt;br&gt;baos = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Base64OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dbos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;Base64OutputStream&lt;/span&gt;(baos, &lt;span class=&#34;hljs-literal&#34;&gt;false&lt;/span&gt;);&lt;br&gt;IOUtils.write(data, dbos, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;dec2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; dbos.toString(); &lt;span class=&#34;hljs-comment&#34;&gt;// 123&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;URL相关&#34;&gt;&lt;a href=&#34;#URL相关&#34; class=&#34;headerlink&#34; title=&#34;URL相关&#34;&gt;&lt;/a&gt;URL相关&lt;/h3&gt;&lt;p&gt;URL之所以要进行编码，是因为URL中有些字符会引起歧义。&lt;/p&gt;
&lt;p&gt;例如URL参数字符串中使用key&amp;#x3D;value键值对这样的形式来传参，键值对之间以&amp;amp;符号分隔，如&amp;#x2F;s?q&amp;#x3D;abc&amp;amp;ie&amp;#x3D;utf-8。如果你的value字符串中包含了&amp;#x3D;或者&amp;amp;，那么势必会造成接收URL的服务器解析错误，因此必须将引起歧义的&amp;amp;和&amp;#x3D;符号进行转义，也就是对其进行编码。&lt;/p&gt;
&lt;p&gt;又如URL的编码格式采用的是ASCII码，而不是Unicode，这也就是说你不能在URL中包含任何非ASCII字符，例如中文。否则如果客户端浏览器和服务端浏览器支持的字符集不同的情况下，中文可能会造成问题。&lt;/p&gt;
&lt;p&gt;URL编码的原则就是使用安全的字符（没有特殊用途或者特殊意义的可打印字符）去表示那些不安全的字符。&lt;/p&gt;
&lt;p&gt;编解码示例代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;URLCodec&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;urlCodec&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;URLCodec&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// url编码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;encUrl&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; urlCodec.encode(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;http://x.com?f=哈&amp;quot;&lt;/span&gt;);&lt;br&gt;System.out.println(encUrl);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// url解码&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;decUrl&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; urlCodec.decode(encUrl);&lt;br&gt;System.out.println(decUrl);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;摘要算法&#34;&gt;&lt;a href=&#34;#摘要算法&#34; class=&#34;headerlink&#34; title=&#34;摘要算法&#34;&gt;&lt;/a&gt;摘要算法&lt;/h3&gt;&lt;p&gt;摘要算法是一种单向的散列算法，它满足以下几个特点。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入长度是任意的&lt;/li&gt;
&lt;li&gt;输出长度是固定的&lt;/li&gt;
&lt;li&gt;对每一个给定的输入，计算输出是很容易的&lt;/li&gt;
&lt;li&gt;不可逆，无法通过输出推算出原数据&lt;/li&gt;
&lt;li&gt;输出不依赖于输入。就是输入数据变动一个字节结果会相差很多&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由于摘要算法以上特点，主要用于数据完整性校验。例如网上的资源一般会提供一个摘要值（一般用MD5算法），用户下载后可以通过工具对资源做MD5后和网上给定的值比较，如果不一致说明文件不完整了，可能是下载过程网络波动内容有丢失，也可能被人篡改过。&lt;/p&gt;
&lt;p&gt;也可以做数据的指纹，比如网盘秒传，就是利用摘要值做判断。客户端上传前先对文件做摘要值，传给服务端，服务端发现有相同摘要的文件说明两个文件内容是一致的，这样就无需上传直接将文件存储路径指向这个文件就可以了，既实现了秒传，还节约了服务器磁盘空间（不同用户相同内容的文件实际上指向的是同一份文件）。&lt;/p&gt;
&lt;p&gt;很多系统也将密码做md5后存储，其中这种方式并不安全。md5已经很很多公开结果了，并且使用彩虹表碰撞也很容易破解了。所以并不建议使用md5存储密码。密码推荐使用BCrypt算法。&lt;/p&gt;
&lt;p&gt;摘要算法主要有以下几个&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MD(Message Digest)：消息摘要&lt;/li&gt;
&lt;li&gt;SHA(Secure Hash Algorithm)：安全散列&lt;/li&gt;
&lt;li&gt;MAC(Message Authentication Code)：消息认证码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;1. MD系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;主要有MD2、MD4、MD5，目前一般常用MD5&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 如果使用Java自带的api需要十多行才能实现md5算法&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对数据做md5，参数支持字符串，字节数据，输入流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;md5&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.md5Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;2. SHA系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;SHA系列有SHA-1、SHA-224、SHA-256、SHA-384、SHA-512，SHA3-224、SHA3-256、SHA3-384、SHA3-512等。目前安全起见一般选择256以上，推荐384以上。当然摘要越长则计算耗时也越长，需要根据需求权衡。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 参数支持字符串，字节数据，输入流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha1Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha256Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha384Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha512Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_256Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_384Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;sha3_512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; DigestUtils.sha3_512Hex(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;3. HMAC系列&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;HMAC(keyed-Hash Message Authentication Code)系列是包含密钥的散列算法，包含了MD和SHA两个系列的消息摘要算法。融合了MD，SHA：&lt;/p&gt;
&lt;p&gt;MD系列：HMacMD2，HMacMD4，HMacMD5&lt;/p&gt;
&lt;p&gt;SHA系列：HMacSHA1，HMacSHA224，HMacSHA256，HMacSHA38&lt;/p&gt;
&lt;p&gt;，HMacSHA512&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;asdf3234asdf3234asdf3234asdf3234&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;valueToDigest&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;测试数据&amp;quot;&lt;/span&gt;; &lt;span class=&#34;hljs-comment&#34;&gt;// valueToDigest参数支持字节数据，流，文件等&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 做HMAC-MD5摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacMd5&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_MD5, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 做HMAC-sha摘要&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha256&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_256, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha384&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_384, key).hmacHex(valueToDigest);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;hmacSha512&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HmacUtils&lt;/span&gt;(HmacAlgorithms.HMAC_SHA_512, key).hmacHex(valueToDigest);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Collections&#34;&gt;&lt;a href=&#34;#Commons-Collections&#34; class=&#34;headerlink&#34; title=&#34;Commons Collections&#34;&gt;&lt;/a&gt;Commons Collections&lt;/h2&gt;&lt;p&gt;Apache Commons Collections 是对 java.util.Collection 的扩展。&lt;/p&gt;
&lt;p&gt;目前 &lt;strong&gt;Collections&lt;/strong&gt; 包有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;commons-collections&lt;/li&gt;
&lt;li&gt;commons-collections4&lt;br&gt;commons-collections 最新版本是3.2.2，不支持泛型，目前官方已不在维护。&lt;br&gt;collections4 目前最新版本是4.4，最低要求 Java8 以上。&lt;br&gt;相对于 collections 来说完全支持 Java8 的特性并且支持泛型，该版本无法兼容旧有版本，于是为了避免冲突改名为 collections4。推荐直接使用该版本。（注：两个版本可以共存，使用时需要注意）。&lt;br&gt;这里使用3.2.2版本的中包名做下介绍：&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;包名&lt;/th&gt;
&lt;th&gt;介绍&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;collections&lt;/td&gt;
&lt;td&gt;CommonsCollections自定义的一组公用的接口和工具类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bag&lt;/td&gt;
&lt;td&gt;实现Bag接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bidimap&lt;/td&gt;
&lt;td&gt;实现BidiMap系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;buffer&lt;/td&gt;
&lt;td&gt;实现Buffer接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;collection&lt;/td&gt;
&lt;td&gt;实现java.util.Collection接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;comparators&lt;/td&gt;
&lt;td&gt;实现java.util.Comparator接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;functors&lt;/td&gt;
&lt;td&gt;Commons Collections自定义的一组功能类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iterators&lt;/td&gt;
&lt;td&gt;实现java.util.Iterator接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keyvalue&lt;/td&gt;
&lt;td&gt;实现集合和键&amp;#x2F;值映射相关的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list&lt;/td&gt;
&lt;td&gt;实现java.util.List接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map&lt;/td&gt;
&lt;td&gt;实现Map系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set&lt;/td&gt;
&lt;td&gt;实现Set系列接口的一组类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;工具类&#34;&gt;&lt;a href=&#34;#工具类&#34; class=&#34;headerlink&#34; title=&#34;工具类&#34;&gt;&lt;/a&gt;工具类&lt;/h3&gt;&lt;h4 id=&#34;CollectionUtils&#34;&gt;&lt;a href=&#34;#CollectionUtils&#34; class=&#34;headerlink&#34; title=&#34;CollectionUtils&#34;&gt;&lt;/a&gt;CollectionUtils&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 判断是否为空（null或空list都为true）&lt;/span&gt;&lt;br&gt;CollectionUtils.isEmpty(list1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 添加元素（忽略null元素）&lt;/span&gt;&lt;br&gt;CollectionUtils.addIgnoreNull(list1, str);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list是否包含subList中的所有元素&lt;/span&gt;&lt;br&gt;CollectionUtils.containsAll(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list是否包含subList中的任意一个元素&lt;/span&gt;&lt;br&gt;CollectionUtils.containsAny(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1 减去 list2&lt;/span&gt;&lt;br&gt;CollectionUtils.subtract(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [&amp;quot;3&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 合并两个list并去重&lt;/span&gt;&lt;br&gt;CollectionUtils.union(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;//[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 取两个list同时存在的元素&lt;/span&gt;&lt;br&gt;CollectionUtils.intersection(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;ListUtils&#34;&gt;&lt;a href=&#34;#ListUtils&#34; class=&#34;headerlink&#34; title=&#34;ListUtils&#34;&gt;&lt;/a&gt;ListUtils&lt;/h4&gt;&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list1&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;List&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;list2&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; Arrays.asList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;String&lt;/span&gt;[]&amp;#123;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 同CollectionUtils, 返回结果为List&lt;/span&gt;&lt;br&gt;ListUtils.subtract(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [&amp;quot;3&amp;quot;]&lt;/span&gt;&lt;br&gt;ListUtils.union(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;//[&amp;quot;1&amp;quot;, &amp;quot;2&amp;quot;, &amp;quot;3&amp;quot;, &amp;quot;4&amp;quot;]&lt;/span&gt;&lt;br&gt;ListUtils.intersection(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// [1&amp;quot;, &amp;quot;2&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 判断两个集合中的内容是否完全相同（顺序也一致）&lt;/span&gt;&lt;br&gt;ListUtils.isEqualList(list1, list2); &lt;span class=&#34;hljs-comment&#34;&gt;// false&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1如果为null则转换为空List&lt;/span&gt;&lt;br&gt;ListUtils.emptyIfNull(list1);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list1中所有元素做Hash&lt;/span&gt;&lt;br&gt;ListUtils.hashCodeForList(list1);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;除了以上介绍了两个还有 MapUtils，SetUtils，EnumerationUtils，IterableUtils 等不是很常用就不多做介绍了。&lt;/p&gt;
&lt;h3 id=&#34;集合扩展&#34;&gt;&lt;a href=&#34;#集合扩展&#34; class=&#34;headerlink&#34; title=&#34;集合扩展&#34;&gt;&lt;/a&gt;集合扩展&lt;/h3&gt;&lt;h4 id=&#34;FixedSizeList&#34;&gt;&lt;a href=&#34;#FixedSizeList&#34; class=&#34;headerlink&#34; title=&#34;FixedSizeList&#34;&gt;&lt;/a&gt;FixedSizeList&lt;/h4&gt;&lt;p&gt;FixedSizeList 用于装饰另一个 List 以阻止修改其大小。不支持添加、删除、清除等操作。set 方法是允许的（因为它不会改变列表大小），下面看代码示例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 装饰一下原list&lt;/span&gt;&lt;br&gt;List&amp;lt;String&amp;gt; list = FixedSizeList.fixedSizeList(sourceList);&lt;br&gt;list.set(&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [11,2,3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以下改变容器size的操作会抛出异常&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;list.remove(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;list.clear(); &lt;span class=&#34;hljs-comment&#34;&gt;// UnsupportedOperationException(&amp;quot;List is fixed size&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;SetUniqueList&#34;&gt;&lt;a href=&#34;#SetUniqueList&#34; class=&#34;headerlink&#34; title=&#34;SetUniqueList&#34;&gt;&lt;/a&gt;SetUniqueList&lt;/h4&gt;&lt;p&gt;SetUniqueList 用来装饰另一个 List 以确保不存在重复元素，内部使用了 Set 来判断重复问题&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 元素不重复的list&lt;/span&gt;&lt;br&gt;SetUniqueList&amp;lt;String&amp;gt; list = SetUniqueList.setUniqueList(sourceList);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 存在则不处理，不会影响原来顺序&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1,2]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;TransformedList&#34;&gt;&lt;a href=&#34;#TransformedList&#34; class=&#34;headerlink&#34; title=&#34;TransformedList&#34;&gt;&lt;/a&gt;TransformedList&lt;/h4&gt;&lt;p&gt;TransformedList 装饰另一个 List 以转换添加的对象。add 和 set 方法受此类影响。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;sourceList.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 转换list,在添加元素的时候会通过第二个参数Transformer转换一下&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// （Transformer接口只有一个抽象方法可以使用lambda表达式）&lt;/span&gt;&lt;br&gt;       &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// transformingList不会对原list的已有元素做转换&lt;/span&gt;&lt;br&gt;TransformedList&amp;lt;String&amp;gt; list = TransformedList.transformingList(sourceList, e -&amp;gt; e.concat(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1, 2, a_]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// transformedList会对原list的已有元素做转换&lt;/span&gt;&lt;br&gt;list = TransformedList.transformedList(sourceList, e -&amp;gt; e.concat(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [1_, 2_, a_]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PredicatedList&#34;&gt;&lt;a href=&#34;#PredicatedList&#34; class=&#34;headerlink&#34; title=&#34;PredicatedList&#34;&gt;&lt;/a&gt;PredicatedList&lt;/h4&gt;&lt;p&gt;PredicatedList 装饰另一个 List ，装饰后的 List 在添加元素的时候会调用 Predicate 接口来判断元素，匹配通过才会被添加到集合中。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;List&amp;lt;String&amp;gt; sourceList = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在添加元素的时候会通过第二个参数Predicate判断一下是否符合要求，符合要求才添加进来&lt;/span&gt;&lt;br&gt;PredicatedList&amp;lt;String&amp;gt; list = PredicatedList.predicatedList(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayList&lt;/span&gt;&amp;lt;&amp;gt;(), e -&amp;gt; e.startsWith(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;));&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;_4&amp;quot;&lt;/span&gt;);&lt;br&gt;println(list); &lt;span class=&#34;hljs-comment&#34;&gt;// [_4]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 以下会抛异常：java.lang.IllegalArgumentException: Cannot add Object &amp;#x27;4&amp;#x27;&lt;/span&gt;&lt;br&gt;list.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;ListOrderedSet&#34;&gt;&lt;a href=&#34;#ListOrderedSet&#34; class=&#34;headerlink&#34; title=&#34;ListOrderedSet&#34;&gt;&lt;/a&gt;ListOrderedSet&lt;/h4&gt;&lt;p&gt;ListOrderedSet 有序的Set，顺序按照元素添加顺序排列，类似 List&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 有序的set，按照插入顺序排序&lt;/span&gt;&lt;br&gt;Set&amp;lt;String&amp;gt; set = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ListOrderedSet&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;);&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt;);&lt;br&gt;set.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;哈哈&amp;quot;&lt;/span&gt;);&lt;br&gt;println(set); &lt;span class=&#34;hljs-comment&#34;&gt;// [aa,11,哈哈]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;Bag&#34;&gt;&lt;a href=&#34;#Bag&#34; class=&#34;headerlink&#34; title=&#34;Bag&#34;&gt;&lt;/a&gt;Bag&lt;/h4&gt;&lt;p&gt;Bag 接口是带计数功能的集合扩展，它继承了 Collection 接口，可以当做集合来使用&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// bag 带计数功能的集合&lt;/span&gt;&lt;br&gt;Bag&amp;lt;String&amp;gt; bag = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;HashBag&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;);&lt;br&gt;bag.add(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;);&lt;br&gt;println(bag.size()); &lt;span class=&#34;hljs-comment&#34;&gt;// 3&lt;/span&gt;&lt;br&gt;println(bag.getCount(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// 2&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;Map扩展&#34;&gt;&lt;a href=&#34;#Map扩展&#34; class=&#34;headerlink&#34; title=&#34;Map扩展&#34;&gt;&lt;/a&gt;Map扩展&lt;/h3&gt;&lt;h4 id=&#34;MultiValuedMap&#34;&gt;&lt;a href=&#34;#MultiValuedMap&#34; class=&#34;headerlink&#34; title=&#34;MultiValuedMap&#34;&gt;&lt;/a&gt;MultiValuedMap&lt;/h4&gt;&lt;p&gt;MultiValuedMap 和正常的 Map 有点区别，同一个 key 允许存放多个 value，这些 value 会放到一个 List 中。这个功能如果用 Java 的 Map 我们需要构造一个 &lt;code&gt;Map&amp;lt;String, List&amp;lt;String&amp;gt;&amp;gt;&lt;/code&gt; 加个各种操作来实现&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// list实现，允许value重复&lt;/span&gt;&lt;br&gt;ListValuedMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArrayListValuedHashMap&lt;/span&gt;&amp;lt;&amp;gt;(); &lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;李四&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 注意：value的泛型是String, 但是get方法返回的是List&amp;lt;String&amp;gt;&lt;/span&gt;&lt;br&gt;List&amp;lt;String&amp;gt; users2 = map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// [张三,李四,张三]&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// multiMap的其他方法&lt;/span&gt;&lt;br&gt;map.containsKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;map.containsValue(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;map.containsMapping(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;张三&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// true&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.size(); &lt;span class=&#34;hljs-comment&#34;&gt;// 4&lt;/span&gt;&lt;br&gt;&lt;br&gt;Collection&amp;lt;String&amp;gt; ss = map.values();&lt;span class=&#34;hljs-comment&#34;&gt;// [张三,李四,张三,12]&lt;/span&gt;&lt;br&gt;map.remove(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 清空user的所有value&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 转换为原生map&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Collection&amp;lt;String&amp;gt;&amp;gt; jMap = map.asMap();&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;CaseInsensitiveMap&#34;&gt;&lt;a href=&#34;#CaseInsensitiveMap&#34; class=&#34;headerlink&#34; title=&#34;CaseInsensitiveMap&#34;&gt;&lt;/a&gt;CaseInsensitiveMap&lt;/h4&gt;&lt;p&gt;key大小写不敏感的Map&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// key大小写不敏感&lt;/span&gt;&lt;br&gt;Map&amp;lt;String, Integer&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CaseInsensitiveMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;one&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;two&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;Integer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;o&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;ONE&amp;quot;&lt;/span&gt;);&lt;br&gt;println(o); &lt;span class=&#34;hljs-comment&#34;&gt;// 1&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;OrderedMap&#34;&gt;&lt;a href=&#34;#OrderedMap&#34; class=&#34;headerlink&#34; title=&#34;OrderedMap&#34;&gt;&lt;/a&gt;OrderedMap&lt;/h4&gt;&lt;p&gt;有顺序的 Map，按照插入顺序排序。如果使用 hashMap 的话 key 会按照 hash 值排序，可能和插入顺序一样，也可能不一样。key 数量和不同 JDK 版本都可能影响顺序，这是由于不同版本 jdk map 的 hash 算法有区别，hash 算法和当前 map 的容量也有关系。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// key有序：按照插入顺序&lt;/span&gt;&lt;br&gt;OrderedMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ListOrderedMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;哈哈&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 得到的keySet有序&lt;/span&gt;&lt;br&gt;Set&amp;lt;String&amp;gt; set = map.keySet(); &lt;span class=&#34;hljs-comment&#34;&gt;// 哈哈,此处,cc,dd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nk&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.nextKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// cc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;pk&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.previousKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;此处&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;// 哈哈&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;LRUMap&#34;&gt;&lt;a href=&#34;#LRUMap&#34; class=&#34;headerlink&#34; title=&#34;LRUMap&#34;&gt;&lt;/a&gt;LRUMap&lt;/h4&gt;&lt;p&gt;LRU（Least recently used，最近最少使用）算法根据数据的历史访问记录来进行淘汰数据，其核心思想是“如果数据最近被访问过，那么将来被访问的几率也更高”。&lt;/p&gt;
&lt;p&gt;各种缓存框架都有对 LRU 算法的支持，如 EhCache，GuavaCache，Redis 等，可以说是很常用的一种算法&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;LRUMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;LRUMap&lt;/span&gt;&amp;lt;&amp;gt;(&lt;span class=&#34;hljs-number&#34;&gt;2&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;aa&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cc&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 最早没有被使用的aa将被移出&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// [bb:2, cc:3]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 访问一次bb，此时在put的话将会移出最早没有被访问的cc&lt;/span&gt;&lt;br&gt;map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;bb&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dd&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;4&amp;quot;&lt;/span&gt;);&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// [bb:2, dd:4]&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;PassiveExpiringMap&#34;&gt;&lt;a href=&#34;#PassiveExpiringMap&#34; class=&#34;headerlink&#34; title=&#34;PassiveExpiringMap&#34;&gt;&lt;/a&gt;PassiveExpiringMap&lt;/h4&gt;&lt;p&gt;装饰一个 Map 以在达到过期时间时删除过期条目。当在 Map 中放置键值对时，此装饰器使用 ExpirationPolicy 来确定条目应保持多长时间，由到期时间值定义。当对 Map 做操作的时候才会检查元素是否过期并触发删除操作。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 存活一秒钟&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ttlMillis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;;&lt;br&gt;PassiveExpiringMap.ExpirationPolicy&amp;lt;String, String&amp;gt; ep = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PassiveExpiringMap&lt;/span&gt;.ConstantTimeToLiveExpirationPolicy&amp;lt;&amp;gt;(ttlMillis);&lt;br&gt;PassiveExpiringMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;PassiveExpiringMap&lt;/span&gt;&amp;lt;&amp;gt;(ep);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;a&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;b&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;3&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 等待一秒后在获取&lt;/span&gt;&lt;br&gt;Thread.sleep(&lt;span class=&#34;hljs-number&#34;&gt;1000&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;vc&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;c&amp;quot;&lt;/span&gt;);&lt;br&gt;println(vc); &lt;span class=&#34;hljs-comment&#34;&gt;// null&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;6-ReferenceMap&#34;&gt;&lt;a href=&#34;#6-ReferenceMap&#34; class=&#34;headerlink&#34; title=&#34;6. ReferenceMap&#34;&gt;&lt;/a&gt;6. ReferenceMap&lt;/h4&gt;&lt;p&gt;ReferenceMap 允许垃圾收集器删除映射。可以指定使用什么类型的引用来存储映射的键和值。如果使用的不是强引用，则垃圾收集器可以在键或值变得不可访问，或者 JVM 内存不足时删除映射。用它做一个简易的缓存不会导致存放内容过多导致内存溢出。&lt;/p&gt;
&lt;h4 id=&#34;BidiMap&#34;&gt;&lt;a href=&#34;#BidiMap&#34; class=&#34;headerlink&#34; title=&#34;BidiMap&#34;&gt;&lt;/a&gt;BidiMap&lt;/h4&gt;&lt;p&gt;BidiMap 允许在 key 和 value 之间进行双向查找。其中一个键可以查找一个值，一个值可以同样轻松地查找一个键。这个接口扩展了 Map，value 不允许重复，如果重复将同时覆盖旧的键值对。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 双向map, 可通过value获取key&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// value也不允许重复，如果重复将会覆盖旧值&lt;/span&gt;&lt;br&gt;BidiMap&amp;lt;String, String&amp;gt; map = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TreeBidiMap&lt;/span&gt;&amp;lt;&amp;gt;();&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dog&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;);&lt;br&gt;map.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;猫&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// value重复的话key也会被覆盖，相当于&amp;quot;cat2:猫&amp;quot;会覆盖掉&amp;quot;cat:猫&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// map.put(&amp;quot;cat2&amp;quot;, &amp;quot;猫&amp;quot;);&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;cat=猫, dog=狗&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; map.getKey(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;);&lt;br&gt;println(key); &lt;span class=&#34;hljs-comment&#34;&gt;// dog&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 反向，value变为key，key变为value&lt;/span&gt;&lt;br&gt;BidiMap&amp;lt;String, String&amp;gt; iMap = map.inverseBidiMap();&lt;br&gt;println(iMap); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;狗=dog, 猫=cat&amp;#125;&lt;/span&gt;&lt;br&gt;println(iMap.get(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;狗&amp;quot;&lt;/span&gt;)); &lt;span class=&#34;hljs-comment&#34;&gt;// dog&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 对反向map操作同时影响原map&lt;/span&gt;&lt;br&gt;iMap.put(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;鱼&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;fish&amp;quot;&lt;/span&gt;);&lt;br&gt;println(iMap); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;狗=dog, 猫=cat, 鱼=fish&amp;#125;&lt;/span&gt;&lt;br&gt;println(map); &lt;span class=&#34;hljs-comment&#34;&gt;// &amp;#123;cat=猫, dog=狗, fish=鱼&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Compress&#34;&gt;&lt;a href=&#34;#Commons-Compress&#34; class=&#34;headerlink&#34; title=&#34;Commons Compress&#34;&gt;&lt;/a&gt;Commons Compress&lt;/h2&gt;&lt;p&gt;压缩、解压缩文件的组件，可以操作rar、cpio、Unix dump、tar、zip、gzip、XZ、Pack200和bzip2格式的压缩文件。&lt;/p&gt;
&lt;h3 id=&#34;压缩&#34;&gt;&lt;a href=&#34;#压缩&#34; class=&#34;headerlink&#34; title=&#34;压缩&#34;&gt;&lt;/a&gt;压缩&lt;/h3&gt;&lt;p&gt;压缩：按某种算法减小文件所占用空间的大小&lt;br&gt;解压：按对应的逆向算法恢复文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;GzipCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.gz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GzipCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.gz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BZip2CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.bz2&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BZip2CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.bz2&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XZCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.xz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XZCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.xz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedLZ4CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedLZ4CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlockLZ4CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.block_lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BlockLZ4CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.block_lz4&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pack200CompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.pack&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Pack200CompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.pack&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeflateCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.deflate&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DeflateCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.deflate&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZMACompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.lzma&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LZMACompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.lzma&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedSnappyCompressorOutputStream&lt;/td&gt;
&lt;td&gt;压缩&lt;code&gt;&amp;quot;*.sz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FramedSnappyCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.sz&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZCompressorInputStream&lt;/td&gt;
&lt;td&gt;解压&lt;code&gt;&amp;quot;*.Z&lt;/code&gt;“文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;gzip&#34;&gt;&lt;a href=&#34;#gzip&#34; class=&#34;headerlink&#34; title=&#34;gzip&#34;&gt;&lt;/a&gt;gzip&lt;/h4&gt;&lt;p&gt;gzip是Unix，Linux上常用的压缩工具，也是当今的WEB站点上非常流行的压缩技术。其有压缩级别等概念，可以通过GzipParameters去设置。JDK8也自带了GZIPInputStream类，用法类似。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// gzip压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;GzipParameters&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;parameters&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipParameters&lt;/span&gt;();&lt;br&gt;parameters.setCompressionLevel(Deflater.BEST_COMPRESSION);&lt;br&gt;parameters.setOperatingSystem(&lt;span class=&#34;hljs-number&#34;&gt;3&lt;/span&gt;);&lt;br&gt;parameters.setFilename(FilenameUtils.getName(file));&lt;br&gt;parameters.setComment(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Test file&amp;quot;&lt;/span&gt;);&lt;br&gt;parameters.setModificationTime(System.currentTimeMillis());&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;fos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(file + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;GzipCompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gzos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorOutputStream&lt;/span&gt;(fos, parameters);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(file)) &amp;#123;&lt;br&gt;    IOUtils.copy(is, gzos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// gzip解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gzFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js.gz&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(gzFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;GzipCompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;GzipParameters&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; gis.getMetaData();&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.js&amp;quot;&lt;/span&gt;);&lt;br&gt;    FileUtils.copyToFile(gis, targetFile);&lt;br&gt;    targetFile.setLastModified(p.getModificationTime());&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;bz2&#34;&gt;&lt;a href=&#34;#bz2&#34; class=&#34;headerlink&#34; title=&#34;bz2&#34;&gt;&lt;/a&gt;bz2&lt;/h4&gt;&lt;p&gt;bz2是Linux下常见的压缩文件格式，是由具有高压缩率的压缩工具bzip2生成，以后缀为.bz2结尾的压缩文件。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 压缩bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.bz2&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(targetFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;BZip2CompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BZip2CompressorOutputStream&lt;/span&gt;(os);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(srcFile)) &amp;#123;&lt;br&gt;    IOUtils.copy(is, bzos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 解压bz2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.bz2&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;FileInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(bzFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;BZip2CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;bzis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;BZip2CompressorInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;    FileUtils.copyToFile(bzis, targetFile);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;其他压缩算法的使用方式和bz2基本一致，这里就不做代码示例了。&lt;/p&gt;
&lt;h3 id=&#34;归档&#34;&gt;&lt;a href=&#34;#归档&#34; class=&#34;headerlink&#34; title=&#34;归档&#34;&gt;&lt;/a&gt;归档&lt;/h3&gt;&lt;p&gt;归档：将许多零散的文件整理为一个文件，文件总大小基本不变&lt;br&gt;解包：从归档文件中释放文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;TarArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档&lt;code&gt;*.tar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TarArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包&lt;code&gt;*.tar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZipArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.zip&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ZipArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.zip&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JarArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.jar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;JarArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.jar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DumpArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档&lt;code&gt;*.dump&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DumpArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包&lt;code&gt;*.dump&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CpioArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.cpio&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CpioArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.cpio&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArArchiveOutputStream&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.ar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.ar&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArjArchiveInputStream&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.arj&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SevenZOutputFile&lt;/td&gt;
&lt;td&gt;归档压缩&lt;code&gt;*.7z&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SevenZFile&lt;/td&gt;
&lt;td&gt;解包解压&lt;code&gt;*.7z&lt;/code&gt;文件&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其中zip，jar，cpio，ar，7z既支持归档也支持压缩，能在归档的过程中做压缩处理。&lt;/p&gt;
&lt;p&gt;由于他们会处理一个个零散的文件，所以会有ArchiveEntry的概念，即一个ArchiveEntry代表归档包内的一个目录或文件。&lt;/p&gt;
&lt;h4 id=&#34;tar&#34;&gt;&lt;a href=&#34;#tar&#34; class=&#34;headerlink&#34; title=&#34;tar&#34;&gt;&lt;/a&gt;tar&lt;/h4&gt;&lt;p&gt;tar是Unix和Linux系统上的常用的压缩归档工具，可以将多个文件合并为一个文件，打包后的文件后缀亦为”tar”。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// tar压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcDir&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;targetFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveOutputStream&lt;/span&gt;(&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(targetFile))) &amp;#123;&lt;br&gt;        tarRecursive(tos, srcDir, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 递归压缩目录下的文件和目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;tarRecursive&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(TarArchiveOutputStream tos, File srcFile, String basePath)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (srcFile.isDirectory()) &amp;#123;&lt;br&gt;        File[] files = srcFile.listFiles();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nextBasePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; basePath + srcFile.getName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ArrayUtils.isEmpty(files)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 空目录&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveEntry&lt;/span&gt;(srcFile, nextBasePath);&lt;br&gt;            tos.putArchiveEntry(entry);&lt;br&gt;            tos.closeArchiveEntry();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (File file : files) &amp;#123;&lt;br&gt;                tarRecursive(tos, file, nextBasePath);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveEntry&lt;/span&gt;(srcFile, basePath + srcFile.getName());&lt;br&gt;        tos.putArchiveEntry(entry);&lt;br&gt;        FileUtils.copyFile(srcFile, tos);&lt;br&gt;        tos.closeArchiveEntry();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// tar解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;untar&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(is)) &amp;#123;&lt;br&gt;        TarArchiveEntry nextEntry;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((nextEntry = tis.getNextTarEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; nextEntry.getName();&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, name);&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;//如果是目录，创建目录&lt;/span&gt;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (nextEntry.isDirectory()) &amp;#123;&lt;br&gt;                file.mkdir();&lt;br&gt;            &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-comment&#34;&gt;//文件则写入具体的路径中&lt;/span&gt;&lt;br&gt;                FileUtils.copyToFile(tis, file);&lt;br&gt;                file.setLastModified(nextEntry.getLastModifiedDate().getTime());&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;7z&#34;&gt;&lt;a href=&#34;#7z&#34; class=&#34;headerlink&#34; title=&#34;7z&#34;&gt;&lt;/a&gt;7z&lt;/h4&gt;&lt;p&gt;7z 是一种全新的压缩格式，它拥有极高的压缩比。&lt;/p&gt;
&lt;p&gt;7z 格式的主要特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开放的结构&lt;/li&gt;
&lt;li&gt;高压缩比&lt;/li&gt;
&lt;li&gt;强大的 AES-256 加密&lt;/li&gt;
&lt;li&gt;能够兼容任意压缩、转换、加密算法&lt;/li&gt;
&lt;li&gt;最高支持 16000000000 GB 的文件压缩&lt;/li&gt;
&lt;li&gt;以 Unicode 为标准的文件名&lt;/li&gt;
&lt;li&gt;支持固实压缩&lt;/li&gt;
&lt;li&gt;支持文件头压缩&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 7z压缩&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;_7z&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;SevenZOutputFile&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outputFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SevenZOutputFile&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.7z&amp;quot;&lt;/span&gt;))) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;srcFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;);&lt;br&gt;        _7zRecursive(outputFile, srcFile, &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 递归压缩目录下的文件和目录&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;_7zRecursive&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;(SevenZOutputFile _7zFile, File srcFile, String basePath)&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (srcFile.isDirectory()) &amp;#123;&lt;br&gt;        File[] files = srcFile.listFiles();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;nextBasePath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; basePath + srcFile.getName() + &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;;&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 空目录&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (ArrayUtils.isEmpty(files)) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;SevenZArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; _7zFile.createArchiveEntry(srcFile, nextBasePath);&lt;br&gt;            _7zFile.putArchiveEntry(entry);&lt;br&gt;            _7zFile.closeArchiveEntry();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (File file : files) &amp;#123;&lt;br&gt;                _7zRecursive(_7zFile, file, nextBasePath);&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;SevenZArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;entry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; _7zFile.createArchiveEntry(srcFile, basePath + srcFile.getName());&lt;br&gt;        _7zFile.putArchiveEntry(entry);&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt;[] bs = FileUtils.readFileToByteArray(srcFile);&lt;br&gt;        _7zFile.write(bs);&lt;br&gt;        _7zFile.closeArchiveEntry();&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt; &lt;span class=&#34;hljs-comment&#34;&gt;// 7z解压&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;hljs-title function_&#34;&gt;un7z&lt;/span&gt;&lt;span class=&#34;hljs-params&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;throws&lt;/span&gt; IOException &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;SevenZFile&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;archive&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;SevenZFile&lt;/span&gt;(&lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test.7z&amp;quot;&lt;/span&gt;))) &amp;#123;&lt;br&gt;        SevenZArchiveEntry entry;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((entry = archive.getNextEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, entry.getName());&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (entry.isDirectory()) &amp;#123;&lt;br&gt;                file.mkdirs();&lt;br&gt;            &amp;#125;&lt;br&gt;            &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (entry.hasStream()) &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;byte&lt;/span&gt; [] buf = &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;byte&lt;/span&gt; [&lt;span class=&#34;hljs-number&#34;&gt;1024&lt;/span&gt;];&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;final&lt;/span&gt; &lt;span class=&#34;hljs-type&#34;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;baos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ByteArrayOutputStream&lt;/span&gt;();&lt;br&gt;                &lt;span class=&#34;hljs-keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;len&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;; (len = archive.read(buf)) &amp;gt; &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;;) &amp;#123;&lt;br&gt;                    baos.write(buf, &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;, len);&lt;br&gt;                &amp;#125;&lt;br&gt;                FileUtils.writeByteArrayToFile(file, baos.toByteArray());&lt;br&gt;            &amp;#125;&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;修改归档文件&#34;&gt;&lt;a href=&#34;#修改归档文件&#34; class=&#34;headerlink&#34; title=&#34;修改归档文件&#34;&gt;&lt;/a&gt;修改归档文件&lt;/h3&gt;&lt;p&gt;有时候我们会有修改归档内文件的需求，比如添加、删除一个文件，修改其中的文件内容等，当然我们也可以全部解压出来改完后在压缩回去。这样除了代码量多一些外，归档文件大也会导致操作时间过长。那么有没有办法用代码去动态的修改归档文件里的内容呢？&lt;/p&gt;
&lt;p&gt;org.apache.commons.compress.changes包下正好就提供了一些类用于动态的修改归档文件里的内容。下面看一个简单的例子&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tarFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(tarFile);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 替换后会覆盖原test.tar，如果是windows可能会由于文件被访问而覆盖报错&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(tarFile);&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;TarArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tais&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(is);&lt;br&gt;     &lt;span class=&#34;hljs-type&#34;&gt;TarArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;taos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveOutputStream&lt;/span&gt;(os)) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSet&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;changes&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChangeSet&lt;/span&gt;();&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 删除&amp;quot;test.tar中&amp;quot;的&amp;quot;dir/1.txt&amp;quot;文件&lt;/span&gt;&lt;br&gt;    changes.delete(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;dir/1.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 删除&amp;quot;test.tar&amp;quot;中的&amp;quot;t&amp;quot;目录&lt;/span&gt;&lt;br&gt;    changes.delete(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;t&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 添加文件，如果已存在则替换&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;addFile&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/a.txt&amp;quot;&lt;/span&gt;);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ArchiveEntry&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;addEntry&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; taos.createArchiveEntry(addFile, addFile.getName());&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// add可传第三个参数：true: 已存在则替换(默认值)， false: 不替换&lt;/span&gt;&lt;br&gt;    changes.add(addEntry, &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(addFile));&lt;br&gt;    &lt;span class=&#34;hljs-comment&#34;&gt;// 执行修改&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSetPerformer&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;performer&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ChangeSetPerformer&lt;/span&gt;(changes);&lt;br&gt;    &lt;span class=&#34;hljs-type&#34;&gt;ChangeSetResults&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; performer.perform(tais, taos);&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;其他&#34;&gt;&lt;a href=&#34;#其他&#34; class=&#34;headerlink&#34; title=&#34;其他&#34;&gt;&lt;/a&gt;其他&lt;/h3&gt;&lt;h4 id=&#34;简单工厂&#34;&gt;&lt;a href=&#34;#简单工厂&#34; class=&#34;headerlink&#34; title=&#34;简单工厂&#34;&gt;&lt;/a&gt;简单工厂&lt;/h4&gt;&lt;p&gt;commons-compress还提供了一些简单的工厂类用户动态的获取压缩流和归档流。&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用factory动态获取归档流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveStreamFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;ArchiveStreamFactory&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;archiveName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; ArchiveStreamFactory.TAR;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/in.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/out.tar&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;ais&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createArchiveInputStream(archiveName, is);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;ArchiveOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;aos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createArchiveOutputStream(archiveName, os);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 其他业务操作&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// ------------------------&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 使用factory动态获取压缩流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorStreamFactory&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;factory&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;CompressorStreamFactory&lt;/span&gt;();&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;compressName&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; CompressorStreamFactory.GZIP;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/in.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;OutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;os&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileOutputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/out.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 动态获取实现类，此时ais实际上是TarArchiveOutPutStream&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;cis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createCompressorInputStream(compressName, is);&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorOutputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;cos&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; factory.createCompressorOutputStream(compressName, os);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 其他业务操作&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h4 id=&#34;同时解压解包&#34;&gt;&lt;a href=&#34;#同时解压解包&#34; class=&#34;headerlink&#34; title=&#34;同时解压解包&#34;&gt;&lt;/a&gt;同时解压解包&lt;/h4&gt;&lt;p&gt;上面说了很多都是单一的操作，那么如果解压”test.tar.gz”这种归档和压缩于一体的文件呢？&lt;/p&gt;
&lt;p&gt;其实很简单，我们不需要先解压在解包，可以一步同时完成解压和解包，只需要将对应的流包装一下即可（不得不感叹Java IO的装饰者模式设计真的很巧妙）。下面看代码示例&lt;/p&gt;
&lt;figure class=&#34;highlight java&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs java&#34;&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 解压 解包test.tar.gz文件&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;outPath&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test&amp;quot;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;InputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;FileInputStream&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;/test.tar.gz&amp;quot;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 先解压，所以需要先用gzip流包装文件流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-type&#34;&gt;CompressorInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;gis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;GzipCompressorInputStream&lt;/span&gt;(is);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 在解包，用tar流包装gzip流&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;try&lt;/span&gt; (&lt;span class=&#34;hljs-type&#34;&gt;ArchiveInputStream&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;tgis&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;TarArchiveInputStream&lt;/span&gt;(gis)) &amp;#123;&lt;br&gt;    ArchiveEntry nextEntry;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;while&lt;/span&gt; ((nextEntry = tgis.getNextEntry()) != &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;) &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; nextEntry.getName();&lt;br&gt;        &lt;span class=&#34;hljs-type&#34;&gt;File&lt;/span&gt; &lt;span class=&#34;hljs-variable&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;hljs-keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;hljs-title class_&#34;&gt;File&lt;/span&gt;(outPath, name);&lt;br&gt;        &lt;span class=&#34;hljs-comment&#34;&gt;// 如果是目录，创建目录&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-keyword&#34;&gt;if&lt;/span&gt; (nextEntry.isDirectory()) &amp;#123;&lt;br&gt;            file.mkdir();&lt;br&gt;        &amp;#125; &lt;span class=&#34;hljs-keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-comment&#34;&gt;// 文件则写入具体的路径中&lt;/span&gt;&lt;br&gt;            FileUtils.copyToFile(tgis, file);&lt;br&gt;            file.setLastModified(nextEntry.getLastModifiedDate().getTime());&lt;br&gt;        &amp;#125;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;Commons-Configuration&#34;&gt;&lt;a href=&#34;#Commons-Configuration&#34; class=&#34;headerlink&#34; title=&#34;Commons Configuration&#34;&gt;&lt;/a&gt;Commons Configuration&lt;/h2&gt;&lt;p&gt;是一个Java应用程序的配置管理工具，可以从properties或者xml文件中加载配置信息。&lt;/p&gt;
&lt;h2 id=&#34;Commons-CSV&#34;&gt;&lt;a href=&#34;#Commons-CSV&#34; class=&#34;headerlink&#34; title=&#34;Commons CSV&#34;&gt;&lt;/a&gt;Commons CSV&lt;/h2&gt;&lt;p&gt;是一个用来读写各种Comma Separated Value(CSV)格式文件的Java类库。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Daemon&#34;&gt;&lt;a href=&#34;#Commons-Daemon&#34; class=&#34;headerlink&#34; title=&#34;Commons Daemon&#34;&gt;&lt;/a&gt;Commons Daemon&lt;/h2&gt;&lt;p&gt;实现将普通的Java应用变成系统的后台服务,例如 Tomcat 就是利用这个项目来实现作为 Linux 和 Windows 的服务启动和停止的。&lt;/p&gt;
&lt;h2 id=&#34;Commons-DBCP&#34;&gt;&lt;a href=&#34;#Commons-DBCP&#34; class=&#34;headerlink&#34; title=&#34;Commons DBCP&#34;&gt;&lt;/a&gt;Commons DBCP&lt;/h2&gt;&lt;p&gt;数据库连接池。&lt;/p&gt;
&lt;h2 id=&#34;Commons-DBUtils&#34;&gt;&lt;a href=&#34;#Commons-DBUtils&#34; class=&#34;headerlink&#34; title=&#34;Commons DBUtils&#34;&gt;&lt;/a&gt;Commons DBUtils&lt;/h2&gt;&lt;p&gt;是JDBC工具组件，对传统操作数据库的类进行二次封装，可以把结果集转化成List。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Digester&#34;&gt;&lt;a href=&#34;#Commons-Digester&#34; class=&#34;headerlink&#34; title=&#34;Commons Digester&#34;&gt;&lt;/a&gt;Commons Digester&lt;/h2&gt;&lt;p&gt;是XML到Java对象的映射工具集。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Email&#34;&gt;&lt;a href=&#34;#Commons-Email&#34; class=&#34;headerlink&#34; title=&#34;Commons Email&#34;&gt;&lt;/a&gt;Commons Email&lt;/h2&gt;&lt;p&gt;是邮件操作组件，对Java Mail API进行了封装，提供了常用的邮件发送和接收类，简化邮件操作。该组件依赖Java Mail API。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Exec&#34;&gt;&lt;a href=&#34;#Commons-Exec&#34; class=&#34;headerlink&#34; title=&#34;Commons Exec&#34;&gt;&lt;/a&gt;Commons Exec&lt;/h2&gt;&lt;p&gt;提供一些常用的方法用来执行外部进程，如执行exe文件或命令行。&lt;/p&gt;
&lt;h2 id=&#34;Commons-FileUpload&#34;&gt;&lt;a href=&#34;#Commons-FileUpload&#34; class=&#34;headerlink&#34; title=&#34;Commons FileUpload&#34;&gt;&lt;/a&gt;Commons FileUpload&lt;/h2&gt;&lt;p&gt;为Web应用程序或Servlet提供文件上传功能，Struts2和SpringMVC的文件上传组件。&lt;/p&gt;
&lt;h2 id=&#34;Commons-IO&#34;&gt;&lt;a href=&#34;#Commons-IO&#34; class=&#34;headerlink&#34; title=&#34;Commons IO&#34;&gt;&lt;/a&gt;Commons IO&lt;/h2&gt;&lt;p&gt;是处理IO的工具类包，对java.io进行扩展，提供了更加方便的IO操作。&lt;/p&gt;
&lt;h2 id=&#34;Commons-JCI&#34;&gt;&lt;a href=&#34;#Commons-JCI&#34; class=&#34;headerlink&#34; title=&#34;Commons JCI&#34;&gt;&lt;/a&gt;Commons JCI&lt;/h2&gt;&lt;p&gt;提供通用的Java编译器接口。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Lang3&#34;&gt;&lt;a href=&#34;#Commons-Lang3&#34; class=&#34;headerlink&#34; title=&#34;Commons Lang3&#34;&gt;&lt;/a&gt;Commons Lang3&lt;/h2&gt;&lt;p&gt;是处理Java基本对象方法的工具类包，该类包提供对字符、数组等基本对象的操作，弥补了java.lang api基本处理方法上的不足。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://commons.apache.org/proper/commons-lang/javadocs/api-release/index.html&#34;&gt;API 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;工具类&lt;/th&gt;
&lt;th&gt;简介&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ArrayUtils&lt;/td&gt;
&lt;td&gt;用于对数组的操作，如添加、查找、删除、子数组、倒序、元素类型转换等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BitField&lt;/td&gt;
&lt;td&gt;用于操作位元，提供了一些方便而安全的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BooleanUtils&lt;/td&gt;
&lt;td&gt;用于操作和转换boolean或者Boolean及相应的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharEncoding&lt;/td&gt;
&lt;td&gt;包含了Java环境支持的字符编码，提供是否支持某种编码的判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharRange&lt;/td&gt;
&lt;td&gt;用于设定字符范围并做相应检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharSet&lt;/td&gt;
&lt;td&gt;用于设定一组字符作为范围并做相应检查&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharSetUtils&lt;/td&gt;
&lt;td&gt;用于操作CharSet&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CharUtils&lt;/td&gt;
&lt;td&gt;用于操作char值和Character对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClassUtils&lt;/td&gt;
&lt;td&gt;用于对Java类的操作，不使用反射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ObjectUtils&lt;/td&gt;
&lt;td&gt;用于操作Java对象，提供null安全的访问和其他一些功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RandomStringUtils&lt;/td&gt;
&lt;td&gt;用于生成随机的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SerializationUtils&lt;/td&gt;
&lt;td&gt;用于处理对象序列化，提供比一般Java序列化更高级的处理能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringEscapeUtils&lt;/td&gt;
&lt;td&gt;用于正确处理转义字符，产生正确的Java、JavaScript、HTML、XML和SQL代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;StringUtils&lt;/td&gt;
&lt;td&gt;处理String的核心类，提供了相当多的功能&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SystemUtils&lt;/td&gt;
&lt;td&gt;在java.lang.System基础上提供更方便的访问，如用户路径、Java版本、时区、操作系统等判断&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Validate&lt;/td&gt;
&lt;td&gt;提供验证的操作，有点类似assert断言&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WordUtils&lt;/td&gt;
&lt;td&gt;用于处理单词大小写、换行等&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;Commons-Logging&#34;&gt;&lt;a href=&#34;#Commons-Logging&#34; class=&#34;headerlink&#34; title=&#34;Commons Logging&#34;&gt;&lt;/a&gt;Commons Logging&lt;/h2&gt;&lt;p&gt;提供统一的日志接口，同时兼顾轻量级和不依赖于具体的实现。类包给中间件&amp;#x2F;日志工具开发者一个简单的日志操作抽象，允许程序开发人员使用不同的具体日志实现工具。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Math&#34;&gt;&lt;a href=&#34;#Commons-Math&#34; class=&#34;headerlink&#34; title=&#34;Commons Math&#34;&gt;&lt;/a&gt;Commons Math&lt;/h2&gt;&lt;p&gt;轻量级自容器的数学和统计计算方法类包，包含大多数常用的数值算法。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Net&#34;&gt;&lt;a href=&#34;#Commons-Net&#34; class=&#34;headerlink&#34; title=&#34;Commons Net&#34;&gt;&lt;/a&gt;Commons Net&lt;/h2&gt;&lt;p&gt;封装了各种网络协议的客户端，支持FTP、NNTP、SMTP、POP3、Telnet等协议。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Pool&#34;&gt;&lt;a href=&#34;#Commons-Pool&#34; class=&#34;headerlink&#34; title=&#34;Commons Pool&#34;&gt;&lt;/a&gt;Commons Pool&lt;/h2&gt;&lt;p&gt;提供了一整套用于实现对象池化的框架，以及若干各具特色的对象池实现，可以有效地减少处理对象池化时的工作量。类包用于提高像文件句柄、数据库连接、socket通信这类大对象的调用效率，简单的说就是一种对象一次创建多次使用的技术。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Primitives&#34;&gt;&lt;a href=&#34;#Commons-Primitives&#34; class=&#34;headerlink&#34; title=&#34;Commons Primitives&#34;&gt;&lt;/a&gt;Commons Primitives&lt;/h2&gt;&lt;p&gt;提供了一个更小，更快和更易使用的对Java基本类型的支持。&lt;/p&gt;
&lt;h2 id=&#34;Commons-Validator&#34;&gt;&lt;a href=&#34;#Commons-Validator&#34; class=&#34;headerlink&#34; title=&#34;Commons Validator&#34;&gt;&lt;/a&gt;Commons Validator&lt;/h2&gt;&lt;p&gt;提供了一个简单的、可扩展的框架来在一个XML文件中定义校验器(校验方法)和校验规则。支持校验规则的和错误消息的国际化。&lt;/p&gt;
&lt;h2 id=&#34;Apache-HttpClient&#34;&gt;&lt;a href=&#34;#Apache-HttpClient&#34; class=&#34;headerlink&#34; title=&#34;Apache HttpClient&#34;&gt;&lt;/a&gt;Apache HttpClient&lt;/h2&gt;&lt;p&gt;曾经是Apache Commons的子项目，后来独立出来。HttpClient简化HTTP客户端与服务器的各种通讯，实现HTTP客户端程序（也就是浏览器程序）的功能。&lt;/p&gt;
</content>
        <category term="常用开发库" />
        <category term="工具类" />
        <category term="Apache Common" />
        <updated>2024-01-03T13:13:21.652Z</updated>
    </entry>
</feed>
