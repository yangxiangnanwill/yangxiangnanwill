{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"crontab\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/Linux/Crontab-%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/",
            "title": "Crontab-定时任务",
            "date_published": "2024-01-03T13:13:21.659Z",
            "content_html": "<h1 id=\"Linux-Crontab-定时任务\"><a href=\"#Linux-Crontab-定时任务\" class=\"headerlink\" title=\"Linux Crontab 定时任务\"></a>Linux Crontab 定时任务</h1><blockquote>\n<p>很多时候，我们需要定时执行某个应用或者某段脚本，在linux上，可以使用cron服务，它有点类似于Windows上的任务计划程序。</p>\n</blockquote>\n<h2 id=\"crond和crontab\"><a href=\"#crond和crontab\" class=\"headerlink\" title=\"crond和crontab\"></a>crond和crontab</h2><p>首先需要分清楚两个概念：crond和crontab。crond是后台守护进程的名称（d代表daemon），用来实际执行脚本，它在系统中是一直运行的。可以通过下面的方式查看到它：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">systemctl | grep crond<br></code></pre></td></tr></table></figure>\n\n<p>crontab是一个工具，用来列出cron中当前运行的作业（应用或脚本等）、向cron中添加作业、编辑作业、删除作业。它并不是一直在后台运行的，是一个短时的命令行工具，执行完就结束了。</p>\n<p>可以简单理解crond和crontab组合起来提供cron服务。</p>\n<p>大体流程如下：</p>\n<p><img src=\"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg-blog.csdnimg.cn%2Fimg_convert%2F634d76f98ad0252888ea044489e3d5bf.png&refer=http%3A%2F%2Fimg-blog.csdnimg.cn&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1627445494&t=e65617a03bb7ecea66217142dd0da756\" alt=\"img\"></p>\n<h2 id=\"crontab配置文件\"><a href=\"#crontab配置文件\" class=\"headerlink\" title=\"crontab配置文件\"></a>crontab配置文件</h2><p>Linux下的任务调度分为两类：系统任务调度和用户任务调度。Linux系统任务是由 cron (crond) 这个系统服务来控制的，这个系统服务是默认启动的。用户自己设置的计划任务则使用crontab命令。使用以下命令进行查看：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">cat /etc/crontab<br></code></pre></td></tr></table></figure>\n\n<p>配置文件可以看到如下解释：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>前四行是用来配置crond任务运行的环境变量，第一行SHELL变量指定了系统要使用哪个shell，这里是bash；第二行PATH变量指定了系统执行命令的路径；第三行MAILTO变量指定了crond的任务执行信息将通过电子邮件发送给root用户，如果MAILTO变量的值为空，则表示不发送任务执行信息给用户；第四行的HOME变量指定了在执行命令或者脚本时使用的主目录。</p>\n<p>用户定期要执行的工作，比如用户数据备份、定时邮件提醒等。用户可以使用 crontab 工具来定制自己的计划任务。所有用户定义的crontab 文件都被保存在 &#x2F;var&#x2F;spool&#x2F;cron目录中。其文件名与用户名一致。</p>\n<h2 id=\"crontab文件含义\"><a href=\"#crontab文件含义\" class=\"headerlink\" title=\"crontab文件含义\"></a>crontab文件含义</h2><p>用户所建立的crontab文件中，每一行都代表一项任务，每行的每个字段代表一项设置，它的格式共分为六个字段，前五段是时间设定段，第六段是要执行的命令段，格式如下：<br>minute hour day month week command</p>\n<p><img src=\"https://www.linuxprobe.com/wp-content/uploads/2016/09/crontab.png\"></p>\n<p>在以上各个字段中，还可以使用以下特殊字符：</p>\n<p>“<em>&quot;代表所有的取值范围内的数字，如月份字段为</em>，则表示1到12个月；</p>\n<p>“&#x2F;“代表每一定时间间隔的意思，如分钟字段为*&#x2F;10，表示每10分钟执行1次。</p>\n<p>“-“代表从某个区间范围，是闭区间。如“2-5”表示“2,3,4,5”，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。</p>\n<p>“,”分散的数字（不一定连续），如1,2,3,4,7,9。</p>\n<p>注：由于各个地方每周第一天不一样，因此Sunday&#x3D;0（第一天）或Sunday&#x3D;7（最后1天）。</p>\n<h2 id=\"crontab命令详解\"><a href=\"#crontab命令详解\" class=\"headerlink\" title=\"crontab命令详解\"></a>crontab命令详解</h2><blockquote>\n<p>因为crond是一个守护进程，所以在系统开机后，通过<code>systemctl start crond</code>启动一次以后（默认自动启动的），几乎就不需要再管它了，之后的操作都通过crontab来完成。</p>\n</blockquote>\n<h3 id=\"查看现有任务\"><a href=\"#查看现有任务\" class=\"headerlink\" title=\"查看现有任务\"></a>查看现有任务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>no crontab for root<br></code></pre></td></tr></table></figure>\n\n<p>因为现在没有任务，所以显示的是 no crontab for root，可见，任务是根据用户进行区分的。</p>\n<h3 id=\"添加定时任务\"><a href=\"#添加定时任务\" class=\"headerlink\" title=\"添加定时任务\"></a>添加定时任务</h3><p>为了便于测试，我们可以创建这样一个简单的脚本(位于~&#x2F;tmp&#x2F;job1.sh)：在一个文件末尾追加当前时间。脚本如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">date +&#x27;%F %T&#x27; &gt;&gt; ~/tmp/job1.log<br></code></pre></td></tr></table></figure>\n\n<p>创建完成后记得赋予一下执行权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">chmod</span> 755 job1.sh</span><br></code></pre></td></tr></table></figure>\n\n<p>接下来，需要配置多久运行一次。这里通过cron表达式来设置，它非常灵活，可以很简单也可以很复杂。cron表达式的应用广泛，不止用在系统层面，在其他各种编程语言的类库当中，都有类似的实现，语法略有不同。使用下面的命令可以查看linux系统中cron表达式的写法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">cat</span> /etc/crontab</span> <br>SHELL=/bin/bash<br>PATH=/sbin:/bin:/usr/sbin:/usr/bin<br>MAILTO=root<br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">For details see man 4 crontabs</span><br><span class=\"hljs-meta prompt_\"></span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">Example of job definition:</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">.---------------- minute (0 - 59)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  .------------- hour (0 - 23)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  .---------- day of month (1 - 31)</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">|  |  |  |  |</span><br><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">*  *  *  *  * user-name  <span class=\"hljs-built_in\">command</span> to be executed</span><br></code></pre></td></tr></table></figure>\n\n<p>如果需要查看更详细的用法，可以使用 <code># man crontab</code> 命令查看。</p>\n<p>整理后如下表所示：</p>\n<blockquote>\n<p><strong>注意：</strong>不同的cron应用存在很大差异，比如crontab不支持“秒”，特殊字符也支持的比较少（支持,-*&#x2F;）。而其他一些应用，则支持“秒”和更多的特殊字符。这里为了更完备一些，所以全都列出来了，省的以后再去总结。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">必须</th>\n<th align=\"left\">取值范围</th>\n<th align=\"left\">可设置的特殊字符</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">分</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-59</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">时</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-23</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(月)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-31</td>\n<td align=\"left\">,-*?&#x2F;LW</td>\n</tr>\n<tr>\n<td align=\"left\">月</td>\n<td align=\"left\">是</td>\n<td align=\"left\">1-12 或者 jan-dec</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n<tr>\n<td align=\"left\">日(周)</td>\n<td align=\"left\">是</td>\n<td align=\"left\">0-7（0和7都是星期天） 或者 sun-sat</td>\n<td align=\"left\">,-*?&#x2F;L#</td>\n</tr>\n<tr>\n<td align=\"left\">年</td>\n<td align=\"left\">否</td>\n<td align=\"left\">留空，1970-2099</td>\n<td align=\"left\">,-*&#x2F;</td>\n</tr>\n</tbody></table>\n<p>几个特殊字符的含义：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">字符</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">*</td>\n<td align=\"left\">全部。意思是在该时间的任意点都应当执行</td>\n</tr>\n<tr>\n<td align=\"left\">?</td>\n<td align=\"left\">不指定，任意。仅用于 日(月)和日(周)。0 0 5 * ? 代表每个月的第5天零点，不论星期几。 0 0 ? * 1 代表每周一，不论是当月的哪天。</td>\n</tr>\n<tr>\n<td align=\"left\">,</td>\n<td align=\"left\">多个值的分隔符，例如1,5,10</td>\n</tr>\n<tr>\n<td align=\"left\">-</td>\n<td align=\"left\">代表连续值，例如1-20</td>\n</tr>\n<tr>\n<td align=\"left\">&#x2F;</td>\n<td align=\"left\">步长。例如 5&#x2F;15，代表从5开始，以15为步长。因此，当5&#x2F;15位于分钟的位置时，表示小时内的第5、20、35和50分钟。</td>\n</tr>\n<tr>\n<td align=\"left\">L</td>\n<td align=\"left\">最后一天。可以是每月最后一天或者每周最后一天。如果用在 天(周)字段，并且前面加数字，则表示最后一个周N。例如5L，表示最后一个周五（5表示周五，L表示最后）。</td>\n</tr>\n<tr>\n<td align=\"left\">W</td>\n<td align=\"left\">工作日，指周一到周五的任意一天</td>\n</tr>\n<tr>\n<td align=\"left\">#</td>\n<td align=\"left\">表示第几个的意思，例如 6#3，表示当月第3个星期六（6表示周六，3表示第3个）</td>\n</tr>\n</tbody></table>\n<p>几个简单的例子：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">表达式</th>\n<th align=\"left\">含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">* * * * *</td>\n<td align=\"left\">每分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">30 * * * *</td>\n<td align=\"left\">每小时的30分执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">*&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次</td>\n</tr>\n<tr>\n<td align=\"left\">0&#x2F;5 * * * *</td>\n<td align=\"left\">每5分钟执行一次，且仅在0,5,15,20…55分执行</td>\n</tr>\n<tr>\n<td align=\"left\">5 0 * * *</td>\n<td align=\"left\">每天的00:05执行一次</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p><strong>注意：</strong>crontab中 日(周)不接受“?”的写法，在很多其他应用中则可以，例如Quartz.Net库：<a href=\"https://www.quartz-scheduler.net/documentation/quartz-2.x/tutorial/crontrigger.html\">https://www.quartz-scheduler.net/</a></p>\n</blockquote>\n<blockquote>\n<p><strong>提示：</strong>更多的用法，可以参考：<a href=\"https://crontab.guru/\">https://crontab.guru</a></p>\n</blockquote>\n<p>接下来，如果我们想要每分钟执行一下前面创建的job1.sh脚本，需要再创建一个crontab作业(jobs.cron，后缀名无所谓，这里只是为了便于识别)，其中包含了cron表达式，用于表明job1.sh执行的周期：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<p>使用crontab将它加入到计划中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>再次查看当前计划，可以看到这样的结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"删除定时任务\"><a href=\"#删除定时任务\" class=\"headerlink\" title=\"删除定时任务\"></a>删除定时任务</h3><p>先将job1.sh复制一份，稍作修改，然后编辑一下jobs.cron，将job2.sh也加入进去：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>然后重新加入到cron服务中。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab jobs.cron</span><br></code></pre></td></tr></table></figure>\n\n<p>接着查看一下当前cron中的作业：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -l</span><br>* * * * * ~/tmp/job1.sh<br>*/5 * * * * ~/tmp/job2.sh<br></code></pre></td></tr></table></figure>\n\n<p>可以看到上面有job1.sh和job2.sh两个作业，其效果相当于将jobs.cron文件的内容拷贝进去。</p>\n<p>如果想要删除作业，则执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -r</span><br></code></pre></td></tr></table></figure>\n\n<p>这样会删除所有作业，如果只想删除一个，或者想对作业进行编辑，可以使用下面的命令。</p>\n<h3 id=\"编辑定时任务\"><a href=\"#编辑定时任务\" class=\"headerlink\" title=\"编辑定时任务\"></a>编辑定时任务</h3><p><code>crontab -e</code> 命令会调用编辑器（通常是vi或者vim），直接编辑计划作业，相当于编辑jobs.cron。只不过编辑完立即生效，不需要再执行crontab进行加载。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\">crontab -e</span><br>crontab: installing new crontab<br></code></pre></td></tr></table></figure>\n\n<p>统一期间，个人不建议使用crontab -e编辑计划，而是编辑jobs.cron，然后进行加载。这样的话jobs.cron文件相当于一个备份，方便日后恢复。</p>\n<h2 id=\"查看作业日志\"><a href=\"#查看作业日志\" class=\"headerlink\" title=\"查看作业日志\"></a>查看作业日志</h2><p>在作业执行出现异常（或作业脚本写日志）时，cron服务会输出日志，在我的CentOS7系统上，查看的地址位于&#x2F;var&#x2F;log下。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\"># </span><span class=\"language-bash\"><span class=\"hljs-built_in\">ls</span> /var/log | grep cron</span><br>cron<br>cron-20180819<br>cron-20180826<br>cron-20180902<br>cron-20180909<br></code></pre></td></tr></table></figure>\n\n<p>如果想让自己编写的作业输出日志，可以这样编写jobs.cron：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\">* * * * * ~/tmp/job1.sh &gt;&gt; /var/log/job1.log 2&gt;&amp;1<br></code></pre></td></tr></table></figure>\n\n<p>上面的意思是将stdout和stderr输出到&#x2F;var&#x2F;log&#x2F;job1.log。</p>\n<p>修改job1.sh，在底部加入<code>echo hello</code>。然后调用<code>crontab jobs.cron</code>重新加载，然后在&#x2F;var&#x2F;log目录下可以看到job1.log，其中包含了输出的文本“hello”。</p>\n",
            "tags": [
                "CentOS",
                "Linux",
                "Crontab"
            ]
        }
    ]
}