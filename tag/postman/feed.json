{
    "version": "https://jsonfeed.org/version/1",
    "title": "Will • All posts by \"postman\" tag",
    "description": "愿你一生努力，一生被爱",
    "home_page_url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io",
    "items": [
        {
            "id": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/",
            "url": "https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/",
            "title": "PostMan教程",
            "date_published": "2024-01-03T13:13:21.665Z",
            "content_html": "<blockquote>\n<p>推荐一款接口测试工具！POSTMAN！ 简单来说，四个词，简单实用大方美观！</p>\n</blockquote>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>用户在开发或者调试网络程序或者是网页B&#x2F;S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！<strong>Postman</strong>在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。</p>\n<h1 id=\"操作环境\"><a href=\"#操作环境\" class=\"headerlink\" title=\"操作环境\"></a>操作环境</h1><p>postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><blockquote>\n<p>postman在2018年之后就不再支持浏览器版本，所以，想要使用它就必须先下载客户端再安装使用，下面就以Windows系统为例进行安装 。</p>\n</blockquote>\n<h2 id=\"下载与安装\"><a href=\"#下载与安装\" class=\"headerlink\" title=\"下载与安装\"></a>下载与安装</h2><p>postman安装步骤：</p>\n<ul>\n<li>访问postman官方网站，下载最新版本，访问地址：<a href=\"https://links.jianshu.com/go?to=https://www.getpostman.com/downloads/\">Postman | Download Postman App</a></li>\n<li>postman分两个版本：稳定版和尝鲜版（Postman Canary）</li>\n<li>进入到下载页面，根据自己电脑下载对应的版本</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180614.png\" alt=\"img\"></p>\n<ul>\n<li>双击下载的安装包，进入到安装界面，直到用户登录和注册界面。</li>\n<li><ul>\n<li>若个人使用，选择跳过即可，这时会进入到postman主界面，至此postman安装成功。</li>\n</ul>\n</li>\n<li><ul>\n<li>若团队使用，可以进行注册，注册后使用账号可以加入团队工作区</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>成功进入postman页面后，接下来我们正式进行postman的系统教程吧</p>\n</blockquote>\n<h2 id=\"设置postman主题\"><a href=\"#设置postman主题\" class=\"headerlink\" title=\"设置postman主题\"></a>设置postman主题</h2><p>右上角的设置里可以设置postman的主题</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180553.png\" alt=\"img\"></p>\n<p>这里，出于个人习惯，我把它设置成了黑色</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180542.png\" alt=\"img\"></p>\n<hr>\n<h2 id=\"postman基础功能介绍\"><a href=\"#postman基础功能介绍\" class=\"headerlink\" title=\"postman基础功能介绍\"></a>postman基础功能介绍</h2><p>首先，看一下它的基础功能：</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180528.png\" alt=\"img\"></p>\n<p>collection在postman里面相当于一个文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。</p>\n<h2 id=\"发送第一个请求\"><a href=\"#发送第一个请求\" class=\"headerlink\" title=\"发送第一个请求\"></a>发送第一个请求</h2><p>这里我们做一个普通接口的简单的示例：</p>\n<p>如果你是第一次使用postman发送请求，下面这个例子可以作为一个最基本的入门，可以帮我们建立一个初始印象 。</p>\n<ol>\n<li>打开postman，点击+加号打开一个新的请求页。</li>\n<li>在请求的URL中输入请求地址：<a href=\"http://www.weather.com.cn/data/sk/101010100.html\">http://www.weather.com.cn/data/sk/101010100.html</a></li>\n<li>点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据。</li>\n</ol>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104113814.png\" alt=\"image-20210104113810137\"></p>\n<p>这样就完成了一次简单的天气查询接口的请求</p>\n<h1 id=\"postman基础功能\"><a href=\"#postman基础功能\" class=\"headerlink\" title=\"postman基础功能\"></a>postman基础功能</h1><h2 id=\"常见类型的接口请求\"><a href=\"#常见类型的接口请求\" class=\"headerlink\" title=\"常见类型的接口请求\"></a>常见类型的接口请求</h2><p>常见的接口有如下四种类型，分别是含有查询参数的接口，表单类型的接口，json类型的接口以及含有上传文件的接口，以下就对这四种类型接口及如何在postman中请求进行说明 。</p>\n<h3 id=\"查询参数的接口请求\"><a href=\"#查询参数的接口请求\" class=\"headerlink\" title=\"查询参数的接口请求\"></a>查询参数的接口请求</h3><h4 id=\"什么是查询参数\"><a href=\"#什么是查询参数\" class=\"headerlink\" title=\"什么是查询参数?\"></a>什么是查询参数?</h4><p>所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数，比如：<a href=\"http://cx.shouji.360.cn/phonearea.php?number=13012345678\">http://cx.shouji.360.cn/phonearea.php?number=13012345678</a> 。在这个接口中，查询参数就是:<strong>number&#x3D;13012345678</strong> 。而这一部分是由有键值对组成，格式为：key1&#x3D;value1&amp;key2&#x3D;value2, 如果有多组键值对，要用&amp;隔开 。</p>\n<h4 id=\"postman如何请求\"><a href=\"#postman如何请求\" class=\"headerlink\" title=\"postman如何请求\"></a>postman如何请求</h4><p>在postman中实现对这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。</p>\n<p>针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。</p>\n<p>具体实现步骤：</p>\n<ul>\n<li>打开postman，新建一个请求。</li>\n<li>在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略</li>\n<li>接口URL中输入地址，点击Send按钮就可以发送请求了 。</li>\n</ul>\n<blockquote>\n<p>说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。</p>\n</blockquote>\n<h3 id=\"表单类型的接口请求\"><a href=\"#表单类型的接口请求\" class=\"headerlink\" title=\"表单类型的接口请求\"></a>表单类型的接口请求</h3><h4 id=\"什么是表单-？\"><a href=\"#什么是表单-？\" class=\"headerlink\" title=\"什么是表单 ？\"></a>什么是表单 ？</h4><p>我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。</p>\n<p>不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，那么什么是表单类型呢 ？ 简单理解就是在请求头中查看<strong>Content-Type，它的值如果是:application&#x2F;x-www-form-urlencoded</strong> .那么就说明客户端提交的数据是以表单形式提交的 。</p>\n<h4 id=\"postman中如何请求？\"><a href=\"#postman中如何请求？\" class=\"headerlink\" title=\"postman中如何请求？\"></a>postman中如何请求？</h4><p>如果在postman请求上图的接口，我们只需要填写四个参数，分别是(可以参考上图)：</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求URL：<a href=\"http://localhost/index.php?m=Home&c=User&a=do_login&t=0.21942974229794432\">http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432</a></li>\n<li>请求头：Content-Type：application&#x2F;x-www-form-urlencode</li>\n<li>请求体： username&#x3D;13088888888&amp;password&#x3D;123456&amp;verify_code&#x3D;8888</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。在postman中设置请求体类型为，需要<strong>选择body-&gt; x-www-form-urlencoded</strong></li>\n<li>查看响应数据。</li>\n</ol>\n<h3 id=\"上传文件的表单请求\"><a href=\"#上传文件的表单请求\" class=\"headerlink\" title=\"上传文件的表单请求\"></a>上传文件的表单请求</h3><p>在做接口测试时，我们经常会遇到需要上传文件的接口，比如微信的更新头像。这就需要用到：multipart&#x2F;form-data。它也属于一种表单，但它既支持表单请求，也支持文件上传。 它的请求报文中数据往往是下面这样的。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>multipart/form-data<br><br><span class=\"language-abnf\"><span class=\"hljs-attribute\">file</span><span class=\"hljs-operator\">=</span>a1.jpg</span><br></code></pre></td></tr></table></figure>\n\n<p>这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求URL：<a href=\"http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html\">http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html</a></li>\n<li>请求类型：multipart&#x2F;form-data</li>\n<li>请求体：file&#x3D;a1.jpg</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; form-data</strong> 。file中要选择File类型，然后上传本地的文件 。</li>\n<li>查看响应数据。</li>\n</ol>\n<h3 id=\"json类型的接口请求\"><a href=\"#json类型的接口请求\" class=\"headerlink\" title=\"json类型的接口请求\"></a>json类型的接口请求</h3><p>这应该是接口测试中最常见的一种情况了 ， 也就是请求体类型为json,我们来看下这个请求报文 。</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs http\"><span class=\"hljs-keyword\">POST</span> <span class=\"hljs-string\">http://xxx/api/sys/login</span> <span class=\"hljs-meta\">HTTP/1.1</span><br><span class=\"hljs-attribute\">Content-Type</span><span class=\"hljs-punctuation\">: </span>application/json;charset=UTF-8<br><br><span class=\"language-json\"><span class=\"hljs-punctuation\">&#123;</span><span class=\"hljs-attr\">&quot;account&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;root&quot;</span><span class=\"hljs-punctuation\">,</span><span class=\"hljs-attr\">&quot;password&quot;</span><span class=\"hljs-punctuation\">:</span><span class=\"hljs-string\">&quot;123456&quot;</span><span class=\"hljs-punctuation\">&#125;</span></span><br></code></pre></td></tr></table></figure>\n\n<p>根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：</p>\n<ul>\n<li>请求方法：POST</li>\n<li>请求地址：<a href=\"http://xxx/api/sys/login\">http://xxx/api/sys/login</a></li>\n<li>请求体类型：json</li>\n<li>请求体数据：{“account”:”root”,”password”:”123456”}</li>\n</ul>\n<p>实现步骤：</p>\n<ol>\n<li>打开postman，新建一个请求 。</li>\n<li>在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要<strong>选择body-&gt; raw -JSON</strong></li>\n<li>查看响应数据。</li>\n</ol>\n<h2 id=\"接口响应数据解析\"><a href=\"#接口响应数据解析\" class=\"headerlink\" title=\"接口响应数据解析\"></a>接口响应数据解析</h2><p>响应数据是发送请求后经过服务器处理后返回的结果，响应由三部分组成，分别是状态行、响应头、响应体。我们来看下postman的响应数据展示。</p>\n<p>在postman中的响应数据展示：</p>\n<ul>\n<li>状态行：Status：200 OK</li>\n<li>响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示</li>\n<li>响应体：Body</li>\n</ul>\n<p>那么这些数据对我们做接口测试有什么作用呢 ？</p>\n<ul>\n<li>Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码</li>\n<li>Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。</li>\n<li>Time 和Size 是我们做性能测试时，可以根据这两个参数来对所测接口的性能做一个简单的判断。</li>\n</ul>\n<p>接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .</p>\n<ul>\n<li>Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。</li>\n<li>Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。</li>\n<li>Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。</li>\n</ul>\n<h2 id=\"接口管理（Collection）\"><a href=\"#接口管理（Collection）\" class=\"headerlink\" title=\"接口管理（Collection）\"></a>接口管理（Collection）</h2><p>当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时还希望对这批用例做回归测试 。在postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。</p>\n<p>先对Collection功能的使用场景做个简单总结 。</p>\n<ul>\n<li>用例分类管理，方便后期维护</li>\n<li>可以进行批量用例回归测试 。</li>\n</ul>\n<p>那么Collection是如何去管理用例的呢 ？ 先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：</p>\n<ul>\n<li>点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）</li>\n<li>选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）</li>\n<li>选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><blockquote>\n<p>通过上面的操作，我们实现了一个最简单的demo模型。但实际上，有了这个功能才是postman学习的开始，因为很多功能都是基础这个功能的基础上进行的，比如用例的批量执行，Mock ，接口文档等功能 。</p>\n</blockquote>\n<h1 id=\"postman高级功能\"><a href=\"#postman高级功能\" class=\"headerlink\" title=\"postman高级功能\"></a>postman高级功能</h1><h2 id=\"批量执行接口请求\"><a href=\"#批量执行接口请求\" class=\"headerlink\" title=\"批量执行接口请求\"></a>批量执行接口请求</h2><p>当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？</p>\n<p>实现步骤：</p>\n<ul>\n<li>选中一个Collection，点击右三角，在弹出的界面点击RUN</li>\n<li>这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选中 。</li>\n<li>点击界面下方的RUN Collection，就会对Collection中选中的所有测试用例运行 。</li>\n</ul>\n<p>对上面的几个红框内的功能进行简单说明：</p>\n<ul>\n<li><strong>断言统计</strong>：左上角的两个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。</li>\n<li>Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。Export Result：导出运行结果，默认导出的结果json文件 。</li>\n<li>Retry: 重新运行，点击它会把该Collection重新运行一遍</li>\n<li>New：返回到Runner，可以重新选择用例的组合 。</li>\n</ul>\n<p>总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。</p>\n<h2 id=\"日志调试\"><a href=\"#日志调试\" class=\"headerlink\" title=\"日志调试\"></a>日志调试</h2><p>在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。</p>\n<p>在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“我是一条日志”)</p>\n<p>那么打印的日如何看呢 ？ 在postman中有俩个入口，第一个入口就是：view-show postman console 。第二个入口就是左下角Console 。</p>\n<p>这里面有几个比较实用的功能：</p>\n<ul>\n<li>搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。</li>\n<li>按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。</li>\n<li>查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。</li>\n<li>隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。</li>\n</ul>\n<p>总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。</p>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><h3 id=\"断言介绍\"><a href=\"#断言介绍\" class=\"headerlink\" title=\"断言介绍\"></a>断言介绍</h3><p>如果没有断言，我们只能做接口的功能测试，但有了断言后，就为我们做自动化提供了条件，并且在postman中的断言是非常方便和强大的 。</p>\n<p>我们先来了解下postman断言的一些特点 ，具体如下</p>\n<ul>\n<li>断言编写位置：Tests标签</li>\n<li>断言所用语言：JavaScript</li>\n<li>断言执行顺序：在响应体数据返回后执行 。</li>\n<li>断言执行结果查看：Test Results</li>\n</ul>\n<p>在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。</p>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104120057.png\" alt=\"image-20210104120050195\"></p>\n<blockquote>\n<p>内置的断言功能，使用时点击对应的断言就可以自动生成到Tests文本框里面。</p>\n</blockquote>\n<p>接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。</p>\n<p>状态行中又包括状态码，状态消息 。在postman也可以对这两个进行断言</p>\n<h3 id=\"状态行中的断言\"><a href=\"#状态行中的断言\" class=\"headerlink\" title=\"状态行中的断言\"></a>状态行中的断言</h3><ul>\n<li>断言状态码：<strong>Status code: code is 200</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code is 200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);        <span class=\"hljs-comment\">//这里填写的200是预期结果，实际结果是请求返回结果</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言状态消息：<strong>Status code：code name has string</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code name has string&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-string\">&quot;OK&quot;</span>);   <span class=\"hljs-comment\">//断言响应状态消息包含OK</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应头中的断言\"><a href=\"#响应头中的断言\" class=\"headerlink\" title=\"响应头中的断言\"></a>响应头中的断言</h3><ul>\n<li>断言响应头中包含：Response headers:Content-Type header check</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Content-Type is present&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">header</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>); <span class=\"hljs-comment\">//断言响应头存在&quot;Content-Type&quot;</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"断言响应体-重点\"><a href=\"#断言响应体-重点\" class=\"headerlink\" title=\"断言响应体(重点)\"></a>断言响应体(重点)</h3><ul>\n<li>断言响应体中包含XXX字符串：Response body:Contains string</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Body matches string&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">&quot;string_you_want_to_search&quot;</span>);<br>&#125;);     <br><span class=\"hljs-comment\">//注解</span><br>pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">text</span>()).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">include</span>(<span class=\"hljs-string\">&quot;string&quot;</span>)      <span class=\"hljs-comment\">//获取响应文本中包含string</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言响应体等于XXX字符串：Response body : is equal to a string</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Body is correct&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">&quot;response_body_string&quot;</span>);<br>&#125;);<br><span class=\"hljs-comment\">//注解</span><br>pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">body</span>(<span class=\"hljs-string\">&quot;response_body_string&quot;</span>);   <span class=\"hljs-comment\">//获取响应体等于response_body_string</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li>断言响应体(json)中某个键名对应的值：Response body : JSON value check</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Your test name&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    <span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>();<br>    pm.<span class=\"hljs-title function_\">expect</span>(jsonData.<span class=\"hljs-property\">value</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">eql</span>(<span class=\"hljs-number\">100</span>);<br>&#125;);<br><span class=\"hljs-comment\">//注解</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()   <span class=\"hljs-comment\">//获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错</span><br>pm.<span class=\"hljs-title function_\">expect</span>(jsonData.<span class=\"hljs-property\">value</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-title function_\">eql</span>(<span class=\"hljs-number\">100</span>)  <span class=\"hljs-comment\">//获取jsonData中键名为value的值，然后和100进行比较</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"响应时间-一般用于性能测试\"><a href=\"#响应时间-一般用于性能测试\" class=\"headerlink\" title=\"响应时间(一般用于性能测试)\"></a>响应时间(一般用于性能测试)</h3><ul>\n<li>断言响应时间：Response time is less than 200ms</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Response time is less than 200ms&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-title function_\">expect</span>(pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">responseTime</span>).<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">be</span>.<span class=\"hljs-title function_\">below</span>(<span class=\"hljs-number\">200</span>);   <span class=\"hljs-comment\">//断言响应时间&lt;200ms</span><br>&#125;);<br></code></pre></td></tr></table></figure>\n\n<p><strong>案例说明</strong>：</p>\n<p>针对以下接口返回的数据进行断言：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">&#123;</span><br>    <span class=\"hljs-attr\">&quot;weatherinfo&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">&#123;</span><br>        <span class=\"hljs-attr\">&quot;city&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;北京&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;cityid&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;101010100&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;temp&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;27.9&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WD&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;南风&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WS&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;小于3级&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;SD&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;28%&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;AP&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1002hPa&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;njd&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;暂无实况&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;WSE&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;&lt;3&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;time&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;17:55&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;sm&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;2.1&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;isRadar&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;1&quot;</span><span class=\"hljs-punctuation\">,</span><br>        <span class=\"hljs-attr\">&quot;Radar&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;JC_RADAR_AZ9010_JB&quot;</span><br>    <span class=\"hljs-punctuation\">&#125;</span><br><span class=\"hljs-punctuation\">&#125;</span><br></code></pre></td></tr></table></figure>\n\n<ul>\n<li><p>断言响应状态码是否为200</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;断言响应状态码为200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);<br>&#125;);<br></code></pre></td></tr></table></figure></li>\n<li><p>断言city是否等于北京</p>\n</li>\n<li><pre><code class=\"javascript\">pm.test(&quot;断言city等于北京&quot;, function () &#123;\n    var jsonData = pm.response.json();\n    pm.expect(jsonData.weatherinfo.city).to.eql(&#39;北京&#39;);\n&#125;);\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">- 断言返回字符串中是否包含南风<br><br>  ```javascript<br>  pm.test(&quot;断言返回字符串中是否包含南风&quot;, <span class=\"hljs-keyword\">function</span> () &#123;<br>      pm.expect(pm.response.text()).<span class=\"hljs-keyword\">to</span>.<span class=\"hljs-keyword\">include</span>(&quot;南风&quot;);<br>  &#125;);<br></code></pre></td></tr></table></figure>\n</code></pre>\n</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104172943.png\" alt=\"image-20210104172941982\"></p>\n<h3 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。</p>\n<h1 id=\"变量（全局-x2F-集合-x2F-环境）\"><a href=\"#变量（全局-x2F-集合-x2F-环境）\" class=\"headerlink\" title=\"变量（全局&#x2F;集合&#x2F;环境）\"></a>变量（全局&#x2F;集合&#x2F;环境）</h1><p>变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。</p>\n<p>对我们做接口测试来说，又是一个非常重要的功能 。</p>\n<p>在postman常用的三种变量分别是全局变量，环境变量，集合变量 。</p>\n<ul>\n<li><strong>全局变量</strong>：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。</li>\n<li><strong>环境变量</strong>：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。</li>\n<li><strong>集合变量</strong>：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。</li>\n</ul>\n<p>其中，他们的作用域范围依次从大到小：全局变量&gt;集合变量&gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。</p>\n<p>想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。</p>\n<ul>\n<li>定义变量（设置变量）</li>\n<li>获取变量（访问变量）</li>\n</ul>\n<h2 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h2><p>定义全局变量和环境变量，点击右上角的小齿轮，就可以根据需求定义全局变量或者环境变量了。</p>\n<h2 id=\"查看变量\"><a href=\"#查看变量\" class=\"headerlink\" title=\"查看变量\"></a>查看变量</h2><p>定义全局变量和环境变量，点击右上角的眼睛，已经定义的全局变量和环境变量，可以进行快速查看。</p>\n<h2 id=\"定义集合变量\"><a href=\"#定义集合变量\" class=\"headerlink\" title=\"定义集合变量\"></a>定义集合变量</h2><p>选择一个集合，打开查看更多动作(<code>...</code>)菜单，然后点击<code>Edit</code> 。选择“变量”选项卡以编辑或添加到集合变量。</p>\n<p>定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。</p>\n<h3 id=\"在URL，Params-Authorization-Headers-Body中定义\"><a href=\"#在URL，Params-Authorization-Headers-Body中定义\" class=\"headerlink\" title=\"在URL，Params , Authorization , Headers , Body中定义\"></a>在URL，Params , Authorization , Headers , Body中定义</h3><ul>\n<li>手工方式创建一个空的变量名</li>\n<li>在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中</li>\n</ul>\n<h3 id=\"在Tests，Pre-requests-Script\"><a href=\"#在Tests，Pre-requests-Script\" class=\"headerlink\" title=\"在Tests，Pre-requests Script\"></a>在Tests，Pre-requests Script</h3><ul>\n<li>定义全局变量：pm.collectionVariables.set(“变量名”,变量值)</li>\n<li>定义环境变量：pm.environment.set(“变量名”，变量值)</li>\n<li>定义集合变量：pm.variables.set(“变量名”,变量值)</li>\n</ul>\n<h2 id=\"获取变量\"><a href=\"#获取变量\" class=\"headerlink\" title=\"获取变量\"></a>获取变量</h2><p>定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。</p>\n<p>如果在<strong>请求参数中</strong>获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则： 。</p>\n<ul>\n<li>请求参数指的是：URL，Params , Authorization , Headers , Body</li>\n</ul>\n<p>如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：</p>\n<ul>\n<li>获取环境变量：pm.environment.get(‘变量名’)</li>\n<li>获取全局变量：pm.globals.get(‘变量名’)</li>\n<li>获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)</li>\n</ul>\n<ol>\n<li><blockquote>\n<p>变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"请求前置脚本\"><a href=\"#请求前置脚本\" class=\"headerlink\" title=\"请求前置脚本\"></a>请求前置脚本</h2><p>前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。</p>\n<p>可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？</p>\n<p>主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。总体来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。</p>\n<h2 id=\"接口关联\"><a href=\"#接口关联\" class=\"headerlink\" title=\"接口关联\"></a>接口关联</h2><p>在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？</p>\n<p>实现思路：</p>\n<ol>\n<li>提取上一个接口的返回数据值，</li>\n<li>将这个数据值保存到环境变量或全局变量中</li>\n<li>在下一个接口获取环境变量或全局变量</li>\n</ol>\n<p>案例：</p>\n<blockquote>\n<p>登录获取Token</p>\n</blockquote>\n<p>实现思路：</p>\n<ul>\n<li>请求接口</li>\n<li>解析返回值需要的字段</li>\n<li>将需要的字段赋值保存到全局变量里面</li>\n</ul>\n<p><img src=\"https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104175249.png\" alt=\"image-20210104175246872\"></p>\n<p>代码如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">pm.<span class=\"hljs-title function_\">test</span>(<span class=\"hljs-string\">&quot;Status code is 200&quot;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) &#123;<br>    pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-property\">to</span>.<span class=\"hljs-property\">have</span>.<span class=\"hljs-title function_\">status</span>(<span class=\"hljs-number\">200</span>);<br>&#125;);<br> <br><span class=\"hljs-comment\">// 把responseBody转为json字符串</span><br><span class=\"hljs-keyword\">var</span> data = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(responseBody);<br><span class=\"hljs-comment\">// 设置环境变量token，供后面的接口引用</span><br>pm.<span class=\"hljs-property\">environment</span>.<span class=\"hljs-title function_\">set</span>(<span class=\"hljs-string\">&quot;access_token&quot;</span>, <span class=\"hljs-string\">&#x27;AfisAuth &#x27;</span>+data.<span class=\"hljs-property\">token</span>);<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"常见返回值获取\"><a href=\"#常见返回值获取\" class=\"headerlink\" title=\"常见返回值获取\"></a>常见返回值获取</h1><p>在做接口测试时，请求接口返回的数据都是很复杂的json数据，有着多层嵌套，这样的数据层级在postman怎么获取呢 ？</p>\n<h2 id=\"多层json嵌套-获取user-id的值\"><a href=\"#多层json嵌套-获取user-id的值\" class=\"headerlink\" title=\"多层json嵌套, 获取user_id的值\"></a>多层json嵌套, 获取user_id的值</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;user_id&quot;</span>: <span class=\"hljs-string\">&quot;1252163151781167104&quot;</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取user_id的值,通过.获取</span><br><span class=\"hljs-keyword\">var</span> user_id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">user_id</span><br></code></pre></td></tr></table></figure>\n\n<h2 id=\"json中存在列表，获取points中的第二个元素\"><a href=\"#json中存在列表，获取points中的第二个元素\" class=\"headerlink\" title=\"json中存在列表，获取points中的第二个元素\"></a>json中存在列表，获取points中的第二个元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;roles&quot;</span>: &#123;<br>            <span class=\"hljs-string\">&quot;api&quot;</span>: [<br>                <span class=\"hljs-string\">&quot;API-USER-DELETE&quot;</span><br>            ],<br>            <span class=\"hljs-string\">&quot;points&quot;</span>: [<br>                <span class=\"hljs-string\">&quot;point-user-delete&quot;</span>,<br>                <span class=\"hljs-string\">&quot;POINT-USER-UPDATE&quot;</span>,<br>                <span class=\"hljs-string\">&quot;POINT-USER-ADD&quot;</span><br>            ]<br>        &#125;,<br>        <span class=\"hljs-string\">&quot;authCache&quot;</span>: <span class=\"hljs-literal\">null</span><br>    &#125;<br>&#125;<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取user_id的值,通过下标获取列表中某个元素</span><br><span class=\"hljs-keyword\">var</span> user_id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">roles</span>.<span class=\"hljs-property\">points</span>[<span class=\"hljs-number\">1</span>]<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"列表中取最后一个元素\"><a href=\"#列表中取最后一个元素\" class=\"headerlink\" title=\"列表中取最后一个元素\"></a>列表中取最后一个元素</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs javascript\">&#123;<br>    <span class=\"hljs-string\">&quot;code&quot;</span>: <span class=\"hljs-number\">0</span>,<br>    <span class=\"hljs-string\">&quot;message&quot;</span>: <span class=\"hljs-string\">&quot;请求成功！&quot;</span>,<br>    <span class=\"hljs-string\">&quot;data&quot;</span>: &#123;<br>        <span class=\"hljs-string\">&quot;total&quot;</span>: <span class=\"hljs-number\">24</span>,<br>        <span class=\"hljs-string\">&quot;rows&quot;</span>: [<br>           <br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1066370498633486336&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;15812340003&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;zbz&quot;</span><br>            &#125;,<br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1071632760222810112&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;16612094236&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;llx&quot;</span><br>            &#125;,<br>            ...<br>            &#123;<br>                <span class=\"hljs-string\">&quot;id&quot;</span>: <span class=\"hljs-string\">&quot;1075383133106425856&quot;</span>,<br>                <span class=\"hljs-string\">&quot;mobile&quot;</span>: <span class=\"hljs-string\">&quot;13523679872&quot;</span>,<br>                <span class=\"hljs-string\">&quot;username&quot;</span>: <span class=\"hljs-string\">&quot;test001&quot;</span>,<br>       <br>            &#125;,<br><span class=\"hljs-comment\">//获取json体数据</span><br><span class=\"hljs-keyword\">var</span> jsonData = pm.<span class=\"hljs-property\">response</span>.<span class=\"hljs-title function_\">json</span>()<br><span class=\"hljs-comment\">// 获取id的值,通过slice(-1)获取列表中最后一个元素。</span><br><span class=\"hljs-keyword\">var</span> id = jsonData.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">rows</span>.<span class=\"hljs-title function_\">slice</span>(-<span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]<br></code></pre></td></tr></table></figure>\n",
            "tags": [
                "工具",
                "PostMan"
            ]
        }
    ]
}