<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Will • Posts by &#34;postman&#34; tag</title>
        <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io</link>
        <description>愿你一生努力，一生被爱</description>
        <language>zh-CN</language>
        <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
        <lastBuildDate>Wed, 03 Jan 2024 21:13:21 +0800</lastBuildDate>
        <category>开发习惯</category>
        <category>思考</category>
        <category>思维习惯</category>
        <category>感言</category>
        <category>Docker</category>
        <category>LINUX</category>
        <category>Node</category>
        <category>前端</category>
        <category>Nvm</category>
        <category>CentOS</category>
        <category>Linux</category>
        <category>Crontab</category>
        <category>Jenkins</category>
        <category>IDEA</category>
        <category>Alibaba Cloud Toolkit</category>
        <category>Archery</category>
        <category>MySql</category>
        <category>工具</category>
        <category>Maven</category>
        <category>Git</category>
        <category>JAVA</category>
        <category>shell</category>
        <category>信息安全等级保护认证</category>
        <category>系统认证</category>
        <category>读书笔记</category>
        <category>BeetlSql</category>
        <category>Beetl</category>
        <category>异常</category>
        <category>Java IO-初识IO</category>
        <category>Spring</category>
        <category>SpringCloud</category>
        <category>SpringCloud Alibaba</category>
        <category>枚举</category>
        <category>POI</category>
        <category>Spring Boot</category>
        <category>VinUtil</category>
        <category>VerificationCode</category>
        <category>SOAR</category>
        <category>其他</category>
        <category>ProtoBuffer</category>
        <category>博客园</category>
        <category>博客</category>
        <category>MongoDb</category>
        <category>Lombok工具库详解</category>
        <category>常用开发库</category>
        <category>JSON类库详解</category>
        <category>Hutool</category>
        <category>工具类</category>
        <category>Spring常用工具类</category>
        <category>异步编程</category>
        <category>线程</category>
        <category>方法论</category>
        <category>开源协议</category>
        <category>CentOS7</category>
        <category>MongoDB</category>
        <category>Redis</category>
        <category>VMware</category>
        <category>Typora</category>
        <category>PostMan</category>
        <category>Java8</category>
        <category>特性</category>
        <category>JDBC</category>
        <category>Mysql</category>
        <category>EasyExcel</category>
        <category>日志类库详解</category>
        <category>Script</category>
        <category>设计模式</category>
        <category>MyBatis</category>
        <category>Apache Common</category>
        <category>Google Guava</category>
        <item>
            <guid isPermalink="true">https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/</guid>
            <title>PostMan教程</title>
            <link>https://github.com/yangxiangnanwill/yangxiangnanwill.github.io/2024/01/03/%E5%A5%BD%E5%A5%BD%E7%A0%81%E4%BB%A3%E7%A0%81%E5%90%96/%E5%B7%A5%E5%85%B7/PostMan%E6%95%99%E7%A8%8B/</link>
            <category>工具</category>
            <category>PostMan</category>
            <pubDate>Wed, 03 Jan 2024 21:13:21 +0800</pubDate>
            <description><![CDATA[ &lt;blockquote&gt;
&lt;p&gt;推荐一款接口测试工具！POSTMAN！ 简单来说，四个词，简单实用大方美观！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;简介&#34;&gt;&lt;a href=&#34;#简介&#34; class=&#34;headerlink&#34; title=&#34;简介&#34;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;用户在开发或者调试网络程序或者是网页B&amp;#x2F;S模式的程序的时候是需要一些方法来跟踪网页请求的，用户可以使用一些网络的监视工具比如著名的Firebug等网页调试工具。今天给大家介绍的这款网页调试工具不仅可以调试简单的css、html、脚本等简单的网页基本信息，它还可以发送几乎所有类型的HTTP请求！&lt;strong&gt;Postman&lt;/strong&gt;在发送网络HTTP请求方面可以说是Chrome插件类产品中的代表产品之一。&lt;/p&gt;
&lt;h1 id=&#34;操作环境&#34;&gt;&lt;a href=&#34;#操作环境&#34; class=&#34;headerlink&#34; title=&#34;操作环境&#34;&gt;&lt;/a&gt;操作环境&lt;/h1&gt;&lt;p&gt;postman适用于不同的操作系统，Postman Mac、Windows X32、Windows X64、Linux系统，还支持postman 浏览器扩展程序、postman chrome应用程序等。&lt;/p&gt;
&lt;h1 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;postman在2018年之后就不再支持浏览器版本，所以，想要使用它就必须先下载客户端再安装使用，下面就以Windows系统为例进行安装 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;下载与安装&#34;&gt;&lt;a href=&#34;#下载与安装&#34; class=&#34;headerlink&#34; title=&#34;下载与安装&#34;&gt;&lt;/a&gt;下载与安装&lt;/h2&gt;&lt;p&gt;postman安装步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;访问postman官方网站，下载最新版本，访问地址：&lt;a href=&#34;https://links.jianshu.com/go?to=https://www.getpostman.com/downloads/&#34;&gt;Postman | Download Postman App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;postman分两个版本：稳定版和尝鲜版（Postman Canary）&lt;/li&gt;
&lt;li&gt;进入到下载页面，根据自己电脑下载对应的版本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180614.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;双击下载的安装包，进入到安装界面，直到用户登录和注册界面。&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;若个人使用，选择跳过即可，这时会进入到postman主界面，至此postman安装成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;ul&gt;
&lt;li&gt;若团队使用，可以进行注册，注册后使用账号可以加入团队工作区&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;成功进入postman页面后，接下来我们正式进行postman的系统教程吧&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;设置postman主题&#34;&gt;&lt;a href=&#34;#设置postman主题&#34; class=&#34;headerlink&#34; title=&#34;设置postman主题&#34;&gt;&lt;/a&gt;设置postman主题&lt;/h2&gt;&lt;p&gt;右上角的设置里可以设置postman的主题&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180553.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里，出于个人习惯，我把它设置成了黑色&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180542.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;postman基础功能介绍&#34;&gt;&lt;a href=&#34;#postman基础功能介绍&#34; class=&#34;headerlink&#34; title=&#34;postman基础功能介绍&#34;&gt;&lt;/a&gt;postman基础功能介绍&lt;/h2&gt;&lt;p&gt;首先，看一下它的基础功能：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104180528.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;collection在postman里面相当于一个文件夹，可以把同一个项目的请求放在一个Collection里方便管理和分享，Collection里面也可以再建文件夹。&lt;/p&gt;
&lt;h2 id=&#34;发送第一个请求&#34;&gt;&lt;a href=&#34;#发送第一个请求&#34; class=&#34;headerlink&#34; title=&#34;发送第一个请求&#34;&gt;&lt;/a&gt;发送第一个请求&lt;/h2&gt;&lt;p&gt;这里我们做一个普通接口的简单的示例：&lt;/p&gt;
&lt;p&gt;如果你是第一次使用postman发送请求，下面这个例子可以作为一个最基本的入门，可以帮我们建立一个初始印象 。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，点击+加号打开一个新的请求页。&lt;/li&gt;
&lt;li&gt;在请求的URL中输入请求地址：&lt;a href=&#34;http://www.weather.com.cn/data/sk/101010100.html&#34;&gt;http://www.weather.com.cn/data/sk/101010100.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;点击Send按钮，这时就可以在下部的窗格中看到来自服务器的json响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104113814.png&#34; alt=&#34;image-20210104113810137&#34;&gt;&lt;/p&gt;
&lt;p&gt;这样就完成了一次简单的天气查询接口的请求&lt;/p&gt;
&lt;h1 id=&#34;postman基础功能&#34;&gt;&lt;a href=&#34;#postman基础功能&#34; class=&#34;headerlink&#34; title=&#34;postman基础功能&#34;&gt;&lt;/a&gt;postman基础功能&lt;/h1&gt;&lt;h2 id=&#34;常见类型的接口请求&#34;&gt;&lt;a href=&#34;#常见类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;常见类型的接口请求&#34;&gt;&lt;/a&gt;常见类型的接口请求&lt;/h2&gt;&lt;p&gt;常见的接口有如下四种类型，分别是含有查询参数的接口，表单类型的接口，json类型的接口以及含有上传文件的接口，以下就对这四种类型接口及如何在postman中请求进行说明 。&lt;/p&gt;
&lt;h3 id=&#34;查询参数的接口请求&#34;&gt;&lt;a href=&#34;#查询参数的接口请求&#34; class=&#34;headerlink&#34; title=&#34;查询参数的接口请求&#34;&gt;&lt;/a&gt;查询参数的接口请求&lt;/h3&gt;&lt;h4 id=&#34;什么是查询参数&#34;&gt;&lt;a href=&#34;#什么是查询参数&#34; class=&#34;headerlink&#34; title=&#34;什么是查询参数?&#34;&gt;&lt;/a&gt;什么是查询参数?&lt;/h4&gt;&lt;p&gt;所谓的查询参数，其实就是URL地址中问号（?）后面的部分就叫查询参数，比如：&lt;a href=&#34;http://cx.shouji.360.cn/phonearea.php?number=13012345678&#34;&gt;http://cx.shouji.360.cn/phonearea.php?number=13012345678&lt;/a&gt; 。在这个接口中，查询参数就是:&lt;strong&gt;number&amp;#x3D;13012345678&lt;/strong&gt; 。而这一部分是由有键值对组成，格式为：key1&amp;#x3D;value1&amp;amp;key2&amp;#x3D;value2, 如果有多组键值对，要用&amp;amp;隔开 。&lt;/p&gt;
&lt;h4 id=&#34;postman如何请求&#34;&gt;&lt;a href=&#34;#postman如何请求&#34; class=&#34;headerlink&#34; title=&#34;postman如何请求&#34;&gt;&lt;/a&gt;postman如何请求&lt;/h4&gt;&lt;p&gt;在postman中实现对这类接口请求非常简单，一般就需要明确俩个参数即可，一个是请求方法，一个请求地址。&lt;/p&gt;
&lt;p&gt;针对上面的那个接口，地址已经给出 ，而它的请求方法是get 。那么在postman中只需要把这俩个参数填写上即可请求 。&lt;/p&gt;
&lt;p&gt;具体实现步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开postman，新建一个请求。&lt;/li&gt;
&lt;li&gt;在请求方法中选择请求方法：GET,因为在postman中默认的请求方法就是GET,所以这一步可以忽略&lt;/li&gt;
&lt;li&gt;接口URL中输入地址，点击Send按钮就可以发送请求了 。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;说明：查询参数的URL一般直接拷贝到输入的URL地址栏中就可以了，当然也可以把查询参数在Params中输入，俩者的效果是一样的 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;表单类型的接口请求&#34;&gt;&lt;a href=&#34;#表单类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;表单类型的接口请求&#34;&gt;&lt;/a&gt;表单类型的接口请求&lt;/h3&gt;&lt;h4 id=&#34;什么是表单-？&#34;&gt;&lt;a href=&#34;#什么是表单-？&#34; class=&#34;headerlink&#34; title=&#34;什么是表单 ？&#34;&gt;&lt;/a&gt;什么是表单 ？&lt;/h4&gt;&lt;p&gt;我们都知道，在发送HTTP请求的时候，一个请求中一般包含三个部分，分别是请求行，请求头，请求体 。&lt;/p&gt;
&lt;p&gt;不同的接口，请求体的数据类型是不一样的，比较常见的一种就是表单类型，那么什么是表单类型呢 ？ 简单理解就是在请求头中查看&lt;strong&gt;Content-Type，它的值如果是:application&amp;#x2F;x-www-form-urlencoded&lt;/strong&gt; .那么就说明客户端提交的数据是以表单形式提交的 。&lt;/p&gt;
&lt;h4 id=&#34;postman中如何请求？&#34;&gt;&lt;a href=&#34;#postman中如何请求？&#34; class=&#34;headerlink&#34; title=&#34;postman中如何请求？&#34;&gt;&lt;/a&gt;postman中如何请求？&lt;/h4&gt;&lt;p&gt;如果在postman请求上图的接口，我们只需要填写四个参数，分别是(可以参考上图)：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求URL：&lt;a href=&#34;http://localhost/index.php?m=Home&amp;c=User&amp;a=do_login&amp;t=0.21942974229794432&#34;&gt;http://localhost/index.php?m=Home&amp;amp;c=User&amp;amp;a=do_login&amp;amp;t=0.21942974229794432&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求头：Content-Type：application&amp;#x2F;x-www-form-urlencode&lt;/li&gt;
&lt;li&gt;请求体： username&amp;#x3D;13088888888&amp;amp;password&amp;#x3D;123456&amp;amp;verify_code&amp;#x3D;8888&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。在postman中设置请求体类型为，需要&lt;strong&gt;选择body-&amp;gt; x-www-form-urlencoded&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;上传文件的表单请求&#34;&gt;&lt;a href=&#34;#上传文件的表单请求&#34; class=&#34;headerlink&#34; title=&#34;上传文件的表单请求&#34;&gt;&lt;/a&gt;上传文件的表单请求&lt;/h3&gt;&lt;p&gt;在做接口测试时，我们经常会遇到需要上传文件的接口，比如微信的更新头像。这就需要用到：multipart&amp;#x2F;form-data。它也属于一种表单，但它既支持表单请求，也支持文件上传。 它的请求报文中数据往往是下面这样的。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs http&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;: &lt;/span&gt;multipart/form-data&lt;br&gt;&lt;br&gt;&lt;span class=&#34;language-abnf&#34;&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;hljs-operator&#34;&gt;=&lt;/span&gt;a1.jpg&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;这种类型的接口，在postman中该如何请求呢 ？ 我们先分析需要填写的参数 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求URL：&lt;a href=&#34;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&#34;&gt;http://localhost/index.php/home/Uploadify/imageUp/savepath/head_pic/pictitle/banner/dir/images.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求类型：multipart&amp;#x2F;form-data&lt;/li&gt;
&lt;li&gt;请求体：file&amp;#x3D;a1.jpg&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要&lt;strong&gt;选择body-&amp;gt; form-data&lt;/strong&gt; 。file中要选择File类型，然后上传本地的文件 。&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;json类型的接口请求&#34;&gt;&lt;a href=&#34;#json类型的接口请求&#34; class=&#34;headerlink&#34; title=&#34;json类型的接口请求&#34;&gt;&lt;/a&gt;json类型的接口请求&lt;/h3&gt;&lt;p&gt;这应该是接口测试中最常见的一种情况了 ， 也就是请求体类型为json,我们来看下这个请求报文 。&lt;/p&gt;
&lt;figure class=&#34;highlight http&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs http&#34;&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;POST&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;http://xxx/api/sys/login&lt;/span&gt; &lt;span class=&#34;hljs-meta&#34;&gt;HTTP/1.1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-attribute&#34;&gt;Content-Type&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;: &lt;/span&gt;application/json;charset=UTF-8&lt;br&gt;&lt;br&gt;&lt;span class=&#34;language-json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;account&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;root&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;根据以上报文，我们可以分析出，我们在postman只需要填写四个参数即可，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求方法：POST&lt;/li&gt;
&lt;li&gt;请求地址：&lt;a href=&#34;http://xxx/api/sys/login&#34;&gt;http://xxx/api/sys/login&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;请求体类型：json&lt;/li&gt;
&lt;li&gt;请求体数据：{“account”:”root”,”password”:”123456”}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开postman，新建一个请求 。&lt;/li&gt;
&lt;li&gt;在请求中设置以上四个参数，点击Send按钮。注意：在postman中设置请求体类型，需要&lt;strong&gt;选择body-&amp;gt; raw -JSON&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;查看响应数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;接口响应数据解析&#34;&gt;&lt;a href=&#34;#接口响应数据解析&#34; class=&#34;headerlink&#34; title=&#34;接口响应数据解析&#34;&gt;&lt;/a&gt;接口响应数据解析&lt;/h2&gt;&lt;p&gt;响应数据是发送请求后经过服务器处理后返回的结果，响应由三部分组成，分别是状态行、响应头、响应体。我们来看下postman的响应数据展示。&lt;/p&gt;
&lt;p&gt;在postman中的响应数据展示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;状态行：Status：200 OK&lt;/li&gt;
&lt;li&gt;响应头：Headers + Cookies，需要注意的是Cookies是包含在响应头中的，但是为了明显，工具会分开显示&lt;/li&gt;
&lt;li&gt;响应体：Body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么这些数据对我们做接口测试有什么作用呢 ？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Body和Status是我们做接口测试的重点，一般来说我们都会验证响应体中的数据和响应状态码&lt;/li&gt;
&lt;li&gt;Test Results 是我们编写断言后，可以查看断言的执行结果 ，所以这个对我们也很有用 。&lt;/li&gt;
&lt;li&gt;Time 和Size 是我们做性能测试时，可以根据这两个参数来对所测接口的性能做一个简单的判断。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接下来我们再来关注下Body中的几个显示主题，分别是：Pretty，Raw，Preview .&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Pretty:翻译成中文就是漂亮 ， 也就是说返回的Body数据在这个标签中查看 ，都是经过格式化的，格式化后的数据看起来更加直观，所以postman默认展示的也是这个选项。比如返回html页面，它会经过格式化成HTML格式后展示，比如返回json，那么也会格式化成json格式展示 。&lt;/li&gt;
&lt;li&gt;Raw：翻译成中文未经过加工的，也就是原始数据 ，原始数据一般都是本文格式的，未经过格式化处理的，一般在抓包工具中都有这个选项 。&lt;/li&gt;
&lt;li&gt;Preview：翻译成中文就是预览，这个选项一般对返回HTML的页面效果特别明显，如请求百度后返回结果，点击这个选项后就直接能查看到的页面 ，如下图 。同时这个选项和浏览器抓包中的Preview也是一样的 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;接口管理（Collection）&#34;&gt;&lt;a href=&#34;#接口管理（Collection）&#34; class=&#34;headerlink&#34; title=&#34;接口管理（Collection）&#34;&gt;&lt;/a&gt;接口管理（Collection）&lt;/h2&gt;&lt;p&gt;当我们对一个或多个系统中的很多用例进行维护时，首先想到的就是对用例进行分类管理，同时还希望对这批用例做回归测试 。在postman也提供了这样一个功能，就是Collection 。通过这个Collection就可以满足我们的上面说的需求。&lt;/p&gt;
&lt;p&gt;先对Collection功能的使用场景做个简单总结 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用例分类管理，方便后期维护&lt;/li&gt;
&lt;li&gt;可以进行批量用例回归测试 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么Collection是如何去管理用例的呢 ？ 先想象我们要测试一个系统，系统下有多个模块，每个模块下有很多的被测接口用例 。那么基于这个场景，我们来通过Collection来进行实现：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;点击Collection，点击+New Collection，在弹出的输入框中输入Collection名称（这个就可以理解为所测试的系统）&lt;/li&gt;
&lt;li&gt;选中新建的Collection右键，点击Add Folder ，在弹出对话框中输入文件夹名称（这个就可以理解为系统中的模块）&lt;/li&gt;
&lt;li&gt;选中新建的Folder，点击Add Request ，在弹出的对话框中输入请求名称，这个就是我们所测试的接口，也可以理解为测试用例 。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;总结&#34;&gt;&lt;a href=&#34;#总结&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;通过上面的操作，我们实现了一个最简单的demo模型。但实际上，有了这个功能才是postman学习的开始，因为很多功能都是基础这个功能的基础上进行的，比如用例的批量执行，Mock ，接口文档等功能 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;postman高级功能&#34;&gt;&lt;a href=&#34;#postman高级功能&#34; class=&#34;headerlink&#34; title=&#34;postman高级功能&#34;&gt;&lt;/a&gt;postman高级功能&lt;/h1&gt;&lt;h2 id=&#34;批量执行接口请求&#34;&gt;&lt;a href=&#34;#批量执行接口请求&#34; class=&#34;headerlink&#34; title=&#34;批量执行接口请求&#34;&gt;&lt;/a&gt;批量执行接口请求&lt;/h2&gt;&lt;p&gt;当我们在一个Collection中编写了很多的接口测试用例，想一起执行这批用例，在postman中是如何操作呢 ？&lt;/p&gt;
&lt;p&gt;实现步骤：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;选中一个Collection，点击右三角，在弹出的界面点击RUN&lt;/li&gt;
&lt;li&gt;这是会弹出一个叫Collection Runner的界面，默认会把Collection中的所有用例选中 。&lt;/li&gt;
&lt;li&gt;点击界面下方的RUN Collection，就会对Collection中选中的所有测试用例运行 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对上面的几个红框内的功能进行简单说明：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;断言统计&lt;/strong&gt;：左上角的两个0是统计当前Collection中断言成功的执行数和失败的执行数，如果没有编写断言默认都为0 。&lt;/li&gt;
&lt;li&gt;Run Summary: 运行结果总览，点击它可以看到每个请求中具体的测试断言详细信息 。Export Result：导出运行结果，默认导出的结果json文件 。&lt;/li&gt;
&lt;li&gt;Retry: 重新运行，点击它会把该Collection重新运行一遍&lt;/li&gt;
&lt;li&gt;New：返回到Runner，可以重新选择用例的组合 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总体来说，这个功能主要是用于对一个Collection中的所有用例或部分用例进行批量运行，已达到手工回归测试的目的。&lt;/p&gt;
&lt;h2 id=&#34;日志调试&#34;&gt;&lt;a href=&#34;#日志调试&#34; class=&#34;headerlink&#34; title=&#34;日志调试&#34;&gt;&lt;/a&gt;日志调试&lt;/h2&gt;&lt;p&gt;在做接口测试时，经常会因为代码写的有问题导致报错，这时通过查看日志就显得非常重要了，postman也提供了这样的功能，它允许我们在脚本中编写打印语句，查看打印的结果 ; 同时也可以查看每个请求的日志信息 。&lt;/p&gt;
&lt;p&gt;在postman中编写日志打印语句使用的是JavaScript，编写的位置可以是Pre-request Script 或Tests标签中。编写打印语句如：console.log(“我是一条日志”)&lt;/p&gt;
&lt;p&gt;那么打印的日如何看呢 ？ 在postman中有俩个入口，第一个入口就是：view-show postman console 。第二个入口就是左下角Console 。&lt;/p&gt;
&lt;p&gt;这里面有几个比较实用的功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;搜索日志：输入URL或者打印的日志就能直接搜索出我们想要的请求和日志，这对我们在众多日志中查找某一条日志是非常方便的 。&lt;/li&gt;
&lt;li&gt;按级别搜索：可以查询log,info,warning,error级别的日志 ，有助于我们更快定位到错误 。&lt;/li&gt;
&lt;li&gt;查看原始报文(Show raw log)：如果习惯看原始请求报文的话，这个功能可能更方便些 。&lt;/li&gt;
&lt;li&gt;隐藏请求(Hide network)：把请求都隐藏掉，只查看输出日志 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;总之，通过这个功能，我们在请求接口报错时，通过打印响应的日志，就能很轻松的找到问题原因了 。&lt;/p&gt;
&lt;h2 id=&#34;断言&#34;&gt;&lt;a href=&#34;#断言&#34; class=&#34;headerlink&#34; title=&#34;断言&#34;&gt;&lt;/a&gt;断言&lt;/h2&gt;&lt;h3 id=&#34;断言介绍&#34;&gt;&lt;a href=&#34;#断言介绍&#34; class=&#34;headerlink&#34; title=&#34;断言介绍&#34;&gt;&lt;/a&gt;断言介绍&lt;/h3&gt;&lt;p&gt;如果没有断言，我们只能做接口的功能测试，但有了断言后，就为我们做自动化提供了条件，并且在postman中的断言是非常方便和强大的 。&lt;/p&gt;
&lt;p&gt;我们先来了解下postman断言的一些特点 ，具体如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;断言编写位置：Tests标签&lt;/li&gt;
&lt;li&gt;断言所用语言：JavaScript&lt;/li&gt;
&lt;li&gt;断言执行顺序：在响应体数据返回后执行 。&lt;/li&gt;
&lt;li&gt;断言执行结果查看：Test Results&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在上面我们介绍到，编写的断言代码是JavaScript，那如果不会写怎么办 ？ 不用担心，因为postman已经给我们内置了一些常用的断言 。用的时候，只需从右侧点击其中一个断言，就会在文本框中自动生成对应断言代码块 。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104120057.png&#34; alt=&#34;image-20210104120050195&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内置的断言功能，使用时点击对应的断言就可以自动生成到Tests文本框里面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来就让我们了解一些常用断言，还是按响应的组成来划分，分别是状态行，响应头，响应体。&lt;/p&gt;
&lt;p&gt;状态行中又包括状态码，状态消息 。在postman也可以对这两个进行断言&lt;/p&gt;
&lt;h3 id=&#34;状态行中的断言&#34;&gt;&lt;a href=&#34;#状态行中的断言&#34; class=&#34;headerlink&#34; title=&#34;状态行中的断言&#34;&gt;&lt;/a&gt;状态行中的断言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言状态码：&lt;strong&gt;Status code: code is 200&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code is 200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);        &lt;span class=&#34;hljs-comment&#34;&gt;//这里填写的200是预期结果，实际结果是请求返回结果&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言状态消息：&lt;strong&gt;Status code：code name has string&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code name has string&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应状态消息包含OK&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;响应头中的断言&#34;&gt;&lt;a href=&#34;#响应头中的断言&#34; class=&#34;headerlink&#34; title=&#34;响应头中的断言&#34;&gt;&lt;/a&gt;响应头中的断言&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应头中包含：Response headers:Content-Type header check&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Content-Type is present&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;header&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;); &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应头存在&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;断言响应体-重点&#34;&gt;&lt;a href=&#34;#断言响应体-重点&#34; class=&#34;headerlink&#34; title=&#34;断言响应体(重点)&#34;&gt;&lt;/a&gt;断言响应体(重点)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应体中包含XXX字符串：Response body:Contains string&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Body matches string&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;()).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;include&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string_you_want_to_search&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;);     &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;text&lt;/span&gt;()).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;include&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;)      &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应文本中包含string&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言响应体等于XXX字符串：Response body : is equal to a string&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Body is correct&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;body&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;response_body_string&amp;quot;&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;body&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;response_body_string&amp;quot;&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应体等于response_body_string&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;断言响应体(json)中某个键名对应的值：Response body : JSON value check&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Your test name&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;();&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(jsonData.&lt;span class=&#34;hljs-property&#34;&gt;value&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;eql&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//注解&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()   &lt;span class=&#34;hljs-comment&#34;&gt;//获取响应体，以json显示，赋值给jsonData .注意：该响应体必须返会是的json，否则会报错&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(jsonData.&lt;span class=&#34;hljs-property&#34;&gt;value&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;eql&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;100&lt;/span&gt;)  &lt;span class=&#34;hljs-comment&#34;&gt;//获取jsonData中键名为value的值，然后和100进行比较&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&#34;响应时间-一般用于性能测试&#34;&gt;&lt;a href=&#34;#响应时间-一般用于性能测试&#34; class=&#34;headerlink&#34; title=&#34;响应时间(一般用于性能测试)&#34;&gt;&lt;/a&gt;响应时间(一般用于性能测试)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;断言响应时间：Response time is less than 200ms&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Response time is less than 200ms&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-title function_&#34;&gt;expect&lt;/span&gt;(pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;responseTime&lt;/span&gt;).&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;be&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;below&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);   &lt;span class=&#34;hljs-comment&#34;&gt;//断言响应时间&amp;lt;200ms&lt;/span&gt;&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;案例说明&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;针对以下接口返回的数据进行断言：&lt;/p&gt;
&lt;figure class=&#34;highlight json&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs json&#34;&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;weatherinfo&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;city&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;北京&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;cityid&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;101010100&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;temp&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;27.9&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WD&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;南风&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WS&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;小于3级&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;SD&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;28%&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;AP&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1002hPa&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;njd&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;暂无实况&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;WSE&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;&amp;lt;3&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;17:55&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;sm&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;2.1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;isRadar&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;,&lt;/span&gt;&lt;br&gt;        &lt;span class=&#34;hljs-attr&#34;&gt;&amp;quot;Radar&amp;quot;&lt;/span&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;JC_RADAR_AZ9010_JB&amp;quot;&lt;/span&gt;&lt;br&gt;    &lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;断言响应状态码是否为200&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;断言响应状态码为200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;断言city是否等于北京&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre&gt;&lt;code class=&#34;javascript&#34;&gt;pm.test(&amp;quot;断言city等于北京&amp;quot;, function () &amp;#123;
    var jsonData = pm.response.json();
    pm.expect(jsonData.weatherinfo.city).to.eql(&amp;#39;北京&amp;#39;);
&amp;#125;);
&lt;figure class=&#34;highlight pgsql&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs pgsql&#34;&gt;- 断言返回字符串中是否包含南风&lt;br&gt;&lt;br&gt;  ```javascript&lt;br&gt;  pm.test(&amp;quot;断言返回字符串中是否包含南风&amp;quot;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; () &amp;#123;&lt;br&gt;      pm.expect(pm.response.text()).&lt;span class=&#34;hljs-keyword&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-keyword&#34;&gt;include&lt;/span&gt;(&amp;quot;南风&amp;quot;);&lt;br&gt;  &amp;#125;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104172943.png&#34; alt=&#34;image-20210104172941982&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结-1&#34;&gt;&lt;a href=&#34;#总结-1&#34; class=&#34;headerlink&#34; title=&#34;总结&#34;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;整体来说，如果用postman做接口测试，这个断言功能必不可少，其中我们常断言的响应体包含和JSON这俩个断言又是重重之重。&lt;/p&gt;
&lt;h1 id=&#34;变量（全局-x2F-集合-x2F-环境）&#34;&gt;&lt;a href=&#34;#变量（全局-x2F-集合-x2F-环境）&#34; class=&#34;headerlink&#34; title=&#34;变量（全局&amp;#x2F;集合&amp;#x2F;环境）&#34;&gt;&lt;/a&gt;变量（全局&amp;#x2F;集合&amp;#x2F;环境）&lt;/h1&gt;&lt;p&gt;变量可以使我们在请求或脚本中存储和重复使用其值，通过将值保存在变量中，可以在集合，环境或请求中引用。&lt;/p&gt;
&lt;p&gt;对我们做接口测试来说，又是一个非常重要的功能 。&lt;/p&gt;
&lt;p&gt;在postman常用的三种变量分别是全局变量，环境变量，集合变量 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;全局变量&lt;/strong&gt;：一旦申明了全局变量，全局有效，也就是说postman中的任何集合，任何请求中都可以使用这个变量。它的作用域是最大的 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;环境变量&lt;/strong&gt;：要申明环境变量，首先的创建环境，然后在环境中才能创建变量 。如果要想使用环境变量，必须先选择(导入)这个环境，这样就可以使用这个环境下的变量了 。需要说明的是环境也可以创建多个 。每个环境下又可以有多个变量 。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;集合变量&lt;/strong&gt;：集合变量是针对集合的，也就是说申明的变量必须基于某个集合，它的使用范围也只是针对这个集合有效 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，他们的作用域范围依次从大到小：全局变量&amp;gt;集合变量&amp;gt;环境变量 。 当在几个不同的范围内都申明了相同的变量时，则会优先使用范围最小的变量使。&lt;/p&gt;
&lt;p&gt;想要使用变量中的值只需俩个步骤，分别是定义变量和获取变量 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定义变量（设置变量）&lt;/li&gt;
&lt;li&gt;获取变量（访问变量）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;定义变量&#34;&gt;&lt;a href=&#34;#定义变量&#34; class=&#34;headerlink&#34; title=&#34;定义变量&#34;&gt;&lt;/a&gt;定义变量&lt;/h2&gt;&lt;p&gt;定义全局变量和环境变量，点击右上角的小齿轮，就可以根据需求定义全局变量或者环境变量了。&lt;/p&gt;
&lt;h2 id=&#34;查看变量&#34;&gt;&lt;a href=&#34;#查看变量&#34; class=&#34;headerlink&#34; title=&#34;查看变量&#34;&gt;&lt;/a&gt;查看变量&lt;/h2&gt;&lt;p&gt;定义全局变量和环境变量，点击右上角的眼睛，已经定义的全局变量和环境变量，可以进行快速查看。&lt;/p&gt;
&lt;h2 id=&#34;定义集合变量&#34;&gt;&lt;a href=&#34;#定义集合变量&#34; class=&#34;headerlink&#34; title=&#34;定义集合变量&#34;&gt;&lt;/a&gt;定义集合变量&lt;/h2&gt;&lt;p&gt;选择一个集合，打开查看更多动作(&lt;code&gt;...&lt;/code&gt;)菜单，然后点击&lt;code&gt;Edit&lt;/code&gt; 。选择“变量”选项卡以编辑或添加到集合变量。&lt;/p&gt;
&lt;p&gt;定义变量除了以上方式，还有另外一种方式 。但是这种方式在不同的位置定义，编写不一样。&lt;/p&gt;
&lt;h3 id=&#34;在URL，Params-Authorization-Headers-Body中定义&#34;&gt;&lt;a href=&#34;#在URL，Params-Authorization-Headers-Body中定义&#34; class=&#34;headerlink&#34; title=&#34;在URL，Params , Authorization , Headers , Body中定义&#34;&gt;&lt;/a&gt;在URL，Params , Authorization , Headers , Body中定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;手工方式创建一个空的变量名&lt;/li&gt;
&lt;li&gt;在以上的位置把想要的值选中右击，选中Set：环境|全局 ，选中一个变量名，点击后就会保存到这个变量中&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;在Tests，Pre-requests-Script&#34;&gt;&lt;a href=&#34;#在Tests，Pre-requests-Script&#34; class=&#34;headerlink&#34; title=&#34;在Tests，Pre-requests Script&#34;&gt;&lt;/a&gt;在Tests，Pre-requests Script&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义全局变量：pm.collectionVariables.set(“变量名”,变量值)&lt;/li&gt;
&lt;li&gt;定义环境变量：pm.environment.set(“变量名”，变量值)&lt;/li&gt;
&lt;li&gt;定义集合变量：pm.variables.set(“变量名”,变量值)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;获取变量&#34;&gt;&lt;a href=&#34;#获取变量&#34; class=&#34;headerlink&#34; title=&#34;获取变量&#34;&gt;&lt;/a&gt;获取变量&lt;/h2&gt;&lt;p&gt;定义好变量，接下来就可以使用变量了 。需要注意的是，在不同的位置获取变量，编写的规则也是不一样的 。&lt;/p&gt;
&lt;p&gt;如果在&lt;strong&gt;请求参数中&lt;/strong&gt;获取变量，无论是获取全局变量，还是环境变量，还是集合变量，获取的方式都是一样的编写规则： 。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求参数指的是：URL，Params , Authorization , Headers , Body&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果是在编写代码的位置(Tests,Pre-requests Script)获取变量，获取不同类型的变量，编写的代码都不相同，具体如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获取环境变量：pm.environment.get(‘变量名’)&lt;/li&gt;
&lt;li&gt;获取全局变量：pm.globals.get(‘变量名’)&lt;/li&gt;
&lt;li&gt;获取集合变量：pm.pm.collectionVariables.get.get(‘变量名’)&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;变量的使用场景非常广泛，比如我们后面要提到的接口关联，请求前置脚本都会使用到变量 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;请求前置脚本&#34;&gt;&lt;a href=&#34;#请求前置脚本&#34; class=&#34;headerlink&#34; title=&#34;请求前置脚本&#34;&gt;&lt;/a&gt;请求前置脚本&lt;/h2&gt;&lt;p&gt;前置脚本其实就是在Pre-requests Script中编写的JavaScript脚本，想要了解这个功能，需要先了解它的执行顺序。那么下面就来看下它的执行顺序 。&lt;/p&gt;
&lt;p&gt;可以看出，一个请求在发送之前，会先去执行Pre Request Script（前置脚本）中的代码 。那么这个功能在实际工作中有什么作用呢 ？&lt;/p&gt;
&lt;p&gt;主要场景：一般情况下，在发送请求前需要对接口的数据做进一步处理，就都可以使用这个功能，比如说，登录接口的密码，在发送前需要做加密处理，那么就可以在前置脚本中做加密处理，再比如说，有的接口的输入参数有一些随机数，每请求一次接口参数值都会发送变化，就可以在前置脚本中编写生成随机数的代码 。总体来说，就是在请求接口之前对我们的请求数据进行进一步加工处理的都可以使用前置脚本这个功能。&lt;/p&gt;
&lt;h2 id=&#34;接口关联&#34;&gt;&lt;a href=&#34;#接口关联&#34; class=&#34;headerlink&#34; title=&#34;接口关联&#34;&gt;&lt;/a&gt;接口关联&lt;/h2&gt;&lt;p&gt;在我们测试的接口中，经常出现这种情况 。 上一个接口的返回数据是下一个接口的输入参数 ，那么这俩个接口就产生了关联。 这种关联在做接口测试时非常常见，那么在postman中，如何实现这种关联关系呢 ？&lt;/p&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;提取上一个接口的返回数据值，&lt;/li&gt;
&lt;li&gt;将这个数据值保存到环境变量或全局变量中&lt;/li&gt;
&lt;li&gt;在下一个接口获取环境变量或全局变量&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;案例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;登录获取Token&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现思路：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;请求接口&lt;/li&gt;
&lt;li&gt;解析返回值需要的字段&lt;/li&gt;
&lt;li&gt;将需要的字段赋值保存到全局变量里面&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://gitee.com/yangxiangnanWorkSpace/uploadImages/raw/master/static/20210104175249.png&#34; alt=&#34;image-20210104175246872&#34;&gt;&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;pm.&lt;span class=&#34;hljs-title function_&#34;&gt;test&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;Status code is 200&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-keyword&#34;&gt;function&lt;/span&gt; (&lt;span class=&#34;hljs-params&#34;&gt;&lt;/span&gt;) &amp;#123;&lt;br&gt;    pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;to&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;have&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;status&lt;/span&gt;(&lt;span class=&#34;hljs-number&#34;&gt;200&lt;/span&gt;);&lt;br&gt;&amp;#125;);&lt;br&gt; &lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 把responseBody转为json字符串&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; data = &lt;span class=&#34;hljs-title class_&#34;&gt;JSON&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;parse&lt;/span&gt;(responseBody);&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 设置环境变量token，供后面的接口引用&lt;/span&gt;&lt;br&gt;pm.&lt;span class=&#34;hljs-property&#34;&gt;environment&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;set&lt;/span&gt;(&lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;access_token&amp;quot;&lt;/span&gt;, &lt;span class=&#34;hljs-string&#34;&gt;&amp;#x27;AfisAuth &amp;#x27;&lt;/span&gt;+data.&lt;span class=&#34;hljs-property&#34;&gt;token&lt;/span&gt;);&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h1 id=&#34;常见返回值获取&#34;&gt;&lt;a href=&#34;#常见返回值获取&#34; class=&#34;headerlink&#34; title=&#34;常见返回值获取&#34;&gt;&lt;/a&gt;常见返回值获取&lt;/h1&gt;&lt;p&gt;在做接口测试时，请求接口返回的数据都是很复杂的json数据，有着多层嵌套，这样的数据层级在postman怎么获取呢 ？&lt;/p&gt;
&lt;h2 id=&#34;多层json嵌套-获取user-id的值&#34;&gt;&lt;a href=&#34;#多层json嵌套-获取user-id的值&#34; class=&#34;headerlink&#34; title=&#34;多层json嵌套, 获取user_id的值&#34;&gt;&lt;/a&gt;多层json嵌套, 获取user_id的值&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;user_id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1252163151781167104&amp;quot;&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取user_id的值,通过.获取&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; user_id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;user_id&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;json中存在列表，获取points中的第二个元素&#34;&gt;&lt;a href=&#34;#json中存在列表，获取points中的第二个元素&#34; class=&#34;headerlink&#34; title=&#34;json中存在列表，获取points中的第二个元素&#34;&gt;&lt;/a&gt;json中存在列表，获取points中的第二个元素&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;roles&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;api&amp;quot;&lt;/span&gt;: [&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;API-USER-DELETE&amp;quot;&lt;/span&gt;&lt;br&gt;            ],&lt;br&gt;            &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;points&amp;quot;&lt;/span&gt;: [&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;point-user-delete&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POINT-USER-UPDATE&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;POINT-USER-ADD&amp;quot;&lt;/span&gt;&lt;br&gt;            ]&lt;br&gt;        &amp;#125;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;authCache&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-literal&#34;&gt;null&lt;/span&gt;&lt;br&gt;    &amp;#125;&lt;br&gt;&amp;#125;&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取user_id的值,通过下标获取列表中某个元素&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; user_id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;roles&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;points&lt;/span&gt;[&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&#34;列表中取最后一个元素&#34;&gt;&lt;a href=&#34;#列表中取最后一个元素&#34; class=&#34;headerlink&#34; title=&#34;列表中取最后一个元素&#34;&gt;&lt;/a&gt;列表中取最后一个元素&lt;/h2&gt;&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;code class=&#34;hljs javascript&#34;&gt;&amp;#123;&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;code&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;请求成功！&amp;quot;&lt;/span&gt;,&lt;br&gt;    &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;: &amp;#123;&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;total&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-number&#34;&gt;24&lt;/span&gt;,&lt;br&gt;        &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;rows&amp;quot;&lt;/span&gt;: [&lt;br&gt;           &lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1066370498633486336&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;15812340003&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;zbz&amp;quot;&lt;/span&gt;&lt;br&gt;            &amp;#125;,&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1071632760222810112&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;16612094236&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;llx&amp;quot;&lt;/span&gt;&lt;br&gt;            &amp;#125;,&lt;br&gt;            ...&lt;br&gt;            &amp;#123;&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;1075383133106425856&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;mobile&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;13523679872&amp;quot;&lt;/span&gt;,&lt;br&gt;                &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span class=&#34;hljs-string&#34;&gt;&amp;quot;test001&amp;quot;&lt;/span&gt;,&lt;br&gt;       &lt;br&gt;            &amp;#125;,&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;//获取json体数据&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; jsonData = pm.&lt;span class=&#34;hljs-property&#34;&gt;response&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;json&lt;/span&gt;()&lt;br&gt;&lt;span class=&#34;hljs-comment&#34;&gt;// 获取id的值,通过slice(-1)获取列表中最后一个元素。&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;hljs-keyword&#34;&gt;var&lt;/span&gt; id = jsonData.&lt;span class=&#34;hljs-property&#34;&gt;data&lt;/span&gt;.&lt;span class=&#34;hljs-property&#34;&gt;rows&lt;/span&gt;.&lt;span class=&#34;hljs-title function_&#34;&gt;slice&lt;/span&gt;(-&lt;span class=&#34;hljs-number&#34;&gt;1&lt;/span&gt;)[&lt;span class=&#34;hljs-number&#34;&gt;0&lt;/span&gt;]&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
    </channel>
</rss>
